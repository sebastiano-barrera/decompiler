- [x] API for exposing every chunk of the decompiler's results

- [ ] dedicated views for:
    - [x] assembly (input)
    - [ ] function type
    - [x] mil
    - [ ] cfg
    - [x] ssa
    - [x] decompiled ast

    - [x] dwarf parsing details (warnings)
        - details about parsed types?
        - search?

- [--] allow disabling/enabling xforms
    - actually, we just keep around a pre-xform copy of the ssa, so you can just view both

- [x] fix: call results are not named?
- [x] selection: pin on click, only preview on hover
- [x] selection: blocks
    - [x] full highlight in ssa
    - [x] references in ssa, ast
    - [x] full highlight on MIL
- [x] highlight MIL instruction

- [x] fix: make the `facet` dependency (&co.) be the correct one for the Rust
compiler version
    - turns out, this is actually fine for recent enough compiler versions
    (the ones I use, anyway)

- [x] ast: precedence + grouping
- [x] ast: better syntax for deref
- [x] ast: ancestral always inline
- [x] ssa: fix: show value not data type name! (misunderstood how facet's to_string works)
- [-] ast: allow any node to be linked to highlighting
    - bailed out.
        - it's completely unclear how to manage focus and events with nested widgets like
        these (especially hover/click events)
        - also, it's kinda complex (but workable)
        - and I don't really need it anyway
- [x] ast: link other bits of syntax to ssa (e.g., bin ops)
- [x] ast: fix colors
- [x] ast: scroll-to when selecting something
- [x] xform: eliminate upsilons referencing dead phis
    - actually not sure that this is needed at all
- [x] merge selection colors mgmt in ast and ssa
- [x] always inline consts
- [x] never inline phis
- [x] fix: DCE gets phi/upsilon elimination wrong sometimes
    - testcase: redisReconnect, near `ret` at 0x595118
- [x] ast: show function names (should be correctly identifier by decompiler core)
- [-] ast: remove some horizontal padding
    - nah, I don't mind it right now
- [x] ast: do not show StoreMem effect
    (actually, probably better to just handle effects differently in general)

- [x] bug: "<bug:Control:" (in redisConnectWithOptions)
    - [x] introduce check in asm->mil: within each mil block corresponding to a single asm instruction, temporary registers must be written before being read
- [x] bug: hidden callee name (in redisConnectWithOptions)
- [x] duplicate calls (in redisConnectWithOptions)
- [ ] bug: ast syntax for LoadMem (not even a .* is shown)
- [ ] ast: clickable marker for inline values
    - in general, it should be possible to see ANY correspondence between AST parts and
    SSA insns

- [ ] custom block ordering

- [ ] use type info
    - [ ] show in ast
    - [ ] struct member accesses
    - [ ] function prototype
    - [ ] ssa: value types
    - [ ] ast: value types

- [ ] string literals

- [ ] attach errors/warnings to ssa instructions wherever applicable

- [ ] robust against panics in the decompiler
    - we mostly got it; there might be a hole or two somewhere

- [ ] open executable from GUI
- [ ] show progress when parsing executable

- [ ] enum values
    - initialize with DWARF, allow user edits

- [ ] user-editable identifiers/names

- [ ] multiple functions (tabs?)

- [ ] fully data-driven asm->mil?
