---
source: tests/test_tool.rs
expression: out
---
sum_matrix 0x4011c9+115 (file 0x11c9)
          4011c9: 55                      push rbp
          4011ca: 48 89 e5                mov rbp,rsp
          4011cd: 48 89 f8                mov rax,rdi
          4011d0: 48 89 f1                mov rcx,rsi
          4011d3: 48 89 c0                mov rax,rax
          4011d6: ba 00 00 00 00          mov edx,0
          4011db: 48 89 ca                mov rdx,rcx
          4011de: 48 89 45 e0             mov [rbp-20h],rax
          4011e2: 48 89 55 e8             mov [rbp-18h],rdx
          4011e6: c7 45 fc 00 00 00 00    mov dword ptr [rbp-4],0
          4011ed: c7 45 f8 00 00 00 00    mov dword ptr [rbp-8],0
          4011f4: eb 39                   jmp short 000000000040122Fh
          4011f6: c7 45 f4 00 00 00 00    mov dword ptr [rbp-0Ch],0
          4011fd: eb 24                   jmp short 0000000000401223h
          4011ff: 48 8b 55 e0             mov rdx,[rbp-20h]
          401203: 8b 45 ec                mov eax,[rbp-14h]
          401206: 0f af 45 f8             imul eax,[rbp-8]
          40120a: 89 c1                   mov ecx,eax
          40120c: 8b 45 f4                mov eax,[rbp-0Ch]
          40120f: 01 c8                   add eax,ecx
          401211: 48 98                   cdqe
          401213: 48 c1 e0 02             shl rax,2
          401217: 48 01 d0                add rax,rdx
          40121a: 8b 00                   mov eax,[rax]
          40121c: 01 45 fc                add [rbp-4],eax
          40121f: 83 45 f4 01             add dword ptr [rbp-0Ch],1
          401223: 8b 45 ec                mov eax,[rbp-14h]
          401226: 39 45 f4                cmp [rbp-0Ch],eax
          401229: 7c d4                   jl short 00000000004011FFh
          40122b: 83 45 f8 01             add dword ptr [rbp-8],1
          40122f: 8b 45 e8                mov eax,[rbp-18h]
          401232: 39 45 f8                cmp [rbp-8],eax
          401235: 7c bf                   jl short 00000000004011F6h
          401237: 8b 45 fc                mov eax,[rbp-4]
          40123a: 5d                      pop rbp
          40123b: c3                      ret

mil program = 
program  208 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
0x4011c9:
   38 r12 <- ArithK8(Add, r12, -8)
   39 r29 <- StoreMem(r12, r11)
0x4011ca:
   40 r11 <- Get(r12)
0x4011cd:
   41 r16 <- Get(r14)
0x4011d0:
   42 r18 <- Get(r15)
0x4011d3:
   43 r16 <- Get(r16)
0x4011d6:
   44 r28 <- Const4(0)
   45 r19 <- Part { src: r19, offset: 4, size: 4 }
   46 r19 <- Concat { lo: r28, hi: r19 }
0x4011db:
   47 r19 <- Get(r18)
0x4011de:
   48 r29 <- Const8(-32)
   49 r29 <- Arith8(Add, r29, r11)
   50 r30 <- StoreMem(r29, r16)
0x4011e2:
   51 r29 <- Const8(-24)
   52 r29 <- Arith8(Add, r29, r11)
   53 r30 <- StoreMem(r29, r19)
0x4011e6:
   54 r28 <- Const4(0)
   55 r29 <- Const8(-4)
   56 r29 <- Arith8(Add, r29, r11)
   57 r30 <- StoreMem(r29, r28)
0x4011ed:
   58 r28 <- Const4(0)
   59 r29 <- Const8(-8)
   60 r29 <- Arith8(Add, r29, r11)
   61 r30 <- StoreMem(r29, r28)
0x4011f4:
   62 r28 <- Jmp(180)
0x4011f6:
   63 r28 <- Const4(0)
   64 r29 <- Const8(-12)
   65 r29 <- Arith8(Add, r29, r11)
   66 r30 <- StoreMem(r29, r28)
0x4011fd:
   67 r28 <- Jmp(147)
0x4011ff:
   68 r29 <- Const8(-32)
   69 r29 <- Arith8(Add, r29, r11)
   70 r28 <- LoadMem8(r29)
   71 r19 <- Get(r28)
0x401203:
   72 r29 <- Const8(-20)
   73 r29 <- Arith8(Add, r29, r11)
   74 r28 <- LoadMem4(r29)
   75 r16 <- Part { src: r16, offset: 4, size: 4 }
   76 r16 <- Concat { lo: r28, hi: r16 }
0x401206:
   77 r28 <- TODO("unsupported: imul eax,[rbp-8]")
0x40120a:
   78 r28 <- Part { src: r16, offset: 0, size: 4 }
   79 r18 <- Part { src: r18, offset: 4, size: 4 }
   80 r18 <- Concat { lo: r28, hi: r18 }
0x40120c:
   81 r29 <- Const8(-12)
   82 r29 <- Arith8(Add, r29, r11)
   83 r28 <- LoadMem4(r29)
   84 r16 <- Part { src: r16, offset: 4, size: 4 }
   85 r16 <- Concat { lo: r28, hi: r16 }
0x40120f:
   86 r28 <- Part { src: r16, offset: 0, size: 4 }
   87 r29 <- Part { src: r18, offset: 0, size: 4 }
   88 r28 <- Arith4(Add, r28, r29)
   89 r16 <- Part { src: r16, offset: 4, size: 4 }
   90 r16 <- Concat { lo: r28, hi: r16 }
   91 r10 <- OverflowOf(r28)
   92 r2 <- CarryOf(r28)
   93 r6 <- SignOf(r28)
   94 r5 <- IsZero(r28)
   95 r30 <- Part { src: r28, offset: 0, size: 1 }
   96 r3 <- Parity(r30)
0x401211:
   97 r28 <- TODO("unsupported: cdqe")
0x401213:
   98 r29 <- Const1(2)
   99 r29 <- Widen1_8(r29)
  100 r16 <- Arith8(Shl, r16, r29)
  101 r16 <- Get(r16)
  102 r6 <- SignOf(r16)
  103 r5 <- IsZero(r16)
  104 r30 <- Part { src: r16, offset: 0, size: 1 }
  105 r3 <- Parity(r30)
0x401217:
  106 r16 <- Arith8(Add, r16, r19)
  107 r16 <- Get(r16)
  108 r10 <- OverflowOf(r16)
  109 r2 <- CarryOf(r16)
  110 r6 <- SignOf(r16)
  111 r5 <- IsZero(r16)
  112 r30 <- Part { src: r16, offset: 0, size: 1 }
  113 r3 <- Parity(r30)
0x40121a:
  114 r29 <- Const8(0)
  115 r29 <- Arith8(Add, r29, r16)
  116 r28 <- LoadMem4(r29)
  117 r16 <- Part { src: r16, offset: 4, size: 4 }
  118 r16 <- Concat { lo: r28, hi: r16 }
0x40121c:
  119 r29 <- Const8(-4)
  120 r29 <- Arith8(Add, r29, r11)
  121 r28 <- LoadMem4(r29)
  122 r30 <- Part { src: r16, offset: 0, size: 4 }
  123 r28 <- Arith4(Add, r28, r30)
  124 r31 <- Const8(-4)
  125 r31 <- Arith8(Add, r31, r11)
  126 r32 <- StoreMem(r31, r28)
  127 r10 <- OverflowOf(r28)
  128 r2 <- CarryOf(r28)
  129 r6 <- SignOf(r28)
  130 r5 <- IsZero(r28)
  131 r33 <- Part { src: r28, offset: 0, size: 1 }
  132 r3 <- Parity(r33)
0x40121f:
  133 r29 <- Const8(-12)
  134 r29 <- Arith8(Add, r29, r11)
  135 r28 <- LoadMem4(r29)
  136 r30 <- Const4(1)
  137 r28 <- Arith4(Add, r28, r30)
  138 r31 <- Const8(-12)
  139 r31 <- Arith8(Add, r31, r11)
  140 r32 <- StoreMem(r31, r28)
  141 r10 <- OverflowOf(r28)
  142 r2 <- CarryOf(r28)
  143 r6 <- SignOf(r28)
  144 r5 <- IsZero(r28)
  145 r33 <- Part { src: r28, offset: 0, size: 1 }
  146 r3 <- Parity(r33)
0x401223:
  147 r29 <- Const8(-20)
  148 r29 <- Arith8(Add, r29, r11)
  149 r28 <- LoadMem4(r29)
  150 r16 <- Part { src: r16, offset: 4, size: 4 }
  151 r16 <- Concat { lo: r28, hi: r16 }
0x401226:
  152 r29 <- Const8(-12)
  153 r29 <- Arith8(Add, r29, r11)
  154 r28 <- LoadMem4(r29)
  155 r30 <- Part { src: r16, offset: 0, size: 4 }
  156 r28 <- Arith4(Sub, r28, r30)
  157 r10 <- OverflowOf(r28)
  158 r2 <- CarryOf(r28)
  159 r6 <- SignOf(r28)
  160 r5 <- IsZero(r28)
  161 r31 <- Part { src: r28, offset: 0, size: 1 }
  162 r3 <- Parity(r31)
0x401229:
  163 r28 <- Cmp(EQ, r6, r10)
  164 r28 <- Not(r28)
  165 r29 <- JmpIf { cond: r28, target: 68 }
0x40122b:
  166 r29 <- Const8(-8)
  167 r29 <- Arith8(Add, r29, r11)
  168 r28 <- LoadMem4(r29)
  169 r30 <- Const4(1)
  170 r28 <- Arith4(Add, r28, r30)
  171 r31 <- Const8(-8)
  172 r31 <- Arith8(Add, r31, r11)
  173 r32 <- StoreMem(r31, r28)
  174 r10 <- OverflowOf(r28)
  175 r2 <- CarryOf(r28)
  176 r6 <- SignOf(r28)
  177 r5 <- IsZero(r28)
  178 r33 <- Part { src: r28, offset: 0, size: 1 }
  179 r3 <- Parity(r33)
0x40122f:
  180 r29 <- Const8(-24)
  181 r29 <- Arith8(Add, r29, r11)
  182 r28 <- LoadMem4(r29)
  183 r16 <- Part { src: r16, offset: 4, size: 4 }
  184 r16 <- Concat { lo: r28, hi: r16 }
0x401232:
  185 r29 <- Const8(-8)
  186 r29 <- Arith8(Add, r29, r11)
  187 r28 <- LoadMem4(r29)
  188 r30 <- Part { src: r16, offset: 0, size: 4 }
  189 r28 <- Arith4(Sub, r28, r30)
  190 r10 <- OverflowOf(r28)
  191 r2 <- CarryOf(r28)
  192 r6 <- SignOf(r28)
  193 r5 <- IsZero(r28)
  194 r31 <- Part { src: r28, offset: 0, size: 1 }
  195 r3 <- Parity(r31)
0x401235:
  196 r28 <- Cmp(EQ, r6, r10)
  197 r28 <- Not(r28)
  198 r29 <- JmpIf { cond: r28, target: 63 }
0x401237:
  199 r29 <- Const8(-4)
  200 r29 <- Arith8(Add, r29, r11)
  201 r28 <- LoadMem4(r29)
  202 r16 <- Part { src: r16, offset: 4, size: 4 }
  203 r16 <- Concat { lo: r28, hi: r16 }
0x40123a:
  204 r28 <- LoadMem8(r12)
  205 r11 <- Get(r28)
  206 r12 <- ArithK8(Add, r12, 8)
0x40123b:
  207 r28 <- Ret(r16)


ssa pre-xform:
ssa program
  44 control nodes, 105 data nodes
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(8v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(11v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(43v1) -- ConstInt { size: ValueSize(8), value: -32 }
    DataNID(44v1) -- Arith(Add, DataNID(43v1), DataNID(39v1))
  ControlNID(9v1) -- Store { pred: ControlNID(8v1), addr: DataNID(44v1), value: DataNID(14v1) }
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(45v1) -- ConstInt { size: ValueSize(8), value: -24 }
    DataNID(46v1) -- Arith(Add, DataNID(45v1), DataNID(39v1))
  ControlNID(10v1) -- Store { pred: ControlNID(9v1), addr: DataNID(46v1), value: DataNID(15v1) }
    DataNID(47v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(49v1) -- Arith(Add, DataNID(48v1), DataNID(39v1))
  ControlNID(11v1) -- Store { pred: ControlNID(10v1), addr: DataNID(49v1), value: DataNID(47v1) }
    DataNID(50v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(51v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(52v1) -- Arith(Add, DataNID(51v1), DataNID(39v1))
  ControlNID(12v1) -- Store { pred: ControlNID(11v1), addr: DataNID(52v1), value: DataNID(50v1) }
  ControlNID(13v1) -- Jump { pred: ControlNID(12v1) }
  ControlNID(13v1) -- Jump { pred: ControlNID(12v1) }
  ControlNID(6v1) -- Merge { preds: [ControlNID(13v1), ControlNID(13v1)] }
    DataNID(54v1) -- ConstInt { size: ValueSize(8), value: -24 }
    DataNID(55v1) -- Arith(Add, DataNID(54v1), DataNID(39v1))
  ControlNID(14v1) -- Load { pred: ControlNID(6v1), addr: DataNID(55v1) }
    DataNID(59v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(60v1) -- Arith(Add, DataNID(59v1), DataNID(39v1))
  ControlNID(15v1) -- Load { pred: ControlNID(14v1), addr: DataNID(60v1) }
    DataNID(53v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(13v1), DataNID(14v1))] })
    DataNID(57v1) -- Part { src: DataNID(53v1), offset: 4, size: 4 }
    DataNID(56v1) -- LoadedValueOf(ControlNID(14v1))
    DataNID(58v1) -- Concat { lo: DataNID(56v1), hi: DataNID(57v1) }
    DataNID(62v1) -- Part { src: DataNID(58v1), offset: 0, size: 4 }
    DataNID(61v1) -- LoadedValueOf(ControlNID(15v1))
    DataNID(63v1) -- Arith(Sub, DataNID(61v1), DataNID(62v1))
    DataNID(64v1) -- OverflowOf(DataNID(63v1))
    DataNID(66v1) -- SignOf(DataNID(63v1))
    DataNID(70v1) -- Cmp(EQ, DataNID(66v1), DataNID(64v1))
    DataNID(71v1) -- Not(DataNID(70v1))
  ControlNID(16v1) -- Branch { pred: ControlNID(15v1), cond: DataNID(71v1) }
  ControlNID(39v1) -- IfFalse(ControlNID(16v1))
  ControlNID(17v1) -- IfTrue(ControlNID(16v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(17v1), ControlNID(18v1)] }
    DataNID(72v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(73v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(74v1) -- Arith(Add, DataNID(73v1), DataNID(39v1))
  ControlNID(19v1) -- Store { pred: ControlNID(2v1), addr: DataNID(74v1), value: DataNID(72v1) }
  ControlNID(20v1) -- Jump { pred: ControlNID(19v1) }
  ControlNID(20v1) -- Jump { pred: ControlNID(19v1) }
  ControlNID(4v1) -- Merge { preds: [ControlNID(20v1), ControlNID(20v1)] }
    DataNID(76v1) -- ConstInt { size: ValueSize(8), value: -20 }
    DataNID(77v1) -- Arith(Add, DataNID(76v1), DataNID(39v1))
  ControlNID(21v1) -- Load { pred: ControlNID(4v1), addr: DataNID(77v1) }
    DataNID(81v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(82v1) -- Arith(Add, DataNID(81v1), DataNID(39v1))
  ControlNID(22v1) -- Load { pred: ControlNID(21v1), addr: DataNID(82v1) }
    DataNID(75v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(20v1), DataNID(58v1))] })
    DataNID(79v1) -- Part { src: DataNID(75v1), offset: 4, size: 4 }
    DataNID(78v1) -- LoadedValueOf(ControlNID(21v1))
    DataNID(80v1) -- Concat { lo: DataNID(78v1), hi: DataNID(79v1) }
    DataNID(84v1) -- Part { src: DataNID(80v1), offset: 0, size: 4 }
    DataNID(83v1) -- LoadedValueOf(ControlNID(22v1))
    DataNID(85v1) -- Arith(Sub, DataNID(83v1), DataNID(84v1))
    DataNID(86v1) -- OverflowOf(DataNID(85v1))
    DataNID(88v1) -- SignOf(DataNID(85v1))
    DataNID(92v1) -- Cmp(EQ, DataNID(88v1), DataNID(86v1))
    DataNID(93v1) -- Not(DataNID(92v1))
  ControlNID(23v1) -- Branch { pred: ControlNID(22v1), cond: DataNID(93v1) }
  ControlNID(36v1) -- IfFalse(ControlNID(23v1))
  ControlNID(24v1) -- IfTrue(ControlNID(23v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(24v1), ControlNID(25v1)] }
    DataNID(94v1) -- ConstInt { size: ValueSize(8), value: -32 }
    DataNID(95v1) -- Arith(Add, DataNID(94v1), DataNID(39v1))
  ControlNID(26v1) -- Load { pred: ControlNID(3v1), addr: DataNID(95v1) }
    DataNID(97v1) -- ConstInt { size: ValueSize(8), value: -20 }
    DataNID(98v1) -- Arith(Add, DataNID(97v1), DataNID(39v1))
  ControlNID(27v1) -- Load { pred: ControlNID(26v1), addr: DataNID(98v1) }
  ControlNID(28v1) -- TODO { pred: ControlNID(27v1), label: "unsupported: imul eax,[rbp-8]" }
    DataNID(105v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(106v1) -- Arith(Add, DataNID(105v1), DataNID(39v1))
  ControlNID(29v1) -- Load { pred: ControlNID(28v1), addr: DataNID(106v1) }
  ControlNID(30v1) -- TODO { pred: ControlNID(29v1), label: "unsupported: cdqe" }
    DataNID(96v1) -- LoadedValueOf(ControlNID(26v1))
    DataNID(121v1) -- ConstInt { size: ValueSize(1), value: 2 }
    DataNID(122v1) -- Widen { input: DataNID(121v1), out_size: ValueSize(8) }
    DataNID(100v1) -- Part { src: DataNID(80v1), offset: 4, size: 4 }
    DataNID(99v1) -- LoadedValueOf(ControlNID(27v1))
    DataNID(101v1) -- Concat { lo: DataNID(99v1), hi: DataNID(100v1) }
    DataNID(108v1) -- Part { src: DataNID(101v1), offset: 4, size: 4 }
    DataNID(107v1) -- LoadedValueOf(ControlNID(29v1))
    DataNID(109v1) -- Concat { lo: DataNID(107v1), hi: DataNID(108v1) }
    DataNID(113v1) -- Part { src: DataNID(109v1), offset: 4, size: 4 }
    DataNID(103v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(102v1) -- Part { src: DataNID(101v1), offset: 0, size: 4 }
    DataNID(104v1) -- Concat { lo: DataNID(102v1), hi: DataNID(103v1) }
    DataNID(111v1) -- Part { src: DataNID(104v1), offset: 0, size: 4 }
    DataNID(110v1) -- Part { src: DataNID(109v1), offset: 0, size: 4 }
    DataNID(112v1) -- Arith(Add, DataNID(110v1), DataNID(111v1))
    DataNID(114v1) -- Concat { lo: DataNID(112v1), hi: DataNID(113v1) }
    DataNID(123v1) -- Arith(Shl, DataNID(114v1), DataNID(122v1))
    DataNID(128v1) -- Arith(Add, DataNID(123v1), DataNID(96v1))
    DataNID(135v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(136v1) -- Arith(Add, DataNID(135v1), DataNID(128v1))
  ControlNID(31v1) -- Load { pred: ControlNID(30v1), addr: DataNID(136v1) }
    DataNID(140v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(141v1) -- Arith(Add, DataNID(140v1), DataNID(39v1))
  ControlNID(32v1) -- Load { pred: ControlNID(31v1), addr: DataNID(141v1) }
    DataNID(138v1) -- Part { src: DataNID(128v1), offset: 4, size: 4 }
    DataNID(137v1) -- LoadedValueOf(ControlNID(31v1))
    DataNID(139v1) -- Concat { lo: DataNID(137v1), hi: DataNID(138v1) }
    DataNID(143v1) -- Part { src: DataNID(139v1), offset: 0, size: 4 }
    DataNID(142v1) -- LoadedValueOf(ControlNID(32v1))
    DataNID(144v1) -- Arith(Add, DataNID(142v1), DataNID(143v1))
    DataNID(145v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(146v1) -- Arith(Add, DataNID(145v1), DataNID(39v1))
  ControlNID(33v1) -- Store { pred: ControlNID(32v1), addr: DataNID(146v1), value: DataNID(144v1) }
    DataNID(153v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(154v1) -- Arith(Add, DataNID(153v1), DataNID(39v1))
  ControlNID(34v1) -- Load { pred: ControlNID(33v1), addr: DataNID(154v1) }
    DataNID(156v1) -- ConstInt { size: ValueSize(4), value: 1 }
    DataNID(155v1) -- LoadedValueOf(ControlNID(34v1))
    DataNID(157v1) -- Arith(Add, DataNID(155v1), DataNID(156v1))
    DataNID(158v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(159v1) -- Arith(Add, DataNID(158v1), DataNID(39v1))
  ControlNID(35v1) -- Store { pred: ControlNID(34v1), addr: DataNID(159v1), value: DataNID(157v1) }
  ControlNID(25v1) -- Merge { preds: [ControlNID(35v1), ControlNID(36v1)] }
  ControlNID(5v1) -- Merge { preds: [ControlNID(25v1)] }
    DataNID(166v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(167v1) -- Arith(Add, DataNID(166v1), DataNID(39v1))
  ControlNID(37v1) -- Load { pred: ControlNID(5v1), addr: DataNID(167v1) }
    DataNID(169v1) -- ConstInt { size: ValueSize(4), value: 1 }
    DataNID(168v1) -- LoadedValueOf(ControlNID(37v1))
    DataNID(170v1) -- Arith(Add, DataNID(168v1), DataNID(169v1))
    DataNID(171v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(172v1) -- Arith(Add, DataNID(171v1), DataNID(39v1))
  ControlNID(38v1) -- Store { pred: ControlNID(37v1), addr: DataNID(172v1), value: DataNID(170v1) }
  ControlNID(18v1) -- Merge { preds: [ControlNID(38v1), ControlNID(39v1)] }
  ControlNID(7v1) -- Merge { preds: [ControlNID(18v1)] }
    DataNID(179v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(180v1) -- Arith(Add, DataNID(179v1), DataNID(39v1))
  ControlNID(40v1) -- Load { pred: ControlNID(7v1), addr: DataNID(180v1) }
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(41v1) -- Load { pred: ControlNID(40v1), addr: DataNID(39v1) }
  ControlNID(42v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(43v1) -- Merge { preds: [ControlNID(42v1)] }
    DataNID(182v1) -- Part { src: DataNID(58v1), offset: 4, size: 4 }
    DataNID(181v1) -- LoadedValueOf(ControlNID(40v1))
    DataNID(183v1) -- Concat { lo: DataNID(181v1), hi: DataNID(182v1) }
    DataNID(186v1) -- Phi(Phi { merge_nid: ControlNID(43v1), values: [(ControlNID(42v1), DataNID(183v1))] })
  ControlNID(44v1) -- End { pred: ControlNID(43v1), ret: DataNID(186v1) }


ssa post-xform:
ssa program
  44 control nodes, 105 data nodes
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(8v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(11v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(43v1) -- ConstInt { size: ValueSize(8), value: -32 }
    DataNID(44v1) -- Arith(Add, DataNID(43v1), DataNID(39v1))
  ControlNID(9v1) -- Store { pred: ControlNID(8v1), addr: DataNID(44v1), value: DataNID(14v1) }
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(45v1) -- ConstInt { size: ValueSize(8), value: -24 }
    DataNID(46v1) -- Arith(Add, DataNID(45v1), DataNID(39v1))
  ControlNID(10v1) -- Store { pred: ControlNID(9v1), addr: DataNID(46v1), value: DataNID(15v1) }
    DataNID(47v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(49v1) -- Arith(Add, DataNID(48v1), DataNID(39v1))
  ControlNID(11v1) -- Store { pred: ControlNID(10v1), addr: DataNID(49v1), value: DataNID(47v1) }
    DataNID(50v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(51v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(52v1) -- Arith(Add, DataNID(51v1), DataNID(39v1))
  ControlNID(12v1) -- Store { pred: ControlNID(11v1), addr: DataNID(52v1), value: DataNID(50v1) }
  ControlNID(13v1) -- Jump { pred: ControlNID(12v1) }
  ControlNID(13v1) -- Jump { pred: ControlNID(12v1) }
  ControlNID(6v1) -- Merge { preds: [ControlNID(13v1), ControlNID(13v1)] }
    DataNID(54v1) -- ConstInt { size: ValueSize(8), value: -24 }
    DataNID(55v1) -- Arith(Add, DataNID(54v1), DataNID(39v1))
  ControlNID(14v1) -- Load { pred: ControlNID(6v1), addr: DataNID(55v1) }
    DataNID(59v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(60v1) -- Arith(Add, DataNID(59v1), DataNID(39v1))
  ControlNID(15v1) -- Load { pred: ControlNID(14v1), addr: DataNID(60v1) }
    DataNID(53v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(13v1), DataNID(14v1))] })
    DataNID(57v1) -- Part { src: DataNID(53v1), offset: 4, size: 4 }
    DataNID(56v1) -- LoadedValueOf(ControlNID(14v1))
    DataNID(58v1) -- Concat { lo: DataNID(56v1), hi: DataNID(57v1) }
    DataNID(62v1) -- Part { src: DataNID(58v1), offset: 0, size: 4 }
    DataNID(61v1) -- LoadedValueOf(ControlNID(15v1))
    DataNID(63v1) -- Arith(Sub, DataNID(61v1), DataNID(62v1))
    DataNID(64v1) -- OverflowOf(DataNID(63v1))
    DataNID(66v1) -- SignOf(DataNID(63v1))
    DataNID(70v1) -- Cmp(EQ, DataNID(66v1), DataNID(64v1))
    DataNID(71v1) -- Not(DataNID(70v1))
  ControlNID(16v1) -- Branch { pred: ControlNID(15v1), cond: DataNID(71v1) }
  ControlNID(39v1) -- IfFalse(ControlNID(16v1))
  ControlNID(17v1) -- IfTrue(ControlNID(16v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(17v1), ControlNID(18v1)] }
    DataNID(72v1) -- ConstInt { size: ValueSize(4), value: 0 }
    DataNID(73v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(74v1) -- Arith(Add, DataNID(73v1), DataNID(39v1))
  ControlNID(19v1) -- Store { pred: ControlNID(2v1), addr: DataNID(74v1), value: DataNID(72v1) }
  ControlNID(20v1) -- Jump { pred: ControlNID(19v1) }
  ControlNID(20v1) -- Jump { pred: ControlNID(19v1) }
  ControlNID(4v1) -- Merge { preds: [ControlNID(20v1), ControlNID(20v1)] }
    DataNID(76v1) -- ConstInt { size: ValueSize(8), value: -20 }
    DataNID(77v1) -- Arith(Add, DataNID(76v1), DataNID(39v1))
  ControlNID(21v1) -- Load { pred: ControlNID(4v1), addr: DataNID(77v1) }
    DataNID(81v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(82v1) -- Arith(Add, DataNID(81v1), DataNID(39v1))
  ControlNID(22v1) -- Load { pred: ControlNID(21v1), addr: DataNID(82v1) }
    DataNID(75v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(20v1), DataNID(58v1))] })
    DataNID(79v1) -- Part { src: DataNID(75v1), offset: 4, size: 4 }
    DataNID(78v1) -- LoadedValueOf(ControlNID(21v1))
    DataNID(80v1) -- Concat { lo: DataNID(78v1), hi: DataNID(79v1) }
    DataNID(84v1) -- Part { src: DataNID(80v1), offset: 0, size: 4 }
    DataNID(83v1) -- LoadedValueOf(ControlNID(22v1))
    DataNID(85v1) -- Arith(Sub, DataNID(83v1), DataNID(84v1))
    DataNID(86v1) -- OverflowOf(DataNID(85v1))
    DataNID(88v1) -- SignOf(DataNID(85v1))
    DataNID(92v1) -- Cmp(EQ, DataNID(88v1), DataNID(86v1))
    DataNID(93v1) -- Not(DataNID(92v1))
  ControlNID(23v1) -- Branch { pred: ControlNID(22v1), cond: DataNID(93v1) }
  ControlNID(36v1) -- IfFalse(ControlNID(23v1))
  ControlNID(24v1) -- IfTrue(ControlNID(23v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(24v1), ControlNID(25v1)] }
    DataNID(94v1) -- ConstInt { size: ValueSize(8), value: -32 }
    DataNID(95v1) -- Arith(Add, DataNID(94v1), DataNID(39v1))
  ControlNID(26v1) -- Load { pred: ControlNID(3v1), addr: DataNID(95v1) }
    DataNID(97v1) -- ConstInt { size: ValueSize(8), value: -20 }
    DataNID(98v1) -- Arith(Add, DataNID(97v1), DataNID(39v1))
  ControlNID(27v1) -- Load { pred: ControlNID(26v1), addr: DataNID(98v1) }
  ControlNID(28v1) -- TODO { pred: ControlNID(27v1), label: "unsupported: imul eax,[rbp-8]" }
    DataNID(105v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(106v1) -- Arith(Add, DataNID(105v1), DataNID(39v1))
  ControlNID(29v1) -- Load { pred: ControlNID(28v1), addr: DataNID(106v1) }
  ControlNID(30v1) -- TODO { pred: ControlNID(29v1), label: "unsupported: cdqe" }
    DataNID(96v1) -- LoadedValueOf(ControlNID(26v1))
    DataNID(121v1) -- ConstInt { size: ValueSize(1), value: 2 }
    DataNID(122v1) -- Widen { input: DataNID(121v1), out_size: ValueSize(8) }
    DataNID(100v1) -- Part { src: DataNID(80v1), offset: 4, size: 4 }
    DataNID(99v1) -- LoadedValueOf(ControlNID(27v1))
    DataNID(101v1) -- Concat { lo: DataNID(99v1), hi: DataNID(100v1) }
    DataNID(108v1) -- Part { src: DataNID(101v1), offset: 4, size: 4 }
    DataNID(107v1) -- LoadedValueOf(ControlNID(29v1))
    DataNID(109v1) -- Concat { lo: DataNID(107v1), hi: DataNID(108v1) }
    DataNID(113v1) -- Part { src: DataNID(109v1), offset: 4, size: 4 }
    DataNID(103v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(102v1) -- Part { src: DataNID(101v1), offset: 0, size: 4 }
    DataNID(104v1) -- Concat { lo: DataNID(102v1), hi: DataNID(103v1) }
    DataNID(111v1) -- Part { src: DataNID(104v1), offset: 0, size: 4 }
    DataNID(110v1) -- Part { src: DataNID(109v1), offset: 0, size: 4 }
    DataNID(112v1) -- Arith(Add, DataNID(110v1), DataNID(111v1))
    DataNID(114v1) -- Concat { lo: DataNID(112v1), hi: DataNID(113v1) }
    DataNID(123v1) -- Arith(Shl, DataNID(114v1), DataNID(122v1))
    DataNID(128v1) -- Arith(Add, DataNID(123v1), DataNID(96v1))
    DataNID(135v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(136v1) -- Arith(Add, DataNID(135v1), DataNID(128v1))
  ControlNID(31v1) -- Load { pred: ControlNID(30v1), addr: DataNID(136v1) }
    DataNID(140v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(141v1) -- Arith(Add, DataNID(140v1), DataNID(39v1))
  ControlNID(32v1) -- Load { pred: ControlNID(31v1), addr: DataNID(141v1) }
    DataNID(138v1) -- Part { src: DataNID(128v1), offset: 4, size: 4 }
    DataNID(137v1) -- LoadedValueOf(ControlNID(31v1))
    DataNID(139v1) -- Concat { lo: DataNID(137v1), hi: DataNID(138v1) }
    DataNID(143v1) -- Part { src: DataNID(139v1), offset: 0, size: 4 }
    DataNID(142v1) -- LoadedValueOf(ControlNID(32v1))
    DataNID(144v1) -- Arith(Add, DataNID(142v1), DataNID(143v1))
    DataNID(145v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(146v1) -- Arith(Add, DataNID(145v1), DataNID(39v1))
  ControlNID(33v1) -- Store { pred: ControlNID(32v1), addr: DataNID(146v1), value: DataNID(144v1) }
    DataNID(153v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(154v1) -- Arith(Add, DataNID(153v1), DataNID(39v1))
  ControlNID(34v1) -- Load { pred: ControlNID(33v1), addr: DataNID(154v1) }
    DataNID(156v1) -- ConstInt { size: ValueSize(4), value: 1 }
    DataNID(155v1) -- LoadedValueOf(ControlNID(34v1))
    DataNID(157v1) -- Arith(Add, DataNID(155v1), DataNID(156v1))
    DataNID(158v1) -- ConstInt { size: ValueSize(8), value: -12 }
    DataNID(159v1) -- Arith(Add, DataNID(158v1), DataNID(39v1))
  ControlNID(35v1) -- Store { pred: ControlNID(34v1), addr: DataNID(159v1), value: DataNID(157v1) }
  ControlNID(25v1) -- Merge { preds: [ControlNID(35v1), ControlNID(36v1)] }
  ControlNID(5v1) -- Merge { preds: [ControlNID(25v1)] }
    DataNID(166v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(167v1) -- Arith(Add, DataNID(166v1), DataNID(39v1))
  ControlNID(37v1) -- Load { pred: ControlNID(5v1), addr: DataNID(167v1) }
    DataNID(169v1) -- ConstInt { size: ValueSize(4), value: 1 }
    DataNID(168v1) -- LoadedValueOf(ControlNID(37v1))
    DataNID(170v1) -- Arith(Add, DataNID(168v1), DataNID(169v1))
    DataNID(171v1) -- ConstInt { size: ValueSize(8), value: -8 }
    DataNID(172v1) -- Arith(Add, DataNID(171v1), DataNID(39v1))
  ControlNID(38v1) -- Store { pred: ControlNID(37v1), addr: DataNID(172v1), value: DataNID(170v1) }
  ControlNID(18v1) -- Merge { preds: [ControlNID(38v1), ControlNID(39v1)] }
  ControlNID(7v1) -- Merge { preds: [ControlNID(18v1)] }
    DataNID(179v1) -- ConstInt { size: ValueSize(8), value: -4 }
    DataNID(180v1) -- Arith(Add, DataNID(179v1), DataNID(39v1))
  ControlNID(40v1) -- Load { pred: ControlNID(7v1), addr: DataNID(180v1) }
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(41v1) -- Load { pred: ControlNID(40v1), addr: DataNID(39v1) }
  ControlNID(42v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(43v1) -- Merge { preds: [ControlNID(42v1)] }
    DataNID(182v1) -- Part { src: DataNID(58v1), offset: 4, size: 4 }
    DataNID(181v1) -- LoadedValueOf(ControlNID(40v1))
    DataNID(183v1) -- Concat { lo: DataNID(181v1), hi: DataNID(182v1) }
    DataNID(186v1) -- Phi(Phi { merge_nid: ControlNID(43v1), values: [(ControlNID(42v1), DataNID(183v1))] })
  ControlNID(44v1) -- End { pred: ControlNID(43v1), ret: DataNID(186v1) }
