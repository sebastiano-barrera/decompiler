---
source: tests/test_tool.rs
expression: out
---
listNext 0x4110b0+39 (file 0x110b0)
          4110b0: 48 8b 07                mov rax,[rdi]
          4110b3: 48 85 c0                test rax,rax
          4110b6: 74 1e                   je short 00000000004110D6h
          4110b8: 8b 57 08                mov edx,[rdi+8]
          4110bb: 85 d2                   test edx,edx
          4110bd: 75 11                   jne short 00000000004110D0h
          4110bf: 48 8b 50 08             mov rdx,[rax+8]
          4110c3: 48 89 17                mov [rdi],rdx
          4110c6: c3                      ret
          4110c7: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
          4110d0: 48 8b 10                mov rdx,[rax]
          4110d3: 48 89 17                mov [rdi],rdx
          4110d6: c3                      ret

function type: "listNext" func (iter *listIter <TypeID(163777v1)>) *listNode <TypeID(163772v1)>
mil program = 
program  117 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Ancestral(AncestralName("ZMM0"))
   28 r29 <- Ancestral(AncestralName("ZMM1"))
   29 r30 <- Ancestral(AncestralName("ZMM2"))
   30 r31 <- Ancestral(AncestralName("ZMM3"))
   31 r32 <- Ancestral(AncestralName("ZMM4"))
   32 r33 <- Ancestral(AncestralName("ZMM5"))
   33 r34 <- Ancestral(AncestralName("ZMM6"))
   34 r35 <- Ancestral(AncestralName("ZMM7"))
   35 r36 <- Ancestral(AncestralName("ZMM8"))
   36 r37 <- Ancestral(AncestralName("ZMM9"))
   37 r38 <- Ancestral(AncestralName("ZMM10"))
   38 r39 <- Ancestral(AncestralName("ZMM11"))
   39 r40 <- Ancestral(AncestralName("ZMM12"))
   40 r41 <- Ancestral(AncestralName("ZMM13"))
   41 r42 <- Ancestral(AncestralName("ZMM14"))
   42 r43 <- Ancestral(AncestralName("ZMM15"))
   43 r44 <- Ancestral(AncestralName("memory"))
   44 r45 <- Undefined
   45 r46 <- Undefined
   46 r47 <- Undefined
   47 r48 <- Undefined
   48 r49 <- Undefined
   49 r50 <- Undefined
   50 r51 <- Undefined
   51 r52 <- Undefined
   52 r53 <- Undefined
   53 r54 <- Undefined
   54 r55 <- Undefined
   55 r56 <- Undefined
   56 r57 <- Undefined
   57 r58 <- Undefined
   58 r59 <- Undefined
   59 r60 <- Undefined
   60 r61 <- Undefined
   61 r62 <- Undefined
   62 r63 <- Undefined
   63 r64 <- Undefined
   64 r65 <- Undefined
   65 r45 <- Ancestral(AncestralName("arg0"))
   66 r14 <- Get(r45)
0x4110b0:
   67 r46 <- Const { value: 0, size: 8 }
   68 r46 <- Arith(Add, r46, r14)
   69 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
   70 r16 <- Get(r45)
0x4110b3:
   71 r16 <- Arith(BitAnd, r16, r16)
   72 r6 <- SignOf(r16)
   73 r5 <- IsZero(r16)
   74 r47 <- Part { src: r16, offset: 0, size: 1 }
   75 r3 <- Parity(r16)
   76 r2 <- False
   77 r10 <- False
0x4110b6:
   78 r45 <- JmpIf { cond: r5, target: 113 }
0x4110b8:
   79 r46 <- Const { value: 8, size: 8 }
   80 r46 <- Arith(Add, r46, r14)
   81 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
   82 r47 <- Part { src: r19, offset: 4, size: 4 }
   83 r19 <- Concat { lo: r45, hi: r47 }
0x4110bb:
   84 r46 <- Part { src: r19, offset: 0, size: 4 }
   85 r48 <- Part { src: r19, offset: 0, size: 4 }
   86 r46 <- Arith(BitAnd, r46, r48)
   87 r6 <- SignOf(r46)
   88 r5 <- IsZero(r46)
   89 r49 <- Part { src: r46, offset: 0, size: 1 }
   90 r3 <- Parity(r46)
   91 r2 <- False
   92 r10 <- False
0x4110bd:
   93 r45 <- Not(r5)
   94 r46 <- JmpIf { cond: r45, target: 106 }
0x4110bf:
   95 r46 <- Const { value: 8, size: 8 }
   96 r46 <- Arith(Add, r46, r16)
   97 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
   98 r19 <- Get(r45)
0x4110c3:
   99 r46 <- Const { value: 0, size: 8 }
  100 r46 <- Arith(Add, r46, r14)
  101 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x4110c6:
  102 r45 <- Void
  103 r45 <- Concat { lo: r45, hi: r16 }
  104 r45 <- Part { src: r45, offset: 0, size: 8 }
  105 r47 <- Ret(r45)
0x4110d0:
  106 r46 <- Const { value: 0, size: 8 }
  107 r46 <- Arith(Add, r46, r16)
  108 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  109 r19 <- Get(r45)
0x4110d3:
  110 r46 <- Const { value: 0, size: 8 }
  111 r46 <- Arith(Add, r46, r14)
  112 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x4110d6:
  113 r45 <- Void
  114 r45 <- Concat { lo: r45, hi: r16 }
  115 r45 <- Part { src: r45, offset: 0, size: 8 }
  116 r47 <- Ret(r45)


ssa pre-xform:
ssa program  117 instrs
.B0:    ;; .
  (  4)  r65 <- Ancestral(AncestralName("arg0"))
         r67 <- Const { value: 0, size: 8 }
         r68 <- Arith(Add, r67, r65)
  (  6)  r43 <- Ancestral(AncestralName("memory"))
  (  2)  r69 <- LoadMem { mem: r43, addr: r68, size: 8 }
  (  5)  r71 <- Arith(BitAnd, r69, r69)
         r73 <- IsZero(r71)
         r78 <- JmpIf { cond: r73, target: 113 }
.B1:    ;; preds:B0.
         r18 <- Ancestral(AncestralName("RDX"))
         r82 <- Part { src: r18, offset: 4, size: 4 }
         r79 <- Const { value: 8, size: 8 }
         r80 <- Arith(Add, r79, r65)
         r81 <- LoadMem { mem: r43, addr: r80, size: 4 }
  (  2)  r83 <- Concat { lo: r81, hi: r82 }
         r85 <- Part { src: r83, offset: 0, size: 4 }
         r84 <- Part { src: r83, offset: 0, size: 4 }
         r86 <- Arith(BitAnd, r84, r85)
         r88 <- IsZero(r86)
         r93 <- Not(r88)
         r94 <- JmpIf { cond: r93, target: 106 }
.B3:    ;; preds:B1.
         r106 <- Const { value: 0, size: 8 }
         r107 <- Arith(Add, r106, r71)
         r108 <- LoadMem { mem: r43, addr: r107, size: 8 }
         r110 <- Const { value: 0, size: 8 }
         r111 <- Arith(Add, r110, r65)
         r112 <- StoreMem { mem: r43, addr: r111, value: r108 }
.B4:    ;; preds:B0,B3.
         r113 <- Void
         r114 <- Concat { lo: r113, hi: r71 }
         r115 <- Part { src: r114, offset: 0, size: 8 }
         r116 <- Ret(r115)
.B2:    ;; preds:B1.
         r95 <- Const { value: 8, size: 8 }
         r96 <- Arith(Add, r95, r71)
         r97 <- LoadMem { mem: r43, addr: r96, size: 8 }
         r99 <- Const { value: 0, size: 8 }
         r100 <- Arith(Add, r99, r65)
         r101 <- StoreMem { mem: r43, addr: r100, value: r97 }
         r102 <- Void
         r103 <- Concat { lo: r102, hi: r71 }
         r104 <- Part { src: r103, offset: 0, size: 8 }
         r105 <- Ret(r104)


cfg:
  entry: BlockID(0)
  exit: BlockID(5)
  BlockID(0) [0:79] -> Alt { straight: (0, BlockID(1)), side: (0, BlockID(4)) }
  BlockID(1) [79:95] -> Alt { straight: (0, BlockID(2)), side: (0, BlockID(3)) }
  BlockID(2) [95:106] -> Jmp((0, BlockID(5)))
  BlockID(3) [106:113] -> Jmp((1, BlockID(4)))
  BlockID(4) [113:117] -> Jmp((1, BlockID(5)))
  BlockID(5) [117:117] -> End
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  BlockID(3)
    |  BlockID(4)
    |  BlockID(5)

ssa post-xform:
ssa program  117 instrs
.B0:    ;; .
  (  4)  r65 <- Ancestral(AncestralName("arg0"))
  (  6)  r43 <- Ancestral(AncestralName("memory"))
  (  5)  r69 <- LoadMem { mem: r43, addr: r65, size: 8 }
         r73 <- IsZero(r69)
         r78 <- JmpIf { cond: r73, target: 113 }
.B1:    ;; preds:B0.
         r80 <- ArithK(Add, r65, 8)
         r81 <- LoadMem { mem: r43, addr: r80, size: 4 }
         r88 <- IsZero(r81)
         r93 <- Not(r88)
         r94 <- JmpIf { cond: r93, target: 106 }
.B3:    ;; preds:B1.
         r108 <- LoadMem { mem: r43, addr: r69, size: 8 }
         r112 <- StoreMem { mem: r43, addr: r65, value: r108 }
.B4:    ;; preds:B0,B3.
         r116 <- Ret(r69)
.B2:    ;; preds:B1.
         r96 <- ArithK(Add, r69, 8)
         r97 <- LoadMem { mem: r43, addr: r96, size: 8 }
         r101 <- StoreMem { mem: r43, addr: r65, value: r97 }
         r105 <- Ret(r69)



T0: {
  let r69: Bytes(8) = [pre:arg0]:8;
  if IsZero (r69) then {
    goto T4
  } else:
  if ! ((IsZero ([pre:arg0 + 8]:4))) then {
    [pre:arg0] <- [r69]:8;
    goto T4
  } else:
  [pre:arg0] <- [r69 + 8]:8;
  Ret (r69)
  goto T5
  
  T4: {
    Ret (r69)
    goto T5
  }
  
  
  T5: {
    end
  }

}
