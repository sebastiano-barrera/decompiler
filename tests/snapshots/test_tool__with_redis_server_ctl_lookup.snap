---
source: tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

mil program = 
program  1349 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
0x5ddf40:
   38 r12 <- ArithK8(Add, r12, -8)
   39 r29 <- StoreMem(r12, r27)
0x5ddf42:
   40 r12 <- ArithK8(Add, r12, -8)
   41 r29 <- StoreMem(r12, r26)
0x5ddf44:
   42 r26 <- Get(r15)
0x5ddf47:
   43 r28 <- Const4(46)
   44 r15 <- Part { src: r15, offset: 4, size: 4 }
   45 r15 <- Concat { lo: r28, hi: r15 }
0x5ddf4c:
   46 r12 <- ArithK8(Add, r12, -8)
   47 r29 <- StoreMem(r12, r25)
0x5ddf4e:
   48 r12 <- ArithK8(Add, r12, -8)
   49 r29 <- StoreMem(r12, r24)
0x5ddf50:
   50 r12 <- ArithK8(Add, r12, -8)
   51 r29 <- StoreMem(r12, r11)
0x5ddf51:
   52 r12 <- ArithK8(Add, r12, -8)
   53 r29 <- StoreMem(r12, r17)
0x5ddf52:
   54 r17 <- Get(r18)
0x5ddf55:
   55 r29 <- Const8(88)
   56 r12 <- Arith8(Sub, r12, r29)
   57 r12 <- Get(r12)
   58 r10 <- OverflowOf(r12)
   59 r2 <- CarryOf(r12)
   60 r6 <- SignOf(r12)
   61 r5 <- IsZero(r12)
   62 r30 <- Part { src: r12, offset: 0, size: 1 }
   63 r3 <- Parity(r30)
0x5ddf59:
   64 r29 <- Const8(64)
   65 r29 <- Arith8(Add, r29, r12)
   66 r30 <- StoreMem(r29, r14)
0x5ddf5e:
   67 r14 <- Get(r19)
0x5ddf61:
   68 r29 <- Const8(32)
   69 r29 <- Arith8(Add, r29, r12)
   70 r30 <- StoreMem(r29, r20)
0x5ddf66:
   71 r29 <- Const8(0)
   72 r29 <- Arith8(Add, r29, r12)
   73 r30 <- StoreMem(r29, r19)
0x5ddf6a:
   74 r29 <- Const8(24)
   75 r29 <- Arith8(Add, r29, r12)
   76 r30 <- StoreMem(r29, r21)
0x5ddf6f:
   77 r28 <- Const8(4199040)
   78 r16 <- Call(r28)
   79 r29 <- CArg(r14)
   80 r30 <- CArg(r15)
   81 r31 <- CArg(r19)
   82 r32 <- CArg(r18)
   83 r2 <- Undefined
   84 r3 <- Undefined
   85 r4 <- Undefined
   86 r5 <- Undefined
   87 r6 <- Undefined
   88 r7 <- Undefined
   89 r8 <- Undefined
   90 r9 <- Undefined
   91 r10 <- Undefined
0x5ddf74:
   92 r20 <- Get(r16)
0x5ddf77:
   93 r16 <- Arith8(BitAnd, r16, r16)
   94 r6 <- SignOf(r16)
   95 r5 <- IsZero(r16)
   96 r30 <- Part { src: r16, offset: 0, size: 1 }
   97 r3 <- Parity(r16)
   98 r2 <- Const1(0)
   99 r10 <- Const1(0)
0x5ddf7a:
  100 r28 <- JmpIf { cond: r5, target: 1316 }
0x5ddf80:
  101 r29 <- Const8(0)
  102 r29 <- Arith8(Add, r29, r12)
  103 r28 <- LoadMem8(r29)
  104 r16 <- Get(r28)
0x5ddf84:
  105 r11 <- Get(r20)
0x5ddf87:
  106 r11 <- Arith8(Sub, r11, r16)
  107 r11 <- Get(r11)
  108 r10 <- OverflowOf(r11)
  109 r2 <- CarryOf(r11)
  110 r6 <- SignOf(r11)
  111 r5 <- IsZero(r11)
  112 r30 <- Part { src: r11, offset: 0, size: 1 }
  113 r3 <- Parity(r30)
0x5ddf8a:
  114 r28 <- JmpIf { cond: r5, target: 1087 }
0x5ddf90:
  115 r29 <- Const8(24)
  116 r29 <- Arith8(Add, r29, r12)
  117 r28 <- LoadMem8(r29)
  118 r19 <- Get(r28)
0x5ddf95:
  119 r29 <- Const8(0)
  120 r29 <- Arith8(Add, r29, r19)
  121 r28 <- LoadMem8(r29)
  122 r30 <- Const8(0)
  123 r28 <- Arith8(Sub, r28, r30)
  124 r10 <- OverflowOf(r28)
  125 r2 <- CarryOf(r28)
  126 r6 <- SignOf(r28)
  127 r5 <- IsZero(r28)
  128 r31 <- Part { src: r28, offset: 0, size: 1 }
  129 r3 <- Parity(r31)
0x5ddf99:
  130 r28 <- JmpIf { cond: r5, target: 1347 }
0x5ddf9f:
  131 r29 <- Const8(24)
  132 r29 <- Arith8(Add, r29, r26)
  133 r28 <- LoadMem8(r29)
  134 r21 <- Get(r28)
0x5ddfa3:
  135 r28 <- Part { src: r27, offset: 0, size: 4 }
  136 r29 <- Part { src: r27, offset: 0, size: 4 }
  137 r28 <- Arith4(BitXor, r28, r29)
  138 r27 <- Part { src: r27, offset: 4, size: 4 }
  139 r27 <- Concat { lo: r28, hi: r27 }
  140 r10 <- False
  141 r2 <- False
  142 r6 <- SignOf(r28)
  143 r5 <- IsZero(r28)
  144 r30 <- Part { src: r28, offset: 0, size: 1 }
  145 r3 <- Parity(r30)
0x5ddfa6:
  146 r29 <- Const8(72)
  147 r29 <- Arith8(Add, r29, r12)
  148 r30 <- StoreMem(r29, r17)
0x5ddfab:
  149 r29 <- Const8(0)
  150 r29 <- Arith8(Add, r29, r21)
  151 r28 <- LoadMem1(r29)
  152 r30 <- Const1(0)
  153 r28 <- Arith1(Sub, r28, r30)
  154 r10 <- OverflowOf(r28)
  155 r2 <- CarryOf(r28)
  156 r6 <- SignOf(r28)
  157 r5 <- IsZero(r28)
  158 r31 <- Part { src: r28, offset: 0, size: 1 }
  159 r3 <- Parity(r31)
0x5ddfaf:
  160 r28 <- JmpIf { cond: r5, target: 813 }
0x5ddfc0:
  161 r29 <- Const8(16)
  162 r29 <- Arith8(Add, r29, r26)
  163 r28 <- LoadMem8(r29)
  164 r15 <- Get(r28)
0x5ddfc4:
  165 r29 <- Const8(16)
  166 r29 <- Arith8(Add, r29, r12)
  167 r30 <- StoreMem(r29, r15)
0x5ddfc9:
  168 r15 <- Arith8(BitAnd, r15, r15)
  169 r6 <- SignOf(r15)
  170 r5 <- IsZero(r15)
  171 r30 <- Part { src: r15, offset: 0, size: 1 }
  172 r3 <- Parity(r15)
  173 r2 <- Const1(0)
  174 r10 <- Const1(0)
0x5ddfcc:
  175 r28 <- JmpIf { cond: r5, target: 1087 }
0x5ddfd2:
  176 r24 <- Get(r21)
0x5ddfd5:
  177 r28 <- Part { src: r17, offset: 0, size: 4 }
  178 r29 <- Part { src: r17, offset: 0, size: 4 }
  179 r28 <- Arith4(BitXor, r28, r29)
  180 r17 <- Part { src: r17, offset: 4, size: 4 }
  181 r17 <- Concat { lo: r28, hi: r17 }
  182 r10 <- False
  183 r2 <- False
  184 r6 <- SignOf(r28)
  185 r5 <- IsZero(r28)
  186 r30 <- Part { src: r28, offset: 0, size: 1 }
  187 r3 <- Parity(r30)
0x5ddfd7:
  188 r28 <- Part { src: r15, offset: 0, size: 4 }
  189 r29 <- Const4(3)
  190 r28 <- Arith4(BitAnd, r28, r29)
  191 r15 <- Part { src: r15, offset: 4, size: 4 }
  192 r15 <- Concat { lo: r28, hi: r15 }
  193 r10 <- False
  194 r2 <- False
  195 r6 <- SignOf(r28)
  196 r5 <- IsZero(r28)
  197 r30 <- Part { src: r28, offset: 0, size: 1 }
  198 r3 <- Parity(r30)
0x5ddfda:
  199 r28 <- JmpIf { cond: r5, target: 405 }
0x5ddfe0:
  200 r29 <- Const8(1)
  201 r15 <- Arith8(Sub, r15, r29)
  202 r10 <- OverflowOf(r15)
  203 r2 <- CarryOf(r15)
  204 r6 <- SignOf(r15)
  205 r5 <- IsZero(r15)
  206 r30 <- Part { src: r15, offset: 0, size: 1 }
  207 r3 <- Parity(r30)
0x5ddfe4:
  208 r28 <- JmpIf { cond: r5, target: 332 }
0x5ddfe6:
  209 r29 <- Const8(2)
  210 r15 <- Arith8(Sub, r15, r29)
  211 r10 <- OverflowOf(r15)
  212 r2 <- CarryOf(r15)
  213 r6 <- SignOf(r15)
  214 r5 <- IsZero(r15)
  215 r30 <- Part { src: r15, offset: 0, size: 1 }
  216 r3 <- Parity(r30)
0x5ddfea:
  217 r28 <- JmpIf { cond: r5, target: 271 }
0x5ddfec:
  218 r29 <- Const8(8)
  219 r29 <- Arith8(Add, r29, r21)
  220 r28 <- LoadMem8(r29)
  221 r22 <- Get(r28)
0x5ddff0:
  222 r29 <- Const8(48)
  223 r29 <- Arith8(Add, r29, r12)
  224 r30 <- StoreMem(r29, r20)
0x5ddff5:
  225 r25 <- Get(r21)
0x5ddff8:
  226 r29 <- Const8(40)
  227 r29 <- Arith8(Add, r29, r12)
  228 r30 <- StoreMem(r29, r21)
0x5ddffd:
  229 r14 <- Get(r22)
0x5de000:
  230 r29 <- Const8(8)
  231 r29 <- Arith8(Add, r29, r12)
  232 r30 <- StoreMem(r29, r22)
0x5de005:
  233 r28 <- Const8(4199136)
  234 r16 <- Call(r28)
  235 r29 <- CArg(r14)
  236 r30 <- CArg(r15)
  237 r31 <- CArg(r19)
  238 r32 <- CArg(r18)
  239 r2 <- Undefined
  240 r3 <- Undefined
  241 r4 <- Undefined
  242 r5 <- Undefined
  243 r6 <- Undefined
  244 r7 <- Undefined
  245 r8 <- Undefined
  246 r9 <- Undefined
  247 r10 <- Undefined
0x5de00a:
  248 r29 <- Const8(8)
  249 r29 <- Arith8(Add, r29, r12)
  250 r28 <- LoadMem8(r29)
  251 r15 <- Get(r28)
0x5de00f:
  252 r29 <- Const8(48)
  253 r29 <- Arith8(Add, r29, r12)
  254 r28 <- LoadMem8(r29)
  255 r20 <- Get(r28)
0x5de014:
  256 r14 <- Get(r24)
0x5de017:
  257 r16 <- Arith8(Sub, r16, r11)
  258 r10 <- OverflowOf(r16)
  259 r2 <- CarryOf(r16)
  260 r6 <- SignOf(r16)
  261 r5 <- IsZero(r16)
  262 r30 <- Part { src: r16, offset: 0, size: 1 }
  263 r3 <- Parity(r30)
0x5de01a:
  264 r28 <- JmpIf { cond: r5, target: 1273 }
0x5de020:
  265 r28 <- Const4(1)
  266 r17 <- Part { src: r17, offset: 4, size: 4 }
  267 r17 <- Concat { lo: r28, hi: r17 }
0x5de025:
  268 r28 <- Const8(40)
  269 r28 <- Arith8(Add, r28, r14)
  270 r24 <- Get(r28)
0x5de029:
  271 r29 <- Const8(8)
  272 r29 <- Arith8(Add, r29, r24)
  273 r28 <- LoadMem8(r29)
  274 r23 <- Get(r28)
0x5de02e:
  275 r29 <- Const8(40)
  276 r29 <- Arith8(Add, r29, r12)
  277 r30 <- StoreMem(r29, r20)
0x5de033:
  278 r25 <- Get(r24)
0x5de036:
  279 r14 <- Get(r23)
0x5de039:
  280 r29 <- Const8(8)
  281 r29 <- Arith8(Add, r29, r12)
  282 r30 <- StoreMem(r29, r23)
0x5de03e:
  283 r28 <- Const8(4199136)
  284 r16 <- Call(r28)
  285 r29 <- CArg(r14)
  286 r30 <- CArg(r15)
  287 r31 <- CArg(r19)
  288 r32 <- CArg(r18)
  289 r2 <- Undefined
  290 r3 <- Undefined
  291 r4 <- Undefined
  292 r5 <- Undefined
  293 r6 <- Undefined
  294 r7 <- Undefined
  295 r8 <- Undefined
  296 r9 <- Undefined
  297 r10 <- Undefined
0x5de043:
  298 r29 <- Const8(8)
  299 r29 <- Arith8(Add, r29, r12)
  300 r28 <- LoadMem8(r29)
  301 r15 <- Get(r28)
0x5de048:
  302 r29 <- Const8(40)
  303 r29 <- Arith8(Add, r29, r12)
  304 r28 <- LoadMem8(r29)
  305 r20 <- Get(r28)
0x5de04d:
  306 r16 <- Arith8(Sub, r16, r11)
  307 r10 <- OverflowOf(r16)
  308 r2 <- CarryOf(r16)
  309 r6 <- SignOf(r16)
  310 r5 <- IsZero(r16)
  311 r30 <- Part { src: r16, offset: 0, size: 1 }
  312 r3 <- Parity(r30)
0x5de050:
  313 r28 <- JmpIf { cond: r5, target: 1234 }
0x5de056:
  314 r29 <- Const8(1)
  315 r17 <- Arith8(Add, r17, r29)
  316 r17 <- Get(r17)
  317 r10 <- OverflowOf(r17)
  318 r2 <- CarryOf(r17)
  319 r6 <- SignOf(r17)
  320 r5 <- IsZero(r17)
  321 r30 <- Part { src: r17, offset: 0, size: 1 }
  322 r3 <- Parity(r30)
0x5de05a:
  323 r29 <- Const8(40)
  324 r24 <- Arith8(Add, r24, r29)
  325 r24 <- Get(r24)
  326 r10 <- OverflowOf(r24)
  327 r2 <- CarryOf(r24)
  328 r6 <- SignOf(r24)
  329 r5 <- IsZero(r24)
  330 r30 <- Part { src: r24, offset: 0, size: 1 }
  331 r3 <- Parity(r30)
0x5de05e:
  332 r29 <- Const8(8)
  333 r29 <- Arith8(Add, r29, r24)
  334 r28 <- LoadMem8(r29)
  335 r16 <- Get(r28)
0x5de063:
  336 r29 <- Const8(40)
  337 r29 <- Arith8(Add, r29, r12)
  338 r30 <- StoreMem(r29, r20)
0x5de068:
  339 r25 <- Get(r24)
0x5de06b:
  340 r14 <- Get(r16)
0x5de06e:
  341 r29 <- Const8(8)
  342 r29 <- Arith8(Add, r29, r12)
  343 r30 <- StoreMem(r29, r16)
0x5de073:
  344 r28 <- Const8(4199136)
  345 r16 <- Call(r28)
  346 r29 <- CArg(r14)
  347 r30 <- CArg(r15)
  348 r31 <- CArg(r19)
  349 r32 <- CArg(r18)
  350 r2 <- Undefined
  351 r3 <- Undefined
  352 r4 <- Undefined
  353 r5 <- Undefined
  354 r6 <- Undefined
  355 r7 <- Undefined
  356 r8 <- Undefined
  357 r9 <- Undefined
  358 r10 <- Undefined
0x5de078:
  359 r29 <- Const8(8)
  360 r29 <- Arith8(Add, r29, r12)
  361 r28 <- LoadMem8(r29)
  362 r15 <- Get(r28)
0x5de07d:
  363 r29 <- Const8(40)
  364 r29 <- Arith8(Add, r29, r12)
  365 r28 <- LoadMem8(r29)
  366 r20 <- Get(r28)
0x5de082:
  367 r16 <- Arith8(Sub, r16, r11)
  368 r10 <- OverflowOf(r16)
  369 r2 <- CarryOf(r16)
  370 r6 <- SignOf(r16)
  371 r5 <- IsZero(r16)
  372 r30 <- Part { src: r16, offset: 0, size: 1 }
  373 r3 <- Parity(r30)
0x5de085:
  374 r28 <- JmpIf { cond: r5, target: 1195 }
0x5de08b:
  375 r29 <- Const8(16)
  376 r29 <- Arith8(Add, r29, r12)
  377 r28 <- LoadMem8(r29)
  378 r19 <- Get(r28)
0x5de090:
  379 r29 <- Const8(1)
  380 r17 <- Arith8(Add, r17, r29)
  381 r17 <- Get(r17)
  382 r10 <- OverflowOf(r17)
  383 r2 <- CarryOf(r17)
  384 r6 <- SignOf(r17)
  385 r5 <- IsZero(r17)
  386 r30 <- Part { src: r17, offset: 0, size: 1 }
  387 r3 <- Parity(r30)
0x5de094:
  388 r29 <- Const8(40)
  389 r24 <- Arith8(Add, r24, r29)
  390 r24 <- Get(r24)
  391 r10 <- OverflowOf(r24)
  392 r2 <- CarryOf(r24)
  393 r6 <- SignOf(r24)
  394 r5 <- IsZero(r24)
  395 r30 <- Part { src: r24, offset: 0, size: 1 }
  396 r3 <- Parity(r30)
0x5de098:
  397 r17 <- Arith8(Sub, r17, r19)
  398 r10 <- OverflowOf(r17)
  399 r2 <- CarryOf(r17)
  400 r6 <- SignOf(r17)
  401 r5 <- IsZero(r17)
  402 r30 <- Part { src: r17, offset: 0, size: 1 }
  403 r3 <- Parity(r30)
0x5de09b:
  404 r28 <- JmpIf { cond: r5, target: 1087 }
0x5de0a1:
  405 r29 <- Const8(56)
  406 r29 <- Arith8(Add, r29, r12)
  407 r30 <- StoreMem(r29, r26)
0x5de0a6:
  408 r26 <- Get(r24)
0x5de0a9:
  409 r29 <- Const8(40)
  410 r29 <- Arith8(Add, r29, r12)
  411 r30 <- StoreMem(r29, r27)
0x5de0ae:
  412 r29 <- Const8(48)
  413 r29 <- Arith8(Add, r29, r12)
  414 r30 <- StoreMem(r29, r20)
0x5de0b3:
  415 r28 <- Jmp(562)
0x5de0c0:
  416 r29 <- Const8(48)
  417 r29 <- Arith8(Add, r29, r26)
  418 r28 <- LoadMem8(r29)
  419 r21 <- Get(r28)
0x5de0c4:
  420 r28 <- Const8(40)
  421 r28 <- Arith8(Add, r28, r26)
  422 r27 <- Get(r28)
0x5de0c8:
  423 r28 <- Const8(1)
  424 r28 <- Arith8(Add, r28, r17)
  425 r25 <- Get(r28)
0x5de0cc:
  426 r17 <- Get(r25)
0x5de0cf:
  427 r26 <- Get(r27)
0x5de0d2:
  428 r24 <- Get(r27)
0x5de0d5:
  429 r14 <- Get(r21)
0x5de0d8:
  430 r29 <- Const8(8)
  431 r29 <- Arith8(Add, r29, r12)
  432 r30 <- StoreMem(r29, r21)
0x5de0dd:
  433 r28 <- Const8(4199136)
  434 r16 <- Call(r28)
  435 r29 <- CArg(r14)
  436 r30 <- CArg(r15)
  437 r31 <- CArg(r19)
  438 r32 <- CArg(r18)
  439 r2 <- Undefined
  440 r3 <- Undefined
  441 r4 <- Undefined
  442 r5 <- Undefined
  443 r6 <- Undefined
  444 r7 <- Undefined
  445 r8 <- Undefined
  446 r9 <- Undefined
  447 r10 <- Undefined
0x5de0e2:
  448 r29 <- Const8(8)
  449 r29 <- Arith8(Add, r29, r12)
  450 r28 <- LoadMem8(r29)
  451 r15 <- Get(r28)
0x5de0e7:
  452 r16 <- Arith8(Sub, r16, r11)
  453 r10 <- OverflowOf(r16)
  454 r2 <- CarryOf(r16)
  455 r6 <- SignOf(r16)
  456 r5 <- IsZero(r16)
  457 r30 <- Part { src: r16, offset: 0, size: 1 }
  458 r3 <- Parity(r30)
0x5de0ea:
  459 r28 <- JmpIf { cond: r5, target: 638 }
0x5de0f0:
  460 r29 <- Const8(48)
  461 r29 <- Arith8(Add, r29, r27)
  462 r28 <- LoadMem8(r29)
  463 r18 <- Get(r28)
0x5de0f4:
  464 r28 <- Const8(40)
  465 r28 <- Arith8(Add, r28, r27)
  466 r26 <- Get(r28)
0x5de0f8:
  467 r28 <- Const8(1)
  468 r28 <- Arith8(Add, r28, r25)
  469 r17 <- Get(r28)
0x5de0fc:
  470 r24 <- Get(r26)
0x5de0ff:
  471 r14 <- Get(r18)
0x5de102:
  472 r29 <- Const8(8)
  473 r29 <- Arith8(Add, r29, r12)
  474 r30 <- StoreMem(r29, r18)
0x5de107:
  475 r28 <- Const8(4199136)
  476 r16 <- Call(r28)
  477 r29 <- CArg(r14)
  478 r30 <- CArg(r15)
  479 r31 <- CArg(r19)
  480 r32 <- CArg(r18)
  481 r2 <- Undefined
  482 r3 <- Undefined
  483 r4 <- Undefined
  484 r5 <- Undefined
  485 r6 <- Undefined
  486 r7 <- Undefined
  487 r8 <- Undefined
  488 r9 <- Undefined
  489 r10 <- Undefined
0x5de10c:
  490 r29 <- Const8(8)
  491 r29 <- Arith8(Add, r29, r12)
  492 r28 <- LoadMem8(r29)
  493 r15 <- Get(r28)
0x5de111:
  494 r16 <- Arith8(Sub, r16, r11)
  495 r10 <- OverflowOf(r16)
  496 r2 <- CarryOf(r16)
  497 r6 <- SignOf(r16)
  498 r5 <- IsZero(r16)
  499 r30 <- Part { src: r16, offset: 0, size: 1 }
  500 r3 <- Parity(r30)
0x5de114:
  501 r28 <- JmpIf { cond: r5, target: 1023 }
0x5de11a:
  502 r29 <- Const8(88)
  503 r29 <- Arith8(Add, r29, r27)
  504 r28 <- LoadMem8(r29)
  505 r15 <- Get(r28)
0x5de11e:
  506 r28 <- Const8(80)
  507 r28 <- Arith8(Add, r28, r27)
  508 r26 <- Get(r28)
0x5de122:
  509 r28 <- Const8(2)
  510 r28 <- Arith8(Add, r28, r25)
  511 r17 <- Get(r28)
0x5de126:
  512 r24 <- Get(r26)
0x5de129:
  513 r14 <- Get(r15)
0x5de12c:
  514 r29 <- Const8(8)
  515 r29 <- Arith8(Add, r29, r12)
  516 r30 <- StoreMem(r29, r15)
0x5de131:
  517 r28 <- Const8(4199136)
  518 r16 <- Call(r28)
  519 r29 <- CArg(r14)
  520 r30 <- CArg(r15)
  521 r31 <- CArg(r19)
  522 r32 <- CArg(r18)
  523 r2 <- Undefined
  524 r3 <- Undefined
  525 r4 <- Undefined
  526 r5 <- Undefined
  527 r6 <- Undefined
  528 r7 <- Undefined
  529 r8 <- Undefined
  530 r9 <- Undefined
  531 r10 <- Undefined
0x5de136:
  532 r29 <- Const8(8)
  533 r29 <- Arith8(Add, r29, r12)
  534 r28 <- LoadMem8(r29)
  535 r15 <- Get(r28)
0x5de13b:
  536 r16 <- Arith8(Sub, r16, r11)
  537 r10 <- OverflowOf(r16)
  538 r2 <- CarryOf(r16)
  539 r6 <- SignOf(r16)
  540 r5 <- IsZero(r16)
  541 r30 <- Part { src: r16, offset: 0, size: 1 }
  542 r3 <- Parity(r30)
0x5de13e:
  543 r28 <- JmpIf { cond: r5, target: 1055 }
0x5de144:
  544 r29 <- Const8(16)
  545 r29 <- Arith8(Add, r29, r12)
  546 r28 <- LoadMem8(r29)
  547 r22 <- Get(r28)
0x5de149:
  548 r28 <- Const8(3)
  549 r28 <- Arith8(Add, r28, r25)
  550 r17 <- Get(r28)
0x5de14d:
  551 r28 <- Const8(120)
  552 r28 <- Arith8(Add, r28, r27)
  553 r26 <- Get(r28)
0x5de151:
  554 r17 <- Arith8(Sub, r17, r22)
  555 r10 <- OverflowOf(r17)
  556 r2 <- CarryOf(r17)
  557 r6 <- SignOf(r17)
  558 r5 <- IsZero(r17)
  559 r30 <- Part { src: r17, offset: 0, size: 1 }
  560 r3 <- Parity(r30)
0x5de154:
  561 r28 <- JmpIf { cond: r5, target: 1087 }
0x5de15a:
  562 r29 <- Const8(8)
  563 r29 <- Arith8(Add, r29, r26)
  564 r28 <- LoadMem8(r29)
  565 r27 <- Get(r28)
0x5de15e:
  566 r24 <- Get(r26)
0x5de161:
  567 r14 <- Get(r27)
0x5de164:
  568 r28 <- Const8(4199136)
  569 r16 <- Call(r28)
  570 r29 <- CArg(r14)
  571 r30 <- CArg(r15)
  572 r31 <- CArg(r19)
  573 r32 <- CArg(r18)
  574 r2 <- Undefined
  575 r3 <- Undefined
  576 r4 <- Undefined
  577 r5 <- Undefined
  578 r6 <- Undefined
  579 r7 <- Undefined
  580 r8 <- Undefined
  581 r9 <- Undefined
  582 r10 <- Undefined
0x5de169:
  583 r16 <- Arith8(Sub, r16, r11)
  584 r10 <- OverflowOf(r16)
  585 r2 <- CarryOf(r16)
  586 r6 <- SignOf(r16)
  587 r5 <- IsZero(r16)
  588 r30 <- Part { src: r16, offset: 0, size: 1 }
  589 r3 <- Parity(r30)
0x5de16c:
  590 r28 <- Not(r5)
  591 r29 <- JmpIf { cond: r28, target: 416 }
0x5de172:
  592 r29 <- Const8(0)
  593 r29 <- Arith8(Add, r29, r12)
  594 r28 <- LoadMem8(r29)
  595 r14 <- Get(r28)
0x5de176:
  596 r19 <- Get(r11)
0x5de179:
  597 r15 <- Get(r27)
0x5de17c:
  598 r28 <- Const8(4199232)
  599 r16 <- Call(r28)
  600 r29 <- CArg(r14)
  601 r30 <- CArg(r15)
  602 r31 <- CArg(r19)
  603 r32 <- CArg(r18)
  604 r2 <- Undefined
  605 r3 <- Undefined
  606 r4 <- Undefined
  607 r5 <- Undefined
  608 r6 <- Undefined
  609 r7 <- Undefined
  610 r8 <- Undefined
  611 r9 <- Undefined
  612 r10 <- Undefined
0x5de181:
  613 r28 <- Part { src: r16, offset: 0, size: 4 }
  614 r29 <- Part { src: r16, offset: 0, size: 4 }
  615 r28 <- Arith4(BitAnd, r28, r29)
  616 r6 <- SignOf(r28)
  617 r5 <- IsZero(r28)
  618 r30 <- Part { src: r28, offset: 0, size: 1 }
  619 r3 <- Parity(r28)
  620 r2 <- Const1(0)
  621 r10 <- Const1(0)
0x5de183:
  622 r28 <- Not(r5)
  623 r29 <- JmpIf { cond: r28, target: 416 }
0x5de189:
  624 r25 <- Get(r26)
0x5de18c:
  625 r29 <- Const8(40)
  626 r29 <- Arith8(Add, r29, r12)
  627 r28 <- LoadMem8(r29)
  628 r27 <- Get(r28)
0x5de191:
  629 r29 <- Const8(48)
  630 r29 <- Arith8(Add, r29, r12)
  631 r28 <- LoadMem8(r29)
  632 r20 <- Get(r28)
0x5de196:
  633 r29 <- Const8(56)
  634 r29 <- Arith8(Add, r29, r12)
  635 r28 <- LoadMem8(r29)
  636 r26 <- Get(r28)
0x5de19b:
  637 r28 <- Jmp(683)
0x5de1a0:
  638 r29 <- Const8(0)
  639 r29 <- Arith8(Add, r29, r12)
  640 r28 <- LoadMem8(r29)
  641 r14 <- Get(r28)
0x5de1a4:
  642 r19 <- Get(r11)
0x5de1a7:
  643 r28 <- Const8(4199232)
  644 r16 <- Call(r28)
  645 r29 <- CArg(r14)
  646 r30 <- CArg(r15)
  647 r31 <- CArg(r19)
  648 r32 <- CArg(r18)
  649 r2 <- Undefined
  650 r3 <- Undefined
  651 r4 <- Undefined
  652 r5 <- Undefined
  653 r6 <- Undefined
  654 r7 <- Undefined
  655 r8 <- Undefined
  656 r9 <- Undefined
  657 r10 <- Undefined
0x5de1ac:
  658 r28 <- Part { src: r16, offset: 0, size: 4 }
  659 r29 <- Part { src: r16, offset: 0, size: 4 }
  660 r28 <- Arith4(BitAnd, r28, r29)
  661 r6 <- SignOf(r28)
  662 r5 <- IsZero(r28)
  663 r30 <- Part { src: r28, offset: 0, size: 1 }
  664 r3 <- Parity(r28)
  665 r2 <- Const1(0)
  666 r10 <- Const1(0)
0x5de1ae:
  667 r28 <- Not(r5)
  668 r29 <- JmpIf { cond: r28, target: 460 }
0x5de1b4:
  669 r25 <- Get(r24)
0x5de1b7:
  670 r29 <- Const8(40)
  671 r29 <- Arith8(Add, r29, r12)
  672 r28 <- LoadMem8(r29)
  673 r27 <- Get(r28)
0x5de1bc:
  674 r24 <- Get(r26)
0x5de1bf:
  675 r29 <- Const8(48)
  676 r29 <- Arith8(Add, r29, r12)
  677 r28 <- LoadMem8(r29)
  678 r20 <- Get(r28)
0x5de1c4:
  679 r29 <- Const8(56)
  680 r29 <- Arith8(Add, r29, r12)
  681 r28 <- LoadMem8(r29)
  682 r26 <- Get(r28)
0x5de1c9:
  683 r29 <- Const8(32)
  684 r29 <- Arith8(Add, r29, r12)
  685 r28 <- LoadMem8(r29)
  686 r11 <- Get(r28)
0x5de1ce:
  687 r29 <- Const8(0)
  688 r29 <- Arith8(Add, r29, r11)
  689 r30 <- ArithK8(Mul, r27, 8)
  690 r29 <- Arith8(Add, r29, r30)
  691 r31 <- StoreMem(r29, r17)
0x5de1d3:
  692 r24 <- Arith8(Sub, r24, r26)
  693 r10 <- OverflowOf(r24)
  694 r2 <- CarryOf(r24)
  695 r6 <- SignOf(r24)
  696 r5 <- IsZero(r24)
  697 r30 <- Part { src: r24, offset: 0, size: 1 }
  698 r3 <- Parity(r30)
0x5de1d6:
  699 r28 <- JmpIf { cond: r5, target: 1087 }
0x5de1dc:
  700 r29 <- Const8(32)
  701 r29 <- Arith8(Add, r29, r25)
  702 r28 <- LoadMem8(r29)
  703 r30 <- Const8(0)
  704 r28 <- Arith8(Sub, r28, r30)
  705 r10 <- OverflowOf(r28)
  706 r2 <- CarryOf(r28)
  707 r6 <- SignOf(r28)
  708 r5 <- IsZero(r28)
  709 r31 <- Part { src: r28, offset: 0, size: 1 }
  710 r3 <- Parity(r31)
0x5de1e1:
  711 r28 <- TODO("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
  712 r28 <- Not(r5)
  713 r29 <- JmpIf { cond: r28, target: 950 }
0x5de1eb:
  714 r28 <- Part { src: r14, offset: 0, size: 1 }
  715 r29 <- Part { src: r14, offset: 0, size: 1 }
  716 r28 <- Arith1(BitAnd, r28, r29)
  717 r6 <- SignOf(r28)
  718 r5 <- IsZero(r28)
  719 r30 <- Part { src: r28, offset: 0, size: 1 }
  720 r3 <- Parity(r28)
  721 r2 <- Const1(0)
  722 r10 <- Const1(0)
0x5de1ee:
  723 r28 <- JmpIf { cond: r5, target: 1342 }
0x5de1f4:
  724 r28 <- Const8(1)
  725 r28 <- Arith8(Add, r28, r20)
  726 r14 <- Get(r28)
0x5de1f8:
  727 r28 <- Const4(46)
  728 r15 <- Part { src: r15, offset: 4, size: 4 }
  729 r15 <- Concat { lo: r28, hi: r15 }
0x5de1fd:
  730 r29 <- Const8(0)
  731 r29 <- Arith8(Add, r29, r12)
  732 r30 <- StoreMem(r29, r14)
0x5de201:
  733 r28 <- Const8(4199040)
  734 r16 <- Call(r28)
  735 r29 <- CArg(r14)
  736 r30 <- CArg(r15)
  737 r31 <- CArg(r19)
  738 r32 <- CArg(r18)
  739 r2 <- Undefined
  740 r3 <- Undefined
  741 r4 <- Undefined
  742 r5 <- Undefined
  743 r6 <- Undefined
  744 r7 <- Undefined
  745 r8 <- Undefined
  746 r9 <- Undefined
  747 r10 <- Undefined
0x5de206:
  748 r20 <- Get(r16)
0x5de209:
  749 r16 <- Arith8(BitAnd, r16, r16)
  750 r6 <- SignOf(r16)
  751 r5 <- IsZero(r16)
  752 r30 <- Part { src: r16, offset: 0, size: 1 }
  753 r3 <- Parity(r16)
  754 r2 <- Const1(0)
  755 r10 <- Const1(0)
0x5de20c:
  756 r28 <- JmpIf { cond: r5, target: 1118 }
0x5de212:
  757 r11 <- Get(r16)
0x5de215:
  758 r29 <- Const8(0)
  759 r29 <- Arith8(Add, r29, r12)
  760 r28 <- LoadMem8(r29)
  761 r23 <- Get(r28)
0x5de219:
  762 r29 <- Const8(24)
  763 r29 <- Arith8(Add, r29, r12)
  764 r28 <- LoadMem8(r29)
  765 r16 <- Get(r28)
0x5de21e:
  766 r29 <- Const8(1)
  767 r27 <- Arith8(Add, r27, r29)
  768 r27 <- Get(r27)
  769 r10 <- OverflowOf(r27)
  770 r2 <- CarryOf(r27)
  771 r6 <- SignOf(r27)
  772 r5 <- IsZero(r27)
  773 r30 <- Part { src: r27, offset: 0, size: 1 }
  774 r3 <- Parity(r30)
0x5de222:
  775 r11 <- Arith8(Sub, r11, r23)
  776 r11 <- Get(r11)
  777 r10 <- OverflowOf(r11)
  778 r2 <- CarryOf(r11)
  779 r6 <- SignOf(r11)
  780 r5 <- IsZero(r11)
  781 r30 <- Part { src: r11, offset: 0, size: 1 }
  782 r3 <- Parity(r30)
0x5de225:
  783 r30 <- Const8(0)
  784 r30 <- Arith8(Add, r30, r16)
  785 r29 <- LoadMem8(r30)
  786 r27 <- Arith8(Sub, r27, r29)
  787 r10 <- OverflowOf(r27)
  788 r2 <- CarryOf(r27)
  789 r6 <- SignOf(r27)
  790 r5 <- IsZero(r27)
  791 r31 <- Part { src: r27, offset: 0, size: 1 }
  792 r3 <- Parity(r31)
0x5de228:
  793 r28 <- Not(r2)
  794 r29 <- JmpIf { cond: r28, target: 1168 }
0x5de22e:
  795 r26 <- Get(r25)
0x5de231:
  796 r29 <- Const8(24)
  797 r29 <- Arith8(Add, r29, r26)
  798 r28 <- LoadMem8(r29)
  799 r21 <- Get(r28)
0x5de235:
  800 r29 <- Const8(0)
  801 r29 <- Arith8(Add, r29, r21)
  802 r28 <- LoadMem1(r29)
  803 r30 <- Const1(0)
  804 r28 <- Arith1(Sub, r28, r30)
  805 r10 <- OverflowOf(r28)
  806 r2 <- CarryOf(r28)
  807 r6 <- SignOf(r28)
  808 r5 <- IsZero(r28)
  809 r31 <- Part { src: r28, offset: 0, size: 1 }
  810 r3 <- Parity(r31)
0x5de239:
  811 r28 <- Not(r5)
  812 r29 <- JmpIf { cond: r28, target: 161 }
0x5de23f:
  813 r29 <- Const8(0)
  814 r29 <- Arith8(Add, r29, r12)
  815 r28 <- LoadMem8(r29)
  816 r14 <- Get(r28)
0x5de243:
  817 r28 <- Part { src: r15, offset: 0, size: 4 }
  818 r29 <- Part { src: r15, offset: 0, size: 4 }
  819 r28 <- Arith4(BitXor, r28, r29)
  820 r15 <- Part { src: r15, offset: 4, size: 4 }
  821 r15 <- Concat { lo: r28, hi: r15 }
  822 r10 <- False
  823 r2 <- False
  824 r6 <- SignOf(r28)
  825 r5 <- IsZero(r28)
  826 r30 <- Part { src: r28, offset: 0, size: 1 }
  827 r3 <- Parity(r30)
0x5de245:
  828 r28 <- Const4(10)
  829 r19 <- Part { src: r19, offset: 4, size: 4 }
  830 r19 <- Concat { lo: r28, hi: r19 }
0x5de24a:
  831 r29 <- Const8(8)
  832 r29 <- Arith8(Add, r29, r12)
  833 r30 <- StoreMem(r29, r20)
0x5de24f:
  834 r28 <- Const8(6451424)
  835 r16 <- Call(r28)
  836 r29 <- CArg(r14)
  837 r30 <- CArg(r15)
  838 r31 <- CArg(r19)
  839 r32 <- CArg(r18)
  840 r2 <- Undefined
  841 r3 <- Undefined
  842 r4 <- Undefined
  843 r5 <- Undefined
  844 r6 <- Undefined
  845 r7 <- Undefined
  846 r8 <- Undefined
  847 r9 <- Undefined
  848 r10 <- Undefined
0x5de254:
  849 r29 <- Const8(8)
  850 r29 <- Arith8(Add, r29, r12)
  851 r28 <- LoadMem8(r29)
  852 r20 <- Get(r28)
0x5de259:
  853 r29 <- Const8(-1)
  854 r16 <- Arith8(Sub, r16, r29)
  855 r10 <- OverflowOf(r16)
  856 r2 <- CarryOf(r16)
  857 r6 <- SignOf(r16)
  858 r5 <- IsZero(r16)
  859 r30 <- Part { src: r16, offset: 0, size: 1 }
  860 r3 <- Parity(r30)
0x5de25d:
  861 r17 <- Get(r16)
0x5de260:
  862 r28 <- JmpIf { cond: r5, target: 1087 }
0x5de266:
  863 r29 <- Const8(24)
  864 r29 <- Arith8(Add, r29, r26)
  865 r28 <- LoadMem8(r29)
  866 r11 <- Get(r28)
0x5de26a:
  867 r29 <- Const8(0)
  868 r29 <- Arith8(Add, r29, r12)
  869 r30 <- StoreMem(r29, r20)
0x5de26e:
  870 r29 <- Const8(0)
  871 r29 <- Arith8(Add, r29, r11)
  872 r28 <- LoadMem1(r29)
  873 r30 <- Const1(0)
  874 r28 <- Arith1(Sub, r28, r30)
  875 r10 <- OverflowOf(r28)
  876 r2 <- CarryOf(r28)
  877 r6 <- SignOf(r28)
  878 r5 <- IsZero(r28)
  879 r31 <- Part { src: r28, offset: 0, size: 1 }
  880 r3 <- Parity(r31)
0x5de272:
  881 r28 <- Not(r5)
  882 r29 <- JmpExtIf { cond: r28, addr: 4206915 }
0x5de278:
  883 r29 <- Const8(24)
  884 r29 <- Arith8(Add, r29, r12)
  885 r28 <- LoadMem8(r29)
  886 r18 <- Get(r28)
0x5de27d:
  887 r29 <- Const8(32)
  888 r29 <- Arith8(Add, r29, r12)
  889 r28 <- LoadMem8(r29)
  890 r26 <- Get(r28)
0x5de282:
  891 r29 <- Const8(64)
  892 r29 <- Arith8(Add, r29, r12)
  893 r28 <- LoadMem8(r29)
  894 r14 <- Get(r28)
0x5de287:
  895 r29 <- Const8(0)
  896 r29 <- Arith8(Add, r29, r18)
  897 r28 <- LoadMem8(r29)
  898 r19 <- Get(r28)
0x5de28a:
  899 r15 <- Get(r26)
0x5de28d:
  900 r18 <- Get(r16)
0x5de290:
  901 r29 <- Const8(8)
  902 r29 <- Arith8(Add, r29, r11)
  903 r28 <- LoadMem8(r29)
  904 r28 <- LoadMem8(r28)
  905 r16 <- Call(r28)
  906 r30 <- CArg(r14)
  907 r31 <- CArg(r15)
  908 r32 <- CArg(r19)
  909 r33 <- CArg(r18)
  910 r2 <- Undefined
  911 r3 <- Undefined
  912 r4 <- Undefined
  913 r5 <- Undefined
  914 r6 <- Undefined
  915 r7 <- Undefined
  916 r8 <- Undefined
  917 r9 <- Undefined
  918 r10 <- Undefined
0x5de293:
  919 r25 <- Get(r16)
0x5de296:
  920 r16 <- Arith8(BitAnd, r16, r16)
  921 r6 <- SignOf(r16)
  922 r5 <- IsZero(r16)
  923 r30 <- Part { src: r16, offset: 0, size: 1 }
  924 r3 <- Parity(r16)
  925 r2 <- Const1(0)
  926 r10 <- Const1(0)
0x5de299:
  927 r28 <- JmpIf { cond: r5, target: 1087 }
0x5de29f:
  928 r29 <- Const8(0)
  929 r29 <- Arith8(Add, r29, r12)
  930 r28 <- LoadMem8(r29)
  931 r20 <- Get(r28)
0x5de2a3:
  932 r29 <- Const8(32)
  933 r29 <- Arith8(Add, r29, r25)
  934 r28 <- LoadMem8(r29)
  935 r30 <- Const8(0)
  936 r28 <- Arith8(Sub, r28, r30)
  937 r10 <- OverflowOf(r28)
  938 r2 <- CarryOf(r28)
  939 r6 <- SignOf(r28)
  940 r5 <- IsZero(r28)
  941 r31 <- Part { src: r28, offset: 0, size: 1 }
  942 r3 <- Parity(r31)
0x5de2a8:
  943 r29 <- Const8(0)
  944 r29 <- Arith8(Add, r29, r26)
  945 r30 <- ArithK8(Mul, r27, 8)
  946 r29 <- Arith8(Add, r29, r30)
  947 r31 <- StoreMem(r29, r17)
0x5de2ac:
  948 r28 <- TODO("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
  949 r28 <- JmpIf { cond: r5, target: 714 }
0x5de2b6:
  950 r29 <- Const8(72)
  951 r29 <- Arith8(Add, r29, r12)
  952 r28 <- LoadMem8(r29)
  953 r17 <- Get(r28)
0x5de2bb:
  954 r28 <- Part { src: r14, offset: 0, size: 1 }
  955 r29 <- Part { src: r14, offset: 0, size: 1 }
  956 r28 <- Arith1(BitAnd, r28, r29)
  957 r6 <- SignOf(r28)
  958 r5 <- IsZero(r28)
  959 r30 <- Part { src: r28, offset: 0, size: 1 }
  960 r3 <- Parity(r28)
  961 r2 <- Const1(0)
  962 r10 <- Const1(0)
0x5de2be:
  963 r28 <- Not(r5)
  964 r29 <- JmpIf { cond: r28, target: 1087 }
0x5de2c0:
  965 r28 <- Const8(1)
  966 r28 <- Arith8(Add, r28, r27)
  967 r20 <- Get(r28)
0x5de2c4:
  968 r29 <- Const8(24)
  969 r29 <- Arith8(Add, r29, r12)
  970 r28 <- LoadMem8(r29)
  971 r27 <- Get(r28)
0x5de2c9:
  972 r29 <- Const8(0)
  973 r29 <- Arith8(Add, r29, r27)
  974 r30 <- StoreMem(r29, r20)
0x5de2cc:
  975 r17 <- Arith8(BitAnd, r17, r17)
  976 r6 <- SignOf(r17)
  977 r5 <- IsZero(r17)
  978 r30 <- Part { src: r17, offset: 0, size: 1 }
  979 r3 <- Parity(r17)
  980 r2 <- Const1(0)
  981 r10 <- Const1(0)
0x5de2cf:
  982 r28 <- Not(r5)
  983 r29 <- JmpIf { cond: r28, target: 1180 }
0x5de2d5:
  984 r28 <- Part { src: r16, offset: 0, size: 4 }
  985 r29 <- Part { src: r16, offset: 0, size: 4 }
  986 r28 <- Arith4(BitXor, r28, r29)
  987 r16 <- Part { src: r16, offset: 4, size: 4 }
  988 r16 <- Concat { lo: r28, hi: r16 }
  989 r10 <- False
  990 r2 <- False
  991 r6 <- SignOf(r28)
  992 r5 <- IsZero(r28)
  993 r30 <- Part { src: r28, offset: 0, size: 1 }
  994 r3 <- Parity(r30)
0x5de2d7:
  995 r29 <- Const8(88)
  996 r12 <- Arith8(Add, r12, r29)
  997 r12 <- Get(r12)
  998 r10 <- OverflowOf(r12)
  999 r2 <- CarryOf(r12)
 1000 r6 <- SignOf(r12)
 1001 r5 <- IsZero(r12)
 1002 r30 <- Part { src: r12, offset: 0, size: 1 }
 1003 r3 <- Parity(r30)
0x5de2db:
 1004 r28 <- LoadMem8(r12)
 1005 r17 <- Get(r28)
 1006 r12 <- ArithK8(Add, r12, 8)
0x5de2dc:
 1007 r28 <- LoadMem8(r12)
 1008 r11 <- Get(r28)
 1009 r12 <- ArithK8(Add, r12, 8)
0x5de2dd:
 1010 r28 <- LoadMem8(r12)
 1011 r24 <- Get(r28)
 1012 r12 <- ArithK8(Add, r12, 8)
0x5de2df:
 1013 r28 <- LoadMem8(r12)
 1014 r25 <- Get(r28)
 1015 r12 <- ArithK8(Add, r12, 8)
0x5de2e1:
 1016 r28 <- LoadMem8(r12)
 1017 r26 <- Get(r28)
 1018 r12 <- ArithK8(Add, r12, 8)
0x5de2e3:
 1019 r28 <- LoadMem8(r12)
 1020 r27 <- Get(r28)
 1021 r12 <- ArithK8(Add, r12, 8)
0x5de2e5:
 1022 r28 <- Ret(r16)
0x5de2f0:
 1023 r29 <- Const8(0)
 1024 r29 <- Arith8(Add, r29, r12)
 1025 r28 <- LoadMem8(r29)
 1026 r14 <- Get(r28)
0x5de2f4:
 1027 r19 <- Get(r11)
0x5de2f7:
 1028 r28 <- Const8(4199232)
 1029 r16 <- Call(r28)
 1030 r29 <- CArg(r14)
 1031 r30 <- CArg(r15)
 1032 r31 <- CArg(r19)
 1033 r32 <- CArg(r18)
 1034 r2 <- Undefined
 1035 r3 <- Undefined
 1036 r4 <- Undefined
 1037 r5 <- Undefined
 1038 r6 <- Undefined
 1039 r7 <- Undefined
 1040 r8 <- Undefined
 1041 r9 <- Undefined
 1042 r10 <- Undefined
0x5de2fc:
 1043 r28 <- Part { src: r16, offset: 0, size: 4 }
 1044 r29 <- Part { src: r16, offset: 0, size: 4 }
 1045 r28 <- Arith4(BitAnd, r28, r29)
 1046 r6 <- SignOf(r28)
 1047 r5 <- IsZero(r28)
 1048 r30 <- Part { src: r28, offset: 0, size: 1 }
 1049 r3 <- Parity(r28)
 1050 r2 <- Const1(0)
 1051 r10 <- Const1(0)
0x5de2fe:
 1052 r28 <- Not(r5)
 1053 r29 <- JmpIf { cond: r28, target: 502 }
0x5de304:
 1054 r28 <- Jmp(669)
0x5de310:
 1055 r29 <- Const8(0)
 1056 r29 <- Arith8(Add, r29, r12)
 1057 r28 <- LoadMem8(r29)
 1058 r14 <- Get(r28)
0x5de314:
 1059 r19 <- Get(r11)
0x5de317:
 1060 r28 <- Const8(4199232)
 1061 r16 <- Call(r28)
 1062 r29 <- CArg(r14)
 1063 r30 <- CArg(r15)
 1064 r31 <- CArg(r19)
 1065 r32 <- CArg(r18)
 1066 r2 <- Undefined
 1067 r3 <- Undefined
 1068 r4 <- Undefined
 1069 r5 <- Undefined
 1070 r6 <- Undefined
 1071 r7 <- Undefined
 1072 r8 <- Undefined
 1073 r9 <- Undefined
 1074 r10 <- Undefined
0x5de31c:
 1075 r28 <- Part { src: r16, offset: 0, size: 4 }
 1076 r29 <- Part { src: r16, offset: 0, size: 4 }
 1077 r28 <- Arith4(BitAnd, r28, r29)
 1078 r6 <- SignOf(r28)
 1079 r5 <- IsZero(r28)
 1080 r30 <- Part { src: r28, offset: 0, size: 1 }
 1081 r3 <- Parity(r28)
 1082 r2 <- Const1(0)
 1083 r10 <- Const1(0)
0x5de31e:
 1084 r28 <- Not(r5)
 1085 r29 <- JmpIf { cond: r28, target: 544 }
0x5de324:
 1086 r28 <- Jmp(669)
0x5de330:
 1087 r29 <- Const8(88)
 1088 r12 <- Arith8(Add, r12, r29)
 1089 r12 <- Get(r12)
 1090 r10 <- OverflowOf(r12)
 1091 r2 <- CarryOf(r12)
 1092 r6 <- SignOf(r12)
 1093 r5 <- IsZero(r12)
 1094 r30 <- Part { src: r12, offset: 0, size: 1 }
 1095 r3 <- Parity(r30)
0x5de334:
 1096 r28 <- Const4(2)
 1097 r16 <- Part { src: r16, offset: 4, size: 4 }
 1098 r16 <- Concat { lo: r28, hi: r16 }
0x5de339:
 1099 r28 <- LoadMem8(r12)
 1100 r17 <- Get(r28)
 1101 r12 <- ArithK8(Add, r12, 8)
0x5de33a:
 1102 r28 <- LoadMem8(r12)
 1103 r11 <- Get(r28)
 1104 r12 <- ArithK8(Add, r12, 8)
0x5de33b:
 1105 r28 <- LoadMem8(r12)
 1106 r24 <- Get(r28)
 1107 r12 <- ArithK8(Add, r12, 8)
0x5de33d:
 1108 r28 <- LoadMem8(r12)
 1109 r25 <- Get(r28)
 1110 r12 <- ArithK8(Add, r12, 8)
0x5de33f:
 1111 r28 <- LoadMem8(r12)
 1112 r26 <- Get(r28)
 1113 r12 <- ArithK8(Add, r12, 8)
0x5de341:
 1114 r28 <- LoadMem8(r12)
 1115 r27 <- Get(r28)
 1116 r12 <- ArithK8(Add, r12, 8)
0x5de343:
 1117 r28 <- Ret(r16)
0x5de348:
 1118 r29 <- Const8(0)
 1119 r29 <- Arith8(Add, r29, r12)
 1120 r28 <- LoadMem8(r29)
 1121 r24 <- Get(r28)
0x5de34c:
 1122 r29 <- Const8(1)
 1123 r27 <- Arith8(Add, r27, r29)
 1124 r27 <- Get(r27)
 1125 r10 <- OverflowOf(r27)
 1126 r2 <- CarryOf(r27)
 1127 r6 <- SignOf(r27)
 1128 r5 <- IsZero(r27)
 1129 r30 <- Part { src: r27, offset: 0, size: 1 }
 1130 r3 <- Parity(r30)
0x5de350:
 1131 r14 <- Get(r24)
0x5de353:
 1132 r28 <- Const8(4199136)
 1133 r16 <- Call(r28)
 1134 r29 <- CArg(r14)
 1135 r30 <- CArg(r15)
 1136 r31 <- CArg(r19)
 1137 r32 <- CArg(r18)
 1138 r2 <- Undefined
 1139 r3 <- Undefined
 1140 r4 <- Undefined
 1141 r5 <- Undefined
 1142 r6 <- Undefined
 1143 r7 <- Undefined
 1144 r8 <- Undefined
 1145 r9 <- Undefined
 1146 r10 <- Undefined
0x5de358:
 1147 r29 <- Const8(24)
 1148 r29 <- Arith8(Add, r29, r12)
 1149 r28 <- LoadMem8(r29)
 1150 r19 <- Get(r28)
0x5de35d:
 1151 r11 <- Get(r16)
0x5de360:
 1152 r28 <- Const8(0)
 1153 r28 <- Arith8(Add, r28, r24)
 1154 r29 <- ArithK8(Mul, r16, 1)
 1155 r28 <- Arith8(Add, r28, r29)
 1156 r20 <- Get(r28)
0x5de364:
 1157 r30 <- Const8(0)
 1158 r30 <- Arith8(Add, r30, r19)
 1159 r29 <- LoadMem8(r30)
 1160 r27 <- Arith8(Sub, r27, r29)
 1161 r10 <- OverflowOf(r27)
 1162 r2 <- CarryOf(r27)
 1163 r6 <- SignOf(r27)
 1164 r5 <- IsZero(r27)
 1165 r31 <- Part { src: r27, offset: 0, size: 1 }
 1166 r3 <- Parity(r31)
0x5de367:
 1167 r28 <- JmpIf { cond: r2, target: 795 }
0x5de36d:
 1168 r29 <- Const8(72)
 1169 r29 <- Arith8(Add, r29, r12)
 1170 r28 <- LoadMem8(r29)
 1171 r17 <- Get(r28)
0x5de372:
 1172 r17 <- Arith8(BitAnd, r17, r17)
 1173 r6 <- SignOf(r17)
 1174 r5 <- IsZero(r17)
 1175 r30 <- Part { src: r17, offset: 0, size: 1 }
 1176 r3 <- Parity(r17)
 1177 r2 <- Const1(0)
 1178 r10 <- Const1(0)
0x5de375:
 1179 r28 <- JmpIf { cond: r5, target: 984 }
0x5de37b:
 1180 r29 <- Const8(0)
 1181 r29 <- Arith8(Add, r29, r17)
 1182 r30 <- StoreMem(r29, r25)
0x5de37e:
 1183 r28 <- Part { src: r16, offset: 0, size: 4 }
 1184 r29 <- Part { src: r16, offset: 0, size: 4 }
 1185 r28 <- Arith4(BitXor, r28, r29)
 1186 r16 <- Part { src: r16, offset: 4, size: 4 }
 1187 r16 <- Concat { lo: r28, hi: r16 }
 1188 r10 <- False
 1189 r2 <- False
 1190 r6 <- SignOf(r28)
 1191 r5 <- IsZero(r28)
 1192 r30 <- Part { src: r28, offset: 0, size: 1 }
 1193 r3 <- Parity(r30)
0x5de380:
 1194 r28 <- Jmp(995)
0x5de388:
 1195 r29 <- Const8(0)
 1196 r29 <- Arith8(Add, r29, r12)
 1197 r28 <- LoadMem8(r29)
 1198 r14 <- Get(r28)
0x5de38c:
 1199 r19 <- Get(r11)
0x5de38f:
 1200 r29 <- Const8(8)
 1201 r29 <- Arith8(Add, r29, r12)
 1202 r30 <- StoreMem(r29, r20)
0x5de394:
 1203 r28 <- Const8(4199232)
 1204 r16 <- Call(r28)
 1205 r29 <- CArg(r14)
 1206 r30 <- CArg(r15)
 1207 r31 <- CArg(r19)
 1208 r32 <- CArg(r18)
 1209 r2 <- Undefined
 1210 r3 <- Undefined
 1211 r4 <- Undefined
 1212 r5 <- Undefined
 1213 r6 <- Undefined
 1214 r7 <- Undefined
 1215 r8 <- Undefined
 1216 r9 <- Undefined
 1217 r10 <- Undefined
0x5de399:
 1218 r29 <- Const8(8)
 1219 r29 <- Arith8(Add, r29, r12)
 1220 r28 <- LoadMem8(r29)
 1221 r20 <- Get(r28)
0x5de39e:
 1222 r28 <- Part { src: r16, offset: 0, size: 4 }
 1223 r29 <- Part { src: r16, offset: 0, size: 4 }
 1224 r28 <- Arith4(BitAnd, r28, r29)
 1225 r6 <- SignOf(r28)
 1226 r5 <- IsZero(r28)
 1227 r30 <- Part { src: r28, offset: 0, size: 1 }
 1228 r3 <- Parity(r28)
 1229 r2 <- Const1(0)
 1230 r10 <- Const1(0)
0x5de3a0:
 1231 r28 <- Not(r5)
 1232 r29 <- JmpIf { cond: r28, target: 375 }
0x5de3a6:
 1233 r28 <- Jmp(683)
0x5de3b0:
 1234 r29 <- Const8(0)
 1235 r29 <- Arith8(Add, r29, r12)
 1236 r28 <- LoadMem8(r29)
 1237 r14 <- Get(r28)
0x5de3b4:
 1238 r19 <- Get(r11)
0x5de3b7:
 1239 r29 <- Const8(8)
 1240 r29 <- Arith8(Add, r29, r12)
 1241 r30 <- StoreMem(r29, r20)
0x5de3bc:
 1242 r28 <- Const8(4199232)
 1243 r16 <- Call(r28)
 1244 r29 <- CArg(r14)
 1245 r30 <- CArg(r15)
 1246 r31 <- CArg(r19)
 1247 r32 <- CArg(r18)
 1248 r2 <- Undefined
 1249 r3 <- Undefined
 1250 r4 <- Undefined
 1251 r5 <- Undefined
 1252 r6 <- Undefined
 1253 r7 <- Undefined
 1254 r8 <- Undefined
 1255 r9 <- Undefined
 1256 r10 <- Undefined
0x5de3c1:
 1257 r29 <- Const8(8)
 1258 r29 <- Arith8(Add, r29, r12)
 1259 r28 <- LoadMem8(r29)
 1260 r20 <- Get(r28)
0x5de3c6:
 1261 r28 <- Part { src: r16, offset: 0, size: 4 }
 1262 r29 <- Part { src: r16, offset: 0, size: 4 }
 1263 r28 <- Arith4(BitAnd, r28, r29)
 1264 r6 <- SignOf(r28)
 1265 r5 <- IsZero(r28)
 1266 r30 <- Part { src: r28, offset: 0, size: 1 }
 1267 r3 <- Parity(r28)
 1268 r2 <- Const1(0)
 1269 r10 <- Const1(0)
0x5de3c8:
 1270 r28 <- Not(r5)
 1271 r29 <- JmpIf { cond: r28, target: 314 }
0x5de3ce:
 1272 r28 <- Jmp(683)
0x5de3d3:
 1273 r29 <- Const8(0)
 1274 r29 <- Arith8(Add, r29, r12)
 1275 r28 <- LoadMem8(r29)
 1276 r14 <- Get(r28)
0x5de3d7:
 1277 r19 <- Get(r11)
0x5de3da:
 1278 r29 <- Const8(40)
 1279 r29 <- Arith8(Add, r29, r12)
 1280 r30 <- StoreMem(r29, r20)
0x5de3df:
 1281 r29 <- Const8(8)
 1282 r29 <- Arith8(Add, r29, r12)
 1283 r30 <- StoreMem(r29, r24)
0x5de3e4:
 1284 r28 <- Const8(4199232)
 1285 r16 <- Call(r28)
 1286 r29 <- CArg(r14)
 1287 r30 <- CArg(r15)
 1288 r31 <- CArg(r19)
 1289 r32 <- CArg(r18)
 1290 r2 <- Undefined
 1291 r3 <- Undefined
 1292 r4 <- Undefined
 1293 r5 <- Undefined
 1294 r6 <- Undefined
 1295 r7 <- Undefined
 1296 r8 <- Undefined
 1297 r9 <- Undefined
 1298 r10 <- Undefined
0x5de3e9:
 1299 r29 <- Const8(40)
 1300 r29 <- Arith8(Add, r29, r12)
 1301 r28 <- LoadMem8(r29)
 1302 r20 <- Get(r28)
0x5de3ee:
 1303 r14 <- Get(r24)
0x5de3f1:
 1304 r28 <- Part { src: r16, offset: 0, size: 4 }
 1305 r29 <- Part { src: r16, offset: 0, size: 4 }
 1306 r28 <- Arith4(BitAnd, r28, r29)
 1307 r6 <- SignOf(r28)
 1308 r5 <- IsZero(r28)
 1309 r30 <- Part { src: r28, offset: 0, size: 1 }
 1310 r3 <- Parity(r28)
 1311 r2 <- Const1(0)
 1312 r10 <- Const1(0)
0x5de3f3:
 1313 r28 <- Not(r5)
 1314 r29 <- JmpIf { cond: r28, target: 265 }
0x5de3f9:
 1315 r28 <- Jmp(683)
0x5de400:
 1316 r29 <- Const8(0)
 1317 r29 <- Arith8(Add, r29, r12)
 1318 r28 <- LoadMem8(r29)
 1319 r27 <- Get(r28)
0x5de404:
 1320 r14 <- Get(r27)
0x5de407:
 1321 r28 <- Const8(4199136)
 1322 r16 <- Call(r28)
 1323 r29 <- CArg(r14)
 1324 r30 <- CArg(r15)
 1325 r31 <- CArg(r19)
 1326 r32 <- CArg(r18)
 1327 r2 <- Undefined
 1328 r3 <- Undefined
 1329 r4 <- Undefined
 1330 r5 <- Undefined
 1331 r6 <- Undefined
 1332 r7 <- Undefined
 1333 r8 <- Undefined
 1334 r9 <- Undefined
 1335 r10 <- Undefined
0x5de40c:
 1336 r28 <- Const8(0)
 1337 r28 <- Arith8(Add, r28, r27)
 1338 r29 <- ArithK8(Mul, r16, 1)
 1339 r28 <- Arith8(Add, r28, r29)
 1340 r20 <- Get(r28)
0x5de410:
 1341 r28 <- Jmp(101)
0x5de415:
 1342 r29 <- Const8(72)
 1343 r29 <- Arith8(Add, r29, r12)
 1344 r28 <- LoadMem8(r29)
 1345 r17 <- Get(r28)
0x5de41a:
 1346 r28 <- Jmp(965)
0x5de41f:
 1347 r25 <- Get(r26)
0x5de422:
 1348 r28 <- Jmp(1172)


ssa pre-xform:
ssa program
  323 control nodes, 552 data nodes
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(27v1) -- Ancestral(AncestralName("R15"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(56v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(27v1) }
    DataNID(26v1) -- Ancestral(AncestralName("R14"))
    DataNID(40v1) -- ArithK(Add, DataNID(39v1), -8)
  ControlNID(57v1) -- Store { pred: ControlNID(56v1), addr: DataNID(40v1), value: DataNID(26v1) }
    DataNID(25v1) -- Ancestral(AncestralName("R13"))
    DataNID(44v1) -- ArithK(Add, DataNID(40v1), -8)
  ControlNID(58v1) -- Store { pred: ControlNID(57v1), addr: DataNID(44v1), value: DataNID(25v1) }
    DataNID(24v1) -- Ancestral(AncestralName("R12"))
    DataNID(45v1) -- ArithK(Add, DataNID(44v1), -8)
  ControlNID(59v1) -- Store { pred: ControlNID(58v1), addr: DataNID(45v1), value: DataNID(24v1) }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(46v1) -- ArithK(Add, DataNID(45v1), -8)
  ControlNID(60v1) -- Store { pred: ControlNID(59v1), addr: DataNID(46v1), value: DataNID(11v1) }
    DataNID(17v1) -- Ancestral(AncestralName("RBX"))
    DataNID(47v1) -- ArithK(Add, DataNID(46v1), -8)
  ControlNID(61v1) -- Store { pred: ControlNID(60v1), addr: DataNID(47v1), value: DataNID(17v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
    DataNID(56v1) -- ConstInt { size: ValueSize(8), value: 64 }
    DataNID(57v1) -- Arith(Add, DataNID(56v1), DataNID(49v1))
  ControlNID(62v1) -- Store { pred: ControlNID(61v1), addr: DataNID(57v1), value: DataNID(14v1) }
    DataNID(20v1) -- Ancestral(AncestralName("R8"))
    DataNID(58v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(59v1) -- Arith(Add, DataNID(58v1), DataNID(49v1))
  ControlNID(63v1) -- Store { pred: ControlNID(62v1), addr: DataNID(59v1), value: DataNID(20v1) }
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(60v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(61v1) -- Arith(Add, DataNID(60v1), DataNID(49v1))
  ControlNID(64v1) -- Store { pred: ControlNID(63v1), addr: DataNID(61v1), value: DataNID(19v1) }
    DataNID(21v1) -- Ancestral(AncestralName("R9"))
    DataNID(62v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(63v1) -- Arith(Add, DataNID(62v1), DataNID(49v1))
  ControlNID(65v1) -- Store { pred: ControlNID(64v1), addr: DataNID(63v1), value: DataNID(21v1) }
    DataNID(64v1) -- ConstInt { size: ValueSize(8), value: 4199040 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(42v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(41v1) -- ConstInt { size: ValueSize(4), value: 46 }
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
  ControlNID(66v1) -- Call { pred: ControlNID(65v1), callee: DataNID(64v1), args: [DataNID(19v1), DataNID(43v1), DataNID(19v1), DataNID(18v1)] }
    DataNID(65v1) -- ReturnValueOf(ControlNID(66v1))
    DataNID(65v1) -- ReturnValueOf(ControlNID(66v1))
    DataNID(75v1) -- Arith(BitAnd, DataNID(65v1), DataNID(65v1))
    DataNID(77v1) -- IsZero(DataNID(75v1))
  ControlNID(67v1) -- Branch { pred: ControlNID(66v1), cond: DataNID(77v1) }
  ControlNID(69v1) -- IfFalse(ControlNID(67v1))
  ControlNID(68v1) -- IfTrue(ControlNID(67v1))
  ControlNID(53v1) -- Merge { preds: [ControlNID(68v1), ControlNID(69v1)] }
    DataNID(82v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(83v1) -- Arith(Add, DataNID(82v1), DataNID(49v1))
  ControlNID(70v1) -- Load { pred: ControlNID(53v1), addr: DataNID(83v1) }
    DataNID(85v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(84v1) -- LoadedValueOf(ControlNID(70v1))
  ControlNID(71v1) -- Call { pred: ControlNID(70v1), callee: DataNID(85v1), args: [DataNID(84v1), DataNID(43v1), DataNID(19v1), DataNID(18v1)] }
  ControlNID(72v1) -- Jump { pred: ControlNID(71v1) }
  ControlNID(72v1) -- Jump { pred: ControlNID(71v1) }
  ControlNID(69v1) -- IfFalse(ControlNID(67v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(69v1), ControlNID(72v1), ControlNID(72v1)] }
    DataNID(101v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(102v1) -- Arith(Add, DataNID(101v1), DataNID(49v1))
  ControlNID(73v1) -- Load { pred: ControlNID(2v1), addr: DataNID(102v1) }
    DataNID(103v1) -- LoadedValueOf(ControlNID(73v1))
    DataNID(86v1) -- ReturnValueOf(ControlNID(71v1))
    DataNID(98v1) -- ArithK(Mul, DataNID(86v1), 1)
    DataNID(96v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(97v1) -- Arith(Add, DataNID(96v1), DataNID(84v1))
    DataNID(99v1) -- Arith(Add, DataNID(97v1), DataNID(98v1))
    DataNID(100v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(69v1), DataNID(65v1)), (ControlNID(72v1), DataNID(99v1))] })
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(108v1) -- IsZero(DataNID(104v1))
  ControlNID(74v1) -- Branch { pred: ControlNID(73v1), cond: DataNID(108v1) }
  ControlNID(76v1) -- IfFalse(ControlNID(74v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(76v1)] }
    DataNID(111v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(112v1) -- Arith(Add, DataNID(111v1), DataNID(49v1))
  ControlNID(77v1) -- Load { pred: ControlNID(3v1), addr: DataNID(112v1) }
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(114v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(115v1) -- Arith(Add, DataNID(114v1), DataNID(113v1))
  ControlNID(78v1) -- Load { pred: ControlNID(77v1), addr: DataNID(115v1) }
    DataNID(117v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(116v1) -- LoadedValueOf(ControlNID(78v1))
    DataNID(118v1) -- Arith(Sub, DataNID(116v1), DataNID(117v1))
    DataNID(122v1) -- IsZero(DataNID(118v1))
  ControlNID(79v1) -- Branch { pred: ControlNID(78v1), cond: DataNID(122v1) }
  ControlNID(81v1) -- IfFalse(ControlNID(79v1))
  ControlNID(4v1) -- Merge { preds: [ControlNID(81v1)] }
    DataNID(125v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(126v1) -- Arith(Add, DataNID(125v1), DataNID(15v1))
  ControlNID(82v1) -- Load { pred: ControlNID(4v1), addr: DataNID(126v1) }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(139v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(140v1) -- Arith(Add, DataNID(139v1), DataNID(49v1))
  ControlNID(83v1) -- Store { pred: ControlNID(82v1), addr: DataNID(140v1), value: DataNID(18v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(141v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(142v1) -- Arith(Add, DataNID(141v1), DataNID(127v1))
  ControlNID(84v1) -- Load { pred: ControlNID(83v1), addr: DataNID(142v1) }
    DataNID(144v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(143v1) -- LoadedValueOf(ControlNID(84v1))
    DataNID(145v1) -- Arith(Sub, DataNID(143v1), DataNID(144v1))
    DataNID(149v1) -- IsZero(DataNID(145v1))
  ControlNID(85v1) -- Branch { pred: ControlNID(84v1), cond: DataNID(149v1) }
  ControlNID(87v1) -- IfFalse(ControlNID(85v1))
  ControlNID(86v1) -- IfTrue(ControlNID(85v1))
  ControlNID(31v1) -- Merge { preds: [ControlNID(86v1), ControlNID(87v1)] }
    DataNID(154v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(155v1) -- Arith(Add, DataNID(154v1), DataNID(49v1))
  ControlNID(88v1) -- Load { pred: ControlNID(31v1), addr: DataNID(155v1) }
    DataNID(153v1) -- Phi(Phi { merge_nid: ControlNID(31v1), values: [(ControlNID(87v1), DataNID(100v1))] })
    DataNID(171v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(172v1) -- Arith(Add, DataNID(171v1), DataNID(49v1))
  ControlNID(89v1) -- Store { pred: ControlNID(88v1), addr: DataNID(172v1), value: DataNID(153v1) }
    DataNID(173v1) -- ConstInt { size: ValueSize(8), value: 6451424 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(169v1) -- Part { src: DataNID(113v1), offset: 4, size: 4 }
    DataNID(168v1) -- ConstInt { size: ValueSize(4), value: 10 }
    DataNID(170v1) -- Concat { lo: DataNID(168v1), hi: DataNID(169v1) }
    DataNID(152v1) -- Phi(Phi { merge_nid: ControlNID(31v1), values: [(ControlNID(87v1), DataNID(43v1))] })
    DataNID(160v1) -- Part { src: DataNID(152v1), offset: 4, size: 4 }
    DataNID(158v1) -- Part { src: DataNID(152v1), offset: 0, size: 4 }
    DataNID(157v1) -- Part { src: DataNID(152v1), offset: 0, size: 4 }
    DataNID(159v1) -- Arith(BitXor, DataNID(157v1), DataNID(158v1))
    DataNID(161v1) -- Concat { lo: DataNID(159v1), hi: DataNID(160v1) }
    DataNID(156v1) -- LoadedValueOf(ControlNID(88v1))
  ControlNID(90v1) -- Call { pred: ControlNID(89v1), callee: DataNID(173v1), args: [DataNID(156v1), DataNID(161v1), DataNID(170v1), DataNID(18v1)] }
    DataNID(184v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(185v1) -- Arith(Add, DataNID(184v1), DataNID(49v1))
  ControlNID(91v1) -- Load { pred: ControlNID(90v1), addr: DataNID(185v1) }
    DataNID(187v1) -- ConstInt { size: ValueSize(8), value: -1 }
    DataNID(174v1) -- ReturnValueOf(ControlNID(90v1))
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(192v1) -- IsZero(DataNID(188v1))
  ControlNID(92v1) -- Branch { pred: ControlNID(91v1), cond: DataNID(192v1) }
  ControlNID(148v1) -- IfFalse(ControlNID(92v1))
  ControlNID(94v1) -- Merge { preds: [ControlNID(147v1), ControlNID(148v1)] }
  ControlNID(32v1) -- Merge { preds: [ControlNID(94v1)] }
    DataNID(195v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(196v1) -- Arith(Add, DataNID(195v1), DataNID(15v1))
  ControlNID(95v1) -- Load { pred: ControlNID(32v1), addr: DataNID(196v1) }
    DataNID(186v1) -- LoadedValueOf(ControlNID(91v1))
    DataNID(198v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(199v1) -- Arith(Add, DataNID(198v1), DataNID(49v1))
  ControlNID(96v1) -- Store { pred: ControlNID(95v1), addr: DataNID(199v1), value: DataNID(186v1) }
    DataNID(197v1) -- LoadedValueOf(ControlNID(95v1))
    DataNID(200v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(201v1) -- Arith(Add, DataNID(200v1), DataNID(197v1))
  ControlNID(97v1) -- Load { pred: ControlNID(96v1), addr: DataNID(201v1) }
    DataNID(212v1) -- ConstInt { size: ValueSize(8), value: 4206915 }
    DataNID(203v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(202v1) -- LoadedValueOf(ControlNID(97v1))
    DataNID(204v1) -- Arith(Sub, DataNID(202v1), DataNID(203v1))
    DataNID(208v1) -- IsZero(DataNID(204v1))
    DataNID(211v1) -- Not(DataNID(208v1))
  ControlNID(98v1) -- BranchIndirect { pred: ControlNID(97v1), cond: DataNID(211v1), addr: DataNID(212v1) }
    DataNID(213v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(214v1) -- Arith(Add, DataNID(213v1), DataNID(49v1))
  ControlNID(99v1) -- Load { pred: ControlNID(98v1), addr: DataNID(214v1) }
    DataNID(216v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(217v1) -- Arith(Add, DataNID(216v1), DataNID(49v1))
  ControlNID(100v1) -- Load { pred: ControlNID(99v1), addr: DataNID(217v1) }
    DataNID(219v1) -- ConstInt { size: ValueSize(8), value: 64 }
    DataNID(220v1) -- Arith(Add, DataNID(219v1), DataNID(49v1))
  ControlNID(101v1) -- Load { pred: ControlNID(100v1), addr: DataNID(220v1) }
    DataNID(215v1) -- LoadedValueOf(ControlNID(99v1))
    DataNID(222v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(223v1) -- Arith(Add, DataNID(222v1), DataNID(215v1))
  ControlNID(102v1) -- Load { pred: ControlNID(101v1), addr: DataNID(223v1) }
    DataNID(225v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(226v1) -- Arith(Add, DataNID(225v1), DataNID(197v1))
  ControlNID(103v1) -- Load { pred: ControlNID(102v1), addr: DataNID(226v1) }
    DataNID(227v1) -- LoadedValueOf(ControlNID(103v1))
  ControlNID(104v1) -- Load { pred: ControlNID(103v1), addr: DataNID(227v1) }
    DataNID(228v1) -- LoadedValueOf(ControlNID(104v1))
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(224v1) -- LoadedValueOf(ControlNID(102v1))
    DataNID(218v1) -- LoadedValueOf(ControlNID(100v1))
    DataNID(221v1) -- LoadedValueOf(ControlNID(101v1))
  ControlNID(105v1) -- Call { pred: ControlNID(104v1), callee: DataNID(228v1), args: [DataNID(221v1), DataNID(218v1), DataNID(224v1), DataNID(188v1)] }
    DataNID(229v1) -- ReturnValueOf(ControlNID(105v1))
    DataNID(229v1) -- ReturnValueOf(ControlNID(105v1))
    DataNID(239v1) -- Arith(BitAnd, DataNID(229v1), DataNID(229v1))
    DataNID(241v1) -- IsZero(DataNID(239v1))
  ControlNID(106v1) -- Branch { pred: ControlNID(105v1), cond: DataNID(241v1) }
  ControlNID(108v1) -- IfFalse(ControlNID(106v1))
  ControlNID(33v1) -- Merge { preds: [ControlNID(108v1)] }
    DataNID(246v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(247v1) -- Arith(Add, DataNID(246v1), DataNID(49v1))
  ControlNID(109v1) -- Load { pred: ControlNID(33v1), addr: DataNID(247v1) }
    DataNID(249v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(250v1) -- Arith(Add, DataNID(249v1), DataNID(229v1))
  ControlNID(110v1) -- Load { pred: ControlNID(109v1), addr: DataNID(250v1) }
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(131v1) -- Part { src: DataNID(27v1), offset: 4, size: 4 }
    DataNID(129v1) -- Part { src: DataNID(27v1), offset: 0, size: 4 }
    DataNID(128v1) -- Part { src: DataNID(27v1), offset: 0, size: 4 }
    DataNID(130v1) -- Arith(BitXor, DataNID(128v1), DataNID(129v1))
    DataNID(132v1) -- Concat { lo: DataNID(130v1), hi: DataNID(131v1) }
    DataNID(262v1) -- ArithK(Mul, DataNID(132v1), 8)
    DataNID(260v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(261v1) -- Arith(Add, DataNID(260v1), DataNID(218v1))
    DataNID(263v1) -- Arith(Add, DataNID(261v1), DataNID(262v1))
  ControlNID(111v1) -- Store { pred: ControlNID(110v1), addr: DataNID(263v1), value: DataNID(188v1) }
  ControlNID(112v1) -- TODO { pred: ControlNID(111v1), label: "unsupported: movzx edi,byte ptr [r8]" }
    DataNID(252v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(251v1) -- LoadedValueOf(ControlNID(110v1))
    DataNID(253v1) -- Arith(Sub, DataNID(251v1), DataNID(252v1))
    DataNID(257v1) -- IsZero(DataNID(253v1))
  ControlNID(113v1) -- Branch { pred: ControlNID(112v1), cond: DataNID(257v1) }
  ControlNID(115v1) -- IfFalse(ControlNID(113v1))
  ControlNID(114v1) -- IfTrue(ControlNID(113v1))
  ControlNID(27v1) -- Merge { preds: [ControlNID(114v1), ControlNID(115v1)] }
    DataNID(264v1) -- Phi(Phi { merge_nid: ControlNID(27v1), values: [(ControlNID(115v1), DataNID(221v1))] })
    DataNID(266v1) -- Part { src: DataNID(264v1), offset: 0, size: 1 }
    DataNID(265v1) -- Part { src: DataNID(264v1), offset: 0, size: 1 }
    DataNID(267v1) -- Arith(BitAnd, DataNID(265v1), DataNID(266v1))
    DataNID(269v1) -- IsZero(DataNID(267v1))
  ControlNID(116v1) -- Branch { pred: ControlNID(27v1), cond: DataNID(269v1) }
  ControlNID(294v1) -- IfFalse(ControlNID(116v1))
  ControlNID(118v1) -- Merge { preds: [ControlNID(293v1), ControlNID(294v1)] }
  ControlNID(28v1) -- Merge { preds: [ControlNID(118v1)] }
    DataNID(277v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(278v1) -- Arith(Add, DataNID(277v1), DataNID(100v1))
    DataNID(282v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(283v1) -- Arith(Add, DataNID(282v1), DataNID(49v1))
  ControlNID(121v1) -- Store { pred: ControlNID(28v1), addr: DataNID(283v1), value: DataNID(278v1) }
    DataNID(284v1) -- ConstInt { size: ValueSize(8), value: 4199040 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(280v1) -- Part { src: DataNID(43v1), offset: 4, size: 4 }
    DataNID(279v1) -- ConstInt { size: ValueSize(4), value: 46 }
    DataNID(281v1) -- Concat { lo: DataNID(279v1), hi: DataNID(280v1) }
    DataNID(278v1) -- Arith(Add, DataNID(277v1), DataNID(100v1))
  ControlNID(122v1) -- Call { pred: ControlNID(121v1), callee: DataNID(284v1), args: [DataNID(278v1), DataNID(281v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(285v1) -- ReturnValueOf(ControlNID(122v1))
    DataNID(285v1) -- ReturnValueOf(ControlNID(122v1))
    DataNID(295v1) -- Arith(BitAnd, DataNID(285v1), DataNID(285v1))
    DataNID(297v1) -- IsZero(DataNID(295v1))
  ControlNID(123v1) -- Branch { pred: ControlNID(122v1), cond: DataNID(297v1) }
  ControlNID(125v1) -- IfFalse(ControlNID(123v1))
  ControlNID(29v1) -- Merge { preds: [ControlNID(125v1)] }
    DataNID(341v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(342v1) -- Arith(Add, DataNID(341v1), DataNID(49v1))
  ControlNID(133v1) -- Load { pred: ControlNID(29v1), addr: DataNID(342v1) }
    DataNID(344v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(345v1) -- Arith(Add, DataNID(344v1), DataNID(49v1))
  ControlNID(134v1) -- Load { pred: ControlNID(133v1), addr: DataNID(345v1) }
    DataNID(346v1) -- LoadedValueOf(ControlNID(134v1))
    DataNID(362v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(363v1) -- Arith(Add, DataNID(362v1), DataNID(346v1))
  ControlNID(135v1) -- Load { pred: ControlNID(134v1), addr: DataNID(363v1) }
    DataNID(364v1) -- LoadedValueOf(ControlNID(135v1))
    DataNID(347v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(348v1) -- Arith(Add, DataNID(132v1), DataNID(347v1))
    DataNID(365v1) -- Arith(Sub, DataNID(348v1), DataNID(364v1))
    DataNID(367v1) -- CarryOf(DataNID(365v1))
    DataNID(372v1) -- Not(DataNID(367v1))
  ControlNID(136v1) -- Branch { pred: ControlNID(135v1), cond: DataNID(372v1) }
  ControlNID(138v1) -- IfFalse(ControlNID(136v1))
  ControlNID(124v1) -- IfTrue(ControlNID(123v1))
  ControlNID(43v1) -- Merge { preds: [ControlNID(124v1), ControlNID(125v1)] }
    DataNID(302v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(303v1) -- Arith(Add, DataNID(302v1), DataNID(49v1))
  ControlNID(126v1) -- Load { pred: ControlNID(43v1), addr: DataNID(303v1) }
    DataNID(313v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(304v1) -- LoadedValueOf(ControlNID(126v1))
  ControlNID(127v1) -- Call { pred: ControlNID(126v1), callee: DataNID(313v1), args: [DataNID(304v1), DataNID(281v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(324v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(325v1) -- Arith(Add, DataNID(324v1), DataNID(49v1))
  ControlNID(128v1) -- Load { pred: ControlNID(127v1), addr: DataNID(325v1) }
    DataNID(326v1) -- LoadedValueOf(ControlNID(128v1))
    DataNID(331v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(332v1) -- Arith(Add, DataNID(331v1), DataNID(326v1))
  ControlNID(129v1) -- Load { pred: ControlNID(128v1), addr: DataNID(332v1) }
    DataNID(333v1) -- LoadedValueOf(ControlNID(129v1))
    DataNID(305v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(306v1) -- Arith(Add, DataNID(132v1), DataNID(305v1))
    DataNID(334v1) -- Arith(Sub, DataNID(306v1), DataNID(333v1))
    DataNID(336v1) -- CarryOf(DataNID(334v1))
  ControlNID(130v1) -- Branch { pred: ControlNID(129v1), cond: DataNID(336v1) }
  ControlNID(132v1) -- IfFalse(ControlNID(130v1))
  ControlNID(131v1) -- IfTrue(ControlNID(130v1))
  ControlNID(30v1) -- Merge { preds: [ControlNID(131v1), ControlNID(132v1), ControlNID(138v1)] }
    DataNID(383v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(384v1) -- Arith(Add, DataNID(383v1), DataNID(25v1))
  ControlNID(143v1) -- Load { pred: ControlNID(30v1), addr: DataNID(384v1) }
    DataNID(385v1) -- LoadedValueOf(ControlNID(143v1))
    DataNID(386v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(387v1) -- Arith(Add, DataNID(386v1), DataNID(385v1))
  ControlNID(144v1) -- Load { pred: ControlNID(143v1), addr: DataNID(387v1) }
    DataNID(389v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(388v1) -- LoadedValueOf(ControlNID(144v1))
    DataNID(390v1) -- Arith(Sub, DataNID(388v1), DataNID(389v1))
    DataNID(394v1) -- IsZero(DataNID(390v1))
    DataNID(397v1) -- Not(DataNID(394v1))
  ControlNID(145v1) -- Branch { pred: ControlNID(144v1), cond: DataNID(397v1) }
  ControlNID(147v1) -- IfFalse(ControlNID(145v1))
  ControlNID(146v1) -- IfTrue(ControlNID(145v1))
  ControlNID(87v1) -- IfFalse(ControlNID(85v1))
  ControlNID(5v1) -- Merge { preds: [ControlNID(87v1), ControlNID(146v1), ControlNID(147v1)] }
    DataNID(398v1) -- Phi(Phi { merge_nid: ControlNID(5v1), values: [(ControlNID(87v1), DataNID(15v1)), (ControlNID(147v1), DataNID(25v1))] })
    DataNID(399v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(400v1) -- Arith(Add, DataNID(399v1), DataNID(398v1))
  ControlNID(149v1) -- Load { pred: ControlNID(5v1), addr: DataNID(400v1) }
    DataNID(401v1) -- LoadedValueOf(ControlNID(149v1))
    DataNID(402v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(403v1) -- Arith(Add, DataNID(402v1), DataNID(49v1))
  ControlNID(150v1) -- Store { pred: ControlNID(149v1), addr: DataNID(403v1), value: DataNID(401v1) }
    DataNID(404v1) -- Arith(BitAnd, DataNID(401v1), DataNID(401v1))
    DataNID(406v1) -- IsZero(DataNID(404v1))
  ControlNID(151v1) -- Branch { pred: ControlNID(150v1), cond: DataNID(406v1) }
  ControlNID(153v1) -- IfFalse(ControlNID(151v1))
  ControlNID(6v1) -- Merge { preds: [ControlNID(153v1)] }
    DataNID(423v1) -- ConstInt { size: ValueSize(4), value: 3 }
    DataNID(422v1) -- Part { src: DataNID(404v1), offset: 0, size: 4 }
    DataNID(424v1) -- Arith(BitAnd, DataNID(422v1), DataNID(423v1))
    DataNID(430v1) -- IsZero(DataNID(424v1))
  ControlNID(154v1) -- Branch { pred: ControlNID(6v1), cond: DataNID(430v1) }
  ControlNID(156v1) -- IfFalse(ControlNID(154v1))
  ControlNID(7v1) -- Merge { preds: [ControlNID(156v1)] }
    DataNID(433v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(425v1) -- Part { src: DataNID(404v1), offset: 4, size: 4 }
    DataNID(426v1) -- Concat { lo: DataNID(424v1), hi: DataNID(425v1) }
    DataNID(434v1) -- Arith(Sub, DataNID(426v1), DataNID(433v1))
    DataNID(438v1) -- IsZero(DataNID(434v1))
  ControlNID(157v1) -- Branch { pred: ControlNID(7v1), cond: DataNID(438v1) }
  ControlNID(159v1) -- IfFalse(ControlNID(157v1))
  ControlNID(8v1) -- Merge { preds: [ControlNID(159v1)] }
    DataNID(441v1) -- ConstInt { size: ValueSize(8), value: 2 }
    DataNID(442v1) -- Arith(Sub, DataNID(434v1), DataNID(441v1))
    DataNID(446v1) -- IsZero(DataNID(442v1))
  ControlNID(160v1) -- Branch { pred: ControlNID(8v1), cond: DataNID(446v1) }
  ControlNID(162v1) -- IfFalse(ControlNID(160v1))
  ControlNID(9v1) -- Merge { preds: [ControlNID(162v1)] }
    DataNID(449v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(450v1) -- Arith(Add, DataNID(449v1), DataNID(127v1))
  ControlNID(163v1) -- Load { pred: ControlNID(9v1), addr: DataNID(450v1) }
    DataNID(100v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(69v1), DataNID(65v1)), (ControlNID(72v1), DataNID(99v1))] })
    DataNID(452v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(453v1) -- Arith(Add, DataNID(452v1), DataNID(49v1))
  ControlNID(164v1) -- Store { pred: ControlNID(163v1), addr: DataNID(453v1), value: DataNID(100v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(454v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(455v1) -- Arith(Add, DataNID(454v1), DataNID(49v1))
  ControlNID(165v1) -- Store { pred: ControlNID(164v1), addr: DataNID(455v1), value: DataNID(127v1) }
    DataNID(451v1) -- LoadedValueOf(ControlNID(163v1))
    DataNID(456v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(457v1) -- Arith(Add, DataNID(456v1), DataNID(49v1))
  ControlNID(166v1) -- Store { pred: ControlNID(165v1), addr: DataNID(457v1), value: DataNID(451v1) }
    DataNID(458v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(442v1) -- Arith(Sub, DataNID(434v1), DataNID(441v1))
    DataNID(451v1) -- LoadedValueOf(ControlNID(163v1))
  ControlNID(167v1) -- Call { pred: ControlNID(166v1), callee: DataNID(458v1), args: [DataNID(451v1), DataNID(442v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(469v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(470v1) -- Arith(Add, DataNID(469v1), DataNID(49v1))
  ControlNID(168v1) -- Load { pred: ControlNID(167v1), addr: DataNID(470v1) }
    DataNID(472v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(473v1) -- Arith(Add, DataNID(472v1), DataNID(49v1))
  ControlNID(169v1) -- Load { pred: ControlNID(168v1), addr: DataNID(473v1) }
    DataNID(459v1) -- ReturnValueOf(ControlNID(167v1))
    DataNID(475v1) -- Arith(Sub, DataNID(459v1), DataNID(104v1))
    DataNID(479v1) -- IsZero(DataNID(475v1))
  ControlNID(170v1) -- Branch { pred: ControlNID(169v1), cond: DataNID(479v1) }
  ControlNID(172v1) -- IfFalse(ControlNID(170v1))
  ControlNID(171v1) -- IfTrue(ControlNID(170v1))
  ControlNID(51v1) -- Merge { preds: [ControlNID(171v1), ControlNID(172v1)] }
    DataNID(482v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(483v1) -- Arith(Add, DataNID(482v1), DataNID(49v1))
  ControlNID(173v1) -- Load { pred: ControlNID(51v1), addr: DataNID(483v1) }
    DataNID(474v1) -- LoadedValueOf(ControlNID(169v1))
    DataNID(485v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(486v1) -- Arith(Add, DataNID(485v1), DataNID(49v1))
  ControlNID(174v1) -- Store { pred: ControlNID(173v1), addr: DataNID(486v1), value: DataNID(474v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(487v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(488v1) -- Arith(Add, DataNID(487v1), DataNID(49v1))
  ControlNID(175v1) -- Store { pred: ControlNID(174v1), addr: DataNID(488v1), value: DataNID(127v1) }
    DataNID(489v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(471v1) -- LoadedValueOf(ControlNID(168v1))
    DataNID(484v1) -- LoadedValueOf(ControlNID(173v1))
  ControlNID(176v1) -- Call { pred: ControlNID(175v1), callee: DataNID(489v1), args: [DataNID(484v1), DataNID(471v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(500v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(501v1) -- Arith(Add, DataNID(500v1), DataNID(49v1))
  ControlNID(177v1) -- Load { pred: ControlNID(176v1), addr: DataNID(501v1) }
    DataNID(490v1) -- ReturnValueOf(ControlNID(176v1))
    DataNID(504v1) -- Part { src: DataNID(490v1), offset: 0, size: 4 }
    DataNID(503v1) -- Part { src: DataNID(490v1), offset: 0, size: 4 }
    DataNID(505v1) -- Arith(BitAnd, DataNID(503v1), DataNID(504v1))
    DataNID(507v1) -- IsZero(DataNID(505v1))
    DataNID(512v1) -- Not(DataNID(507v1))
  ControlNID(178v1) -- Branch { pred: ControlNID(177v1), cond: DataNID(512v1) }
  ControlNID(180v1) -- IfFalse(ControlNID(178v1))
  ControlNID(179v1) -- IfTrue(ControlNID(178v1))
  ControlNID(172v1) -- IfFalse(ControlNID(170v1))
  ControlNID(10v1) -- Merge { preds: [ControlNID(172v1), ControlNID(179v1), ControlNID(180v1)] }
  ControlNID(162v1) -- IfFalse(ControlNID(160v1))
  ControlNID(161v1) -- IfTrue(ControlNID(160v1))
  ControlNID(11v1) -- Merge { preds: [ControlNID(161v1), ControlNID(162v1), ControlNID(10v1)] }
    DataNID(513v1) -- Phi(Phi { merge_nid: ControlNID(10v1), values: [(ControlNID(172v1), DataNID(127v1)), (ControlNID(180v1), DataNID(127v1))] })
    DataNID(517v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(518v1) -- Arith(Add, DataNID(517v1), DataNID(513v1))
    DataNID(521v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(127v1)), (ControlNID(10v1), DataNID(518v1))] })
    DataNID(522v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(523v1) -- Arith(Add, DataNID(522v1), DataNID(521v1))
  ControlNID(182v1) -- Load { pred: ControlNID(11v1), addr: DataNID(523v1) }
    DataNID(520v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(100v1)), (ControlNID(10v1), DataNID(474v1))] })
    DataNID(525v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(526v1) -- Arith(Add, DataNID(525v1), DataNID(49v1))
  ControlNID(183v1) -- Store { pred: ControlNID(182v1), addr: DataNID(526v1), value: DataNID(520v1) }
    DataNID(524v1) -- LoadedValueOf(ControlNID(182v1))
    DataNID(527v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(528v1) -- Arith(Add, DataNID(527v1), DataNID(49v1))
  ControlNID(184v1) -- Store { pred: ControlNID(183v1), addr: DataNID(528v1), value: DataNID(524v1) }
    DataNID(529v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(519v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(442v1)), (ControlNID(10v1), DataNID(471v1))] })
    DataNID(524v1) -- LoadedValueOf(ControlNID(182v1))
  ControlNID(185v1) -- Call { pred: ControlNID(184v1), callee: DataNID(529v1), args: [DataNID(524v1), DataNID(519v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(540v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(541v1) -- Arith(Add, DataNID(540v1), DataNID(49v1))
  ControlNID(186v1) -- Load { pred: ControlNID(185v1), addr: DataNID(541v1) }
    DataNID(543v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(544v1) -- Arith(Add, DataNID(543v1), DataNID(49v1))
  ControlNID(187v1) -- Load { pred: ControlNID(186v1), addr: DataNID(544v1) }
    DataNID(530v1) -- ReturnValueOf(ControlNID(185v1))
    DataNID(546v1) -- Arith(Sub, DataNID(530v1), DataNID(104v1))
    DataNID(550v1) -- IsZero(DataNID(546v1))
  ControlNID(188v1) -- Branch { pred: ControlNID(187v1), cond: DataNID(550v1) }
  ControlNID(190v1) -- IfFalse(ControlNID(188v1))
  ControlNID(189v1) -- IfTrue(ControlNID(188v1))
  ControlNID(49v1) -- Merge { preds: [ControlNID(189v1), ControlNID(190v1)] }
    DataNID(553v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(554v1) -- Arith(Add, DataNID(553v1), DataNID(49v1))
  ControlNID(191v1) -- Load { pred: ControlNID(49v1), addr: DataNID(554v1) }
    DataNID(545v1) -- LoadedValueOf(ControlNID(187v1))
    DataNID(556v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(557v1) -- Arith(Add, DataNID(556v1), DataNID(49v1))
  ControlNID(192v1) -- Store { pred: ControlNID(191v1), addr: DataNID(557v1), value: DataNID(545v1) }
    DataNID(558v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(542v1) -- LoadedValueOf(ControlNID(186v1))
    DataNID(555v1) -- LoadedValueOf(ControlNID(191v1))
  ControlNID(193v1) -- Call { pred: ControlNID(192v1), callee: DataNID(558v1), args: [DataNID(555v1), DataNID(542v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(569v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(570v1) -- Arith(Add, DataNID(569v1), DataNID(49v1))
  ControlNID(194v1) -- Load { pred: ControlNID(193v1), addr: DataNID(570v1) }
    DataNID(559v1) -- ReturnValueOf(ControlNID(193v1))
    DataNID(573v1) -- Part { src: DataNID(559v1), offset: 0, size: 4 }
    DataNID(572v1) -- Part { src: DataNID(559v1), offset: 0, size: 4 }
    DataNID(574v1) -- Arith(BitAnd, DataNID(572v1), DataNID(573v1))
    DataNID(576v1) -- IsZero(DataNID(574v1))
    DataNID(581v1) -- Not(DataNID(576v1))
  ControlNID(195v1) -- Branch { pred: ControlNID(194v1), cond: DataNID(581v1) }
  ControlNID(197v1) -- IfFalse(ControlNID(195v1))
  ControlNID(196v1) -- IfTrue(ControlNID(195v1))
  ControlNID(190v1) -- IfFalse(ControlNID(188v1))
  ControlNID(12v1) -- Merge { preds: [ControlNID(190v1), ControlNID(196v1), ControlNID(197v1)] }
  ControlNID(159v1) -- IfFalse(ControlNID(157v1))
  ControlNID(158v1) -- IfTrue(ControlNID(157v1))
  ControlNID(13v1) -- Merge { preds: [ControlNID(158v1), ControlNID(159v1), ControlNID(12v1)] }
    DataNID(590v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(591v1) -- Arith(Add, DataNID(521v1), DataNID(590v1))
    DataNID(600v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(127v1)), (ControlNID(12v1), DataNID(591v1))] })
    DataNID(601v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(602v1) -- Arith(Add, DataNID(601v1), DataNID(600v1))
  ControlNID(199v1) -- Load { pred: ControlNID(13v1), addr: DataNID(602v1) }
    DataNID(599v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(100v1)), (ControlNID(12v1), DataNID(545v1))] })
    DataNID(604v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(605v1) -- Arith(Add, DataNID(604v1), DataNID(49v1))
  ControlNID(200v1) -- Store { pred: ControlNID(199v1), addr: DataNID(605v1), value: DataNID(599v1) }
    DataNID(603v1) -- LoadedValueOf(ControlNID(199v1))
    DataNID(606v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(607v1) -- Arith(Add, DataNID(606v1), DataNID(49v1))
  ControlNID(201v1) -- Store { pred: ControlNID(200v1), addr: DataNID(607v1), value: DataNID(603v1) }
    DataNID(608v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(598v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(434v1)), (ControlNID(12v1), DataNID(542v1))] })
    DataNID(603v1) -- LoadedValueOf(ControlNID(199v1))
  ControlNID(202v1) -- Call { pred: ControlNID(201v1), callee: DataNID(608v1), args: [DataNID(603v1), DataNID(598v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(619v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(620v1) -- Arith(Add, DataNID(619v1), DataNID(49v1))
  ControlNID(203v1) -- Load { pred: ControlNID(202v1), addr: DataNID(620v1) }
    DataNID(622v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(623v1) -- Arith(Add, DataNID(622v1), DataNID(49v1))
  ControlNID(204v1) -- Load { pred: ControlNID(203v1), addr: DataNID(623v1) }
    DataNID(609v1) -- ReturnValueOf(ControlNID(202v1))
    DataNID(625v1) -- Arith(Sub, DataNID(609v1), DataNID(104v1))
    DataNID(629v1) -- IsZero(DataNID(625v1))
  ControlNID(205v1) -- Branch { pred: ControlNID(204v1), cond: DataNID(629v1) }
  ControlNID(207v1) -- IfFalse(ControlNID(205v1))
  ControlNID(206v1) -- IfTrue(ControlNID(205v1))
  ControlNID(47v1) -- Merge { preds: [ControlNID(206v1), ControlNID(207v1)] }
    DataNID(632v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(633v1) -- Arith(Add, DataNID(632v1), DataNID(49v1))
  ControlNID(208v1) -- Load { pred: ControlNID(47v1), addr: DataNID(633v1) }
    DataNID(624v1) -- LoadedValueOf(ControlNID(204v1))
    DataNID(635v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(636v1) -- Arith(Add, DataNID(635v1), DataNID(49v1))
  ControlNID(209v1) -- Store { pred: ControlNID(208v1), addr: DataNID(636v1), value: DataNID(624v1) }
    DataNID(637v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(621v1) -- LoadedValueOf(ControlNID(203v1))
    DataNID(634v1) -- LoadedValueOf(ControlNID(208v1))
  ControlNID(210v1) -- Call { pred: ControlNID(209v1), callee: DataNID(637v1), args: [DataNID(634v1), DataNID(621v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(648v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(649v1) -- Arith(Add, DataNID(648v1), DataNID(49v1))
  ControlNID(211v1) -- Load { pred: ControlNID(210v1), addr: DataNID(649v1) }
    DataNID(638v1) -- ReturnValueOf(ControlNID(210v1))
    DataNID(652v1) -- Part { src: DataNID(638v1), offset: 0, size: 4 }
    DataNID(651v1) -- Part { src: DataNID(638v1), offset: 0, size: 4 }
    DataNID(653v1) -- Arith(BitAnd, DataNID(651v1), DataNID(652v1))
    DataNID(655v1) -- IsZero(DataNID(653v1))
    DataNID(660v1) -- Not(DataNID(655v1))
  ControlNID(212v1) -- Branch { pred: ControlNID(211v1), cond: DataNID(660v1) }
  ControlNID(214v1) -- IfFalse(ControlNID(212v1))
  ControlNID(213v1) -- IfTrue(ControlNID(212v1))
  ControlNID(207v1) -- IfFalse(ControlNID(205v1))
  ControlNID(14v1) -- Merge { preds: [ControlNID(207v1), ControlNID(213v1), ControlNID(214v1)] }
    DataNID(661v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(662v1) -- Arith(Add, DataNID(661v1), DataNID(49v1))
  ControlNID(216v1) -- Load { pred: ControlNID(14v1), addr: DataNID(662v1) }
    DataNID(663v1) -- LoadedValueOf(ControlNID(216v1))
    DataNID(664v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(414v1) -- Part { src: DataNID(18v1), offset: 4, size: 4 }
    DataNID(412v1) -- Part { src: DataNID(18v1), offset: 0, size: 4 }
    DataNID(411v1) -- Part { src: DataNID(18v1), offset: 0, size: 4 }
    DataNID(413v1) -- Arith(BitXor, DataNID(411v1), DataNID(412v1))
    DataNID(415v1) -- Concat { lo: DataNID(413v1), hi: DataNID(414v1) }
    DataNID(665v1) -- Arith(Add, DataNID(415v1), DataNID(664v1))
    DataNID(680v1) -- Arith(Sub, DataNID(665v1), DataNID(663v1))
    DataNID(684v1) -- IsZero(DataNID(680v1))
  ControlNID(217v1) -- Branch { pred: ControlNID(216v1), cond: DataNID(684v1) }
  ControlNID(219v1) -- IfFalse(ControlNID(217v1))
  ControlNID(156v1) -- IfFalse(ControlNID(154v1))
  ControlNID(155v1) -- IfTrue(ControlNID(154v1))
  ControlNID(15v1) -- Merge { preds: [ControlNID(155v1), ControlNID(156v1), ControlNID(219v1)] }
    DataNID(398v1) -- Phi(Phi { merge_nid: ControlNID(5v1), values: [(ControlNID(87v1), DataNID(15v1)), (ControlNID(147v1), DataNID(25v1))] })
    DataNID(689v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(690v1) -- Arith(Add, DataNID(689v1), DataNID(49v1))
  ControlNID(220v1) -- Store { pred: ControlNID(15v1), addr: DataNID(690v1), value: DataNID(398v1) }
    DataNID(132v1) -- Concat { lo: DataNID(130v1), hi: DataNID(131v1) }
    DataNID(691v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(692v1) -- Arith(Add, DataNID(691v1), DataNID(49v1))
  ControlNID(221v1) -- Store { pred: ControlNID(220v1), addr: DataNID(692v1), value: DataNID(132v1) }
    DataNID(687v1) -- Phi(Phi { merge_nid: ControlNID(15v1), values: [(ControlNID(156v1), DataNID(100v1)), (ControlNID(219v1), DataNID(624v1))] })
    DataNID(693v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(694v1) -- Arith(Add, DataNID(693v1), DataNID(49v1))
  ControlNID(222v1) -- Store { pred: ControlNID(221v1), addr: DataNID(694v1), value: DataNID(687v1) }
  ControlNID(223v1) -- Jump { pred: ControlNID(222v1) }
  ControlNID(223v1) -- Jump { pred: ControlNID(222v1) }
  ControlNID(20v1) -- Merge { preds: [ControlNID(223v1), ControlNID(223v1)] }
    DataNID(672v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(673v1) -- Arith(Add, DataNID(600v1), DataNID(672v1))
    DataNID(688v1) -- Phi(Phi { merge_nid: ControlNID(15v1), values: [(ControlNID(156v1), DataNID(127v1)), (ControlNID(219v1), DataNID(673v1))] })
    DataNID(697v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(688v1))] })
    DataNID(698v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(699v1) -- Arith(Add, DataNID(698v1), DataNID(697v1))
  ControlNID(224v1) -- Load { pred: ControlNID(20v1), addr: DataNID(699v1) }
    DataNID(701v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(696v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(18v1))] })
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(695v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(426v1))] })
    DataNID(700v1) -- LoadedValueOf(ControlNID(224v1))
  ControlNID(225v1) -- Call { pred: ControlNID(224v1), callee: DataNID(701v1), args: [DataNID(700v1), DataNID(695v1), DataNID(113v1), DataNID(696v1)] }
    DataNID(702v1) -- ReturnValueOf(ControlNID(225v1))
    DataNID(712v1) -- Arith(Sub, DataNID(702v1), DataNID(104v1))
    DataNID(716v1) -- IsZero(DataNID(712v1))
    DataNID(719v1) -- Not(DataNID(716v1))
  ControlNID(226v1) -- Branch { pred: ControlNID(225v1), cond: DataNID(719v1) }
  ControlNID(279v1) -- IfFalse(ControlNID(226v1))
  ControlNID(232v1) -- IfTrue(ControlNID(231v1))
  ControlNID(227v1) -- IfTrue(ControlNID(226v1))
  ControlNID(16v1) -- Merge { preds: [ControlNID(227v1), ControlNID(228v1), ControlNID(232v1), ControlNID(233v1)] }
    DataNID(746v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(747v1) -- Arith(Add, DataNID(746v1), DataNID(697v1))
  ControlNID(234v1) -- Load { pred: ControlNID(16v1), addr: DataNID(747v1) }
    DataNID(748v1) -- LoadedValueOf(ControlNID(234v1))
    DataNID(753v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(754v1) -- Arith(Add, DataNID(753v1), DataNID(49v1))
  ControlNID(235v1) -- Store { pred: ControlNID(234v1), addr: DataNID(754v1), value: DataNID(748v1) }
    DataNID(755v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(745v1) -- Phi(Phi { merge_nid: ControlNID(16v1), values: [(ControlNID(228v1), DataNID(113v1)), (ControlNID(233v1), DataNID(104v1))] })
    DataNID(744v1) -- Phi(Phi { merge_nid: ControlNID(16v1), values: [(ControlNID(228v1), DataNID(695v1)), (ControlNID(233v1), DataNID(700v1))] })
    DataNID(748v1) -- LoadedValueOf(ControlNID(234v1))
  ControlNID(236v1) -- Call { pred: ControlNID(235v1), callee: DataNID(755v1), args: [DataNID(748v1), DataNID(744v1), DataNID(745v1), DataNID(696v1)] }
    DataNID(766v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(767v1) -- Arith(Add, DataNID(766v1), DataNID(49v1))
  ControlNID(237v1) -- Load { pred: ControlNID(236v1), addr: DataNID(767v1) }
    DataNID(756v1) -- ReturnValueOf(ControlNID(236v1))
    DataNID(769v1) -- Arith(Sub, DataNID(756v1), DataNID(104v1))
    DataNID(773v1) -- IsZero(DataNID(769v1))
  ControlNID(238v1) -- Branch { pred: ControlNID(237v1), cond: DataNID(773v1) }
  ControlNID(240v1) -- IfFalse(ControlNID(238v1))
  ControlNID(239v1) -- IfTrue(ControlNID(238v1))
  ControlNID(23v1) -- Merge { preds: [ControlNID(239v1), ControlNID(240v1)] }
    DataNID(776v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(777v1) -- Arith(Add, DataNID(776v1), DataNID(49v1))
  ControlNID(241v1) -- Load { pred: ControlNID(23v1), addr: DataNID(777v1) }
    DataNID(779v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(768v1) -- LoadedValueOf(ControlNID(237v1))
    DataNID(778v1) -- LoadedValueOf(ControlNID(241v1))
  ControlNID(242v1) -- Call { pred: ControlNID(241v1), callee: DataNID(779v1), args: [DataNID(778v1), DataNID(768v1), DataNID(104v1), DataNID(696v1)] }
    DataNID(780v1) -- ReturnValueOf(ControlNID(242v1))
    DataNID(791v1) -- Part { src: DataNID(780v1), offset: 0, size: 4 }
    DataNID(790v1) -- Part { src: DataNID(780v1), offset: 0, size: 4 }
    DataNID(792v1) -- Arith(BitAnd, DataNID(790v1), DataNID(791v1))
    DataNID(794v1) -- IsZero(DataNID(792v1))
    DataNID(799v1) -- Not(DataNID(794v1))
  ControlNID(243v1) -- Branch { pred: ControlNID(242v1), cond: DataNID(799v1) }
  ControlNID(245v1) -- IfFalse(ControlNID(243v1))
  ControlNID(244v1) -- IfTrue(ControlNID(243v1))
  ControlNID(240v1) -- IfFalse(ControlNID(238v1))
  ControlNID(17v1) -- Merge { preds: [ControlNID(240v1), ControlNID(244v1), ControlNID(245v1)] }
    DataNID(749v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(750v1) -- Arith(Add, DataNID(749v1), DataNID(697v1))
    DataNID(801v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(802v1) -- Arith(Add, DataNID(801v1), DataNID(750v1))
  ControlNID(246v1) -- Load { pred: ControlNID(17v1), addr: DataNID(802v1) }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(808v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(809v1) -- Arith(Add, DataNID(808v1), DataNID(49v1))
  ControlNID(247v1) -- Store { pred: ControlNID(246v1), addr: DataNID(809v1), value: DataNID(803v1) }
    DataNID(810v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(800v1) -- Phi(Phi { merge_nid: ControlNID(17v1), values: [(ControlNID(240v1), DataNID(745v1)), (ControlNID(245v1), DataNID(104v1))] })
    DataNID(768v1) -- LoadedValueOf(ControlNID(237v1))
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
  ControlNID(248v1) -- Call { pred: ControlNID(247v1), callee: DataNID(810v1), args: [DataNID(803v1), DataNID(768v1), DataNID(800v1), DataNID(803v1)] }
    DataNID(821v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(822v1) -- Arith(Add, DataNID(821v1), DataNID(49v1))
  ControlNID(249v1) -- Load { pred: ControlNID(248v1), addr: DataNID(822v1) }
    DataNID(811v1) -- ReturnValueOf(ControlNID(248v1))
    DataNID(824v1) -- Arith(Sub, DataNID(811v1), DataNID(104v1))
    DataNID(828v1) -- IsZero(DataNID(824v1))
  ControlNID(250v1) -- Branch { pred: ControlNID(249v1), cond: DataNID(828v1) }
  ControlNID(252v1) -- IfFalse(ControlNID(250v1))
  ControlNID(251v1) -- IfTrue(ControlNID(250v1))
  ControlNID(38v1) -- Merge { preds: [ControlNID(251v1), ControlNID(252v1)] }
    DataNID(831v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(832v1) -- Arith(Add, DataNID(831v1), DataNID(49v1))
  ControlNID(253v1) -- Load { pred: ControlNID(38v1), addr: DataNID(832v1) }
    DataNID(834v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(823v1) -- LoadedValueOf(ControlNID(249v1))
    DataNID(833v1) -- LoadedValueOf(ControlNID(253v1))
  ControlNID(254v1) -- Call { pred: ControlNID(253v1), callee: DataNID(834v1), args: [DataNID(833v1), DataNID(823v1), DataNID(104v1), DataNID(803v1)] }
    DataNID(835v1) -- ReturnValueOf(ControlNID(254v1))
    DataNID(846v1) -- Part { src: DataNID(835v1), offset: 0, size: 4 }
    DataNID(845v1) -- Part { src: DataNID(835v1), offset: 0, size: 4 }
    DataNID(847v1) -- Arith(BitAnd, DataNID(845v1), DataNID(846v1))
    DataNID(849v1) -- IsZero(DataNID(847v1))
    DataNID(854v1) -- Not(DataNID(849v1))
  ControlNID(255v1) -- Branch { pred: ControlNID(254v1), cond: DataNID(854v1) }
  ControlNID(257v1) -- IfFalse(ControlNID(255v1))
  ControlNID(256v1) -- IfTrue(ControlNID(255v1))
  ControlNID(252v1) -- IfFalse(ControlNID(250v1))
  ControlNID(18v1) -- Merge { preds: [ControlNID(252v1), ControlNID(256v1), ControlNID(257v1)] }
    DataNID(856v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(857v1) -- Arith(Add, DataNID(856v1), DataNID(750v1))
  ControlNID(259v1) -- Load { pred: ControlNID(18v1), addr: DataNID(857v1) }
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
    DataNID(863v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(864v1) -- Arith(Add, DataNID(863v1), DataNID(49v1))
  ControlNID(260v1) -- Store { pred: ControlNID(259v1), addr: DataNID(864v1), value: DataNID(858v1) }
    DataNID(865v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(855v1) -- Phi(Phi { merge_nid: ControlNID(18v1), values: [(ControlNID(252v1), DataNID(800v1)), (ControlNID(257v1), DataNID(104v1))] })
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
  ControlNID(261v1) -- Call { pred: ControlNID(260v1), callee: DataNID(865v1), args: [DataNID(858v1), DataNID(858v1), DataNID(855v1), DataNID(803v1)] }
    DataNID(876v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(877v1) -- Arith(Add, DataNID(876v1), DataNID(49v1))
  ControlNID(262v1) -- Load { pred: ControlNID(261v1), addr: DataNID(877v1) }
    DataNID(866v1) -- ReturnValueOf(ControlNID(261v1))
    DataNID(879v1) -- Arith(Sub, DataNID(866v1), DataNID(104v1))
    DataNID(883v1) -- IsZero(DataNID(879v1))
  ControlNID(263v1) -- Branch { pred: ControlNID(262v1), cond: DataNID(883v1) }
  ControlNID(265v1) -- IfFalse(ControlNID(263v1))
  ControlNID(264v1) -- IfTrue(ControlNID(263v1))
  ControlNID(40v1) -- Merge { preds: [ControlNID(264v1), ControlNID(265v1)] }
    DataNID(886v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(887v1) -- Arith(Add, DataNID(886v1), DataNID(49v1))
  ControlNID(266v1) -- Load { pred: ControlNID(40v1), addr: DataNID(887v1) }
    DataNID(889v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(878v1) -- LoadedValueOf(ControlNID(262v1))
    DataNID(888v1) -- LoadedValueOf(ControlNID(266v1))
  ControlNID(267v1) -- Call { pred: ControlNID(266v1), callee: DataNID(889v1), args: [DataNID(888v1), DataNID(878v1), DataNID(104v1), DataNID(803v1)] }
    DataNID(890v1) -- ReturnValueOf(ControlNID(267v1))
    DataNID(901v1) -- Part { src: DataNID(890v1), offset: 0, size: 4 }
    DataNID(900v1) -- Part { src: DataNID(890v1), offset: 0, size: 4 }
    DataNID(902v1) -- Arith(BitAnd, DataNID(900v1), DataNID(901v1))
    DataNID(904v1) -- IsZero(DataNID(902v1))
    DataNID(909v1) -- Not(DataNID(904v1))
  ControlNID(268v1) -- Branch { pred: ControlNID(267v1), cond: DataNID(909v1) }
  ControlNID(270v1) -- IfFalse(ControlNID(268v1))
  ControlNID(269v1) -- IfTrue(ControlNID(268v1))
  ControlNID(265v1) -- IfFalse(ControlNID(263v1))
  ControlNID(19v1) -- Merge { preds: [ControlNID(265v1), ControlNID(269v1), ControlNID(270v1)] }
    DataNID(921v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(922v1) -- Arith(Add, DataNID(921v1), DataNID(49v1))
  ControlNID(275v1) -- Load { pred: ControlNID(19v1), addr: DataNID(922v1) }
    DataNID(923v1) -- LoadedValueOf(ControlNID(275v1))
    DataNID(751v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(752v1) -- Arith(Add, DataNID(751v1), DataNID(415v1))
    DataNID(924v1) -- ConstInt { size: ValueSize(8), value: 3 }
    DataNID(925v1) -- Arith(Add, DataNID(924v1), DataNID(752v1))
    DataNID(928v1) -- Arith(Sub, DataNID(925v1), DataNID(923v1))
    DataNID(932v1) -- IsZero(DataNID(928v1))
  ControlNID(276v1) -- Branch { pred: ControlNID(275v1), cond: DataNID(932v1) }
  ControlNID(278v1) -- IfFalse(ControlNID(276v1))
  ControlNID(228v1) -- Merge { preds: [ControlNID(278v1), ControlNID(279v1)] }
  ControlNID(21v1) -- Merge { preds: [ControlNID(228v1)] }
    DataNID(720v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(721v1) -- Arith(Add, DataNID(720v1), DataNID(49v1))
  ControlNID(229v1) -- Load { pred: ControlNID(21v1), addr: DataNID(721v1) }
    DataNID(723v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(696v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(18v1))] })
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(700v1) -- LoadedValueOf(ControlNID(224v1))
    DataNID(722v1) -- LoadedValueOf(ControlNID(229v1))
  ControlNID(230v1) -- Call { pred: ControlNID(229v1), callee: DataNID(723v1), args: [DataNID(722v1), DataNID(700v1), DataNID(104v1), DataNID(696v1)] }
    DataNID(724v1) -- ReturnValueOf(ControlNID(230v1))
    DataNID(735v1) -- Part { src: DataNID(724v1), offset: 0, size: 4 }
    DataNID(734v1) -- Part { src: DataNID(724v1), offset: 0, size: 4 }
    DataNID(736v1) -- Arith(BitAnd, DataNID(734v1), DataNID(735v1))
    DataNID(738v1) -- IsZero(DataNID(736v1))
    DataNID(743v1) -- Not(DataNID(738v1))
  ControlNID(231v1) -- Branch { pred: ControlNID(230v1), cond: DataNID(743v1) }
  ControlNID(233v1) -- IfFalse(ControlNID(231v1))
  ControlNID(22v1) -- Merge { preds: [ControlNID(233v1)] }
    DataNID(935v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(936v1) -- Arith(Add, DataNID(935v1), DataNID(49v1))
  ControlNID(280v1) -- Load { pred: ControlNID(22v1), addr: DataNID(936v1) }
    DataNID(938v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(939v1) -- Arith(Add, DataNID(938v1), DataNID(49v1))
  ControlNID(281v1) -- Load { pred: ControlNID(280v1), addr: DataNID(939v1) }
    DataNID(941v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(942v1) -- Arith(Add, DataNID(941v1), DataNID(49v1))
  ControlNID(282v1) -- Load { pred: ControlNID(281v1), addr: DataNID(942v1) }
  ControlNID(283v1) -- Jump { pred: ControlNID(282v1) }
  ControlNID(283v1) -- Jump { pred: ControlNID(282v1) }
  ControlNID(41v1) -- Merge { preds: [ControlNID(270v1)] }
  ControlNID(271v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(271v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(39v1) -- Merge { preds: [ControlNID(257v1)] }
  ControlNID(258v1) -- Jump { pred: ControlNID(39v1) }
  ControlNID(258v1) -- Jump { pred: ControlNID(39v1) }
  ControlNID(24v1) -- Merge { preds: [ControlNID(245v1), ControlNID(258v1), ControlNID(258v1), ControlNID(271v1), ControlNID(271v1)] }
    DataNID(912v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(913v1) -- Arith(Add, DataNID(912v1), DataNID(49v1))
  ControlNID(272v1) -- Load { pred: ControlNID(24v1), addr: DataNID(913v1) }
    DataNID(915v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(916v1) -- Arith(Add, DataNID(915v1), DataNID(49v1))
  ControlNID(273v1) -- Load { pred: ControlNID(272v1), addr: DataNID(916v1) }
    DataNID(918v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(919v1) -- Arith(Add, DataNID(918v1), DataNID(49v1))
  ControlNID(274v1) -- Load { pred: ControlNID(273v1), addr: DataNID(919v1) }
  ControlNID(48v1) -- Merge { preds: [ControlNID(214v1)] }
  ControlNID(215v1) -- Jump { pred: ControlNID(48v1) }
  ControlNID(215v1) -- Jump { pred: ControlNID(48v1) }
  ControlNID(50v1) -- Merge { preds: [ControlNID(197v1)] }
  ControlNID(198v1) -- Jump { pred: ControlNID(50v1) }
  ControlNID(198v1) -- Jump { pred: ControlNID(50v1) }
  ControlNID(52v1) -- Merge { preds: [ControlNID(180v1)] }
  ControlNID(181v1) -- Jump { pred: ControlNID(52v1) }
  ControlNID(181v1) -- Jump { pred: ControlNID(52v1) }
  ControlNID(25v1) -- Merge { preds: [ControlNID(181v1), ControlNID(181v1), ControlNID(198v1), ControlNID(198v1), ControlNID(215v1), ControlNID(215v1), ControlNID(274v1), ControlNID(283v1), ControlNID(283v1)] }
    DataNID(948v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(949v1) -- Arith(Add, DataNID(948v1), DataNID(49v1))
  ControlNID(284v1) -- Load { pred: ControlNID(25v1), addr: DataNID(949v1) }
    DataNID(944v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(415v1)), (ControlNID(198v1), DataNID(415v1)), (ControlNID(215v1), DataNID(415v1)), (ControlNID(274v1), DataNID(752v1)), (ControlNID(283v1), DataNID(415v1))] })
    DataNID(937v1) -- LoadedValueOf(ControlNID(280v1))
    DataNID(914v1) -- LoadedValueOf(ControlNID(272v1))
    DataNID(947v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(132v1)), (ControlNID(198v1), DataNID(132v1)), (ControlNID(215v1), DataNID(132v1)), (ControlNID(274v1), DataNID(914v1)), (ControlNID(283v1), DataNID(937v1))] })
    DataNID(953v1) -- ArithK(Mul, DataNID(947v1), 8)
    DataNID(950v1) -- LoadedValueOf(ControlNID(284v1))
    DataNID(951v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(952v1) -- Arith(Add, DataNID(951v1), DataNID(950v1))
    DataNID(954v1) -- Arith(Add, DataNID(952v1), DataNID(953v1))
  ControlNID(285v1) -- Store { pred: ControlNID(284v1), addr: DataNID(954v1), value: DataNID(944v1) }
    DataNID(943v1) -- LoadedValueOf(ControlNID(282v1))
    DataNID(920v1) -- LoadedValueOf(ControlNID(274v1))
    DataNID(946v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(398v1)), (ControlNID(198v1), DataNID(398v1)), (ControlNID(215v1), DataNID(398v1)), (ControlNID(274v1), DataNID(920v1)), (ControlNID(283v1), DataNID(943v1))] })
    DataNID(859v1) -- ConstInt { size: ValueSize(8), value: 80 }
    DataNID(860v1) -- Arith(Add, DataNID(859v1), DataNID(750v1))
    DataNID(804v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(805v1) -- Arith(Add, DataNID(804v1), DataNID(750v1))
    DataNID(911v1) -- Phi(Phi { merge_nid: ControlNID(24v1), values: [(ControlNID(245v1), DataNID(750v1)), (ControlNID(258v1), DataNID(805v1)), (ControlNID(271v1), DataNID(860v1))] })
    DataNID(945v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(127v1)), (ControlNID(198v1), DataNID(521v1)), (ControlNID(215v1), DataNID(600v1)), (ControlNID(274v1), DataNID(911v1)), (ControlNID(283v1), DataNID(697v1))] })
    DataNID(955v1) -- Arith(Sub, DataNID(945v1), DataNID(946v1))
    DataNID(959v1) -- IsZero(DataNID(955v1))
  ControlNID(286v1) -- Branch { pred: ControlNID(285v1), cond: DataNID(959v1) }
  ControlNID(288v1) -- IfFalse(ControlNID(286v1))
  ControlNID(26v1) -- Merge { preds: [ControlNID(288v1)] }
    DataNID(962v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(963v1) -- Arith(Add, DataNID(962v1), DataNID(25v1))
  ControlNID(289v1) -- Load { pred: ControlNID(26v1), addr: DataNID(963v1) }
  ControlNID(290v1) -- TODO { pred: ControlNID(289v1), label: "unsupported: movzx edi,byte ptr [r8]" }
    DataNID(965v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(964v1) -- LoadedValueOf(ControlNID(289v1))
    DataNID(966v1) -- Arith(Sub, DataNID(964v1), DataNID(965v1))
    DataNID(970v1) -- IsZero(DataNID(966v1))
    DataNID(973v1) -- Not(DataNID(970v1))
  ControlNID(291v1) -- Branch { pred: ControlNID(290v1), cond: DataNID(973v1) }
  ControlNID(293v1) -- IfFalse(ControlNID(291v1))
  ControlNID(292v1) -- IfTrue(ControlNID(291v1))
  ControlNID(115v1) -- IfFalse(ControlNID(113v1))
  ControlNID(34v1) -- Merge { preds: [ControlNID(115v1), ControlNID(292v1), ControlNID(293v1)] }
    DataNID(975v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(976v1) -- Arith(Add, DataNID(975v1), DataNID(49v1))
  ControlNID(295v1) -- Load { pred: ControlNID(34v1), addr: DataNID(976v1) }
    DataNID(974v1) -- Phi(Phi { merge_nid: ControlNID(34v1), values: [(ControlNID(115v1), DataNID(221v1)), (ControlNID(293v1), DataNID(19v1))] })
    DataNID(979v1) -- Part { src: DataNID(974v1), offset: 0, size: 1 }
    DataNID(978v1) -- Part { src: DataNID(974v1), offset: 0, size: 1 }
    DataNID(980v1) -- Arith(BitAnd, DataNID(978v1), DataNID(979v1))
    DataNID(982v1) -- IsZero(DataNID(980v1))
    DataNID(987v1) -- Not(DataNID(982v1))
  ControlNID(296v1) -- Branch { pred: ControlNID(295v1), cond: DataNID(987v1) }
  ControlNID(298v1) -- IfFalse(ControlNID(296v1))
  ControlNID(117v1) -- IfTrue(ControlNID(116v1))
  ControlNID(54v1) -- Merge { preds: [ControlNID(117v1), ControlNID(118v1)] }
    DataNID(274v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(275v1) -- Arith(Add, DataNID(274v1), DataNID(49v1))
  ControlNID(119v1) -- Load { pred: ControlNID(54v1), addr: DataNID(275v1) }
  ControlNID(120v1) -- Jump { pred: ControlNID(119v1) }
  ControlNID(120v1) -- Jump { pred: ControlNID(119v1) }
  ControlNID(35v1) -- Merge { preds: [ControlNID(120v1), ControlNID(120v1), ControlNID(298v1)] }
    DataNID(1015v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(1016v1) -- Arith(Add, DataNID(1015v1), DataNID(49v1))
  ControlNID(306v1) -- Load { pred: ControlNID(35v1), addr: DataNID(1016v1) }
    DataNID(1013v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(1014v1) -- Arith(Add, DataNID(1013v1), DataNID(132v1))
    DataNID(1017v1) -- LoadedValueOf(ControlNID(306v1))
    DataNID(1018v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(1019v1) -- Arith(Add, DataNID(1018v1), DataNID(1017v1))
  ControlNID(307v1) -- Store { pred: ControlNID(306v1), addr: DataNID(1019v1), value: DataNID(1014v1) }
    DataNID(977v1) -- LoadedValueOf(ControlNID(295v1))
    DataNID(276v1) -- LoadedValueOf(ControlNID(119v1))
    DataNID(1012v1) -- Phi(Phi { merge_nid: ControlNID(35v1), values: [(ControlNID(120v1), DataNID(276v1)), (ControlNID(298v1), DataNID(977v1))] })
    DataNID(1012v1) -- Phi(Phi { merge_nid: ControlNID(35v1), values: [(ControlNID(120v1), DataNID(276v1)), (ControlNID(298v1), DataNID(977v1))] })
    DataNID(1020v1) -- Arith(BitAnd, DataNID(1012v1), DataNID(1012v1))
    DataNID(1022v1) -- IsZero(DataNID(1020v1))
    DataNID(1027v1) -- Not(DataNID(1022v1))
  ControlNID(308v1) -- Branch { pred: ControlNID(307v1), cond: DataNID(1027v1) }
  ControlNID(310v1) -- IfFalse(ControlNID(308v1))
  ControlNID(137v1) -- IfTrue(ControlNID(136v1))
  ControlNID(44v1) -- Merge { preds: [ControlNID(132v1), ControlNID(137v1), ControlNID(138v1)] }
    DataNID(373v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(374v1) -- Arith(Add, DataNID(373v1), DataNID(49v1))
  ControlNID(139v1) -- Load { pred: ControlNID(44v1), addr: DataNID(374v1) }
  ControlNID(45v1) -- Merge { preds: [ControlNID(139v1)] }
    DataNID(375v1) -- LoadedValueOf(ControlNID(139v1))
    DataNID(375v1) -- LoadedValueOf(ControlNID(139v1))
    DataNID(376v1) -- Arith(BitAnd, DataNID(375v1), DataNID(375v1))
    DataNID(378v1) -- IsZero(DataNID(376v1))
  ControlNID(140v1) -- Branch { pred: ControlNID(45v1), cond: DataNID(378v1) }
  ControlNID(321v1) -- IfFalse(ControlNID(140v1))
  ControlNID(297v1) -- IfTrue(ControlNID(296v1))
  ControlNID(287v1) -- IfTrue(ControlNID(286v1))
  ControlNID(277v1) -- IfTrue(ControlNID(276v1))
  ControlNID(218v1) -- IfTrue(ControlNID(217v1))
  ControlNID(152v1) -- IfTrue(ControlNID(151v1))
  ControlNID(107v1) -- IfTrue(ControlNID(106v1))
  ControlNID(93v1) -- IfTrue(ControlNID(92v1))
  ControlNID(75v1) -- IfTrue(ControlNID(74v1))
  ControlNID(42v1) -- Merge { preds: [ControlNID(75v1), ControlNID(76v1), ControlNID(93v1), ControlNID(94v1), ControlNID(107v1), ControlNID(108v1), ControlNID(152v1), ControlNID(153v1), ControlNID(218v1), ControlNID(219v1), ControlNID(277v1), ControlNID(278v1), ControlNID(287v1), ControlNID(288v1), ControlNID(297v1), ControlNID(298v1)] }
    DataNID(989v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(990v1) -- Arith(Add, DataNID(49v1), DataNID(989v1))
  ControlNID(299v1) -- Load { pred: ControlNID(42v1), addr: DataNID(990v1) }
    DataNID(1001v1) -- ArithK(Add, DataNID(990v1), 8)
  ControlNID(300v1) -- Load { pred: ControlNID(299v1), addr: DataNID(1001v1) }
    DataNID(1003v1) -- ArithK(Add, DataNID(1001v1), 8)
  ControlNID(301v1) -- Load { pred: ControlNID(300v1), addr: DataNID(1003v1) }
    DataNID(1005v1) -- ArithK(Add, DataNID(1003v1), 8)
  ControlNID(302v1) -- Load { pred: ControlNID(301v1), addr: DataNID(1005v1) }
    DataNID(1007v1) -- ArithK(Add, DataNID(1005v1), 8)
  ControlNID(303v1) -- Load { pred: ControlNID(302v1), addr: DataNID(1007v1) }
    DataNID(1009v1) -- ArithK(Add, DataNID(1007v1), 8)
  ControlNID(304v1) -- Load { pred: ControlNID(303v1), addr: DataNID(1009v1) }
  ControlNID(305v1) -- Jump { pred: ControlNID(304v1) }
  ControlNID(80v1) -- IfTrue(ControlNID(79v1))
  ControlNID(55v1) -- Merge { preds: [ControlNID(80v1), ControlNID(81v1), ControlNID(305v1), ControlNID(319v1)] }
  ControlNID(320v1) -- Jump { pred: ControlNID(55v1) }
  ControlNID(142v1) -- Merge { preds: [ControlNID(320v1), ControlNID(321v1)] }
  ControlNID(141v1) -- IfTrue(ControlNID(140v1))
  ControlNID(36v1) -- Merge { preds: [ControlNID(141v1), ControlNID(142v1), ControlNID(310v1)] }
  ControlNID(309v1) -- IfTrue(ControlNID(308v1))
  ControlNID(46v1) -- Merge { preds: [ControlNID(142v1), ControlNID(309v1), ControlNID(310v1)] }
    DataNID(1029v1) -- Phi(Phi { merge_nid: ControlNID(46v1), values: [(ControlNID(142v1), DataNID(376v1)), (ControlNID(310v1), DataNID(1020v1))] })
    DataNID(1030v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(1031v1) -- Arith(Add, DataNID(1030v1), DataNID(1029v1))
  ControlNID(311v1) -- Store { pred: ControlNID(46v1), addr: DataNID(1031v1), value: DataNID(25v1) }
  ControlNID(312v1) -- Jump { pred: ControlNID(311v1) }
  ControlNID(312v1) -- Jump { pred: ControlNID(311v1) }
  ControlNID(37v1) -- Merge { preds: [ControlNID(312v1), ControlNID(312v1), ControlNID(36v1)] }
    DataNID(1056v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(1057v1) -- Arith(Add, DataNID(49v1), DataNID(1056v1))
  ControlNID(313v1) -- Load { pred: ControlNID(37v1), addr: DataNID(1057v1) }
    DataNID(1065v1) -- ArithK(Add, DataNID(1057v1), 8)
  ControlNID(314v1) -- Load { pred: ControlNID(313v1), addr: DataNID(1065v1) }
    DataNID(1067v1) -- ArithK(Add, DataNID(1065v1), 8)
  ControlNID(315v1) -- Load { pred: ControlNID(314v1), addr: DataNID(1067v1) }
    DataNID(1069v1) -- ArithK(Add, DataNID(1067v1), 8)
  ControlNID(316v1) -- Load { pred: ControlNID(315v1), addr: DataNID(1069v1) }
    DataNID(1071v1) -- ArithK(Add, DataNID(1069v1), 8)
  ControlNID(317v1) -- Load { pred: ControlNID(316v1), addr: DataNID(1071v1) }
    DataNID(1073v1) -- ArithK(Add, DataNID(1071v1), 8)
  ControlNID(318v1) -- Load { pred: ControlNID(317v1), addr: DataNID(1073v1) }
  ControlNID(319v1) -- Jump { pred: ControlNID(318v1) }
  ControlNID(305v1) -- Jump { pred: ControlNID(304v1) }
  ControlNID(322v1) -- Merge { preds: [ControlNID(305v1), ControlNID(319v1)] }
    DataNID(1043v1) -- Phi(Phi { merge_nid: ControlNID(36v1), values: [(ControlNID(142v1), DataNID(295v1)), (ControlNID(310v1), DataNID(103v1))] })
    DataNID(1047v1) -- Part { src: DataNID(1043v1), offset: 4, size: 4 }
    DataNID(1045v1) -- Part { src: DataNID(1043v1), offset: 0, size: 4 }
    DataNID(1044v1) -- Part { src: DataNID(1043v1), offset: 0, size: 4 }
    DataNID(1046v1) -- Arith(BitXor, DataNID(1044v1), DataNID(1045v1))
    DataNID(1048v1) -- Concat { lo: DataNID(1046v1), hi: DataNID(1047v1) }
    DataNID(1028v1) -- Phi(Phi { merge_nid: ControlNID(46v1), values: [(ControlNID(142v1), DataNID(295v1)), (ControlNID(310v1), DataNID(103v1))] })
    DataNID(1035v1) -- Part { src: DataNID(1028v1), offset: 4, size: 4 }
    DataNID(1033v1) -- Part { src: DataNID(1028v1), offset: 0, size: 4 }
    DataNID(1032v1) -- Part { src: DataNID(1028v1), offset: 0, size: 4 }
    DataNID(1034v1) -- Arith(BitXor, DataNID(1032v1), DataNID(1033v1))
    DataNID(1036v1) -- Concat { lo: DataNID(1034v1), hi: DataNID(1035v1) }
    DataNID(1055v1) -- Phi(Phi { merge_nid: ControlNID(37v1), values: [(ControlNID(312v1), DataNID(1036v1)), (ControlNID(36v1), DataNID(1048v1))] })
    DataNID(988v1) -- Phi(Phi { merge_nid: ControlNID(42v1), values: [(ControlNID(76v1), DataNID(103v1)), (ControlNID(94v1), DataNID(188v1)), (ControlNID(108v1), DataNID(239v1)), (ControlNID(153v1), DataNID(103v1)), (ControlNID(219v1), DataNID(625v1)), (ControlNID(278v1), DataNID(879v1)), (ControlNID(288v1), DataNID(103v1)), (ControlNID(298v1), DataNID(103v1))] })
    DataNID(998v1) -- Part { src: DataNID(988v1), offset: 4, size: 4 }
    DataNID(997v1) -- ConstInt { size: ValueSize(4), value: 2 }
    DataNID(999v1) -- Concat { lo: DataNID(997v1), hi: DataNID(998v1) }
    DataNID(1077v1) -- Phi(Phi { merge_nid: ControlNID(322v1), values: [(ControlNID(305v1), DataNID(999v1)), (ControlNID(319v1), DataNID(1055v1))] })
  ControlNID(323v1) -- End { pred: ControlNID(322v1), ret: DataNID(1077v1) }


ssa post-xform:
ssa program
  323 control nodes, 552 data nodes
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(27v1) -- Ancestral(AncestralName("R15"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(56v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(27v1) }
    DataNID(26v1) -- Ancestral(AncestralName("R14"))
    DataNID(40v1) -- ArithK(Add, DataNID(39v1), -8)
  ControlNID(57v1) -- Store { pred: ControlNID(56v1), addr: DataNID(40v1), value: DataNID(26v1) }
    DataNID(25v1) -- Ancestral(AncestralName("R13"))
    DataNID(44v1) -- ArithK(Add, DataNID(40v1), -8)
  ControlNID(58v1) -- Store { pred: ControlNID(57v1), addr: DataNID(44v1), value: DataNID(25v1) }
    DataNID(24v1) -- Ancestral(AncestralName("R12"))
    DataNID(45v1) -- ArithK(Add, DataNID(44v1), -8)
  ControlNID(59v1) -- Store { pred: ControlNID(58v1), addr: DataNID(45v1), value: DataNID(24v1) }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(46v1) -- ArithK(Add, DataNID(45v1), -8)
  ControlNID(60v1) -- Store { pred: ControlNID(59v1), addr: DataNID(46v1), value: DataNID(11v1) }
    DataNID(17v1) -- Ancestral(AncestralName("RBX"))
    DataNID(47v1) -- ArithK(Add, DataNID(46v1), -8)
  ControlNID(61v1) -- Store { pred: ControlNID(60v1), addr: DataNID(47v1), value: DataNID(17v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
    DataNID(56v1) -- ConstInt { size: ValueSize(8), value: 64 }
    DataNID(57v1) -- Arith(Add, DataNID(56v1), DataNID(49v1))
  ControlNID(62v1) -- Store { pred: ControlNID(61v1), addr: DataNID(57v1), value: DataNID(14v1) }
    DataNID(20v1) -- Ancestral(AncestralName("R8"))
    DataNID(58v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(59v1) -- Arith(Add, DataNID(58v1), DataNID(49v1))
  ControlNID(63v1) -- Store { pred: ControlNID(62v1), addr: DataNID(59v1), value: DataNID(20v1) }
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(60v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(61v1) -- Arith(Add, DataNID(60v1), DataNID(49v1))
  ControlNID(64v1) -- Store { pred: ControlNID(63v1), addr: DataNID(61v1), value: DataNID(19v1) }
    DataNID(21v1) -- Ancestral(AncestralName("R9"))
    DataNID(62v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(63v1) -- Arith(Add, DataNID(62v1), DataNID(49v1))
  ControlNID(65v1) -- Store { pred: ControlNID(64v1), addr: DataNID(63v1), value: DataNID(21v1) }
    DataNID(64v1) -- ConstInt { size: ValueSize(8), value: 4199040 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(42v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(41v1) -- ConstInt { size: ValueSize(4), value: 46 }
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
  ControlNID(66v1) -- Call { pred: ControlNID(65v1), callee: DataNID(64v1), args: [DataNID(19v1), DataNID(43v1), DataNID(19v1), DataNID(18v1)] }
    DataNID(65v1) -- ReturnValueOf(ControlNID(66v1))
    DataNID(65v1) -- ReturnValueOf(ControlNID(66v1))
    DataNID(75v1) -- Arith(BitAnd, DataNID(65v1), DataNID(65v1))
    DataNID(77v1) -- IsZero(DataNID(75v1))
  ControlNID(67v1) -- Branch { pred: ControlNID(66v1), cond: DataNID(77v1) }
  ControlNID(69v1) -- IfFalse(ControlNID(67v1))
  ControlNID(68v1) -- IfTrue(ControlNID(67v1))
  ControlNID(53v1) -- Merge { preds: [ControlNID(68v1), ControlNID(69v1)] }
    DataNID(82v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(83v1) -- Arith(Add, DataNID(82v1), DataNID(49v1))
  ControlNID(70v1) -- Load { pred: ControlNID(53v1), addr: DataNID(83v1) }
    DataNID(85v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(19v1) -- Ancestral(AncestralName("RDX"))
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(84v1) -- LoadedValueOf(ControlNID(70v1))
  ControlNID(71v1) -- Call { pred: ControlNID(70v1), callee: DataNID(85v1), args: [DataNID(84v1), DataNID(43v1), DataNID(19v1), DataNID(18v1)] }
  ControlNID(72v1) -- Jump { pred: ControlNID(71v1) }
  ControlNID(72v1) -- Jump { pred: ControlNID(71v1) }
  ControlNID(69v1) -- IfFalse(ControlNID(67v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(69v1), ControlNID(72v1), ControlNID(72v1)] }
    DataNID(101v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(102v1) -- Arith(Add, DataNID(101v1), DataNID(49v1))
  ControlNID(73v1) -- Load { pred: ControlNID(2v1), addr: DataNID(102v1) }
    DataNID(103v1) -- LoadedValueOf(ControlNID(73v1))
    DataNID(86v1) -- ReturnValueOf(ControlNID(71v1))
    DataNID(98v1) -- ArithK(Mul, DataNID(86v1), 1)
    DataNID(96v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(97v1) -- Arith(Add, DataNID(96v1), DataNID(84v1))
    DataNID(99v1) -- Arith(Add, DataNID(97v1), DataNID(98v1))
    DataNID(100v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(69v1), DataNID(65v1)), (ControlNID(72v1), DataNID(99v1))] })
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(108v1) -- IsZero(DataNID(104v1))
  ControlNID(74v1) -- Branch { pred: ControlNID(73v1), cond: DataNID(108v1) }
  ControlNID(76v1) -- IfFalse(ControlNID(74v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(76v1)] }
    DataNID(111v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(112v1) -- Arith(Add, DataNID(111v1), DataNID(49v1))
  ControlNID(77v1) -- Load { pred: ControlNID(3v1), addr: DataNID(112v1) }
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(114v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(115v1) -- Arith(Add, DataNID(114v1), DataNID(113v1))
  ControlNID(78v1) -- Load { pred: ControlNID(77v1), addr: DataNID(115v1) }
    DataNID(117v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(116v1) -- LoadedValueOf(ControlNID(78v1))
    DataNID(118v1) -- Arith(Sub, DataNID(116v1), DataNID(117v1))
    DataNID(122v1) -- IsZero(DataNID(118v1))
  ControlNID(79v1) -- Branch { pred: ControlNID(78v1), cond: DataNID(122v1) }
  ControlNID(81v1) -- IfFalse(ControlNID(79v1))
  ControlNID(4v1) -- Merge { preds: [ControlNID(81v1)] }
    DataNID(125v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(126v1) -- Arith(Add, DataNID(125v1), DataNID(15v1))
  ControlNID(82v1) -- Load { pred: ControlNID(4v1), addr: DataNID(126v1) }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(139v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(140v1) -- Arith(Add, DataNID(139v1), DataNID(49v1))
  ControlNID(83v1) -- Store { pred: ControlNID(82v1), addr: DataNID(140v1), value: DataNID(18v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(141v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(142v1) -- Arith(Add, DataNID(141v1), DataNID(127v1))
  ControlNID(84v1) -- Load { pred: ControlNID(83v1), addr: DataNID(142v1) }
    DataNID(144v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(143v1) -- LoadedValueOf(ControlNID(84v1))
    DataNID(145v1) -- Arith(Sub, DataNID(143v1), DataNID(144v1))
    DataNID(149v1) -- IsZero(DataNID(145v1))
  ControlNID(85v1) -- Branch { pred: ControlNID(84v1), cond: DataNID(149v1) }
  ControlNID(87v1) -- IfFalse(ControlNID(85v1))
  ControlNID(86v1) -- IfTrue(ControlNID(85v1))
  ControlNID(31v1) -- Merge { preds: [ControlNID(86v1), ControlNID(87v1)] }
    DataNID(154v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(155v1) -- Arith(Add, DataNID(154v1), DataNID(49v1))
  ControlNID(88v1) -- Load { pred: ControlNID(31v1), addr: DataNID(155v1) }
    DataNID(153v1) -- Phi(Phi { merge_nid: ControlNID(31v1), values: [(ControlNID(87v1), DataNID(100v1))] })
    DataNID(171v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(172v1) -- Arith(Add, DataNID(171v1), DataNID(49v1))
  ControlNID(89v1) -- Store { pred: ControlNID(88v1), addr: DataNID(172v1), value: DataNID(153v1) }
    DataNID(173v1) -- ConstInt { size: ValueSize(8), value: 6451424 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(169v1) -- Part { src: DataNID(113v1), offset: 4, size: 4 }
    DataNID(168v1) -- ConstInt { size: ValueSize(4), value: 10 }
    DataNID(170v1) -- Concat { lo: DataNID(168v1), hi: DataNID(169v1) }
    DataNID(152v1) -- Phi(Phi { merge_nid: ControlNID(31v1), values: [(ControlNID(87v1), DataNID(43v1))] })
    DataNID(160v1) -- Part { src: DataNID(152v1), offset: 4, size: 4 }
    DataNID(158v1) -- Part { src: DataNID(152v1), offset: 0, size: 4 }
    DataNID(157v1) -- Part { src: DataNID(152v1), offset: 0, size: 4 }
    DataNID(159v1) -- Arith(BitXor, DataNID(157v1), DataNID(158v1))
    DataNID(161v1) -- Concat { lo: DataNID(159v1), hi: DataNID(160v1) }
    DataNID(156v1) -- LoadedValueOf(ControlNID(88v1))
  ControlNID(90v1) -- Call { pred: ControlNID(89v1), callee: DataNID(173v1), args: [DataNID(156v1), DataNID(161v1), DataNID(170v1), DataNID(18v1)] }
    DataNID(184v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(185v1) -- Arith(Add, DataNID(184v1), DataNID(49v1))
  ControlNID(91v1) -- Load { pred: ControlNID(90v1), addr: DataNID(185v1) }
    DataNID(187v1) -- ConstInt { size: ValueSize(8), value: -1 }
    DataNID(174v1) -- ReturnValueOf(ControlNID(90v1))
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(192v1) -- IsZero(DataNID(188v1))
  ControlNID(92v1) -- Branch { pred: ControlNID(91v1), cond: DataNID(192v1) }
  ControlNID(148v1) -- IfFalse(ControlNID(92v1))
  ControlNID(94v1) -- Merge { preds: [ControlNID(147v1), ControlNID(148v1)] }
  ControlNID(32v1) -- Merge { preds: [ControlNID(94v1)] }
    DataNID(195v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(196v1) -- Arith(Add, DataNID(195v1), DataNID(15v1))
  ControlNID(95v1) -- Load { pred: ControlNID(32v1), addr: DataNID(196v1) }
    DataNID(186v1) -- LoadedValueOf(ControlNID(91v1))
    DataNID(198v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(199v1) -- Arith(Add, DataNID(198v1), DataNID(49v1))
  ControlNID(96v1) -- Store { pred: ControlNID(95v1), addr: DataNID(199v1), value: DataNID(186v1) }
    DataNID(197v1) -- LoadedValueOf(ControlNID(95v1))
    DataNID(200v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(201v1) -- Arith(Add, DataNID(200v1), DataNID(197v1))
  ControlNID(97v1) -- Load { pred: ControlNID(96v1), addr: DataNID(201v1) }
    DataNID(212v1) -- ConstInt { size: ValueSize(8), value: 4206915 }
    DataNID(203v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(202v1) -- LoadedValueOf(ControlNID(97v1))
    DataNID(204v1) -- Arith(Sub, DataNID(202v1), DataNID(203v1))
    DataNID(208v1) -- IsZero(DataNID(204v1))
    DataNID(211v1) -- Not(DataNID(208v1))
  ControlNID(98v1) -- BranchIndirect { pred: ControlNID(97v1), cond: DataNID(211v1), addr: DataNID(212v1) }
    DataNID(213v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(214v1) -- Arith(Add, DataNID(213v1), DataNID(49v1))
  ControlNID(99v1) -- Load { pred: ControlNID(98v1), addr: DataNID(214v1) }
    DataNID(216v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(217v1) -- Arith(Add, DataNID(216v1), DataNID(49v1))
  ControlNID(100v1) -- Load { pred: ControlNID(99v1), addr: DataNID(217v1) }
    DataNID(219v1) -- ConstInt { size: ValueSize(8), value: 64 }
    DataNID(220v1) -- Arith(Add, DataNID(219v1), DataNID(49v1))
  ControlNID(101v1) -- Load { pred: ControlNID(100v1), addr: DataNID(220v1) }
    DataNID(215v1) -- LoadedValueOf(ControlNID(99v1))
    DataNID(222v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(223v1) -- Arith(Add, DataNID(222v1), DataNID(215v1))
  ControlNID(102v1) -- Load { pred: ControlNID(101v1), addr: DataNID(223v1) }
    DataNID(225v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(226v1) -- Arith(Add, DataNID(225v1), DataNID(197v1))
  ControlNID(103v1) -- Load { pred: ControlNID(102v1), addr: DataNID(226v1) }
    DataNID(227v1) -- LoadedValueOf(ControlNID(103v1))
  ControlNID(104v1) -- Load { pred: ControlNID(103v1), addr: DataNID(227v1) }
    DataNID(228v1) -- LoadedValueOf(ControlNID(104v1))
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(224v1) -- LoadedValueOf(ControlNID(102v1))
    DataNID(218v1) -- LoadedValueOf(ControlNID(100v1))
    DataNID(221v1) -- LoadedValueOf(ControlNID(101v1))
  ControlNID(105v1) -- Call { pred: ControlNID(104v1), callee: DataNID(228v1), args: [DataNID(221v1), DataNID(218v1), DataNID(224v1), DataNID(188v1)] }
    DataNID(229v1) -- ReturnValueOf(ControlNID(105v1))
    DataNID(229v1) -- ReturnValueOf(ControlNID(105v1))
    DataNID(239v1) -- Arith(BitAnd, DataNID(229v1), DataNID(229v1))
    DataNID(241v1) -- IsZero(DataNID(239v1))
  ControlNID(106v1) -- Branch { pred: ControlNID(105v1), cond: DataNID(241v1) }
  ControlNID(108v1) -- IfFalse(ControlNID(106v1))
  ControlNID(33v1) -- Merge { preds: [ControlNID(108v1)] }
    DataNID(246v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(247v1) -- Arith(Add, DataNID(246v1), DataNID(49v1))
  ControlNID(109v1) -- Load { pred: ControlNID(33v1), addr: DataNID(247v1) }
    DataNID(249v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(250v1) -- Arith(Add, DataNID(249v1), DataNID(229v1))
  ControlNID(110v1) -- Load { pred: ControlNID(109v1), addr: DataNID(250v1) }
    DataNID(188v1) -- Arith(Sub, DataNID(174v1), DataNID(187v1))
    DataNID(131v1) -- Part { src: DataNID(27v1), offset: 4, size: 4 }
    DataNID(129v1) -- Part { src: DataNID(27v1), offset: 0, size: 4 }
    DataNID(128v1) -- Part { src: DataNID(27v1), offset: 0, size: 4 }
    DataNID(130v1) -- Arith(BitXor, DataNID(128v1), DataNID(129v1))
    DataNID(132v1) -- Concat { lo: DataNID(130v1), hi: DataNID(131v1) }
    DataNID(262v1) -- ArithK(Mul, DataNID(132v1), 8)
    DataNID(260v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(261v1) -- Arith(Add, DataNID(260v1), DataNID(218v1))
    DataNID(263v1) -- Arith(Add, DataNID(261v1), DataNID(262v1))
  ControlNID(111v1) -- Store { pred: ControlNID(110v1), addr: DataNID(263v1), value: DataNID(188v1) }
  ControlNID(112v1) -- TODO { pred: ControlNID(111v1), label: "unsupported: movzx edi,byte ptr [r8]" }
    DataNID(252v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(251v1) -- LoadedValueOf(ControlNID(110v1))
    DataNID(253v1) -- Arith(Sub, DataNID(251v1), DataNID(252v1))
    DataNID(257v1) -- IsZero(DataNID(253v1))
  ControlNID(113v1) -- Branch { pred: ControlNID(112v1), cond: DataNID(257v1) }
  ControlNID(115v1) -- IfFalse(ControlNID(113v1))
  ControlNID(114v1) -- IfTrue(ControlNID(113v1))
  ControlNID(27v1) -- Merge { preds: [ControlNID(114v1), ControlNID(115v1)] }
    DataNID(264v1) -- Phi(Phi { merge_nid: ControlNID(27v1), values: [(ControlNID(115v1), DataNID(221v1))] })
    DataNID(266v1) -- Part { src: DataNID(264v1), offset: 0, size: 1 }
    DataNID(265v1) -- Part { src: DataNID(264v1), offset: 0, size: 1 }
    DataNID(267v1) -- Arith(BitAnd, DataNID(265v1), DataNID(266v1))
    DataNID(269v1) -- IsZero(DataNID(267v1))
  ControlNID(116v1) -- Branch { pred: ControlNID(27v1), cond: DataNID(269v1) }
  ControlNID(294v1) -- IfFalse(ControlNID(116v1))
  ControlNID(118v1) -- Merge { preds: [ControlNID(293v1), ControlNID(294v1)] }
  ControlNID(28v1) -- Merge { preds: [ControlNID(118v1)] }
    DataNID(277v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(278v1) -- Arith(Add, DataNID(277v1), DataNID(100v1))
    DataNID(282v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(283v1) -- Arith(Add, DataNID(282v1), DataNID(49v1))
  ControlNID(121v1) -- Store { pred: ControlNID(28v1), addr: DataNID(283v1), value: DataNID(278v1) }
    DataNID(284v1) -- ConstInt { size: ValueSize(8), value: 4199040 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(280v1) -- Part { src: DataNID(43v1), offset: 4, size: 4 }
    DataNID(279v1) -- ConstInt { size: ValueSize(4), value: 46 }
    DataNID(281v1) -- Concat { lo: DataNID(279v1), hi: DataNID(280v1) }
    DataNID(278v1) -- Arith(Add, DataNID(277v1), DataNID(100v1))
  ControlNID(122v1) -- Call { pred: ControlNID(121v1), callee: DataNID(284v1), args: [DataNID(278v1), DataNID(281v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(285v1) -- ReturnValueOf(ControlNID(122v1))
    DataNID(285v1) -- ReturnValueOf(ControlNID(122v1))
    DataNID(295v1) -- Arith(BitAnd, DataNID(285v1), DataNID(285v1))
    DataNID(297v1) -- IsZero(DataNID(295v1))
  ControlNID(123v1) -- Branch { pred: ControlNID(122v1), cond: DataNID(297v1) }
  ControlNID(125v1) -- IfFalse(ControlNID(123v1))
  ControlNID(29v1) -- Merge { preds: [ControlNID(125v1)] }
    DataNID(341v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(342v1) -- Arith(Add, DataNID(341v1), DataNID(49v1))
  ControlNID(133v1) -- Load { pred: ControlNID(29v1), addr: DataNID(342v1) }
    DataNID(344v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(345v1) -- Arith(Add, DataNID(344v1), DataNID(49v1))
  ControlNID(134v1) -- Load { pred: ControlNID(133v1), addr: DataNID(345v1) }
    DataNID(346v1) -- LoadedValueOf(ControlNID(134v1))
    DataNID(362v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(363v1) -- Arith(Add, DataNID(362v1), DataNID(346v1))
  ControlNID(135v1) -- Load { pred: ControlNID(134v1), addr: DataNID(363v1) }
    DataNID(364v1) -- LoadedValueOf(ControlNID(135v1))
    DataNID(347v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(348v1) -- Arith(Add, DataNID(132v1), DataNID(347v1))
    DataNID(365v1) -- Arith(Sub, DataNID(348v1), DataNID(364v1))
    DataNID(367v1) -- CarryOf(DataNID(365v1))
    DataNID(372v1) -- Not(DataNID(367v1))
  ControlNID(136v1) -- Branch { pred: ControlNID(135v1), cond: DataNID(372v1) }
  ControlNID(138v1) -- IfFalse(ControlNID(136v1))
  ControlNID(124v1) -- IfTrue(ControlNID(123v1))
  ControlNID(43v1) -- Merge { preds: [ControlNID(124v1), ControlNID(125v1)] }
    DataNID(302v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(303v1) -- Arith(Add, DataNID(302v1), DataNID(49v1))
  ControlNID(126v1) -- Load { pred: ControlNID(43v1), addr: DataNID(303v1) }
    DataNID(313v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(304v1) -- LoadedValueOf(ControlNID(126v1))
  ControlNID(127v1) -- Call { pred: ControlNID(126v1), callee: DataNID(313v1), args: [DataNID(304v1), DataNID(281v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(324v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(325v1) -- Arith(Add, DataNID(324v1), DataNID(49v1))
  ControlNID(128v1) -- Load { pred: ControlNID(127v1), addr: DataNID(325v1) }
    DataNID(326v1) -- LoadedValueOf(ControlNID(128v1))
    DataNID(331v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(332v1) -- Arith(Add, DataNID(331v1), DataNID(326v1))
  ControlNID(129v1) -- Load { pred: ControlNID(128v1), addr: DataNID(332v1) }
    DataNID(333v1) -- LoadedValueOf(ControlNID(129v1))
    DataNID(305v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(306v1) -- Arith(Add, DataNID(132v1), DataNID(305v1))
    DataNID(334v1) -- Arith(Sub, DataNID(306v1), DataNID(333v1))
    DataNID(336v1) -- CarryOf(DataNID(334v1))
  ControlNID(130v1) -- Branch { pred: ControlNID(129v1), cond: DataNID(336v1) }
  ControlNID(132v1) -- IfFalse(ControlNID(130v1))
  ControlNID(131v1) -- IfTrue(ControlNID(130v1))
  ControlNID(30v1) -- Merge { preds: [ControlNID(131v1), ControlNID(132v1), ControlNID(138v1)] }
    DataNID(383v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(384v1) -- Arith(Add, DataNID(383v1), DataNID(25v1))
  ControlNID(143v1) -- Load { pred: ControlNID(30v1), addr: DataNID(384v1) }
    DataNID(385v1) -- LoadedValueOf(ControlNID(143v1))
    DataNID(386v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(387v1) -- Arith(Add, DataNID(386v1), DataNID(385v1))
  ControlNID(144v1) -- Load { pred: ControlNID(143v1), addr: DataNID(387v1) }
    DataNID(389v1) -- ConstInt { size: ValueSize(1), value: 0 }
    DataNID(388v1) -- LoadedValueOf(ControlNID(144v1))
    DataNID(390v1) -- Arith(Sub, DataNID(388v1), DataNID(389v1))
    DataNID(394v1) -- IsZero(DataNID(390v1))
    DataNID(397v1) -- Not(DataNID(394v1))
  ControlNID(145v1) -- Branch { pred: ControlNID(144v1), cond: DataNID(397v1) }
  ControlNID(147v1) -- IfFalse(ControlNID(145v1))
  ControlNID(146v1) -- IfTrue(ControlNID(145v1))
  ControlNID(87v1) -- IfFalse(ControlNID(85v1))
  ControlNID(5v1) -- Merge { preds: [ControlNID(87v1), ControlNID(146v1), ControlNID(147v1)] }
    DataNID(398v1) -- Phi(Phi { merge_nid: ControlNID(5v1), values: [(ControlNID(87v1), DataNID(15v1)), (ControlNID(147v1), DataNID(25v1))] })
    DataNID(399v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(400v1) -- Arith(Add, DataNID(399v1), DataNID(398v1))
  ControlNID(149v1) -- Load { pred: ControlNID(5v1), addr: DataNID(400v1) }
    DataNID(401v1) -- LoadedValueOf(ControlNID(149v1))
    DataNID(402v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(403v1) -- Arith(Add, DataNID(402v1), DataNID(49v1))
  ControlNID(150v1) -- Store { pred: ControlNID(149v1), addr: DataNID(403v1), value: DataNID(401v1) }
    DataNID(404v1) -- Arith(BitAnd, DataNID(401v1), DataNID(401v1))
    DataNID(406v1) -- IsZero(DataNID(404v1))
  ControlNID(151v1) -- Branch { pred: ControlNID(150v1), cond: DataNID(406v1) }
  ControlNID(153v1) -- IfFalse(ControlNID(151v1))
  ControlNID(6v1) -- Merge { preds: [ControlNID(153v1)] }
    DataNID(423v1) -- ConstInt { size: ValueSize(4), value: 3 }
    DataNID(422v1) -- Part { src: DataNID(404v1), offset: 0, size: 4 }
    DataNID(424v1) -- Arith(BitAnd, DataNID(422v1), DataNID(423v1))
    DataNID(430v1) -- IsZero(DataNID(424v1))
  ControlNID(154v1) -- Branch { pred: ControlNID(6v1), cond: DataNID(430v1) }
  ControlNID(156v1) -- IfFalse(ControlNID(154v1))
  ControlNID(7v1) -- Merge { preds: [ControlNID(156v1)] }
    DataNID(433v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(425v1) -- Part { src: DataNID(404v1), offset: 4, size: 4 }
    DataNID(426v1) -- Concat { lo: DataNID(424v1), hi: DataNID(425v1) }
    DataNID(434v1) -- Arith(Sub, DataNID(426v1), DataNID(433v1))
    DataNID(438v1) -- IsZero(DataNID(434v1))
  ControlNID(157v1) -- Branch { pred: ControlNID(7v1), cond: DataNID(438v1) }
  ControlNID(159v1) -- IfFalse(ControlNID(157v1))
  ControlNID(8v1) -- Merge { preds: [ControlNID(159v1)] }
    DataNID(441v1) -- ConstInt { size: ValueSize(8), value: 2 }
    DataNID(442v1) -- Arith(Sub, DataNID(434v1), DataNID(441v1))
    DataNID(446v1) -- IsZero(DataNID(442v1))
  ControlNID(160v1) -- Branch { pred: ControlNID(8v1), cond: DataNID(446v1) }
  ControlNID(162v1) -- IfFalse(ControlNID(160v1))
  ControlNID(9v1) -- Merge { preds: [ControlNID(162v1)] }
    DataNID(449v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(450v1) -- Arith(Add, DataNID(449v1), DataNID(127v1))
  ControlNID(163v1) -- Load { pred: ControlNID(9v1), addr: DataNID(450v1) }
    DataNID(100v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(69v1), DataNID(65v1)), (ControlNID(72v1), DataNID(99v1))] })
    DataNID(452v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(453v1) -- Arith(Add, DataNID(452v1), DataNID(49v1))
  ControlNID(164v1) -- Store { pred: ControlNID(163v1), addr: DataNID(453v1), value: DataNID(100v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(454v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(455v1) -- Arith(Add, DataNID(454v1), DataNID(49v1))
  ControlNID(165v1) -- Store { pred: ControlNID(164v1), addr: DataNID(455v1), value: DataNID(127v1) }
    DataNID(451v1) -- LoadedValueOf(ControlNID(163v1))
    DataNID(456v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(457v1) -- Arith(Add, DataNID(456v1), DataNID(49v1))
  ControlNID(166v1) -- Store { pred: ControlNID(165v1), addr: DataNID(457v1), value: DataNID(451v1) }
    DataNID(458v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(442v1) -- Arith(Sub, DataNID(434v1), DataNID(441v1))
    DataNID(451v1) -- LoadedValueOf(ControlNID(163v1))
  ControlNID(167v1) -- Call { pred: ControlNID(166v1), callee: DataNID(458v1), args: [DataNID(451v1), DataNID(442v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(469v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(470v1) -- Arith(Add, DataNID(469v1), DataNID(49v1))
  ControlNID(168v1) -- Load { pred: ControlNID(167v1), addr: DataNID(470v1) }
    DataNID(472v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(473v1) -- Arith(Add, DataNID(472v1), DataNID(49v1))
  ControlNID(169v1) -- Load { pred: ControlNID(168v1), addr: DataNID(473v1) }
    DataNID(459v1) -- ReturnValueOf(ControlNID(167v1))
    DataNID(475v1) -- Arith(Sub, DataNID(459v1), DataNID(104v1))
    DataNID(479v1) -- IsZero(DataNID(475v1))
  ControlNID(170v1) -- Branch { pred: ControlNID(169v1), cond: DataNID(479v1) }
  ControlNID(172v1) -- IfFalse(ControlNID(170v1))
  ControlNID(171v1) -- IfTrue(ControlNID(170v1))
  ControlNID(51v1) -- Merge { preds: [ControlNID(171v1), ControlNID(172v1)] }
    DataNID(482v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(483v1) -- Arith(Add, DataNID(482v1), DataNID(49v1))
  ControlNID(173v1) -- Load { pred: ControlNID(51v1), addr: DataNID(483v1) }
    DataNID(474v1) -- LoadedValueOf(ControlNID(169v1))
    DataNID(485v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(486v1) -- Arith(Add, DataNID(485v1), DataNID(49v1))
  ControlNID(174v1) -- Store { pred: ControlNID(173v1), addr: DataNID(486v1), value: DataNID(474v1) }
    DataNID(127v1) -- LoadedValueOf(ControlNID(82v1))
    DataNID(487v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(488v1) -- Arith(Add, DataNID(487v1), DataNID(49v1))
  ControlNID(175v1) -- Store { pred: ControlNID(174v1), addr: DataNID(488v1), value: DataNID(127v1) }
    DataNID(489v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(471v1) -- LoadedValueOf(ControlNID(168v1))
    DataNID(484v1) -- LoadedValueOf(ControlNID(173v1))
  ControlNID(176v1) -- Call { pred: ControlNID(175v1), callee: DataNID(489v1), args: [DataNID(484v1), DataNID(471v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(500v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(501v1) -- Arith(Add, DataNID(500v1), DataNID(49v1))
  ControlNID(177v1) -- Load { pred: ControlNID(176v1), addr: DataNID(501v1) }
    DataNID(490v1) -- ReturnValueOf(ControlNID(176v1))
    DataNID(504v1) -- Part { src: DataNID(490v1), offset: 0, size: 4 }
    DataNID(503v1) -- Part { src: DataNID(490v1), offset: 0, size: 4 }
    DataNID(505v1) -- Arith(BitAnd, DataNID(503v1), DataNID(504v1))
    DataNID(507v1) -- IsZero(DataNID(505v1))
    DataNID(512v1) -- Not(DataNID(507v1))
  ControlNID(178v1) -- Branch { pred: ControlNID(177v1), cond: DataNID(512v1) }
  ControlNID(180v1) -- IfFalse(ControlNID(178v1))
  ControlNID(179v1) -- IfTrue(ControlNID(178v1))
  ControlNID(172v1) -- IfFalse(ControlNID(170v1))
  ControlNID(10v1) -- Merge { preds: [ControlNID(172v1), ControlNID(179v1), ControlNID(180v1)] }
  ControlNID(162v1) -- IfFalse(ControlNID(160v1))
  ControlNID(161v1) -- IfTrue(ControlNID(160v1))
  ControlNID(11v1) -- Merge { preds: [ControlNID(161v1), ControlNID(162v1), ControlNID(10v1)] }
    DataNID(513v1) -- Phi(Phi { merge_nid: ControlNID(10v1), values: [(ControlNID(172v1), DataNID(127v1)), (ControlNID(180v1), DataNID(127v1))] })
    DataNID(517v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(518v1) -- Arith(Add, DataNID(517v1), DataNID(513v1))
    DataNID(521v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(127v1)), (ControlNID(10v1), DataNID(518v1))] })
    DataNID(522v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(523v1) -- Arith(Add, DataNID(522v1), DataNID(521v1))
  ControlNID(182v1) -- Load { pred: ControlNID(11v1), addr: DataNID(523v1) }
    DataNID(520v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(100v1)), (ControlNID(10v1), DataNID(474v1))] })
    DataNID(525v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(526v1) -- Arith(Add, DataNID(525v1), DataNID(49v1))
  ControlNID(183v1) -- Store { pred: ControlNID(182v1), addr: DataNID(526v1), value: DataNID(520v1) }
    DataNID(524v1) -- LoadedValueOf(ControlNID(182v1))
    DataNID(527v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(528v1) -- Arith(Add, DataNID(527v1), DataNID(49v1))
  ControlNID(184v1) -- Store { pred: ControlNID(183v1), addr: DataNID(528v1), value: DataNID(524v1) }
    DataNID(529v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(519v1) -- Phi(Phi { merge_nid: ControlNID(11v1), values: [(ControlNID(162v1), DataNID(442v1)), (ControlNID(10v1), DataNID(471v1))] })
    DataNID(524v1) -- LoadedValueOf(ControlNID(182v1))
  ControlNID(185v1) -- Call { pred: ControlNID(184v1), callee: DataNID(529v1), args: [DataNID(524v1), DataNID(519v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(540v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(541v1) -- Arith(Add, DataNID(540v1), DataNID(49v1))
  ControlNID(186v1) -- Load { pred: ControlNID(185v1), addr: DataNID(541v1) }
    DataNID(543v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(544v1) -- Arith(Add, DataNID(543v1), DataNID(49v1))
  ControlNID(187v1) -- Load { pred: ControlNID(186v1), addr: DataNID(544v1) }
    DataNID(530v1) -- ReturnValueOf(ControlNID(185v1))
    DataNID(546v1) -- Arith(Sub, DataNID(530v1), DataNID(104v1))
    DataNID(550v1) -- IsZero(DataNID(546v1))
  ControlNID(188v1) -- Branch { pred: ControlNID(187v1), cond: DataNID(550v1) }
  ControlNID(190v1) -- IfFalse(ControlNID(188v1))
  ControlNID(189v1) -- IfTrue(ControlNID(188v1))
  ControlNID(49v1) -- Merge { preds: [ControlNID(189v1), ControlNID(190v1)] }
    DataNID(553v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(554v1) -- Arith(Add, DataNID(553v1), DataNID(49v1))
  ControlNID(191v1) -- Load { pred: ControlNID(49v1), addr: DataNID(554v1) }
    DataNID(545v1) -- LoadedValueOf(ControlNID(187v1))
    DataNID(556v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(557v1) -- Arith(Add, DataNID(556v1), DataNID(49v1))
  ControlNID(192v1) -- Store { pred: ControlNID(191v1), addr: DataNID(557v1), value: DataNID(545v1) }
    DataNID(558v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(542v1) -- LoadedValueOf(ControlNID(186v1))
    DataNID(555v1) -- LoadedValueOf(ControlNID(191v1))
  ControlNID(193v1) -- Call { pred: ControlNID(192v1), callee: DataNID(558v1), args: [DataNID(555v1), DataNID(542v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(569v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(570v1) -- Arith(Add, DataNID(569v1), DataNID(49v1))
  ControlNID(194v1) -- Load { pred: ControlNID(193v1), addr: DataNID(570v1) }
    DataNID(559v1) -- ReturnValueOf(ControlNID(193v1))
    DataNID(573v1) -- Part { src: DataNID(559v1), offset: 0, size: 4 }
    DataNID(572v1) -- Part { src: DataNID(559v1), offset: 0, size: 4 }
    DataNID(574v1) -- Arith(BitAnd, DataNID(572v1), DataNID(573v1))
    DataNID(576v1) -- IsZero(DataNID(574v1))
    DataNID(581v1) -- Not(DataNID(576v1))
  ControlNID(195v1) -- Branch { pred: ControlNID(194v1), cond: DataNID(581v1) }
  ControlNID(197v1) -- IfFalse(ControlNID(195v1))
  ControlNID(196v1) -- IfTrue(ControlNID(195v1))
  ControlNID(190v1) -- IfFalse(ControlNID(188v1))
  ControlNID(12v1) -- Merge { preds: [ControlNID(190v1), ControlNID(196v1), ControlNID(197v1)] }
  ControlNID(159v1) -- IfFalse(ControlNID(157v1))
  ControlNID(158v1) -- IfTrue(ControlNID(157v1))
  ControlNID(13v1) -- Merge { preds: [ControlNID(158v1), ControlNID(159v1), ControlNID(12v1)] }
    DataNID(590v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(591v1) -- Arith(Add, DataNID(521v1), DataNID(590v1))
    DataNID(600v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(127v1)), (ControlNID(12v1), DataNID(591v1))] })
    DataNID(601v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(602v1) -- Arith(Add, DataNID(601v1), DataNID(600v1))
  ControlNID(199v1) -- Load { pred: ControlNID(13v1), addr: DataNID(602v1) }
    DataNID(599v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(100v1)), (ControlNID(12v1), DataNID(545v1))] })
    DataNID(604v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(605v1) -- Arith(Add, DataNID(604v1), DataNID(49v1))
  ControlNID(200v1) -- Store { pred: ControlNID(199v1), addr: DataNID(605v1), value: DataNID(599v1) }
    DataNID(603v1) -- LoadedValueOf(ControlNID(199v1))
    DataNID(606v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(607v1) -- Arith(Add, DataNID(606v1), DataNID(49v1))
  ControlNID(201v1) -- Store { pred: ControlNID(200v1), addr: DataNID(607v1), value: DataNID(603v1) }
    DataNID(608v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(598v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(159v1), DataNID(434v1)), (ControlNID(12v1), DataNID(542v1))] })
    DataNID(603v1) -- LoadedValueOf(ControlNID(199v1))
  ControlNID(202v1) -- Call { pred: ControlNID(201v1), callee: DataNID(608v1), args: [DataNID(603v1), DataNID(598v1), DataNID(113v1), DataNID(18v1)] }
    DataNID(619v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(620v1) -- Arith(Add, DataNID(619v1), DataNID(49v1))
  ControlNID(203v1) -- Load { pred: ControlNID(202v1), addr: DataNID(620v1) }
    DataNID(622v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(623v1) -- Arith(Add, DataNID(622v1), DataNID(49v1))
  ControlNID(204v1) -- Load { pred: ControlNID(203v1), addr: DataNID(623v1) }
    DataNID(609v1) -- ReturnValueOf(ControlNID(202v1))
    DataNID(625v1) -- Arith(Sub, DataNID(609v1), DataNID(104v1))
    DataNID(629v1) -- IsZero(DataNID(625v1))
  ControlNID(205v1) -- Branch { pred: ControlNID(204v1), cond: DataNID(629v1) }
  ControlNID(207v1) -- IfFalse(ControlNID(205v1))
  ControlNID(206v1) -- IfTrue(ControlNID(205v1))
  ControlNID(47v1) -- Merge { preds: [ControlNID(206v1), ControlNID(207v1)] }
    DataNID(632v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(633v1) -- Arith(Add, DataNID(632v1), DataNID(49v1))
  ControlNID(208v1) -- Load { pred: ControlNID(47v1), addr: DataNID(633v1) }
    DataNID(624v1) -- LoadedValueOf(ControlNID(204v1))
    DataNID(635v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(636v1) -- Arith(Add, DataNID(635v1), DataNID(49v1))
  ControlNID(209v1) -- Store { pred: ControlNID(208v1), addr: DataNID(636v1), value: DataNID(624v1) }
    DataNID(637v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(621v1) -- LoadedValueOf(ControlNID(203v1))
    DataNID(634v1) -- LoadedValueOf(ControlNID(208v1))
  ControlNID(210v1) -- Call { pred: ControlNID(209v1), callee: DataNID(637v1), args: [DataNID(634v1), DataNID(621v1), DataNID(104v1), DataNID(18v1)] }
    DataNID(648v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(649v1) -- Arith(Add, DataNID(648v1), DataNID(49v1))
  ControlNID(211v1) -- Load { pred: ControlNID(210v1), addr: DataNID(649v1) }
    DataNID(638v1) -- ReturnValueOf(ControlNID(210v1))
    DataNID(652v1) -- Part { src: DataNID(638v1), offset: 0, size: 4 }
    DataNID(651v1) -- Part { src: DataNID(638v1), offset: 0, size: 4 }
    DataNID(653v1) -- Arith(BitAnd, DataNID(651v1), DataNID(652v1))
    DataNID(655v1) -- IsZero(DataNID(653v1))
    DataNID(660v1) -- Not(DataNID(655v1))
  ControlNID(212v1) -- Branch { pred: ControlNID(211v1), cond: DataNID(660v1) }
  ControlNID(214v1) -- IfFalse(ControlNID(212v1))
  ControlNID(213v1) -- IfTrue(ControlNID(212v1))
  ControlNID(207v1) -- IfFalse(ControlNID(205v1))
  ControlNID(14v1) -- Merge { preds: [ControlNID(207v1), ControlNID(213v1), ControlNID(214v1)] }
    DataNID(661v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(662v1) -- Arith(Add, DataNID(661v1), DataNID(49v1))
  ControlNID(216v1) -- Load { pred: ControlNID(14v1), addr: DataNID(662v1) }
    DataNID(663v1) -- LoadedValueOf(ControlNID(216v1))
    DataNID(664v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(414v1) -- Part { src: DataNID(18v1), offset: 4, size: 4 }
    DataNID(412v1) -- Part { src: DataNID(18v1), offset: 0, size: 4 }
    DataNID(411v1) -- Part { src: DataNID(18v1), offset: 0, size: 4 }
    DataNID(413v1) -- Arith(BitXor, DataNID(411v1), DataNID(412v1))
    DataNID(415v1) -- Concat { lo: DataNID(413v1), hi: DataNID(414v1) }
    DataNID(665v1) -- Arith(Add, DataNID(415v1), DataNID(664v1))
    DataNID(680v1) -- Arith(Sub, DataNID(665v1), DataNID(663v1))
    DataNID(684v1) -- IsZero(DataNID(680v1))
  ControlNID(217v1) -- Branch { pred: ControlNID(216v1), cond: DataNID(684v1) }
  ControlNID(219v1) -- IfFalse(ControlNID(217v1))
  ControlNID(156v1) -- IfFalse(ControlNID(154v1))
  ControlNID(155v1) -- IfTrue(ControlNID(154v1))
  ControlNID(15v1) -- Merge { preds: [ControlNID(155v1), ControlNID(156v1), ControlNID(219v1)] }
    DataNID(398v1) -- Phi(Phi { merge_nid: ControlNID(5v1), values: [(ControlNID(87v1), DataNID(15v1)), (ControlNID(147v1), DataNID(25v1))] })
    DataNID(689v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(690v1) -- Arith(Add, DataNID(689v1), DataNID(49v1))
  ControlNID(220v1) -- Store { pred: ControlNID(15v1), addr: DataNID(690v1), value: DataNID(398v1) }
    DataNID(132v1) -- Concat { lo: DataNID(130v1), hi: DataNID(131v1) }
    DataNID(691v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(692v1) -- Arith(Add, DataNID(691v1), DataNID(49v1))
  ControlNID(221v1) -- Store { pred: ControlNID(220v1), addr: DataNID(692v1), value: DataNID(132v1) }
    DataNID(687v1) -- Phi(Phi { merge_nid: ControlNID(15v1), values: [(ControlNID(156v1), DataNID(100v1)), (ControlNID(219v1), DataNID(624v1))] })
    DataNID(693v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(694v1) -- Arith(Add, DataNID(693v1), DataNID(49v1))
  ControlNID(222v1) -- Store { pred: ControlNID(221v1), addr: DataNID(694v1), value: DataNID(687v1) }
  ControlNID(223v1) -- Jump { pred: ControlNID(222v1) }
  ControlNID(223v1) -- Jump { pred: ControlNID(222v1) }
  ControlNID(20v1) -- Merge { preds: [ControlNID(223v1), ControlNID(223v1)] }
    DataNID(672v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(673v1) -- Arith(Add, DataNID(600v1), DataNID(672v1))
    DataNID(688v1) -- Phi(Phi { merge_nid: ControlNID(15v1), values: [(ControlNID(156v1), DataNID(127v1)), (ControlNID(219v1), DataNID(673v1))] })
    DataNID(697v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(688v1))] })
    DataNID(698v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(699v1) -- Arith(Add, DataNID(698v1), DataNID(697v1))
  ControlNID(224v1) -- Load { pred: ControlNID(20v1), addr: DataNID(699v1) }
    DataNID(701v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(696v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(18v1))] })
    DataNID(113v1) -- LoadedValueOf(ControlNID(77v1))
    DataNID(695v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(426v1))] })
    DataNID(700v1) -- LoadedValueOf(ControlNID(224v1))
  ControlNID(225v1) -- Call { pred: ControlNID(224v1), callee: DataNID(701v1), args: [DataNID(700v1), DataNID(695v1), DataNID(113v1), DataNID(696v1)] }
    DataNID(702v1) -- ReturnValueOf(ControlNID(225v1))
    DataNID(712v1) -- Arith(Sub, DataNID(702v1), DataNID(104v1))
    DataNID(716v1) -- IsZero(DataNID(712v1))
    DataNID(719v1) -- Not(DataNID(716v1))
  ControlNID(226v1) -- Branch { pred: ControlNID(225v1), cond: DataNID(719v1) }
  ControlNID(279v1) -- IfFalse(ControlNID(226v1))
  ControlNID(232v1) -- IfTrue(ControlNID(231v1))
  ControlNID(227v1) -- IfTrue(ControlNID(226v1))
  ControlNID(16v1) -- Merge { preds: [ControlNID(227v1), ControlNID(228v1), ControlNID(232v1), ControlNID(233v1)] }
    DataNID(746v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(747v1) -- Arith(Add, DataNID(746v1), DataNID(697v1))
  ControlNID(234v1) -- Load { pred: ControlNID(16v1), addr: DataNID(747v1) }
    DataNID(748v1) -- LoadedValueOf(ControlNID(234v1))
    DataNID(753v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(754v1) -- Arith(Add, DataNID(753v1), DataNID(49v1))
  ControlNID(235v1) -- Store { pred: ControlNID(234v1), addr: DataNID(754v1), value: DataNID(748v1) }
    DataNID(755v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(745v1) -- Phi(Phi { merge_nid: ControlNID(16v1), values: [(ControlNID(228v1), DataNID(113v1)), (ControlNID(233v1), DataNID(104v1))] })
    DataNID(744v1) -- Phi(Phi { merge_nid: ControlNID(16v1), values: [(ControlNID(228v1), DataNID(695v1)), (ControlNID(233v1), DataNID(700v1))] })
    DataNID(748v1) -- LoadedValueOf(ControlNID(234v1))
  ControlNID(236v1) -- Call { pred: ControlNID(235v1), callee: DataNID(755v1), args: [DataNID(748v1), DataNID(744v1), DataNID(745v1), DataNID(696v1)] }
    DataNID(766v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(767v1) -- Arith(Add, DataNID(766v1), DataNID(49v1))
  ControlNID(237v1) -- Load { pred: ControlNID(236v1), addr: DataNID(767v1) }
    DataNID(756v1) -- ReturnValueOf(ControlNID(236v1))
    DataNID(769v1) -- Arith(Sub, DataNID(756v1), DataNID(104v1))
    DataNID(773v1) -- IsZero(DataNID(769v1))
  ControlNID(238v1) -- Branch { pred: ControlNID(237v1), cond: DataNID(773v1) }
  ControlNID(240v1) -- IfFalse(ControlNID(238v1))
  ControlNID(239v1) -- IfTrue(ControlNID(238v1))
  ControlNID(23v1) -- Merge { preds: [ControlNID(239v1), ControlNID(240v1)] }
    DataNID(776v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(777v1) -- Arith(Add, DataNID(776v1), DataNID(49v1))
  ControlNID(241v1) -- Load { pred: ControlNID(23v1), addr: DataNID(777v1) }
    DataNID(779v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(768v1) -- LoadedValueOf(ControlNID(237v1))
    DataNID(778v1) -- LoadedValueOf(ControlNID(241v1))
  ControlNID(242v1) -- Call { pred: ControlNID(241v1), callee: DataNID(779v1), args: [DataNID(778v1), DataNID(768v1), DataNID(104v1), DataNID(696v1)] }
    DataNID(780v1) -- ReturnValueOf(ControlNID(242v1))
    DataNID(791v1) -- Part { src: DataNID(780v1), offset: 0, size: 4 }
    DataNID(790v1) -- Part { src: DataNID(780v1), offset: 0, size: 4 }
    DataNID(792v1) -- Arith(BitAnd, DataNID(790v1), DataNID(791v1))
    DataNID(794v1) -- IsZero(DataNID(792v1))
    DataNID(799v1) -- Not(DataNID(794v1))
  ControlNID(243v1) -- Branch { pred: ControlNID(242v1), cond: DataNID(799v1) }
  ControlNID(245v1) -- IfFalse(ControlNID(243v1))
  ControlNID(244v1) -- IfTrue(ControlNID(243v1))
  ControlNID(240v1) -- IfFalse(ControlNID(238v1))
  ControlNID(17v1) -- Merge { preds: [ControlNID(240v1), ControlNID(244v1), ControlNID(245v1)] }
    DataNID(749v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(750v1) -- Arith(Add, DataNID(749v1), DataNID(697v1))
    DataNID(801v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(802v1) -- Arith(Add, DataNID(801v1), DataNID(750v1))
  ControlNID(246v1) -- Load { pred: ControlNID(17v1), addr: DataNID(802v1) }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(808v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(809v1) -- Arith(Add, DataNID(808v1), DataNID(49v1))
  ControlNID(247v1) -- Store { pred: ControlNID(246v1), addr: DataNID(809v1), value: DataNID(803v1) }
    DataNID(810v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(800v1) -- Phi(Phi { merge_nid: ControlNID(17v1), values: [(ControlNID(240v1), DataNID(745v1)), (ControlNID(245v1), DataNID(104v1))] })
    DataNID(768v1) -- LoadedValueOf(ControlNID(237v1))
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
  ControlNID(248v1) -- Call { pred: ControlNID(247v1), callee: DataNID(810v1), args: [DataNID(803v1), DataNID(768v1), DataNID(800v1), DataNID(803v1)] }
    DataNID(821v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(822v1) -- Arith(Add, DataNID(821v1), DataNID(49v1))
  ControlNID(249v1) -- Load { pred: ControlNID(248v1), addr: DataNID(822v1) }
    DataNID(811v1) -- ReturnValueOf(ControlNID(248v1))
    DataNID(824v1) -- Arith(Sub, DataNID(811v1), DataNID(104v1))
    DataNID(828v1) -- IsZero(DataNID(824v1))
  ControlNID(250v1) -- Branch { pred: ControlNID(249v1), cond: DataNID(828v1) }
  ControlNID(252v1) -- IfFalse(ControlNID(250v1))
  ControlNID(251v1) -- IfTrue(ControlNID(250v1))
  ControlNID(38v1) -- Merge { preds: [ControlNID(251v1), ControlNID(252v1)] }
    DataNID(831v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(832v1) -- Arith(Add, DataNID(831v1), DataNID(49v1))
  ControlNID(253v1) -- Load { pred: ControlNID(38v1), addr: DataNID(832v1) }
    DataNID(834v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(823v1) -- LoadedValueOf(ControlNID(249v1))
    DataNID(833v1) -- LoadedValueOf(ControlNID(253v1))
  ControlNID(254v1) -- Call { pred: ControlNID(253v1), callee: DataNID(834v1), args: [DataNID(833v1), DataNID(823v1), DataNID(104v1), DataNID(803v1)] }
    DataNID(835v1) -- ReturnValueOf(ControlNID(254v1))
    DataNID(846v1) -- Part { src: DataNID(835v1), offset: 0, size: 4 }
    DataNID(845v1) -- Part { src: DataNID(835v1), offset: 0, size: 4 }
    DataNID(847v1) -- Arith(BitAnd, DataNID(845v1), DataNID(846v1))
    DataNID(849v1) -- IsZero(DataNID(847v1))
    DataNID(854v1) -- Not(DataNID(849v1))
  ControlNID(255v1) -- Branch { pred: ControlNID(254v1), cond: DataNID(854v1) }
  ControlNID(257v1) -- IfFalse(ControlNID(255v1))
  ControlNID(256v1) -- IfTrue(ControlNID(255v1))
  ControlNID(252v1) -- IfFalse(ControlNID(250v1))
  ControlNID(18v1) -- Merge { preds: [ControlNID(252v1), ControlNID(256v1), ControlNID(257v1)] }
    DataNID(856v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(857v1) -- Arith(Add, DataNID(856v1), DataNID(750v1))
  ControlNID(259v1) -- Load { pred: ControlNID(18v1), addr: DataNID(857v1) }
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
    DataNID(863v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(864v1) -- Arith(Add, DataNID(863v1), DataNID(49v1))
  ControlNID(260v1) -- Store { pred: ControlNID(259v1), addr: DataNID(864v1), value: DataNID(858v1) }
    DataNID(865v1) -- ConstInt { size: ValueSize(8), value: 4199136 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(855v1) -- Phi(Phi { merge_nid: ControlNID(18v1), values: [(ControlNID(252v1), DataNID(800v1)), (ControlNID(257v1), DataNID(104v1))] })
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
    DataNID(858v1) -- LoadedValueOf(ControlNID(259v1))
  ControlNID(261v1) -- Call { pred: ControlNID(260v1), callee: DataNID(865v1), args: [DataNID(858v1), DataNID(858v1), DataNID(855v1), DataNID(803v1)] }
    DataNID(876v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(877v1) -- Arith(Add, DataNID(876v1), DataNID(49v1))
  ControlNID(262v1) -- Load { pred: ControlNID(261v1), addr: DataNID(877v1) }
    DataNID(866v1) -- ReturnValueOf(ControlNID(261v1))
    DataNID(879v1) -- Arith(Sub, DataNID(866v1), DataNID(104v1))
    DataNID(883v1) -- IsZero(DataNID(879v1))
  ControlNID(263v1) -- Branch { pred: ControlNID(262v1), cond: DataNID(883v1) }
  ControlNID(265v1) -- IfFalse(ControlNID(263v1))
  ControlNID(264v1) -- IfTrue(ControlNID(263v1))
  ControlNID(40v1) -- Merge { preds: [ControlNID(264v1), ControlNID(265v1)] }
    DataNID(886v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(887v1) -- Arith(Add, DataNID(886v1), DataNID(49v1))
  ControlNID(266v1) -- Load { pred: ControlNID(40v1), addr: DataNID(887v1) }
    DataNID(889v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(803v1) -- LoadedValueOf(ControlNID(246v1))
    DataNID(878v1) -- LoadedValueOf(ControlNID(262v1))
    DataNID(888v1) -- LoadedValueOf(ControlNID(266v1))
  ControlNID(267v1) -- Call { pred: ControlNID(266v1), callee: DataNID(889v1), args: [DataNID(888v1), DataNID(878v1), DataNID(104v1), DataNID(803v1)] }
    DataNID(890v1) -- ReturnValueOf(ControlNID(267v1))
    DataNID(901v1) -- Part { src: DataNID(890v1), offset: 0, size: 4 }
    DataNID(900v1) -- Part { src: DataNID(890v1), offset: 0, size: 4 }
    DataNID(902v1) -- Arith(BitAnd, DataNID(900v1), DataNID(901v1))
    DataNID(904v1) -- IsZero(DataNID(902v1))
    DataNID(909v1) -- Not(DataNID(904v1))
  ControlNID(268v1) -- Branch { pred: ControlNID(267v1), cond: DataNID(909v1) }
  ControlNID(270v1) -- IfFalse(ControlNID(268v1))
  ControlNID(269v1) -- IfTrue(ControlNID(268v1))
  ControlNID(265v1) -- IfFalse(ControlNID(263v1))
  ControlNID(19v1) -- Merge { preds: [ControlNID(265v1), ControlNID(269v1), ControlNID(270v1)] }
    DataNID(921v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(922v1) -- Arith(Add, DataNID(921v1), DataNID(49v1))
  ControlNID(275v1) -- Load { pred: ControlNID(19v1), addr: DataNID(922v1) }
    DataNID(923v1) -- LoadedValueOf(ControlNID(275v1))
    DataNID(751v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(752v1) -- Arith(Add, DataNID(751v1), DataNID(415v1))
    DataNID(924v1) -- ConstInt { size: ValueSize(8), value: 3 }
    DataNID(925v1) -- Arith(Add, DataNID(924v1), DataNID(752v1))
    DataNID(928v1) -- Arith(Sub, DataNID(925v1), DataNID(923v1))
    DataNID(932v1) -- IsZero(DataNID(928v1))
  ControlNID(276v1) -- Branch { pred: ControlNID(275v1), cond: DataNID(932v1) }
  ControlNID(278v1) -- IfFalse(ControlNID(276v1))
  ControlNID(228v1) -- Merge { preds: [ControlNID(278v1), ControlNID(279v1)] }
  ControlNID(21v1) -- Merge { preds: [ControlNID(228v1)] }
    DataNID(720v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(721v1) -- Arith(Add, DataNID(720v1), DataNID(49v1))
  ControlNID(229v1) -- Load { pred: ControlNID(21v1), addr: DataNID(721v1) }
    DataNID(723v1) -- ConstInt { size: ValueSize(8), value: 4199232 }
    DataNID(696v1) -- Phi(Phi { merge_nid: ControlNID(20v1), values: [(ControlNID(223v1), DataNID(18v1))] })
    DataNID(104v1) -- Arith(Sub, DataNID(100v1), DataNID(103v1))
    DataNID(700v1) -- LoadedValueOf(ControlNID(224v1))
    DataNID(722v1) -- LoadedValueOf(ControlNID(229v1))
  ControlNID(230v1) -- Call { pred: ControlNID(229v1), callee: DataNID(723v1), args: [DataNID(722v1), DataNID(700v1), DataNID(104v1), DataNID(696v1)] }
    DataNID(724v1) -- ReturnValueOf(ControlNID(230v1))
    DataNID(735v1) -- Part { src: DataNID(724v1), offset: 0, size: 4 }
    DataNID(734v1) -- Part { src: DataNID(724v1), offset: 0, size: 4 }
    DataNID(736v1) -- Arith(BitAnd, DataNID(734v1), DataNID(735v1))
    DataNID(738v1) -- IsZero(DataNID(736v1))
    DataNID(743v1) -- Not(DataNID(738v1))
  ControlNID(231v1) -- Branch { pred: ControlNID(230v1), cond: DataNID(743v1) }
  ControlNID(233v1) -- IfFalse(ControlNID(231v1))
  ControlNID(22v1) -- Merge { preds: [ControlNID(233v1)] }
    DataNID(935v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(936v1) -- Arith(Add, DataNID(935v1), DataNID(49v1))
  ControlNID(280v1) -- Load { pred: ControlNID(22v1), addr: DataNID(936v1) }
    DataNID(938v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(939v1) -- Arith(Add, DataNID(938v1), DataNID(49v1))
  ControlNID(281v1) -- Load { pred: ControlNID(280v1), addr: DataNID(939v1) }
    DataNID(941v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(942v1) -- Arith(Add, DataNID(941v1), DataNID(49v1))
  ControlNID(282v1) -- Load { pred: ControlNID(281v1), addr: DataNID(942v1) }
  ControlNID(283v1) -- Jump { pred: ControlNID(282v1) }
  ControlNID(283v1) -- Jump { pred: ControlNID(282v1) }
  ControlNID(41v1) -- Merge { preds: [ControlNID(270v1)] }
  ControlNID(271v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(271v1) -- Jump { pred: ControlNID(41v1) }
  ControlNID(39v1) -- Merge { preds: [ControlNID(257v1)] }
  ControlNID(258v1) -- Jump { pred: ControlNID(39v1) }
  ControlNID(258v1) -- Jump { pred: ControlNID(39v1) }
  ControlNID(24v1) -- Merge { preds: [ControlNID(245v1), ControlNID(258v1), ControlNID(258v1), ControlNID(271v1), ControlNID(271v1)] }
    DataNID(912v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(913v1) -- Arith(Add, DataNID(912v1), DataNID(49v1))
  ControlNID(272v1) -- Load { pred: ControlNID(24v1), addr: DataNID(913v1) }
    DataNID(915v1) -- ConstInt { size: ValueSize(8), value: 48 }
    DataNID(916v1) -- Arith(Add, DataNID(915v1), DataNID(49v1))
  ControlNID(273v1) -- Load { pred: ControlNID(272v1), addr: DataNID(916v1) }
    DataNID(918v1) -- ConstInt { size: ValueSize(8), value: 56 }
    DataNID(919v1) -- Arith(Add, DataNID(918v1), DataNID(49v1))
  ControlNID(274v1) -- Load { pred: ControlNID(273v1), addr: DataNID(919v1) }
  ControlNID(48v1) -- Merge { preds: [ControlNID(214v1)] }
  ControlNID(215v1) -- Jump { pred: ControlNID(48v1) }
  ControlNID(215v1) -- Jump { pred: ControlNID(48v1) }
  ControlNID(50v1) -- Merge { preds: [ControlNID(197v1)] }
  ControlNID(198v1) -- Jump { pred: ControlNID(50v1) }
  ControlNID(198v1) -- Jump { pred: ControlNID(50v1) }
  ControlNID(52v1) -- Merge { preds: [ControlNID(180v1)] }
  ControlNID(181v1) -- Jump { pred: ControlNID(52v1) }
  ControlNID(181v1) -- Jump { pred: ControlNID(52v1) }
  ControlNID(25v1) -- Merge { preds: [ControlNID(181v1), ControlNID(181v1), ControlNID(198v1), ControlNID(198v1), ControlNID(215v1), ControlNID(215v1), ControlNID(274v1), ControlNID(283v1), ControlNID(283v1)] }
    DataNID(948v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(949v1) -- Arith(Add, DataNID(948v1), DataNID(49v1))
  ControlNID(284v1) -- Load { pred: ControlNID(25v1), addr: DataNID(949v1) }
    DataNID(944v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(415v1)), (ControlNID(198v1), DataNID(415v1)), (ControlNID(215v1), DataNID(415v1)), (ControlNID(274v1), DataNID(752v1)), (ControlNID(283v1), DataNID(415v1))] })
    DataNID(937v1) -- LoadedValueOf(ControlNID(280v1))
    DataNID(914v1) -- LoadedValueOf(ControlNID(272v1))
    DataNID(947v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(132v1)), (ControlNID(198v1), DataNID(132v1)), (ControlNID(215v1), DataNID(132v1)), (ControlNID(274v1), DataNID(914v1)), (ControlNID(283v1), DataNID(937v1))] })
    DataNID(953v1) -- ArithK(Mul, DataNID(947v1), 8)
    DataNID(950v1) -- LoadedValueOf(ControlNID(284v1))
    DataNID(951v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(952v1) -- Arith(Add, DataNID(951v1), DataNID(950v1))
    DataNID(954v1) -- Arith(Add, DataNID(952v1), DataNID(953v1))
  ControlNID(285v1) -- Store { pred: ControlNID(284v1), addr: DataNID(954v1), value: DataNID(944v1) }
    DataNID(943v1) -- LoadedValueOf(ControlNID(282v1))
    DataNID(920v1) -- LoadedValueOf(ControlNID(274v1))
    DataNID(946v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(398v1)), (ControlNID(198v1), DataNID(398v1)), (ControlNID(215v1), DataNID(398v1)), (ControlNID(274v1), DataNID(920v1)), (ControlNID(283v1), DataNID(943v1))] })
    DataNID(859v1) -- ConstInt { size: ValueSize(8), value: 80 }
    DataNID(860v1) -- Arith(Add, DataNID(859v1), DataNID(750v1))
    DataNID(804v1) -- ConstInt { size: ValueSize(8), value: 40 }
    DataNID(805v1) -- Arith(Add, DataNID(804v1), DataNID(750v1))
    DataNID(911v1) -- Phi(Phi { merge_nid: ControlNID(24v1), values: [(ControlNID(245v1), DataNID(750v1)), (ControlNID(258v1), DataNID(805v1)), (ControlNID(271v1), DataNID(860v1))] })
    DataNID(945v1) -- Phi(Phi { merge_nid: ControlNID(25v1), values: [(ControlNID(181v1), DataNID(127v1)), (ControlNID(198v1), DataNID(521v1)), (ControlNID(215v1), DataNID(600v1)), (ControlNID(274v1), DataNID(911v1)), (ControlNID(283v1), DataNID(697v1))] })
    DataNID(955v1) -- Arith(Sub, DataNID(945v1), DataNID(946v1))
    DataNID(959v1) -- IsZero(DataNID(955v1))
  ControlNID(286v1) -- Branch { pred: ControlNID(285v1), cond: DataNID(959v1) }
  ControlNID(288v1) -- IfFalse(ControlNID(286v1))
  ControlNID(26v1) -- Merge { preds: [ControlNID(288v1)] }
    DataNID(962v1) -- ConstInt { size: ValueSize(8), value: 32 }
    DataNID(963v1) -- Arith(Add, DataNID(962v1), DataNID(25v1))
  ControlNID(289v1) -- Load { pred: ControlNID(26v1), addr: DataNID(963v1) }
  ControlNID(290v1) -- TODO { pred: ControlNID(289v1), label: "unsupported: movzx edi,byte ptr [r8]" }
    DataNID(965v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(964v1) -- LoadedValueOf(ControlNID(289v1))
    DataNID(966v1) -- Arith(Sub, DataNID(964v1), DataNID(965v1))
    DataNID(970v1) -- IsZero(DataNID(966v1))
    DataNID(973v1) -- Not(DataNID(970v1))
  ControlNID(291v1) -- Branch { pred: ControlNID(290v1), cond: DataNID(973v1) }
  ControlNID(293v1) -- IfFalse(ControlNID(291v1))
  ControlNID(292v1) -- IfTrue(ControlNID(291v1))
  ControlNID(115v1) -- IfFalse(ControlNID(113v1))
  ControlNID(34v1) -- Merge { preds: [ControlNID(115v1), ControlNID(292v1), ControlNID(293v1)] }
    DataNID(975v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(976v1) -- Arith(Add, DataNID(975v1), DataNID(49v1))
  ControlNID(295v1) -- Load { pred: ControlNID(34v1), addr: DataNID(976v1) }
    DataNID(974v1) -- Phi(Phi { merge_nid: ControlNID(34v1), values: [(ControlNID(115v1), DataNID(221v1)), (ControlNID(293v1), DataNID(19v1))] })
    DataNID(979v1) -- Part { src: DataNID(974v1), offset: 0, size: 1 }
    DataNID(978v1) -- Part { src: DataNID(974v1), offset: 0, size: 1 }
    DataNID(980v1) -- Arith(BitAnd, DataNID(978v1), DataNID(979v1))
    DataNID(982v1) -- IsZero(DataNID(980v1))
    DataNID(987v1) -- Not(DataNID(982v1))
  ControlNID(296v1) -- Branch { pred: ControlNID(295v1), cond: DataNID(987v1) }
  ControlNID(298v1) -- IfFalse(ControlNID(296v1))
  ControlNID(117v1) -- IfTrue(ControlNID(116v1))
  ControlNID(54v1) -- Merge { preds: [ControlNID(117v1), ControlNID(118v1)] }
    DataNID(274v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(275v1) -- Arith(Add, DataNID(274v1), DataNID(49v1))
  ControlNID(119v1) -- Load { pred: ControlNID(54v1), addr: DataNID(275v1) }
  ControlNID(120v1) -- Jump { pred: ControlNID(119v1) }
  ControlNID(120v1) -- Jump { pred: ControlNID(119v1) }
  ControlNID(35v1) -- Merge { preds: [ControlNID(120v1), ControlNID(120v1), ControlNID(298v1)] }
    DataNID(1015v1) -- ConstInt { size: ValueSize(8), value: 24 }
    DataNID(1016v1) -- Arith(Add, DataNID(1015v1), DataNID(49v1))
  ControlNID(306v1) -- Load { pred: ControlNID(35v1), addr: DataNID(1016v1) }
    DataNID(1013v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(1014v1) -- Arith(Add, DataNID(1013v1), DataNID(132v1))
    DataNID(1017v1) -- LoadedValueOf(ControlNID(306v1))
    DataNID(1018v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(1019v1) -- Arith(Add, DataNID(1018v1), DataNID(1017v1))
  ControlNID(307v1) -- Store { pred: ControlNID(306v1), addr: DataNID(1019v1), value: DataNID(1014v1) }
    DataNID(977v1) -- LoadedValueOf(ControlNID(295v1))
    DataNID(276v1) -- LoadedValueOf(ControlNID(119v1))
    DataNID(1012v1) -- Phi(Phi { merge_nid: ControlNID(35v1), values: [(ControlNID(120v1), DataNID(276v1)), (ControlNID(298v1), DataNID(977v1))] })
    DataNID(1012v1) -- Phi(Phi { merge_nid: ControlNID(35v1), values: [(ControlNID(120v1), DataNID(276v1)), (ControlNID(298v1), DataNID(977v1))] })
    DataNID(1020v1) -- Arith(BitAnd, DataNID(1012v1), DataNID(1012v1))
    DataNID(1022v1) -- IsZero(DataNID(1020v1))
    DataNID(1027v1) -- Not(DataNID(1022v1))
  ControlNID(308v1) -- Branch { pred: ControlNID(307v1), cond: DataNID(1027v1) }
  ControlNID(310v1) -- IfFalse(ControlNID(308v1))
  ControlNID(137v1) -- IfTrue(ControlNID(136v1))
  ControlNID(44v1) -- Merge { preds: [ControlNID(132v1), ControlNID(137v1), ControlNID(138v1)] }
    DataNID(373v1) -- ConstInt { size: ValueSize(8), value: 72 }
    DataNID(374v1) -- Arith(Add, DataNID(373v1), DataNID(49v1))
  ControlNID(139v1) -- Load { pred: ControlNID(44v1), addr: DataNID(374v1) }
  ControlNID(45v1) -- Merge { preds: [ControlNID(139v1)] }
    DataNID(375v1) -- LoadedValueOf(ControlNID(139v1))
    DataNID(375v1) -- LoadedValueOf(ControlNID(139v1))
    DataNID(376v1) -- Arith(BitAnd, DataNID(375v1), DataNID(375v1))
    DataNID(378v1) -- IsZero(DataNID(376v1))
  ControlNID(140v1) -- Branch { pred: ControlNID(45v1), cond: DataNID(378v1) }
  ControlNID(321v1) -- IfFalse(ControlNID(140v1))
  ControlNID(297v1) -- IfTrue(ControlNID(296v1))
  ControlNID(287v1) -- IfTrue(ControlNID(286v1))
  ControlNID(277v1) -- IfTrue(ControlNID(276v1))
  ControlNID(218v1) -- IfTrue(ControlNID(217v1))
  ControlNID(152v1) -- IfTrue(ControlNID(151v1))
  ControlNID(107v1) -- IfTrue(ControlNID(106v1))
  ControlNID(93v1) -- IfTrue(ControlNID(92v1))
  ControlNID(75v1) -- IfTrue(ControlNID(74v1))
  ControlNID(42v1) -- Merge { preds: [ControlNID(75v1), ControlNID(76v1), ControlNID(93v1), ControlNID(94v1), ControlNID(107v1), ControlNID(108v1), ControlNID(152v1), ControlNID(153v1), ControlNID(218v1), ControlNID(219v1), ControlNID(277v1), ControlNID(278v1), ControlNID(287v1), ControlNID(288v1), ControlNID(297v1), ControlNID(298v1)] }
    DataNID(989v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(990v1) -- Arith(Add, DataNID(49v1), DataNID(989v1))
  ControlNID(299v1) -- Load { pred: ControlNID(42v1), addr: DataNID(990v1) }
    DataNID(1001v1) -- ArithK(Add, DataNID(990v1), 8)
  ControlNID(300v1) -- Load { pred: ControlNID(299v1), addr: DataNID(1001v1) }
    DataNID(1003v1) -- ArithK(Add, DataNID(1001v1), 8)
  ControlNID(301v1) -- Load { pred: ControlNID(300v1), addr: DataNID(1003v1) }
    DataNID(1005v1) -- ArithK(Add, DataNID(1003v1), 8)
  ControlNID(302v1) -- Load { pred: ControlNID(301v1), addr: DataNID(1005v1) }
    DataNID(1007v1) -- ArithK(Add, DataNID(1005v1), 8)
  ControlNID(303v1) -- Load { pred: ControlNID(302v1), addr: DataNID(1007v1) }
    DataNID(1009v1) -- ArithK(Add, DataNID(1007v1), 8)
  ControlNID(304v1) -- Load { pred: ControlNID(303v1), addr: DataNID(1009v1) }
  ControlNID(305v1) -- Jump { pred: ControlNID(304v1) }
  ControlNID(80v1) -- IfTrue(ControlNID(79v1))
  ControlNID(55v1) -- Merge { preds: [ControlNID(80v1), ControlNID(81v1), ControlNID(305v1), ControlNID(319v1)] }
  ControlNID(320v1) -- Jump { pred: ControlNID(55v1) }
  ControlNID(142v1) -- Merge { preds: [ControlNID(320v1), ControlNID(321v1)] }
  ControlNID(141v1) -- IfTrue(ControlNID(140v1))
  ControlNID(36v1) -- Merge { preds: [ControlNID(141v1), ControlNID(142v1), ControlNID(310v1)] }
  ControlNID(309v1) -- IfTrue(ControlNID(308v1))
  ControlNID(46v1) -- Merge { preds: [ControlNID(142v1), ControlNID(309v1), ControlNID(310v1)] }
    DataNID(1029v1) -- Phi(Phi { merge_nid: ControlNID(46v1), values: [(ControlNID(142v1), DataNID(376v1)), (ControlNID(310v1), DataNID(1020v1))] })
    DataNID(1030v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(1031v1) -- Arith(Add, DataNID(1030v1), DataNID(1029v1))
  ControlNID(311v1) -- Store { pred: ControlNID(46v1), addr: DataNID(1031v1), value: DataNID(25v1) }
  ControlNID(312v1) -- Jump { pred: ControlNID(311v1) }
  ControlNID(312v1) -- Jump { pred: ControlNID(311v1) }
  ControlNID(37v1) -- Merge { preds: [ControlNID(312v1), ControlNID(312v1), ControlNID(36v1)] }
    DataNID(1056v1) -- ConstInt { size: ValueSize(8), value: 88 }
    DataNID(1057v1) -- Arith(Add, DataNID(49v1), DataNID(1056v1))
  ControlNID(313v1) -- Load { pred: ControlNID(37v1), addr: DataNID(1057v1) }
    DataNID(1065v1) -- ArithK(Add, DataNID(1057v1), 8)
  ControlNID(314v1) -- Load { pred: ControlNID(313v1), addr: DataNID(1065v1) }
    DataNID(1067v1) -- ArithK(Add, DataNID(1065v1), 8)
  ControlNID(315v1) -- Load { pred: ControlNID(314v1), addr: DataNID(1067v1) }
    DataNID(1069v1) -- ArithK(Add, DataNID(1067v1), 8)
  ControlNID(316v1) -- Load { pred: ControlNID(315v1), addr: DataNID(1069v1) }
    DataNID(1071v1) -- ArithK(Add, DataNID(1069v1), 8)
  ControlNID(317v1) -- Load { pred: ControlNID(316v1), addr: DataNID(1071v1) }
    DataNID(1073v1) -- ArithK(Add, DataNID(1071v1), 8)
  ControlNID(318v1) -- Load { pred: ControlNID(317v1), addr: DataNID(1073v1) }
  ControlNID(319v1) -- Jump { pred: ControlNID(318v1) }
  ControlNID(305v1) -- Jump { pred: ControlNID(304v1) }
  ControlNID(322v1) -- Merge { preds: [ControlNID(305v1), ControlNID(319v1)] }
    DataNID(1043v1) -- Phi(Phi { merge_nid: ControlNID(36v1), values: [(ControlNID(142v1), DataNID(295v1)), (ControlNID(310v1), DataNID(103v1))] })
    DataNID(1047v1) -- Part { src: DataNID(1043v1), offset: 4, size: 4 }
    DataNID(1045v1) -- Part { src: DataNID(1043v1), offset: 0, size: 4 }
    DataNID(1044v1) -- Part { src: DataNID(1043v1), offset: 0, size: 4 }
    DataNID(1046v1) -- Arith(BitXor, DataNID(1044v1), DataNID(1045v1))
    DataNID(1048v1) -- Concat { lo: DataNID(1046v1), hi: DataNID(1047v1) }
    DataNID(1028v1) -- Phi(Phi { merge_nid: ControlNID(46v1), values: [(ControlNID(142v1), DataNID(295v1)), (ControlNID(310v1), DataNID(103v1))] })
    DataNID(1035v1) -- Part { src: DataNID(1028v1), offset: 4, size: 4 }
    DataNID(1033v1) -- Part { src: DataNID(1028v1), offset: 0, size: 4 }
    DataNID(1032v1) -- Part { src: DataNID(1028v1), offset: 0, size: 4 }
    DataNID(1034v1) -- Arith(BitXor, DataNID(1032v1), DataNID(1033v1))
    DataNID(1036v1) -- Concat { lo: DataNID(1034v1), hi: DataNID(1035v1) }
    DataNID(1055v1) -- Phi(Phi { merge_nid: ControlNID(37v1), values: [(ControlNID(312v1), DataNID(1036v1)), (ControlNID(36v1), DataNID(1048v1))] })
    DataNID(988v1) -- Phi(Phi { merge_nid: ControlNID(42v1), values: [(ControlNID(76v1), DataNID(103v1)), (ControlNID(94v1), DataNID(188v1)), (ControlNID(108v1), DataNID(239v1)), (ControlNID(153v1), DataNID(103v1)), (ControlNID(219v1), DataNID(625v1)), (ControlNID(278v1), DataNID(879v1)), (ControlNID(288v1), DataNID(103v1)), (ControlNID(298v1), DataNID(103v1))] })
    DataNID(998v1) -- Part { src: DataNID(988v1), offset: 4, size: 4 }
    DataNID(997v1) -- ConstInt { size: ValueSize(4), value: 2 }
    DataNID(999v1) -- Concat { lo: DataNID(997v1), hi: DataNID(998v1) }
    DataNID(1077v1) -- Phi(Phi { merge_nid: ControlNID(322v1), values: [(ControlNID(305v1), DataNID(999v1)), (ControlNID(319v1), DataNID(1055v1))] })
  ControlNID(323v1) -- End { pred: ControlNID(322v1), ret: DataNID(1077v1) }
