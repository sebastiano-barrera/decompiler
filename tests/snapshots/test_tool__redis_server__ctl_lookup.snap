---
source: tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

function type: 0x5ddf40: no type info
4 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: no type hints for this callsite
  #   2: no function type
  #   3: no function type


mil program = 
program  1451 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Ancestral(AncestralName("ZMM0"))
   28 r29 <- Ancestral(AncestralName("ZMM1"))
   29 r30 <- Ancestral(AncestralName("ZMM2"))
   30 r31 <- Ancestral(AncestralName("ZMM3"))
   31 r32 <- Ancestral(AncestralName("ZMM4"))
   32 r33 <- Ancestral(AncestralName("ZMM5"))
   33 r34 <- Ancestral(AncestralName("ZMM6"))
   34 r35 <- Ancestral(AncestralName("ZMM7"))
   35 r36 <- Ancestral(AncestralName("ZMM8"))
   36 r37 <- Ancestral(AncestralName("ZMM9"))
   37 r38 <- Ancestral(AncestralName("ZMM10"))
   38 r39 <- Ancestral(AncestralName("ZMM11"))
   39 r40 <- Ancestral(AncestralName("ZMM12"))
   40 r41 <- Ancestral(AncestralName("ZMM13"))
   41 r42 <- Ancestral(AncestralName("ZMM14"))
   42 r43 <- Ancestral(AncestralName("ZMM15"))
   43 r44 <- Ancestral(AncestralName("memory"))
   44 r45 <- Undefined
   45 r46 <- Undefined
   46 r47 <- Undefined
   47 r48 <- Undefined
   48 r49 <- Undefined
   49 r50 <- Undefined
   50 r51 <- Undefined
   51 r52 <- Undefined
   52 r53 <- Undefined
   53 r54 <- Undefined
   54 r55 <- Undefined
   55 r56 <- Undefined
   56 r57 <- Undefined
   57 r58 <- Undefined
   58 r59 <- Undefined
   59 r60 <- Undefined
   60 r61 <- Undefined
   61 r62 <- Undefined
   62 r63 <- Undefined
   63 r64 <- Undefined
   64 r65 <- Undefined
0x5ddf40:
   65 r12 <- ArithK(Add, r12, -8)
   66 r44 <- StoreMem { mem: r44, addr: r12, value: r27 }
0x5ddf42:
   67 r12 <- ArithK(Add, r12, -8)
   68 r44 <- StoreMem { mem: r44, addr: r12, value: r26 }
0x5ddf44:
   69 r26 <- Get(r15)
0x5ddf47:
   70 r45 <- Const { value: 46, size: 4 }
   71 r46 <- Part { src: r15, offset: 4, size: 4 }
   72 r15 <- Concat { lo: r45, hi: r46 }
0x5ddf4c:
   73 r12 <- ArithK(Add, r12, -8)
   74 r44 <- StoreMem { mem: r44, addr: r12, value: r25 }
0x5ddf4e:
   75 r12 <- ArithK(Add, r12, -8)
   76 r44 <- StoreMem { mem: r44, addr: r12, value: r24 }
0x5ddf50:
   77 r12 <- ArithK(Add, r12, -8)
   78 r44 <- StoreMem { mem: r44, addr: r12, value: r11 }
0x5ddf51:
   79 r12 <- ArithK(Add, r12, -8)
   80 r44 <- StoreMem { mem: r44, addr: r12, value: r17 }
0x5ddf52:
   81 r17 <- Get(r18)
0x5ddf55:
   82 r46 <- Const { value: 88, size: 8 }
   83 r12 <- Arith(Sub, r12, r46)
   84 r12 <- Get(r12)
   85 r10 <- OverflowOf(r12)
   86 r2 <- CarryOf(r12)
   87 r6 <- SignOf(r12)
   88 r5 <- IsZero(r12)
   89 r47 <- Part { src: r12, offset: 0, size: 1 }
   90 r3 <- Parity(r47)
0x5ddf59:
   91 r46 <- Const { value: 64, size: 8 }
   92 r46 <- Arith(Add, r46, r12)
   93 r44 <- StoreMem { mem: r44, addr: r46, value: r14 }
0x5ddf5e:
   94 r14 <- Get(r19)
0x5ddf61:
   95 r46 <- Const { value: 32, size: 8 }
   96 r46 <- Arith(Add, r46, r12)
   97 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5ddf66:
   98 r46 <- Const { value: 0, size: 8 }
   99 r46 <- Arith(Add, r46, r12)
  100 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x5ddf6a:
  101 r46 <- Const { value: 24, size: 8 }
  102 r46 <- Arith(Add, r46, r12)
  103 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5ddf6f:
  104 r47 <- Ancestral(AncestralName("arg0"))
  105 r47 <- Void
  106 r47 <- Get(r14)
  107 r48 <- Ancestral(AncestralName("arg1"))
  108 r48 <- Void
  109 r48 <- Get(r15)
  110 r48 <- Part { src: r48, offset: 0, size: 4 }
  111 r49 <- CArg { value: r46, next_arg: None }
  112 r49 <- CArg { value: r45, next_arg: Some(r49) }
  113 r50 <- Const { value: 4199040, size: 8 }
  114 r49 <- Call { callee: r50, first_arg: Some(r49) }
  115 r2 <- Undefined
  116 r3 <- Undefined
  117 r4 <- Undefined
  118 r5 <- Undefined
  119 r6 <- Undefined
  120 r7 <- Undefined
  121 r8 <- Undefined
  122 r9 <- Undefined
  123 r10 <- Undefined
  124 r16 <- Part { src: r49, offset: 0, size: 8 }
0x5ddf74:
  125 r20 <- Get(r16)
0x5ddf77:
  126 r16 <- Arith(BitAnd, r16, r16)
  127 r6 <- SignOf(r16)
  128 r5 <- IsZero(r16)
  129 r47 <- Part { src: r16, offset: 0, size: 1 }
  130 r3 <- Parity(r16)
  131 r2 <- False
  132 r10 <- False
0x5ddf7a:
  133 r45 <- JmpIf { cond: r5, target: 1422 }
0x5ddf80:
  134 r46 <- Const { value: 0, size: 8 }
  135 r46 <- Arith(Add, r46, r12)
  136 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  137 r16 <- Get(r45)
0x5ddf84:
  138 r11 <- Get(r20)
0x5ddf87:
  139 r11 <- Arith(Sub, r11, r16)
  140 r11 <- Get(r11)
  141 r10 <- OverflowOf(r11)
  142 r2 <- CarryOf(r11)
  143 r6 <- SignOf(r11)
  144 r5 <- IsZero(r11)
  145 r47 <- Part { src: r11, offset: 0, size: 1 }
  146 r3 <- Parity(r47)
0x5ddf8a:
  147 r45 <- JmpIf { cond: r5, target: 1170 }
0x5ddf90:
  148 r46 <- Const { value: 24, size: 8 }
  149 r46 <- Arith(Add, r46, r12)
  150 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  151 r19 <- Get(r45)
0x5ddf95:
  152 r46 <- Const { value: 0, size: 8 }
  153 r46 <- Arith(Add, r46, r19)
  154 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  155 r47 <- Const { value: 0, size: 8 }
  156 r45 <- Arith(Sub, r45, r47)
  157 r10 <- OverflowOf(r45)
  158 r2 <- CarryOf(r45)
  159 r6 <- SignOf(r45)
  160 r5 <- IsZero(r45)
  161 r48 <- Part { src: r45, offset: 0, size: 1 }
  162 r3 <- Parity(r48)
0x5ddf99:
  163 r45 <- JmpIf { cond: r5, target: 1449 }
0x5ddf9f:
  164 r46 <- Const { value: 24, size: 8 }
  165 r46 <- Arith(Add, r46, r26)
  166 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  167 r21 <- Get(r45)
0x5ddfa3:
  168 r46 <- Part { src: r27, offset: 0, size: 4 }
  169 r48 <- Part { src: r27, offset: 0, size: 4 }
  170 r46 <- Arith(BitXor, r46, r48)
  171 r49 <- Part { src: r27, offset: 4, size: 4 }
  172 r27 <- Concat { lo: r46, hi: r49 }
  173 r10 <- False
  174 r2 <- False
  175 r6 <- SignOf(r46)
  176 r5 <- IsZero(r46)
  177 r50 <- Part { src: r46, offset: 0, size: 1 }
  178 r3 <- Parity(r50)
0x5ddfa6:
  179 r46 <- Const { value: 72, size: 8 }
  180 r46 <- Arith(Add, r46, r12)
  181 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5ddfab:
  182 r46 <- Const { value: 0, size: 8 }
  183 r46 <- Arith(Add, r46, r21)
  184 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
  185 r47 <- Const { value: 0, size: 1 }
  186 r45 <- Arith(Sub, r45, r47)
  187 r10 <- OverflowOf(r45)
  188 r2 <- CarryOf(r45)
  189 r6 <- SignOf(r45)
  190 r5 <- IsZero(r45)
  191 r48 <- Part { src: r45, offset: 0, size: 1 }
  192 r3 <- Parity(r48)
0x5ddfaf:
  193 r45 <- JmpIf { cond: r5, target: 877 }
0x5ddfc0:
  194 r46 <- Const { value: 16, size: 8 }
  195 r46 <- Arith(Add, r46, r26)
  196 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  197 r15 <- Get(r45)
0x5ddfc4:
  198 r46 <- Const { value: 16, size: 8 }
  199 r46 <- Arith(Add, r46, r12)
  200 r44 <- StoreMem { mem: r44, addr: r46, value: r15 }
0x5ddfc9:
  201 r15 <- Arith(BitAnd, r15, r15)
  202 r6 <- SignOf(r15)
  203 r5 <- IsZero(r15)
  204 r47 <- Part { src: r15, offset: 0, size: 1 }
  205 r3 <- Parity(r15)
  206 r2 <- False
  207 r10 <- False
0x5ddfcc:
  208 r45 <- JmpIf { cond: r5, target: 1170 }
0x5ddfd2:
  209 r24 <- Get(r21)
0x5ddfd5:
  210 r46 <- Part { src: r17, offset: 0, size: 4 }
  211 r48 <- Part { src: r17, offset: 0, size: 4 }
  212 r46 <- Arith(BitXor, r46, r48)
  213 r49 <- Part { src: r17, offset: 4, size: 4 }
  214 r17 <- Concat { lo: r46, hi: r49 }
  215 r10 <- False
  216 r2 <- False
  217 r6 <- SignOf(r46)
  218 r5 <- IsZero(r46)
  219 r50 <- Part { src: r46, offset: 0, size: 1 }
  220 r3 <- Parity(r50)
0x5ddfd7:
  221 r46 <- Part { src: r15, offset: 0, size: 4 }
  222 r47 <- Const { value: 3, size: 4 }
  223 r46 <- Arith(BitAnd, r46, r47)
  224 r48 <- Part { src: r15, offset: 4, size: 4 }
  225 r15 <- Concat { lo: r46, hi: r48 }
  226 r10 <- False
  227 r2 <- False
  228 r6 <- SignOf(r46)
  229 r5 <- IsZero(r46)
  230 r49 <- Part { src: r46, offset: 0, size: 1 }
  231 r3 <- Parity(r49)
0x5ddfda:
  232 r45 <- JmpIf { cond: r5, target: 441 }
0x5ddfe0:
  233 r46 <- Const { value: 1, size: 8 }
  234 r15 <- Arith(Sub, r15, r46)
  235 r10 <- OverflowOf(r15)
  236 r2 <- CarryOf(r15)
  237 r6 <- SignOf(r15)
  238 r5 <- IsZero(r15)
  239 r47 <- Part { src: r15, offset: 0, size: 1 }
  240 r3 <- Parity(r47)
0x5ddfe4:
  241 r45 <- JmpIf { cond: r5, target: 367 }
0x5ddfe6:
  242 r46 <- Const { value: 2, size: 8 }
  243 r15 <- Arith(Sub, r15, r46)
  244 r10 <- OverflowOf(r15)
  245 r2 <- CarryOf(r15)
  246 r6 <- SignOf(r15)
  247 r5 <- IsZero(r15)
  248 r47 <- Part { src: r15, offset: 0, size: 1 }
  249 r3 <- Parity(r47)
0x5ddfea:
  250 r45 <- JmpIf { cond: r5, target: 305 }
0x5ddfec:
  251 r46 <- Const { value: 8, size: 8 }
  252 r46 <- Arith(Add, r46, r21)
  253 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  254 r22 <- Get(r45)
0x5ddff0:
  255 r46 <- Const { value: 48, size: 8 }
  256 r46 <- Arith(Add, r46, r12)
  257 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5ddff5:
  258 r25 <- Get(r21)
0x5ddff8:
  259 r46 <- Const { value: 40, size: 8 }
  260 r46 <- Arith(Add, r46, r12)
  261 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5ddffd:
  262 r14 <- Get(r22)
0x5de000:
  263 r46 <- Const { value: 8, size: 8 }
  264 r46 <- Arith(Add, r46, r12)
  265 r44 <- StoreMem { mem: r44, addr: r46, value: r22 }
0x5de005:
  266 r46 <- Ancestral(AncestralName("arg0"))
  267 r46 <- Void
  268 r46 <- Get(r14)
  269 r47 <- CArg { value: r45, next_arg: None }
  270 r48 <- Const { value: 4199136, size: 8 }
  271 r47 <- Call { callee: r48, first_arg: Some(r47) }
  272 r2 <- Undefined
  273 r3 <- Undefined
  274 r4 <- Undefined
  275 r5 <- Undefined
  276 r6 <- Undefined
  277 r7 <- Undefined
  278 r8 <- Undefined
  279 r9 <- Undefined
  280 r10 <- Undefined
  281 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de00a:
  282 r46 <- Const { value: 8, size: 8 }
  283 r46 <- Arith(Add, r46, r12)
  284 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  285 r15 <- Get(r45)
0x5de00f:
  286 r46 <- Const { value: 48, size: 8 }
  287 r46 <- Arith(Add, r46, r12)
  288 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  289 r20 <- Get(r45)
0x5de014:
  290 r14 <- Get(r24)
0x5de017:
  291 r16 <- Arith(Sub, r16, r11)
  292 r10 <- OverflowOf(r16)
  293 r2 <- CarryOf(r16)
  294 r6 <- SignOf(r16)
  295 r5 <- IsZero(r16)
  296 r47 <- Part { src: r16, offset: 0, size: 1 }
  297 r3 <- Parity(r47)
0x5de01a:
  298 r45 <- JmpIf { cond: r5, target: 1370 }
0x5de020:
  299 r45 <- Const { value: 1, size: 4 }
  300 r46 <- Part { src: r17, offset: 4, size: 4 }
  301 r17 <- Concat { lo: r45, hi: r46 }
0x5de025:
  302 r45 <- Const { value: 40, size: 8 }
  303 r45 <- Arith(Add, r45, r14)
  304 r24 <- Get(r45)
0x5de029:
  305 r46 <- Const { value: 8, size: 8 }
  306 r46 <- Arith(Add, r46, r24)
  307 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  308 r23 <- Get(r45)
0x5de02e:
  309 r46 <- Const { value: 40, size: 8 }
  310 r46 <- Arith(Add, r46, r12)
  311 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de033:
  312 r25 <- Get(r24)
0x5de036:
  313 r14 <- Get(r23)
0x5de039:
  314 r46 <- Const { value: 8, size: 8 }
  315 r46 <- Arith(Add, r46, r12)
  316 r44 <- StoreMem { mem: r44, addr: r46, value: r23 }
0x5de03e:
  317 r46 <- Ancestral(AncestralName("arg0"))
  318 r46 <- Void
  319 r46 <- Get(r14)
  320 r47 <- CArg { value: r45, next_arg: None }
  321 r48 <- Const { value: 4199136, size: 8 }
  322 r47 <- Call { callee: r48, first_arg: Some(r47) }
  323 r2 <- Undefined
  324 r3 <- Undefined
  325 r4 <- Undefined
  326 r5 <- Undefined
  327 r6 <- Undefined
  328 r7 <- Undefined
  329 r8 <- Undefined
  330 r9 <- Undefined
  331 r10 <- Undefined
  332 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de043:
  333 r46 <- Const { value: 8, size: 8 }
  334 r46 <- Arith(Add, r46, r12)
  335 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  336 r15 <- Get(r45)
0x5de048:
  337 r46 <- Const { value: 40, size: 8 }
  338 r46 <- Arith(Add, r46, r12)
  339 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  340 r20 <- Get(r45)
0x5de04d:
  341 r16 <- Arith(Sub, r16, r11)
  342 r10 <- OverflowOf(r16)
  343 r2 <- CarryOf(r16)
  344 r6 <- SignOf(r16)
  345 r5 <- IsZero(r16)
  346 r47 <- Part { src: r16, offset: 0, size: 1 }
  347 r3 <- Parity(r47)
0x5de050:
  348 r45 <- JmpIf { cond: r5, target: 1322 }
0x5de056:
  349 r46 <- Const { value: 1, size: 8 }
  350 r17 <- Arith(Add, r17, r46)
  351 r17 <- Get(r17)
  352 r10 <- OverflowOf(r17)
  353 r2 <- CarryOf(r17)
  354 r6 <- SignOf(r17)
  355 r5 <- IsZero(r17)
  356 r47 <- Part { src: r17, offset: 0, size: 1 }
  357 r3 <- Parity(r47)
0x5de05a:
  358 r46 <- Const { value: 40, size: 8 }
  359 r24 <- Arith(Add, r24, r46)
  360 r24 <- Get(r24)
  361 r10 <- OverflowOf(r24)
  362 r2 <- CarryOf(r24)
  363 r6 <- SignOf(r24)
  364 r5 <- IsZero(r24)
  365 r47 <- Part { src: r24, offset: 0, size: 1 }
  366 r3 <- Parity(r47)
0x5de05e:
  367 r46 <- Const { value: 8, size: 8 }
  368 r46 <- Arith(Add, r46, r24)
  369 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  370 r16 <- Get(r45)
0x5de063:
  371 r46 <- Const { value: 40, size: 8 }
  372 r46 <- Arith(Add, r46, r12)
  373 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de068:
  374 r25 <- Get(r24)
0x5de06b:
  375 r14 <- Get(r16)
0x5de06e:
  376 r46 <- Const { value: 8, size: 8 }
  377 r46 <- Arith(Add, r46, r12)
  378 r44 <- StoreMem { mem: r44, addr: r46, value: r16 }
0x5de073:
  379 r46 <- Ancestral(AncestralName("arg0"))
  380 r46 <- Void
  381 r46 <- Get(r14)
  382 r47 <- CArg { value: r45, next_arg: None }
  383 r48 <- Const { value: 4199136, size: 8 }
  384 r47 <- Call { callee: r48, first_arg: Some(r47) }
  385 r2 <- Undefined
  386 r3 <- Undefined
  387 r4 <- Undefined
  388 r5 <- Undefined
  389 r6 <- Undefined
  390 r7 <- Undefined
  391 r8 <- Undefined
  392 r9 <- Undefined
  393 r10 <- Undefined
  394 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de078:
  395 r46 <- Const { value: 8, size: 8 }
  396 r46 <- Arith(Add, r46, r12)
  397 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  398 r15 <- Get(r45)
0x5de07d:
  399 r46 <- Const { value: 40, size: 8 }
  400 r46 <- Arith(Add, r46, r12)
  401 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  402 r20 <- Get(r45)
0x5de082:
  403 r16 <- Arith(Sub, r16, r11)
  404 r10 <- OverflowOf(r16)
  405 r2 <- CarryOf(r16)
  406 r6 <- SignOf(r16)
  407 r5 <- IsZero(r16)
  408 r47 <- Part { src: r16, offset: 0, size: 1 }
  409 r3 <- Parity(r47)
0x5de085:
  410 r45 <- JmpIf { cond: r5, target: 1274 }
0x5de08b:
  411 r46 <- Const { value: 16, size: 8 }
  412 r46 <- Arith(Add, r46, r12)
  413 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  414 r19 <- Get(r45)
0x5de090:
  415 r46 <- Const { value: 1, size: 8 }
  416 r17 <- Arith(Add, r17, r46)
  417 r17 <- Get(r17)
  418 r10 <- OverflowOf(r17)
  419 r2 <- CarryOf(r17)
  420 r6 <- SignOf(r17)
  421 r5 <- IsZero(r17)
  422 r47 <- Part { src: r17, offset: 0, size: 1 }
  423 r3 <- Parity(r47)
0x5de094:
  424 r46 <- Const { value: 40, size: 8 }
  425 r24 <- Arith(Add, r24, r46)
  426 r24 <- Get(r24)
  427 r10 <- OverflowOf(r24)
  428 r2 <- CarryOf(r24)
  429 r6 <- SignOf(r24)
  430 r5 <- IsZero(r24)
  431 r47 <- Part { src: r24, offset: 0, size: 1 }
  432 r3 <- Parity(r47)
0x5de098:
  433 r17 <- Arith(Sub, r17, r19)
  434 r10 <- OverflowOf(r17)
  435 r2 <- CarryOf(r17)
  436 r6 <- SignOf(r17)
  437 r5 <- IsZero(r17)
  438 r47 <- Part { src: r17, offset: 0, size: 1 }
  439 r3 <- Parity(r47)
0x5de09b:
  440 r45 <- JmpIf { cond: r5, target: 1170 }
0x5de0a1:
  441 r46 <- Const { value: 56, size: 8 }
  442 r46 <- Arith(Add, r46, r12)
  443 r44 <- StoreMem { mem: r44, addr: r46, value: r26 }
0x5de0a6:
  444 r26 <- Get(r24)
0x5de0a9:
  445 r46 <- Const { value: 40, size: 8 }
  446 r46 <- Arith(Add, r46, r12)
  447 r44 <- StoreMem { mem: r44, addr: r46, value: r27 }
0x5de0ae:
  448 r46 <- Const { value: 48, size: 8 }
  449 r46 <- Arith(Add, r46, r12)
  450 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de0b3:
  451 r45 <- Jmp(601)
0x5de0c0:
  452 r46 <- Const { value: 48, size: 8 }
  453 r46 <- Arith(Add, r46, r26)
  454 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  455 r21 <- Get(r45)
0x5de0c4:
  456 r45 <- Const { value: 40, size: 8 }
  457 r45 <- Arith(Add, r45, r26)
  458 r27 <- Get(r45)
0x5de0c8:
  459 r45 <- Const { value: 1, size: 8 }
  460 r45 <- Arith(Add, r45, r17)
  461 r25 <- Get(r45)
0x5de0cc:
  462 r17 <- Get(r25)
0x5de0cf:
  463 r26 <- Get(r27)
0x5de0d2:
  464 r24 <- Get(r27)
0x5de0d5:
  465 r14 <- Get(r21)
0x5de0d8:
  466 r46 <- Const { value: 8, size: 8 }
  467 r46 <- Arith(Add, r46, r12)
  468 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5de0dd:
  469 r46 <- Ancestral(AncestralName("arg0"))
  470 r46 <- Void
  471 r46 <- Get(r14)
  472 r47 <- CArg { value: r45, next_arg: None }
  473 r48 <- Const { value: 4199136, size: 8 }
  474 r47 <- Call { callee: r48, first_arg: Some(r47) }
  475 r2 <- Undefined
  476 r3 <- Undefined
  477 r4 <- Undefined
  478 r5 <- Undefined
  479 r6 <- Undefined
  480 r7 <- Undefined
  481 r8 <- Undefined
  482 r9 <- Undefined
  483 r10 <- Undefined
  484 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de0e2:
  485 r46 <- Const { value: 8, size: 8 }
  486 r46 <- Arith(Add, r46, r12)
  487 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  488 r15 <- Get(r45)
0x5de0e7:
  489 r16 <- Arith(Sub, r16, r11)
  490 r10 <- OverflowOf(r16)
  491 r2 <- CarryOf(r16)
  492 r6 <- SignOf(r16)
  493 r5 <- IsZero(r16)
  494 r47 <- Part { src: r16, offset: 0, size: 1 }
  495 r3 <- Parity(r47)
0x5de0ea:
  496 r45 <- JmpIf { cond: r5, target: 687 }
0x5de0f0:
  497 r46 <- Const { value: 48, size: 8 }
  498 r46 <- Arith(Add, r46, r27)
  499 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  500 r18 <- Get(r45)
0x5de0f4:
  501 r45 <- Const { value: 40, size: 8 }
  502 r45 <- Arith(Add, r45, r27)
  503 r26 <- Get(r45)
0x5de0f8:
  504 r45 <- Const { value: 1, size: 8 }
  505 r45 <- Arith(Add, r45, r25)
  506 r17 <- Get(r45)
0x5de0fc:
  507 r24 <- Get(r26)
0x5de0ff:
  508 r14 <- Get(r18)
0x5de102:
  509 r46 <- Const { value: 8, size: 8 }
  510 r46 <- Arith(Add, r46, r12)
  511 r44 <- StoreMem { mem: r44, addr: r46, value: r18 }
0x5de107:
  512 r46 <- Ancestral(AncestralName("arg0"))
  513 r46 <- Void
  514 r46 <- Get(r14)
  515 r47 <- CArg { value: r45, next_arg: None }
  516 r48 <- Const { value: 4199136, size: 8 }
  517 r47 <- Call { callee: r48, first_arg: Some(r47) }
  518 r2 <- Undefined
  519 r3 <- Undefined
  520 r4 <- Undefined
  521 r5 <- Undefined
  522 r6 <- Undefined
  523 r7 <- Undefined
  524 r8 <- Undefined
  525 r9 <- Undefined
  526 r10 <- Undefined
  527 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de10c:
  528 r46 <- Const { value: 8, size: 8 }
  529 r46 <- Arith(Add, r46, r12)
  530 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  531 r15 <- Get(r45)
0x5de111:
  532 r16 <- Arith(Sub, r16, r11)
  533 r10 <- OverflowOf(r16)
  534 r2 <- CarryOf(r16)
  535 r6 <- SignOf(r16)
  536 r5 <- IsZero(r16)
  537 r47 <- Part { src: r16, offset: 0, size: 1 }
  538 r3 <- Parity(r47)
0x5de114:
  539 r45 <- JmpIf { cond: r5, target: 1088 }
0x5de11a:
  540 r46 <- Const { value: 88, size: 8 }
  541 r46 <- Arith(Add, r46, r27)
  542 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  543 r15 <- Get(r45)
0x5de11e:
  544 r45 <- Const { value: 80, size: 8 }
  545 r45 <- Arith(Add, r45, r27)
  546 r26 <- Get(r45)
0x5de122:
  547 r45 <- Const { value: 2, size: 8 }
  548 r45 <- Arith(Add, r45, r25)
  549 r17 <- Get(r45)
0x5de126:
  550 r24 <- Get(r26)
0x5de129:
  551 r14 <- Get(r15)
0x5de12c:
  552 r46 <- Const { value: 8, size: 8 }
  553 r46 <- Arith(Add, r46, r12)
  554 r44 <- StoreMem { mem: r44, addr: r46, value: r15 }
0x5de131:
  555 r46 <- Ancestral(AncestralName("arg0"))
  556 r46 <- Void
  557 r46 <- Get(r14)
  558 r47 <- CArg { value: r45, next_arg: None }
  559 r48 <- Const { value: 4199136, size: 8 }
  560 r47 <- Call { callee: r48, first_arg: Some(r47) }
  561 r2 <- Undefined
  562 r3 <- Undefined
  563 r4 <- Undefined
  564 r5 <- Undefined
  565 r6 <- Undefined
  566 r7 <- Undefined
  567 r8 <- Undefined
  568 r9 <- Undefined
  569 r10 <- Undefined
  570 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de136:
  571 r46 <- Const { value: 8, size: 8 }
  572 r46 <- Arith(Add, r46, r12)
  573 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  574 r15 <- Get(r45)
0x5de13b:
  575 r16 <- Arith(Sub, r16, r11)
  576 r10 <- OverflowOf(r16)
  577 r2 <- CarryOf(r16)
  578 r6 <- SignOf(r16)
  579 r5 <- IsZero(r16)
  580 r47 <- Part { src: r16, offset: 0, size: 1 }
  581 r3 <- Parity(r47)
0x5de13e:
  582 r45 <- JmpIf { cond: r5, target: 1129 }
0x5de144:
  583 r46 <- Const { value: 16, size: 8 }
  584 r46 <- Arith(Add, r46, r12)
  585 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  586 r22 <- Get(r45)
0x5de149:
  587 r45 <- Const { value: 3, size: 8 }
  588 r45 <- Arith(Add, r45, r25)
  589 r17 <- Get(r45)
0x5de14d:
  590 r45 <- Const { value: 120, size: 8 }
  591 r45 <- Arith(Add, r45, r27)
  592 r26 <- Get(r45)
0x5de151:
  593 r17 <- Arith(Sub, r17, r22)
  594 r10 <- OverflowOf(r17)
  595 r2 <- CarryOf(r17)
  596 r6 <- SignOf(r17)
  597 r5 <- IsZero(r17)
  598 r47 <- Part { src: r17, offset: 0, size: 1 }
  599 r3 <- Parity(r47)
0x5de154:
  600 r45 <- JmpIf { cond: r5, target: 1170 }
0x5de15a:
  601 r46 <- Const { value: 8, size: 8 }
  602 r46 <- Arith(Add, r46, r26)
  603 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  604 r27 <- Get(r45)
0x5de15e:
  605 r24 <- Get(r26)
0x5de161:
  606 r14 <- Get(r27)
0x5de164:
  607 r46 <- Ancestral(AncestralName("arg0"))
  608 r46 <- Void
  609 r46 <- Get(r14)
  610 r47 <- CArg { value: r45, next_arg: None }
  611 r48 <- Const { value: 4199136, size: 8 }
  612 r47 <- Call { callee: r48, first_arg: Some(r47) }
  613 r2 <- Undefined
  614 r3 <- Undefined
  615 r4 <- Undefined
  616 r5 <- Undefined
  617 r6 <- Undefined
  618 r7 <- Undefined
  619 r8 <- Undefined
  620 r9 <- Undefined
  621 r10 <- Undefined
  622 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de169:
  623 r16 <- Arith(Sub, r16, r11)
  624 r10 <- OverflowOf(r16)
  625 r2 <- CarryOf(r16)
  626 r6 <- SignOf(r16)
  627 r5 <- IsZero(r16)
  628 r47 <- Part { src: r16, offset: 0, size: 1 }
  629 r3 <- Parity(r47)
0x5de16c:
  630 r45 <- Not(r5)
  631 r46 <- JmpIf { cond: r45, target: 452 }
0x5de172:
  632 r46 <- Const { value: 0, size: 8 }
  633 r46 <- Arith(Add, r46, r12)
  634 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  635 r14 <- Get(r45)
0x5de176:
  636 r19 <- Get(r11)
0x5de179:
  637 r15 <- Get(r27)
0x5de17c:
  638 r48 <- Ancestral(AncestralName("arg0"))
  639 r48 <- Void
  640 r48 <- Get(r14)
  641 r49 <- Ancestral(AncestralName("arg1"))
  642 r49 <- Void
  643 r49 <- Get(r15)
  644 r50 <- Ancestral(AncestralName("arg2"))
  645 r50 <- Void
  646 r50 <- Get(r19)
  647 r51 <- CArg { value: r47, next_arg: None }
  648 r51 <- CArg { value: r46, next_arg: Some(r51) }
  649 r51 <- CArg { value: r45, next_arg: Some(r51) }
  650 r52 <- Const { value: 4199232, size: 8 }
  651 r51 <- Call { callee: r52, first_arg: Some(r51) }
  652 r2 <- Undefined
  653 r3 <- Undefined
  654 r4 <- Undefined
  655 r5 <- Undefined
  656 r6 <- Undefined
  657 r7 <- Undefined
  658 r8 <- Undefined
  659 r9 <- Undefined
  660 r10 <- Undefined
  661 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de181:
  662 r46 <- Part { src: r16, offset: 0, size: 4 }
  663 r48 <- Part { src: r16, offset: 0, size: 4 }
  664 r46 <- Arith(BitAnd, r46, r48)
  665 r6 <- SignOf(r46)
  666 r5 <- IsZero(r46)
  667 r49 <- Part { src: r46, offset: 0, size: 1 }
  668 r3 <- Parity(r46)
  669 r2 <- False
  670 r10 <- False
0x5de183:
  671 r45 <- Not(r5)
  672 r46 <- JmpIf { cond: r45, target: 452 }
0x5de189:
  673 r25 <- Get(r26)
0x5de18c:
  674 r46 <- Const { value: 40, size: 8 }
  675 r46 <- Arith(Add, r46, r12)
  676 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  677 r27 <- Get(r45)
0x5de191:
  678 r46 <- Const { value: 48, size: 8 }
  679 r46 <- Arith(Add, r46, r12)
  680 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  681 r20 <- Get(r45)
0x5de196:
  682 r46 <- Const { value: 56, size: 8 }
  683 r46 <- Arith(Add, r46, r12)
  684 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  685 r26 <- Get(r45)
0x5de19b:
  686 r45 <- Jmp(741)
0x5de1a0:
  687 r46 <- Const { value: 0, size: 8 }
  688 r46 <- Arith(Add, r46, r12)
  689 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  690 r14 <- Get(r45)
0x5de1a4:
  691 r19 <- Get(r11)
0x5de1a7:
  692 r48 <- Ancestral(AncestralName("arg0"))
  693 r48 <- Void
  694 r48 <- Get(r14)
  695 r49 <- Ancestral(AncestralName("arg1"))
  696 r49 <- Void
  697 r49 <- Get(r15)
  698 r50 <- Ancestral(AncestralName("arg2"))
  699 r50 <- Void
  700 r50 <- Get(r19)
  701 r51 <- CArg { value: r47, next_arg: None }
  702 r51 <- CArg { value: r46, next_arg: Some(r51) }
  703 r51 <- CArg { value: r45, next_arg: Some(r51) }
  704 r52 <- Const { value: 4199232, size: 8 }
  705 r51 <- Call { callee: r52, first_arg: Some(r51) }
  706 r2 <- Undefined
  707 r3 <- Undefined
  708 r4 <- Undefined
  709 r5 <- Undefined
  710 r6 <- Undefined
  711 r7 <- Undefined
  712 r8 <- Undefined
  713 r9 <- Undefined
  714 r10 <- Undefined
  715 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de1ac:
  716 r46 <- Part { src: r16, offset: 0, size: 4 }
  717 r48 <- Part { src: r16, offset: 0, size: 4 }
  718 r46 <- Arith(BitAnd, r46, r48)
  719 r6 <- SignOf(r46)
  720 r5 <- IsZero(r46)
  721 r49 <- Part { src: r46, offset: 0, size: 1 }
  722 r3 <- Parity(r46)
  723 r2 <- False
  724 r10 <- False
0x5de1ae:
  725 r45 <- Not(r5)
  726 r46 <- JmpIf { cond: r45, target: 497 }
0x5de1b4:
  727 r25 <- Get(r24)
0x5de1b7:
  728 r46 <- Const { value: 40, size: 8 }
  729 r46 <- Arith(Add, r46, r12)
  730 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  731 r27 <- Get(r45)
0x5de1bc:
  732 r24 <- Get(r26)
0x5de1bf:
  733 r46 <- Const { value: 48, size: 8 }
  734 r46 <- Arith(Add, r46, r12)
  735 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  736 r20 <- Get(r45)
0x5de1c4:
  737 r46 <- Const { value: 56, size: 8 }
  738 r46 <- Arith(Add, r46, r12)
  739 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  740 r26 <- Get(r45)
0x5de1c9:
  741 r46 <- Const { value: 32, size: 8 }
  742 r46 <- Arith(Add, r46, r12)
  743 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  744 r11 <- Get(r45)
0x5de1ce:
  745 r46 <- Const { value: 0, size: 8 }
  746 r46 <- Arith(Add, r46, r11)
  747 r47 <- ArithK(Mul, r27, 8)
  748 r46 <- Arith(Add, r46, r47)
  749 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5de1d3:
  750 r24 <- Arith(Sub, r24, r26)
  751 r10 <- OverflowOf(r24)
  752 r2 <- CarryOf(r24)
  753 r6 <- SignOf(r24)
  754 r5 <- IsZero(r24)
  755 r47 <- Part { src: r24, offset: 0, size: 1 }
  756 r3 <- Parity(r47)
0x5de1d6:
  757 r45 <- JmpIf { cond: r5, target: 1170 }
0x5de1dc:
  758 r46 <- Const { value: 32, size: 8 }
  759 r46 <- Arith(Add, r46, r25)
  760 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  761 r47 <- Const { value: 0, size: 8 }
  762 r45 <- Arith(Sub, r45, r47)
  763 r10 <- OverflowOf(r45)
  764 r2 <- CarryOf(r45)
  765 r6 <- SignOf(r45)
  766 r5 <- IsZero(r45)
  767 r48 <- Part { src: r45, offset: 0, size: 1 }
  768 r3 <- Parity(r48)
0x5de1e1:
  769 r45 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
  770 r45 <- Not(r5)
  771 r46 <- JmpIf { cond: r45, target: 1015 }
0x5de1eb:
  772 r46 <- Part { src: r14, offset: 0, size: 1 }
  773 r48 <- Part { src: r14, offset: 0, size: 1 }
  774 r46 <- Arith(BitAnd, r46, r48)
  775 r6 <- SignOf(r46)
  776 r5 <- IsZero(r46)
  777 r49 <- Part { src: r46, offset: 0, size: 1 }
  778 r3 <- Parity(r46)
  779 r2 <- False
  780 r10 <- False
0x5de1ee:
  781 r45 <- JmpIf { cond: r5, target: 1444 }
0x5de1f4:
  782 r45 <- Const { value: 1, size: 8 }
  783 r45 <- Arith(Add, r45, r20)
  784 r14 <- Get(r45)
0x5de1f8:
  785 r45 <- Const { value: 46, size: 4 }
  786 r46 <- Part { src: r15, offset: 4, size: 4 }
  787 r15 <- Concat { lo: r45, hi: r46 }
0x5de1fd:
  788 r46 <- Const { value: 0, size: 8 }
  789 r46 <- Arith(Add, r46, r12)
  790 r44 <- StoreMem { mem: r44, addr: r46, value: r14 }
0x5de201:
  791 r47 <- Ancestral(AncestralName("arg0"))
  792 r47 <- Void
  793 r47 <- Get(r14)
  794 r48 <- Ancestral(AncestralName("arg1"))
  795 r48 <- Void
  796 r48 <- Get(r15)
  797 r48 <- Part { src: r48, offset: 0, size: 4 }
  798 r49 <- CArg { value: r46, next_arg: None }
  799 r49 <- CArg { value: r45, next_arg: Some(r49) }
  800 r50 <- Const { value: 4199040, size: 8 }
  801 r49 <- Call { callee: r50, first_arg: Some(r49) }
  802 r2 <- Undefined
  803 r3 <- Undefined
  804 r4 <- Undefined
  805 r5 <- Undefined
  806 r6 <- Undefined
  807 r7 <- Undefined
  808 r8 <- Undefined
  809 r9 <- Undefined
  810 r10 <- Undefined
  811 r16 <- Part { src: r49, offset: 0, size: 8 }
0x5de206:
  812 r20 <- Get(r16)
0x5de209:
  813 r16 <- Arith(BitAnd, r16, r16)
  814 r6 <- SignOf(r16)
  815 r5 <- IsZero(r16)
  816 r47 <- Part { src: r16, offset: 0, size: 1 }
  817 r3 <- Parity(r16)
  818 r2 <- False
  819 r10 <- False
0x5de20c:
  820 r45 <- JmpIf { cond: r5, target: 1201 }
0x5de212:
  821 r11 <- Get(r16)
0x5de215:
  822 r46 <- Const { value: 0, size: 8 }
  823 r46 <- Arith(Add, r46, r12)
  824 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  825 r23 <- Get(r45)
0x5de219:
  826 r46 <- Const { value: 24, size: 8 }
  827 r46 <- Arith(Add, r46, r12)
  828 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  829 r16 <- Get(r45)
0x5de21e:
  830 r46 <- Const { value: 1, size: 8 }
  831 r27 <- Arith(Add, r27, r46)
  832 r27 <- Get(r27)
  833 r10 <- OverflowOf(r27)
  834 r2 <- CarryOf(r27)
  835 r6 <- SignOf(r27)
  836 r5 <- IsZero(r27)
  837 r47 <- Part { src: r27, offset: 0, size: 1 }
  838 r3 <- Parity(r47)
0x5de222:
  839 r11 <- Arith(Sub, r11, r23)
  840 r11 <- Get(r11)
  841 r10 <- OverflowOf(r11)
  842 r2 <- CarryOf(r11)
  843 r6 <- SignOf(r11)
  844 r5 <- IsZero(r11)
  845 r47 <- Part { src: r11, offset: 0, size: 1 }
  846 r3 <- Parity(r47)
0x5de225:
  847 r47 <- Const { value: 0, size: 8 }
  848 r47 <- Arith(Add, r47, r16)
  849 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
  850 r27 <- Arith(Sub, r27, r46)
  851 r10 <- OverflowOf(r27)
  852 r2 <- CarryOf(r27)
  853 r6 <- SignOf(r27)
  854 r5 <- IsZero(r27)
  855 r48 <- Part { src: r27, offset: 0, size: 1 }
  856 r3 <- Parity(r48)
0x5de228:
  857 r45 <- Not(r2)
  858 r46 <- JmpIf { cond: r45, target: 1247 }
0x5de22e:
  859 r26 <- Get(r25)
0x5de231:
  860 r46 <- Const { value: 24, size: 8 }
  861 r46 <- Arith(Add, r46, r26)
  862 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  863 r21 <- Get(r45)
0x5de235:
  864 r46 <- Const { value: 0, size: 8 }
  865 r46 <- Arith(Add, r46, r21)
  866 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
  867 r47 <- Const { value: 0, size: 1 }
  868 r45 <- Arith(Sub, r45, r47)
  869 r10 <- OverflowOf(r45)
  870 r2 <- CarryOf(r45)
  871 r6 <- SignOf(r45)
  872 r5 <- IsZero(r45)
  873 r48 <- Part { src: r45, offset: 0, size: 1 }
  874 r3 <- Parity(r48)
0x5de239:
  875 r45 <- Not(r5)
  876 r46 <- JmpIf { cond: r45, target: 194 }
0x5de23f:
  877 r46 <- Const { value: 0, size: 8 }
  878 r46 <- Arith(Add, r46, r12)
  879 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  880 r14 <- Get(r45)
0x5de243:
  881 r46 <- Part { src: r15, offset: 0, size: 4 }
  882 r48 <- Part { src: r15, offset: 0, size: 4 }
  883 r46 <- Arith(BitXor, r46, r48)
  884 r49 <- Part { src: r15, offset: 4, size: 4 }
  885 r15 <- Concat { lo: r46, hi: r49 }
  886 r10 <- False
  887 r2 <- False
  888 r6 <- SignOf(r46)
  889 r5 <- IsZero(r46)
  890 r50 <- Part { src: r46, offset: 0, size: 1 }
  891 r3 <- Parity(r50)
0x5de245:
  892 r45 <- Const { value: 10, size: 4 }
  893 r46 <- Part { src: r19, offset: 4, size: 4 }
  894 r19 <- Concat { lo: r45, hi: r46 }
0x5de24a:
  895 r46 <- Const { value: 8, size: 8 }
  896 r46 <- Arith(Add, r46, r12)
  897 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de24f:
  898 r48 <- CArg { value: r47, next_arg: None }
  899 r48 <- CArg { value: r46, next_arg: Some(r48) }
  900 r48 <- CArg { value: r45, next_arg: Some(r48) }
  901 r49 <- Const { value: 6451424, size: 8 }
  902 r48 <- Call { callee: r49, first_arg: Some(r48) }
  903 r2 <- Undefined
  904 r3 <- Undefined
  905 r4 <- Undefined
  906 r5 <- Undefined
  907 r6 <- Undefined
  908 r7 <- Undefined
  909 r8 <- Undefined
  910 r9 <- Undefined
  911 r10 <- Undefined
  912 r16 <- Part { src: r48, offset: 0, size: 8 }
0x5de254:
  913 r46 <- Const { value: 8, size: 8 }
  914 r46 <- Arith(Add, r46, r12)
  915 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  916 r20 <- Get(r45)
0x5de259:
  917 r46 <- Const { value: -1, size: 8 }
  918 r16 <- Arith(Sub, r16, r46)
  919 r10 <- OverflowOf(r16)
  920 r2 <- CarryOf(r16)
  921 r6 <- SignOf(r16)
  922 r5 <- IsZero(r16)
  923 r47 <- Part { src: r16, offset: 0, size: 1 }
  924 r3 <- Parity(r47)
0x5de25d:
  925 r17 <- Get(r16)
0x5de260:
  926 r45 <- JmpIf { cond: r5, target: 1170 }
0x5de266:
  927 r46 <- Const { value: 24, size: 8 }
  928 r46 <- Arith(Add, r46, r26)
  929 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  930 r11 <- Get(r45)
0x5de26a:
  931 r46 <- Const { value: 0, size: 8 }
  932 r46 <- Arith(Add, r46, r12)
  933 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de26e:
  934 r46 <- Const { value: 0, size: 8 }
  935 r46 <- Arith(Add, r46, r11)
  936 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
  937 r47 <- Const { value: 0, size: 1 }
  938 r45 <- Arith(Sub, r45, r47)
  939 r10 <- OverflowOf(r45)
  940 r2 <- CarryOf(r45)
  941 r6 <- SignOf(r45)
  942 r5 <- IsZero(r45)
  943 r48 <- Part { src: r45, offset: 0, size: 1 }
  944 r3 <- Parity(r48)
0x5de272:
  945 r45 <- Not(r5)
  946 r46 <- JmpExtIf { cond: r45, addr: 4206915 }
0x5de278:
  947 r46 <- Const { value: 24, size: 8 }
  948 r46 <- Arith(Add, r46, r12)
  949 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  950 r18 <- Get(r45)
0x5de27d:
  951 r46 <- Const { value: 32, size: 8 }
  952 r46 <- Arith(Add, r46, r12)
  953 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  954 r26 <- Get(r45)
0x5de282:
  955 r46 <- Const { value: 64, size: 8 }
  956 r46 <- Arith(Add, r46, r12)
  957 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  958 r14 <- Get(r45)
0x5de287:
  959 r46 <- Const { value: 0, size: 8 }
  960 r46 <- Arith(Add, r46, r18)
  961 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  962 r19 <- Get(r45)
0x5de28a:
  963 r15 <- Get(r26)
0x5de28d:
  964 r18 <- Get(r16)
0x5de290:
  965 r45 <- CArg { value: r18, next_arg: None }
  966 r45 <- CArg { value: r19, next_arg: Some(r45) }
  967 r45 <- CArg { value: r15, next_arg: Some(r45) }
  968 r45 <- CArg { value: r14, next_arg: Some(r45) }
  969 r47 <- Const { value: 8, size: 8 }
  970 r47 <- Arith(Add, r47, r11)
  971 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
  972 r46 <- LoadMem { mem: r44, addr: r46, size: 8 }
  973 r45 <- Call { callee: r46, first_arg: Some(r45) }
  974 r2 <- Undefined
  975 r3 <- Undefined
  976 r4 <- Undefined
  977 r5 <- Undefined
  978 r6 <- Undefined
  979 r7 <- Undefined
  980 r8 <- Undefined
  981 r9 <- Undefined
  982 r10 <- Undefined
  983 r45 <- Get(r16)
0x5de293:
  984 r25 <- Get(r16)
0x5de296:
  985 r16 <- Arith(BitAnd, r16, r16)
  986 r6 <- SignOf(r16)
  987 r5 <- IsZero(r16)
  988 r47 <- Part { src: r16, offset: 0, size: 1 }
  989 r3 <- Parity(r16)
  990 r2 <- False
  991 r10 <- False
0x5de299:
  992 r45 <- JmpIf { cond: r5, target: 1170 }
0x5de29f:
  993 r46 <- Const { value: 0, size: 8 }
  994 r46 <- Arith(Add, r46, r12)
  995 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
  996 r20 <- Get(r45)
0x5de2a3:
  997 r46 <- Const { value: 32, size: 8 }
  998 r46 <- Arith(Add, r46, r25)
  999 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1000 r47 <- Const { value: 0, size: 8 }
 1001 r45 <- Arith(Sub, r45, r47)
 1002 r10 <- OverflowOf(r45)
 1003 r2 <- CarryOf(r45)
 1004 r6 <- SignOf(r45)
 1005 r5 <- IsZero(r45)
 1006 r48 <- Part { src: r45, offset: 0, size: 1 }
 1007 r3 <- Parity(r48)
0x5de2a8:
 1008 r46 <- Const { value: 0, size: 8 }
 1009 r46 <- Arith(Add, r46, r26)
 1010 r47 <- ArithK(Mul, r27, 8)
 1011 r46 <- Arith(Add, r46, r47)
 1012 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5de2ac:
 1013 r45 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
 1014 r45 <- JmpIf { cond: r5, target: 772 }
0x5de2b6:
 1015 r46 <- Const { value: 72, size: 8 }
 1016 r46 <- Arith(Add, r46, r12)
 1017 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1018 r17 <- Get(r45)
0x5de2bb:
 1019 r46 <- Part { src: r14, offset: 0, size: 1 }
 1020 r48 <- Part { src: r14, offset: 0, size: 1 }
 1021 r46 <- Arith(BitAnd, r46, r48)
 1022 r6 <- SignOf(r46)
 1023 r5 <- IsZero(r46)
 1024 r49 <- Part { src: r46, offset: 0, size: 1 }
 1025 r3 <- Parity(r46)
 1026 r2 <- False
 1027 r10 <- False
0x5de2be:
 1028 r45 <- Not(r5)
 1029 r46 <- JmpIf { cond: r45, target: 1170 }
0x5de2c0:
 1030 r45 <- Const { value: 1, size: 8 }
 1031 r45 <- Arith(Add, r45, r27)
 1032 r20 <- Get(r45)
0x5de2c4:
 1033 r46 <- Const { value: 24, size: 8 }
 1034 r46 <- Arith(Add, r46, r12)
 1035 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1036 r27 <- Get(r45)
0x5de2c9:
 1037 r46 <- Const { value: 0, size: 8 }
 1038 r46 <- Arith(Add, r46, r27)
 1039 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de2cc:
 1040 r17 <- Arith(BitAnd, r17, r17)
 1041 r6 <- SignOf(r17)
 1042 r5 <- IsZero(r17)
 1043 r47 <- Part { src: r17, offset: 0, size: 1 }
 1044 r3 <- Parity(r17)
 1045 r2 <- False
 1046 r10 <- False
0x5de2cf:
 1047 r45 <- Not(r5)
 1048 r46 <- JmpIf { cond: r45, target: 1259 }
0x5de2d5:
 1049 r46 <- Part { src: r16, offset: 0, size: 4 }
 1050 r48 <- Part { src: r16, offset: 0, size: 4 }
 1051 r46 <- Arith(BitXor, r46, r48)
 1052 r49 <- Part { src: r16, offset: 4, size: 4 }
 1053 r16 <- Concat { lo: r46, hi: r49 }
 1054 r10 <- False
 1055 r2 <- False
 1056 r6 <- SignOf(r46)
 1057 r5 <- IsZero(r46)
 1058 r50 <- Part { src: r46, offset: 0, size: 1 }
 1059 r3 <- Parity(r50)
0x5de2d7:
 1060 r46 <- Const { value: 88, size: 8 }
 1061 r12 <- Arith(Add, r12, r46)
 1062 r12 <- Get(r12)
 1063 r10 <- OverflowOf(r12)
 1064 r2 <- CarryOf(r12)
 1065 r6 <- SignOf(r12)
 1066 r5 <- IsZero(r12)
 1067 r47 <- Part { src: r12, offset: 0, size: 1 }
 1068 r3 <- Parity(r47)
0x5de2db:
 1069 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1070 r17 <- Get(r45)
 1071 r12 <- ArithK(Add, r12, 8)
0x5de2dc:
 1072 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1073 r11 <- Get(r45)
 1074 r12 <- ArithK(Add, r12, 8)
0x5de2dd:
 1075 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1076 r24 <- Get(r45)
 1077 r12 <- ArithK(Add, r12, 8)
0x5de2df:
 1078 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1079 r25 <- Get(r45)
 1080 r12 <- ArithK(Add, r12, 8)
0x5de2e1:
 1081 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1082 r26 <- Get(r45)
 1083 r12 <- ArithK(Add, r12, 8)
0x5de2e3:
 1084 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1085 r27 <- Get(r45)
 1086 r12 <- ArithK(Add, r12, 8)
0x5de2e5:
 1087 r45 <- Ret(r16)
0x5de2f0:
 1088 r46 <- Const { value: 0, size: 8 }
 1089 r46 <- Arith(Add, r46, r12)
 1090 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1091 r14 <- Get(r45)
0x5de2f4:
 1092 r19 <- Get(r11)
0x5de2f7:
 1093 r48 <- Ancestral(AncestralName("arg0"))
 1094 r48 <- Void
 1095 r48 <- Get(r14)
 1096 r49 <- Ancestral(AncestralName("arg1"))
 1097 r49 <- Void
 1098 r49 <- Get(r15)
 1099 r50 <- Ancestral(AncestralName("arg2"))
 1100 r50 <- Void
 1101 r50 <- Get(r19)
 1102 r51 <- CArg { value: r47, next_arg: None }
 1103 r51 <- CArg { value: r46, next_arg: Some(r51) }
 1104 r51 <- CArg { value: r45, next_arg: Some(r51) }
 1105 r52 <- Const { value: 4199232, size: 8 }
 1106 r51 <- Call { callee: r52, first_arg: Some(r51) }
 1107 r2 <- Undefined
 1108 r3 <- Undefined
 1109 r4 <- Undefined
 1110 r5 <- Undefined
 1111 r6 <- Undefined
 1112 r7 <- Undefined
 1113 r8 <- Undefined
 1114 r9 <- Undefined
 1115 r10 <- Undefined
 1116 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de2fc:
 1117 r46 <- Part { src: r16, offset: 0, size: 4 }
 1118 r48 <- Part { src: r16, offset: 0, size: 4 }
 1119 r46 <- Arith(BitAnd, r46, r48)
 1120 r6 <- SignOf(r46)
 1121 r5 <- IsZero(r46)
 1122 r49 <- Part { src: r46, offset: 0, size: 1 }
 1123 r3 <- Parity(r46)
 1124 r2 <- False
 1125 r10 <- False
0x5de2fe:
 1126 r45 <- Not(r5)
 1127 r46 <- JmpIf { cond: r45, target: 540 }
0x5de304:
 1128 r45 <- Jmp(727)
0x5de310:
 1129 r46 <- Const { value: 0, size: 8 }
 1130 r46 <- Arith(Add, r46, r12)
 1131 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1132 r14 <- Get(r45)
0x5de314:
 1133 r19 <- Get(r11)
0x5de317:
 1134 r48 <- Ancestral(AncestralName("arg0"))
 1135 r48 <- Void
 1136 r48 <- Get(r14)
 1137 r49 <- Ancestral(AncestralName("arg1"))
 1138 r49 <- Void
 1139 r49 <- Get(r15)
 1140 r50 <- Ancestral(AncestralName("arg2"))
 1141 r50 <- Void
 1142 r50 <- Get(r19)
 1143 r51 <- CArg { value: r47, next_arg: None }
 1144 r51 <- CArg { value: r46, next_arg: Some(r51) }
 1145 r51 <- CArg { value: r45, next_arg: Some(r51) }
 1146 r52 <- Const { value: 4199232, size: 8 }
 1147 r51 <- Call { callee: r52, first_arg: Some(r51) }
 1148 r2 <- Undefined
 1149 r3 <- Undefined
 1150 r4 <- Undefined
 1151 r5 <- Undefined
 1152 r6 <- Undefined
 1153 r7 <- Undefined
 1154 r8 <- Undefined
 1155 r9 <- Undefined
 1156 r10 <- Undefined
 1157 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de31c:
 1158 r46 <- Part { src: r16, offset: 0, size: 4 }
 1159 r48 <- Part { src: r16, offset: 0, size: 4 }
 1160 r46 <- Arith(BitAnd, r46, r48)
 1161 r6 <- SignOf(r46)
 1162 r5 <- IsZero(r46)
 1163 r49 <- Part { src: r46, offset: 0, size: 1 }
 1164 r3 <- Parity(r46)
 1165 r2 <- False
 1166 r10 <- False
0x5de31e:
 1167 r45 <- Not(r5)
 1168 r46 <- JmpIf { cond: r45, target: 583 }
0x5de324:
 1169 r45 <- Jmp(727)
0x5de330:
 1170 r46 <- Const { value: 88, size: 8 }
 1171 r12 <- Arith(Add, r12, r46)
 1172 r12 <- Get(r12)
 1173 r10 <- OverflowOf(r12)
 1174 r2 <- CarryOf(r12)
 1175 r6 <- SignOf(r12)
 1176 r5 <- IsZero(r12)
 1177 r47 <- Part { src: r12, offset: 0, size: 1 }
 1178 r3 <- Parity(r47)
0x5de334:
 1179 r45 <- Const { value: 2, size: 4 }
 1180 r46 <- Part { src: r16, offset: 4, size: 4 }
 1181 r16 <- Concat { lo: r45, hi: r46 }
0x5de339:
 1182 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1183 r17 <- Get(r45)
 1184 r12 <- ArithK(Add, r12, 8)
0x5de33a:
 1185 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1186 r11 <- Get(r45)
 1187 r12 <- ArithK(Add, r12, 8)
0x5de33b:
 1188 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1189 r24 <- Get(r45)
 1190 r12 <- ArithK(Add, r12, 8)
0x5de33d:
 1191 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1192 r25 <- Get(r45)
 1193 r12 <- ArithK(Add, r12, 8)
0x5de33f:
 1194 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1195 r26 <- Get(r45)
 1196 r12 <- ArithK(Add, r12, 8)
0x5de341:
 1197 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
 1198 r27 <- Get(r45)
 1199 r12 <- ArithK(Add, r12, 8)
0x5de343:
 1200 r45 <- Ret(r16)
0x5de348:
 1201 r46 <- Const { value: 0, size: 8 }
 1202 r46 <- Arith(Add, r46, r12)
 1203 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1204 r24 <- Get(r45)
0x5de34c:
 1205 r46 <- Const { value: 1, size: 8 }
 1206 r27 <- Arith(Add, r27, r46)
 1207 r27 <- Get(r27)
 1208 r10 <- OverflowOf(r27)
 1209 r2 <- CarryOf(r27)
 1210 r6 <- SignOf(r27)
 1211 r5 <- IsZero(r27)
 1212 r47 <- Part { src: r27, offset: 0, size: 1 }
 1213 r3 <- Parity(r47)
0x5de350:
 1214 r14 <- Get(r24)
0x5de353:
 1215 r46 <- Const { value: 4199136, size: 8 }
 1216 r45 <- Call { callee: r46, first_arg: None }
 1217 r2 <- Undefined
 1218 r3 <- Undefined
 1219 r4 <- Undefined
 1220 r5 <- Undefined
 1221 r6 <- Undefined
 1222 r7 <- Undefined
 1223 r8 <- Undefined
 1224 r9 <- Undefined
 1225 r10 <- Undefined
0x5de358:
 1226 r46 <- Const { value: 24, size: 8 }
 1227 r46 <- Arith(Add, r46, r12)
 1228 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1229 r19 <- Get(r45)
0x5de35d:
 1230 r11 <- Get(r16)
0x5de360:
 1231 r45 <- Const { value: 0, size: 8 }
 1232 r45 <- Arith(Add, r45, r24)
 1233 r46 <- ArithK(Mul, r16, 1)
 1234 r45 <- Arith(Add, r45, r46)
 1235 r20 <- Get(r45)
0x5de364:
 1236 r47 <- Const { value: 0, size: 8 }
 1237 r47 <- Arith(Add, r47, r19)
 1238 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
 1239 r27 <- Arith(Sub, r27, r46)
 1240 r10 <- OverflowOf(r27)
 1241 r2 <- CarryOf(r27)
 1242 r6 <- SignOf(r27)
 1243 r5 <- IsZero(r27)
 1244 r48 <- Part { src: r27, offset: 0, size: 1 }
 1245 r3 <- Parity(r48)
0x5de367:
 1246 r45 <- JmpIf { cond: r2, target: 859 }
0x5de36d:
 1247 r46 <- Const { value: 72, size: 8 }
 1248 r46 <- Arith(Add, r46, r12)
 1249 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1250 r17 <- Get(r45)
0x5de372:
 1251 r17 <- Arith(BitAnd, r17, r17)
 1252 r6 <- SignOf(r17)
 1253 r5 <- IsZero(r17)
 1254 r47 <- Part { src: r17, offset: 0, size: 1 }
 1255 r3 <- Parity(r17)
 1256 r2 <- False
 1257 r10 <- False
0x5de375:
 1258 r45 <- JmpIf { cond: r5, target: 1049 }
0x5de37b:
 1259 r46 <- Const { value: 0, size: 8 }
 1260 r46 <- Arith(Add, r46, r17)
 1261 r44 <- StoreMem { mem: r44, addr: r46, value: r25 }
0x5de37e:
 1262 r46 <- Part { src: r16, offset: 0, size: 4 }
 1263 r48 <- Part { src: r16, offset: 0, size: 4 }
 1264 r46 <- Arith(BitXor, r46, r48)
 1265 r49 <- Part { src: r16, offset: 4, size: 4 }
 1266 r16 <- Concat { lo: r46, hi: r49 }
 1267 r10 <- False
 1268 r2 <- False
 1269 r6 <- SignOf(r46)
 1270 r5 <- IsZero(r46)
 1271 r50 <- Part { src: r46, offset: 0, size: 1 }
 1272 r3 <- Parity(r50)
0x5de380:
 1273 r45 <- Jmp(1060)
0x5de388:
 1274 r46 <- Const { value: 0, size: 8 }
 1275 r46 <- Arith(Add, r46, r12)
 1276 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1277 r14 <- Get(r45)
0x5de38c:
 1278 r19 <- Get(r11)
0x5de38f:
 1279 r46 <- Const { value: 8, size: 8 }
 1280 r46 <- Arith(Add, r46, r12)
 1281 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de394:
 1282 r48 <- Ancestral(AncestralName("arg0"))
 1283 r48 <- Void
 1284 r48 <- Get(r14)
 1285 r49 <- Ancestral(AncestralName("arg1"))
 1286 r49 <- Void
 1287 r49 <- Get(r15)
 1288 r50 <- Ancestral(AncestralName("arg2"))
 1289 r50 <- Void
 1290 r50 <- Get(r19)
 1291 r51 <- CArg { value: r47, next_arg: None }
 1292 r51 <- CArg { value: r46, next_arg: Some(r51) }
 1293 r51 <- CArg { value: r45, next_arg: Some(r51) }
 1294 r52 <- Const { value: 4199232, size: 8 }
 1295 r51 <- Call { callee: r52, first_arg: Some(r51) }
 1296 r2 <- Undefined
 1297 r3 <- Undefined
 1298 r4 <- Undefined
 1299 r5 <- Undefined
 1300 r6 <- Undefined
 1301 r7 <- Undefined
 1302 r8 <- Undefined
 1303 r9 <- Undefined
 1304 r10 <- Undefined
 1305 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de399:
 1306 r46 <- Const { value: 8, size: 8 }
 1307 r46 <- Arith(Add, r46, r12)
 1308 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1309 r20 <- Get(r45)
0x5de39e:
 1310 r46 <- Part { src: r16, offset: 0, size: 4 }
 1311 r48 <- Part { src: r16, offset: 0, size: 4 }
 1312 r46 <- Arith(BitAnd, r46, r48)
 1313 r6 <- SignOf(r46)
 1314 r5 <- IsZero(r46)
 1315 r49 <- Part { src: r46, offset: 0, size: 1 }
 1316 r3 <- Parity(r46)
 1317 r2 <- False
 1318 r10 <- False
0x5de3a0:
 1319 r45 <- Not(r5)
 1320 r46 <- JmpIf { cond: r45, target: 411 }
0x5de3a6:
 1321 r45 <- Jmp(741)
0x5de3b0:
 1322 r46 <- Const { value: 0, size: 8 }
 1323 r46 <- Arith(Add, r46, r12)
 1324 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1325 r14 <- Get(r45)
0x5de3b4:
 1326 r19 <- Get(r11)
0x5de3b7:
 1327 r46 <- Const { value: 8, size: 8 }
 1328 r46 <- Arith(Add, r46, r12)
 1329 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de3bc:
 1330 r48 <- Ancestral(AncestralName("arg0"))
 1331 r48 <- Void
 1332 r48 <- Get(r14)
 1333 r49 <- Ancestral(AncestralName("arg1"))
 1334 r49 <- Void
 1335 r49 <- Get(r15)
 1336 r50 <- Ancestral(AncestralName("arg2"))
 1337 r50 <- Void
 1338 r50 <- Get(r19)
 1339 r51 <- CArg { value: r47, next_arg: None }
 1340 r51 <- CArg { value: r46, next_arg: Some(r51) }
 1341 r51 <- CArg { value: r45, next_arg: Some(r51) }
 1342 r52 <- Const { value: 4199232, size: 8 }
 1343 r51 <- Call { callee: r52, first_arg: Some(r51) }
 1344 r2 <- Undefined
 1345 r3 <- Undefined
 1346 r4 <- Undefined
 1347 r5 <- Undefined
 1348 r6 <- Undefined
 1349 r7 <- Undefined
 1350 r8 <- Undefined
 1351 r9 <- Undefined
 1352 r10 <- Undefined
 1353 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de3c1:
 1354 r46 <- Const { value: 8, size: 8 }
 1355 r46 <- Arith(Add, r46, r12)
 1356 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1357 r20 <- Get(r45)
0x5de3c6:
 1358 r46 <- Part { src: r16, offset: 0, size: 4 }
 1359 r48 <- Part { src: r16, offset: 0, size: 4 }
 1360 r46 <- Arith(BitAnd, r46, r48)
 1361 r6 <- SignOf(r46)
 1362 r5 <- IsZero(r46)
 1363 r49 <- Part { src: r46, offset: 0, size: 1 }
 1364 r3 <- Parity(r46)
 1365 r2 <- False
 1366 r10 <- False
0x5de3c8:
 1367 r45 <- Not(r5)
 1368 r46 <- JmpIf { cond: r45, target: 349 }
0x5de3ce:
 1369 r45 <- Jmp(741)
0x5de3d3:
 1370 r46 <- Const { value: 0, size: 8 }
 1371 r46 <- Arith(Add, r46, r12)
 1372 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1373 r14 <- Get(r45)
0x5de3d7:
 1374 r19 <- Get(r11)
0x5de3da:
 1375 r46 <- Const { value: 40, size: 8 }
 1376 r46 <- Arith(Add, r46, r12)
 1377 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de3df:
 1378 r46 <- Const { value: 8, size: 8 }
 1379 r46 <- Arith(Add, r46, r12)
 1380 r44 <- StoreMem { mem: r44, addr: r46, value: r24 }
0x5de3e4:
 1381 r48 <- Ancestral(AncestralName("arg0"))
 1382 r48 <- Void
 1383 r48 <- Get(r14)
 1384 r49 <- Ancestral(AncestralName("arg1"))
 1385 r49 <- Void
 1386 r49 <- Get(r15)
 1387 r50 <- Ancestral(AncestralName("arg2"))
 1388 r50 <- Void
 1389 r50 <- Get(r19)
 1390 r51 <- CArg { value: r47, next_arg: None }
 1391 r51 <- CArg { value: r46, next_arg: Some(r51) }
 1392 r51 <- CArg { value: r45, next_arg: Some(r51) }
 1393 r52 <- Const { value: 4199232, size: 8 }
 1394 r51 <- Call { callee: r52, first_arg: Some(r51) }
 1395 r2 <- Undefined
 1396 r3 <- Undefined
 1397 r4 <- Undefined
 1398 r5 <- Undefined
 1399 r6 <- Undefined
 1400 r7 <- Undefined
 1401 r8 <- Undefined
 1402 r9 <- Undefined
 1403 r10 <- Undefined
 1404 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de3e9:
 1405 r46 <- Const { value: 40, size: 8 }
 1406 r46 <- Arith(Add, r46, r12)
 1407 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1408 r20 <- Get(r45)
0x5de3ee:
 1409 r14 <- Get(r24)
0x5de3f1:
 1410 r46 <- Part { src: r16, offset: 0, size: 4 }
 1411 r48 <- Part { src: r16, offset: 0, size: 4 }
 1412 r46 <- Arith(BitAnd, r46, r48)
 1413 r6 <- SignOf(r46)
 1414 r5 <- IsZero(r46)
 1415 r49 <- Part { src: r46, offset: 0, size: 1 }
 1416 r3 <- Parity(r46)
 1417 r2 <- False
 1418 r10 <- False
0x5de3f3:
 1419 r45 <- Not(r5)
 1420 r46 <- JmpIf { cond: r45, target: 299 }
0x5de3f9:
 1421 r45 <- Jmp(741)
0x5de400:
 1422 r46 <- Const { value: 0, size: 8 }
 1423 r46 <- Arith(Add, r46, r12)
 1424 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1425 r27 <- Get(r45)
0x5de404:
 1426 r14 <- Get(r27)
0x5de407:
 1427 r46 <- Const { value: 4199136, size: 8 }
 1428 r45 <- Call { callee: r46, first_arg: None }
 1429 r2 <- Undefined
 1430 r3 <- Undefined
 1431 r4 <- Undefined
 1432 r5 <- Undefined
 1433 r6 <- Undefined
 1434 r7 <- Undefined
 1435 r8 <- Undefined
 1436 r9 <- Undefined
 1437 r10 <- Undefined
0x5de40c:
 1438 r45 <- Const { value: 0, size: 8 }
 1439 r45 <- Arith(Add, r45, r27)
 1440 r46 <- ArithK(Mul, r16, 1)
 1441 r45 <- Arith(Add, r45, r46)
 1442 r20 <- Get(r45)
0x5de410:
 1443 r45 <- Jmp(134)
0x5de415:
 1444 r46 <- Const { value: 72, size: 8 }
 1445 r46 <- Arith(Add, r46, r12)
 1446 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
 1447 r17 <- Get(r45)
0x5de41a:
 1448 r45 <- Jmp(1030)
0x5de41f:
 1449 r25 <- Get(r26)
0x5de422:
 1450 r45 <- Jmp(1251)


ssa pre-xform:
ssa program  1598 instrs
.B0:    ;; .
  (  4)  r26 <- Ancestral(AncestralName("R15"))
         r11 <- Ancestral(AncestralName("RSP"))
  (  2)  r65 <- ArithK(Add, r11, -8)
         r43 <- Ancestral(AncestralName("memory"))
         r66 <- StoreMem { mem: r43, addr: r65, value: r26 }
         r25 <- Ancestral(AncestralName("R14"))
  (  2)  r67 <- ArithK(Add, r65, -8)
         r68 <- StoreMem { mem: r66, addr: r67, value: r25 }
  (  5)  r24 <- Ancestral(AncestralName("R13"))
  (  2)  r73 <- ArithK(Add, r67, -8)
         r74 <- StoreMem { mem: r68, addr: r73, value: r24 }
         r23 <- Ancestral(AncestralName("R12"))
  (  2)  r75 <- ArithK(Add, r73, -8)
         r76 <- StoreMem { mem: r74, addr: r75, value: r23 }
         r10 <- Ancestral(AncestralName("RBP"))
  (  2)  r77 <- ArithK(Add, r75, -8)
         r78 <- StoreMem { mem: r76, addr: r77, value: r10 }
         r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r79 <- ArithK(Add, r77, -8)
         r80 <- StoreMem { mem: r78, addr: r79, value: r16 }
         r13 <- Ancestral(AncestralName("RDI"))
         r82 <- Const { value: 88, size: 8 }
  ( 56)  r83 <- Arith(Sub, r79, r82)
         r91 <- Const { value: 64, size: 8 }
         r92 <- Arith(Add, r91, r83)
         r93 <- StoreMem { mem: r80, addr: r92, value: r13 }
         r19 <- Ancestral(AncestralName("R8"))
         r95 <- Const { value: 32, size: 8 }
         r96 <- Arith(Add, r95, r83)
         r97 <- StoreMem { mem: r93, addr: r96, value: r19 }
  (  3)  r18 <- Ancestral(AncestralName("RDX"))
         r98 <- Const { value: 0, size: 8 }
         r99 <- Arith(Add, r98, r83)
         r100 <- StoreMem { mem: r97, addr: r99, value: r18 }
         r20 <- Ancestral(AncestralName("R9"))
         r101 <- Const { value: 24, size: 8 }
  (  2)  r102 <- Arith(Add, r101, r83)
  (  9)  r103 <- StoreMem { mem: r100, addr: r102, value: r20 }
         r111 <- CArg { value: r102, next_arg: None }
  (  2)  r70 <- Const { value: 46, size: 4 }
         r112 <- CArg { value: r70, next_arg: Some(r111) }
         r113 <- Const { value: 4199040, size: 8 }
         r114 <- Call { callee: r113, first_arg: Some(r112) }
  (  3)  r124 <- Part { src: r114, offset: 0, size: 8 }
         r1490 <- Upsilon { value: r124, phi_ref: r1451 }
  (  2)  r126 <- Arith(BitAnd, r124, r124)
         r128 <- IsZero(r126)
         r133 <- JmpIf { cond: r128, target: 1422 }
.B52:    ;; preds:B0.
         r1427 <- Const { value: 4199136, size: 8 }
         r1428 <- Call { callee: r1427, first_arg: None }
         r1443 <- Jmp(134)
         r1440 <- ArithK(Mul, r126, 1)
         r1422 <- Const { value: 0, size: 8 }
         r1423 <- Arith(Add, r1422, r83)
         r1424 <- LoadMem { mem: r103, addr: r1423, size: 8 }
         r1438 <- Const { value: 0, size: 8 }
         r1439 <- Arith(Add, r1438, r1424)
         r1441 <- Arith(Add, r1439, r1440)
         r1491 <- Upsilon { value: r1441, phi_ref: r1451 }
.B1:    ;; preds:B0,B52.
         r1493 <- Upsilon { value: r103, phi_ref: r1486 }
         r134 <- Const { value: 0, size: 8 }
         r135 <- Arith(Add, r134, r83)
  ( 11)  r136 <- LoadMem { mem: r103, addr: r135, size: 8 }
         r1492 <- Upsilon { value: r136, phi_ref: r1485 }
  (  7)  r1451 <- Phi
  (  8)  r139 <- Arith(Sub, r1451, r136)
         r144 <- IsZero(r139)
         r147 <- JmpIf { cond: r144, target: 1170 }
.B2:    ;; preds:B1.
         r155 <- Const { value: 0, size: 8 }
         r148 <- Const { value: 24, size: 8 }
         r149 <- Arith(Add, r148, r83)
         r150 <- LoadMem { mem: r103, addr: r149, size: 8 }
         r152 <- Const { value: 0, size: 8 }
         r153 <- Arith(Add, r152, r150)
         r154 <- LoadMem { mem: r103, addr: r153, size: 8 }
         r156 <- Arith(Sub, r154, r155)
         r160 <- IsZero(r156)
         r163 <- JmpIf { cond: r160, target: 1449 }
.B54:    ;; preds:B2.
         r1450 <- Jmp(1251)
  (  5)  r17 <- Ancestral(AncestralName("RCX"))
         r1494 <- Upsilon { value: r17, phi_ref: r1487 }
.B3:    ;; preds:B2.
         r179 <- Const { value: 72, size: 8 }
         r180 <- Arith(Add, r179, r83)
  (  7)  r181 <- StoreMem { mem: r103, addr: r180, value: r17 }
  (  2)  r185 <- Const { value: 0, size: 1 }
         r1506 <- Upsilon { value: r185, phi_ref: r1479 }
  (  4)  r14 <- Ancestral(AncestralName("RSI"))
         r1501 <- Upsilon { value: r14, phi_ref: r1452 }
         r1502 <- Upsilon { value: r181, phi_ref: r1453 }
         r71 <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r72 <- Concat { lo: r70, hi: r71 }
         r1503 <- Upsilon { value: r72, phi_ref: r1476 }
         r1504 <- Upsilon { value: r1451, phi_ref: r1477 }
         r1505 <- Upsilon { value: r181, phi_ref: r1478 }
         r164 <- Const { value: 24, size: 8 }
         r165 <- Arith(Add, r164, r14)
  ( 10)  r166 <- LoadMem { mem: r103, addr: r165, size: 8 }
         r182 <- Const { value: 0, size: 8 }
         r183 <- Arith(Add, r182, r166)
         r184 <- LoadMem { mem: r181, addr: r183, size: 1 }
         r186 <- Arith(Sub, r184, r185)
         r190 <- IsZero(r186)
         r193 <- JmpIf { cond: r190, target: 877 }
.B30:    ;; preds:B3,B29.
         r1477 <- Phi
         r895 <- Const { value: 8, size: 8 }
  (  2)  r896 <- Arith(Add, r895, r83)
         r1478 <- Phi
  (  4)  r897 <- StoreMem { mem: r1478, addr: r896, value: r1477 }
         r1479 <- Phi
         r898 <- CArg { value: r1479, next_arg: None }
         r899 <- CArg { value: r896, next_arg: Some(r898) }
         r892 <- Const { value: 10, size: 4 }
         r900 <- CArg { value: r892, next_arg: Some(r899) }
         r901 <- Const { value: 6451424, size: 8 }
         r902 <- Call { callee: r901, first_arg: Some(r900) }
         r1513 <- Upsilon { value: r897, phi_ref: r1486 }
         r917 <- Const { value: -1, size: 8 }
         r912 <- Part { src: r902, offset: 0, size: 8 }
  (  7)  r918 <- Arith(Sub, r912, r917)
         r1512 <- Upsilon { value: r918, phi_ref: r1485 }
         r922 <- IsZero(r918)
         r926 <- JmpIf { cond: r922, target: 1170 }
.B31:    ;; preds:B30.
         r913 <- Const { value: 8, size: 8 }
         r914 <- Arith(Add, r913, r83)
         r915 <- LoadMem { mem: r897, addr: r914, size: 8 }
         r931 <- Const { value: 0, size: 8 }
         r932 <- Arith(Add, r931, r83)
  ( 10)  r933 <- StoreMem { mem: r897, addr: r932, value: r915 }
         r937 <- Const { value: 0, size: 1 }
         r927 <- Const { value: 24, size: 8 }
         r928 <- Arith(Add, r927, r14)
  (  2)  r929 <- LoadMem { mem: r897, addr: r928, size: 8 }
         r934 <- Const { value: 0, size: 8 }
         r935 <- Arith(Add, r934, r929)
         r936 <- LoadMem { mem: r933, addr: r935, size: 1 }
         r938 <- Arith(Sub, r936, r937)
         r942 <- IsZero(r938)
         r945 <- Not(r942)
         r946 <- JmpExtIf { cond: r945, addr: 4206915 }
         r965 <- CArg { value: r918, next_arg: None }
         r947 <- Const { value: 24, size: 8 }
         r948 <- Arith(Add, r947, r83)
         r949 <- LoadMem { mem: r933, addr: r948, size: 8 }
         r959 <- Const { value: 0, size: 8 }
         r960 <- Arith(Add, r959, r949)
         r961 <- LoadMem { mem: r933, addr: r960, size: 8 }
         r966 <- CArg { value: r961, next_arg: Some(r965) }
         r951 <- Const { value: 32, size: 8 }
         r952 <- Arith(Add, r951, r83)
  (  2)  r953 <- LoadMem { mem: r933, addr: r952, size: 8 }
         r967 <- CArg { value: r953, next_arg: Some(r966) }
         r955 <- Const { value: 64, size: 8 }
         r956 <- Arith(Add, r955, r83)
  (  3)  r957 <- LoadMem { mem: r933, addr: r956, size: 8 }
         r968 <- CArg { value: r957, next_arg: Some(r967) }
         r969 <- Const { value: 8, size: 8 }
         r970 <- Arith(Add, r969, r929)
         r971 <- LoadMem { mem: r933, addr: r970, size: 8 }
         r972 <- LoadMem { mem: r933, addr: r971, size: 8 }
         r973 <- Call { callee: r972, first_arg: Some(r968) }
         r1515 <- Upsilon { value: r933, phi_ref: r1486 }
  (  2)  r985 <- Arith(BitAnd, r918, r918)
         r1514 <- Upsilon { value: r985, phi_ref: r1485 }
         r987 <- IsZero(r985)
         r992 <- JmpIf { cond: r987, target: 1170 }
.B32:    ;; preds:B31.
         r171 <- Part { src: r26, offset: 4, size: 4 }
         r169 <- Part { src: r26, offset: 0, size: 4 }
         r168 <- Part { src: r26, offset: 0, size: 4 }
         r170 <- Arith(BitXor, r168, r169)
  (  8)  r172 <- Concat { lo: r170, hi: r171 }
         r1010 <- ArithK(Mul, r172, 8)
         r1008 <- Const { value: 0, size: 8 }
         r1009 <- Arith(Add, r1008, r953)
         r1011 <- Arith(Add, r1009, r1010)
         r1012 <- StoreMem { mem: r933, addr: r1011, value: r918 }
         r1013 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1518 <- Upsilon { value: r957, phi_ref: r1475 }
         r1516 <- Upsilon { value: r957, phi_ref: r1480 }
         r1517 <- Upsilon { value: r1012, phi_ref: r1481 }
         r1000 <- Const { value: 0, size: 8 }
         r997 <- Const { value: 32, size: 8 }
         r998 <- Arith(Add, r997, r918)
         r999 <- LoadMem { mem: r933, addr: r998, size: 8 }
         r1001 <- Arith(Sub, r999, r1000)
         r1005 <- IsZero(r1001)
         r1014 <- JmpIf { cond: r1005, target: 772 }
.B26:    ;; preds:B25,B32.
  (  2)  r1475 <- Phi
         r773 <- Part { src: r1475, offset: 0, size: 1 }
         r772 <- Part { src: r1475, offset: 0, size: 1 }
         r774 <- Arith(BitAnd, r772, r773)
         r776 <- IsZero(r774)
         r781 <- JmpIf { cond: r776, target: 1444 }
.B53:    ;; preds:B26.
         r1448 <- Jmp(1030)
         r1444 <- Const { value: 72, size: 8 }
         r1445 <- Arith(Add, r1444, r83)
         r1446 <- LoadMem { mem: r181, addr: r1445, size: 8 }
         r1519 <- Upsilon { value: r1446, phi_ref: r1482 }
.B27:    ;; preds:B26.
         r782 <- Const { value: 1, size: 8 }
         r783 <- Arith(Add, r782, r1451)
         r788 <- Const { value: 0, size: 8 }
  (  2)  r789 <- Arith(Add, r788, r83)
  (  9)  r790 <- StoreMem { mem: r181, addr: r789, value: r783 }
         r798 <- CArg { value: r789, next_arg: None }
  (  2)  r785 <- Const { value: 46, size: 4 }
         r799 <- CArg { value: r785, next_arg: Some(r798) }
         r800 <- Const { value: 4199040, size: 8 }
         r801 <- Call { callee: r800, first_arg: Some(r799) }
  (  3)  r811 <- Part { src: r801, offset: 0, size: 8 }
         r813 <- Arith(BitAnd, r811, r811)
         r815 <- IsZero(r813)
         r820 <- JmpIf { cond: r815, target: 1201 }
.B42:    ;; preds:B27.
         r1215 <- Const { value: 4199136, size: 8 }
         r1216 <- Call { callee: r1215, first_arg: None }
         r1226 <- Const { value: 24, size: 8 }
         r1227 <- Arith(Add, r1226, r83)
         r1228 <- LoadMem { mem: r790, addr: r1227, size: 8 }
         r1236 <- Const { value: 0, size: 8 }
         r1237 <- Arith(Add, r1236, r1228)
         r1238 <- LoadMem { mem: r790, addr: r1237, size: 8 }
         r1205 <- Const { value: 1, size: 8 }
         r1206 <- Arith(Add, r172, r1205)
         r1239 <- Arith(Sub, r1206, r1238)
         r1241 <- CarryOf(r1239)
         r1246 <- JmpIf { cond: r1241, target: 859 }
.B28:    ;; preds:B27.
         r826 <- Const { value: 24, size: 8 }
         r827 <- Arith(Add, r826, r83)
         r828 <- LoadMem { mem: r790, addr: r827, size: 8 }
         r847 <- Const { value: 0, size: 8 }
         r848 <- Arith(Add, r847, r828)
         r849 <- LoadMem { mem: r790, addr: r848, size: 8 }
         r830 <- Const { value: 1, size: 8 }
         r831 <- Arith(Add, r172, r830)
         r850 <- Arith(Sub, r831, r849)
         r852 <- CarryOf(r850)
         r857 <- Not(r852)
         r858 <- JmpIf { cond: r857, target: 1247 }
.B43:    ;; preds:B28,B42.
         r1247 <- Const { value: 72, size: 8 }
         r1248 <- Arith(Add, r1247, r83)
         r1249 <- LoadMem { mem: r790, addr: r1248, size: 8 }
         r1520 <- Upsilon { value: r1249, phi_ref: r1487 }
.B44:    ;; preds:B43,B54.
         r1498 <- Upsilon { value: r103, phi_ref: r1489 }
  (  2)  r1487 <- Phi
  (  2)  r1251 <- Arith(BitAnd, r1487, r1487)
         r1497 <- Upsilon { value: r1251, phi_ref: r1488 }
         r1253 <- IsZero(r1251)
         r1258 <- JmpIf { cond: r1253, target: 1049 }
.B29:    ;; preds:B28,B42.
         r1526 <- Upsilon { value: r790, phi_ref: r1453 }
         r786 <- Part { src: r72, offset: 4, size: 4 }
         r787 <- Concat { lo: r785, hi: r786 }
         r1521 <- Upsilon { value: r787, phi_ref: r1476 }
         r1522 <- Upsilon { value: r811, phi_ref: r1477 }
         r1523 <- Upsilon { value: r790, phi_ref: r1478 }
  (  2)  r867 <- Const { value: 0, size: 1 }
         r1524 <- Upsilon { value: r867, phi_ref: r1479 }
         r1525 <- Upsilon { value: r24, phi_ref: r1452 }
         r860 <- Const { value: 24, size: 8 }
         r861 <- Arith(Add, r860, r24)
         r862 <- LoadMem { mem: r790, addr: r861, size: 8 }
         r864 <- Const { value: 0, size: 8 }
         r865 <- Arith(Add, r864, r862)
         r866 <- LoadMem { mem: r790, addr: r865, size: 1 }
         r868 <- Arith(Sub, r866, r867)
         r872 <- IsZero(r868)
         r875 <- Not(r872)
         r876 <- JmpIf { cond: r875, target: 194 }
.B4:    ;; preds:B3,B29.
  (  5)  r1452 <- Phi
         r194 <- Const { value: 16, size: 8 }
         r195 <- Arith(Add, r194, r1452)
  (  2)  r1453 <- Phi
  (  3)  r196 <- LoadMem { mem: r1453, addr: r195, size: 8 }
         r198 <- Const { value: 16, size: 8 }
         r199 <- Arith(Add, r198, r83)
  (  6)  r200 <- StoreMem { mem: r1453, addr: r199, value: r196 }
         r1528 <- Upsilon { value: r200, phi_ref: r1486 }
         r1527 <- Upsilon { value: r136, phi_ref: r1485 }
  (  3)  r201 <- Arith(BitAnd, r196, r196)
         r203 <- IsZero(r201)
         r208 <- JmpIf { cond: r203, target: 1170 }
.B5:    ;; preds:B4.
         r1531 <- Upsilon { value: r200, phi_ref: r1464 }
         r1529 <- Upsilon { value: r1451, phi_ref: r1462 }
         r1530 <- Upsilon { value: r166, phi_ref: r1463 }
         r222 <- Const { value: 3, size: 4 }
         r221 <- Part { src: r201, offset: 0, size: 4 }
  (  2)  r223 <- Arith(BitAnd, r221, r222)
         r229 <- IsZero(r223)
         r232 <- JmpIf { cond: r229, target: 441 }
.B6:    ;; preds:B5.
         r1564 <- Upsilon { value: r200, phi_ref: r1460 }
         r1562 <- Upsilon { value: r1451, phi_ref: r1458 }
         r1563 <- Upsilon { value: r166, phi_ref: r1459 }
         r233 <- Const { value: 1, size: 8 }
         r224 <- Part { src: r201, offset: 4, size: 4 }
         r225 <- Concat { lo: r223, hi: r224 }
  (  2)  r234 <- Arith(Sub, r225, r233)
         r238 <- IsZero(r234)
         r241 <- JmpIf { cond: r238, target: 367 }
.B7:    ;; preds:B6.
         r1579 <- Upsilon { value: r200, phi_ref: r1457 }
         r1577 <- Upsilon { value: r1451, phi_ref: r1455 }
         r1578 <- Upsilon { value: r166, phi_ref: r1456 }
         r242 <- Const { value: 2, size: 8 }
         r243 <- Arith(Sub, r234, r242)
         r247 <- IsZero(r243)
         r250 <- JmpIf { cond: r247, target: 305 }
.B8:    ;; preds:B7.
         r255 <- Const { value: 48, size: 8 }
         r256 <- Arith(Add, r255, r83)
         r257 <- StoreMem { mem: r200, addr: r256, value: r1451 }
         r259 <- Const { value: 40, size: 8 }
         r260 <- Arith(Add, r259, r83)
         r261 <- StoreMem { mem: r257, addr: r260, value: r166 }
         r251 <- Const { value: 8, size: 8 }
         r252 <- Arith(Add, r251, r166)
  (  2)  r253 <- LoadMem { mem: r200, addr: r252, size: 8 }
         r263 <- Const { value: 8, size: 8 }
         r264 <- Arith(Add, r263, r83)
  (  4)  r265 <- StoreMem { mem: r261, addr: r264, value: r253 }
         r269 <- CArg { value: r253, next_arg: None }
         r270 <- Const { value: 4199136, size: 8 }
         r271 <- Call { callee: r270, first_arg: Some(r269) }
         r1588 <- Upsilon { value: r166, phi_ref: r1454 }
         r281 <- Part { src: r271, offset: 0, size: 8 }
  (  2)  r291 <- Arith(Sub, r281, r139)
         r295 <- IsZero(r291)
         r298 <- JmpIf { cond: r295, target: 1370 }
.B50:    ;; preds:B8.
         r286 <- Const { value: 48, size: 8 }
         r287 <- Arith(Add, r286, r83)
  (  2)  r288 <- LoadMem { mem: r265, addr: r287, size: 8 }
         r1375 <- Const { value: 40, size: 8 }
         r1376 <- Arith(Add, r1375, r83)
         r1377 <- StoreMem { mem: r265, addr: r1376, value: r288 }
         r1378 <- Const { value: 8, size: 8 }
  (  2)  r1379 <- Arith(Add, r1378, r83)
         r1380 <- StoreMem { mem: r1377, addr: r1379, value: r166 }
         r296 <- Part { src: r291, offset: 0, size: 1 }
         r1390 <- CArg { value: r296, next_arg: None }
         r1391 <- CArg { value: r1379, next_arg: Some(r1390) }
         r1370 <- Const { value: 0, size: 8 }
         r1371 <- Arith(Add, r1370, r83)
         r1372 <- LoadMem { mem: r265, addr: r1371, size: 8 }
         r1392 <- CArg { value: r1372, next_arg: Some(r1391) }
         r1393 <- Const { value: 4199232, size: 8 }
         r1394 <- Call { callee: r1393, first_arg: Some(r1392) }
         r1589 <- Upsilon { value: r166, phi_ref: r1454 }
  (  2)  r1404 <- Part { src: r1394, offset: 0, size: 8 }
         r1411 <- Part { src: r1404, offset: 0, size: 4 }
         r1410 <- Part { src: r1404, offset: 0, size: 4 }
         r1412 <- Arith(BitAnd, r1410, r1411)
         r1414 <- IsZero(r1412)
         r1419 <- Not(r1414)
         r1420 <- JmpIf { cond: r1419, target: 299 }
.B51:    ;; preds:B50.
         r1421 <- Jmp(741)
         r213 <- Part { src: r17, offset: 4, size: 4 }
         r211 <- Part { src: r17, offset: 0, size: 4 }
         r210 <- Part { src: r17, offset: 0, size: 4 }
         r212 <- Arith(BitXor, r210, r211)
  (  6)  r214 <- Concat { lo: r212, hi: r213 }
         r1590 <- Upsilon { value: r214, phi_ref: r1470 }
         r1591 <- Upsilon { value: r166, phi_ref: r1471 }
         r1592 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1593 <- Upsilon { value: r172, phi_ref: r1473 }
         r1594 <- Upsilon { value: r1380, phi_ref: r1474 }
.B9:    ;; preds:B8,B50.
         r1595 <- Upsilon { value: r288, phi_ref: r1455 }
         r1454 <- Phi
         r302 <- Const { value: 40, size: 8 }
         r303 <- Arith(Add, r302, r1454)
         r1596 <- Upsilon { value: r303, phi_ref: r1456 }
         r1597 <- Upsilon { value: r265, phi_ref: r1457 }
.B10:    ;; preds:B7,B9.
         r1455 <- Phi
         r309 <- Const { value: 40, size: 8 }
         r310 <- Arith(Add, r309, r83)
  (  2)  r1457 <- Phi
         r311 <- StoreMem { mem: r1457, addr: r310, value: r1455 }
  (  3)  r1456 <- Phi
         r305 <- Const { value: 8, size: 8 }
         r306 <- Arith(Add, r305, r1456)
  (  2)  r307 <- LoadMem { mem: r1457, addr: r306, size: 8 }
         r314 <- Const { value: 8, size: 8 }
         r315 <- Arith(Add, r314, r83)
  (  4)  r316 <- StoreMem { mem: r311, addr: r315, value: r307 }
         r320 <- CArg { value: r307, next_arg: None }
         r321 <- Const { value: 4199136, size: 8 }
         r322 <- Call { callee: r321, first_arg: Some(r320) }
         r332 <- Part { src: r322, offset: 0, size: 8 }
  (  2)  r341 <- Arith(Sub, r332, r139)
         r345 <- IsZero(r341)
         r348 <- JmpIf { cond: r345, target: 1322 }
.B48:    ;; preds:B10.
         r337 <- Const { value: 40, size: 8 }
         r338 <- Arith(Add, r337, r83)
  (  2)  r339 <- LoadMem { mem: r316, addr: r338, size: 8 }
         r1327 <- Const { value: 8, size: 8 }
  (  2)  r1328 <- Arith(Add, r1327, r83)
         r1329 <- StoreMem { mem: r316, addr: r1328, value: r339 }
         r346 <- Part { src: r341, offset: 0, size: 1 }
         r1339 <- CArg { value: r346, next_arg: None }
         r1340 <- CArg { value: r1328, next_arg: Some(r1339) }
         r1322 <- Const { value: 0, size: 8 }
         r1323 <- Arith(Add, r1322, r83)
         r1324 <- LoadMem { mem: r316, addr: r1323, size: 8 }
         r1341 <- CArg { value: r1324, next_arg: Some(r1340) }
         r1342 <- Const { value: 4199232, size: 8 }
         r1343 <- Call { callee: r1342, first_arg: Some(r1341) }
  (  2)  r1353 <- Part { src: r1343, offset: 0, size: 8 }
         r1359 <- Part { src: r1353, offset: 0, size: 4 }
         r1358 <- Part { src: r1353, offset: 0, size: 4 }
         r1360 <- Arith(BitAnd, r1358, r1359)
         r1362 <- IsZero(r1360)
         r1367 <- Not(r1362)
         r1368 <- JmpIf { cond: r1367, target: 349 }
.B49:    ;; preds:B48.
         r1369 <- Jmp(741)
         r1580 <- Upsilon { value: r214, phi_ref: r1470 }
         r1581 <- Upsilon { value: r1456, phi_ref: r1471 }
         r1582 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1583 <- Upsilon { value: r172, phi_ref: r1473 }
         r1584 <- Upsilon { value: r1329, phi_ref: r1474 }
.B11:    ;; preds:B10,B48.
         r1585 <- Upsilon { value: r339, phi_ref: r1458 }
         r358 <- Const { value: 40, size: 8 }
         r359 <- Arith(Add, r1456, r358)
         r1586 <- Upsilon { value: r359, phi_ref: r1459 }
         r1587 <- Upsilon { value: r316, phi_ref: r1460 }
.B12:    ;; preds:B6,B11.
         r1458 <- Phi
         r371 <- Const { value: 40, size: 8 }
         r372 <- Arith(Add, r371, r83)
  (  2)  r1460 <- Phi
         r373 <- StoreMem { mem: r1460, addr: r372, value: r1458 }
  (  3)  r1459 <- Phi
         r367 <- Const { value: 8, size: 8 }
         r368 <- Arith(Add, r367, r1459)
  (  2)  r369 <- LoadMem { mem: r1460, addr: r368, size: 8 }
         r376 <- Const { value: 8, size: 8 }
         r377 <- Arith(Add, r376, r83)
  (  4)  r378 <- StoreMem { mem: r373, addr: r377, value: r369 }
         r382 <- CArg { value: r369, next_arg: None }
         r383 <- Const { value: 4199136, size: 8 }
         r384 <- Call { callee: r383, first_arg: Some(r382) }
         r1565 <- Upsilon { value: r378, phi_ref: r1461 }
         r394 <- Part { src: r384, offset: 0, size: 8 }
  (  3)  r403 <- Arith(Sub, r394, r139)
         r407 <- IsZero(r403)
         r410 <- JmpIf { cond: r407, target: 1274 }
.B46:    ;; preds:B12.
         r399 <- Const { value: 40, size: 8 }
         r400 <- Arith(Add, r399, r83)
  (  2)  r401 <- LoadMem { mem: r378, addr: r400, size: 8 }
         r1279 <- Const { value: 8, size: 8 }
  (  2)  r1280 <- Arith(Add, r1279, r83)
  (  2)  r1281 <- StoreMem { mem: r378, addr: r1280, value: r401 }
         r408 <- Part { src: r403, offset: 0, size: 1 }
         r1291 <- CArg { value: r408, next_arg: None }
         r1292 <- CArg { value: r1280, next_arg: Some(r1291) }
         r1274 <- Const { value: 0, size: 8 }
         r1275 <- Arith(Add, r1274, r83)
         r1276 <- LoadMem { mem: r378, addr: r1275, size: 8 }
         r1293 <- CArg { value: r1276, next_arg: Some(r1292) }
         r1294 <- Const { value: 4199232, size: 8 }
         r1295 <- Call { callee: r1294, first_arg: Some(r1293) }
         r1566 <- Upsilon { value: r1281, phi_ref: r1461 }
  (  2)  r1305 <- Part { src: r1295, offset: 0, size: 8 }
         r1311 <- Part { src: r1305, offset: 0, size: 4 }
         r1310 <- Part { src: r1305, offset: 0, size: 4 }
         r1312 <- Arith(BitAnd, r1310, r1311)
         r1314 <- IsZero(r1312)
         r1319 <- Not(r1314)
         r1320 <- JmpIf { cond: r1319, target: 411 }
.B47:    ;; preds:B46.
         r1321 <- Jmp(741)
         r1567 <- Upsilon { value: r214, phi_ref: r1470 }
         r1568 <- Upsilon { value: r1459, phi_ref: r1471 }
         r1569 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1570 <- Upsilon { value: r172, phi_ref: r1473 }
         r1571 <- Upsilon { value: r1281, phi_ref: r1474 }
.B13:    ;; preds:B12,B46.
  (  3)  r1461 <- Phi
         r1576 <- Upsilon { value: r1461, phi_ref: r1486 }
         r1572 <- Upsilon { value: r401, phi_ref: r1462 }
         r424 <- Const { value: 40, size: 8 }
         r425 <- Arith(Add, r1459, r424)
         r1573 <- Upsilon { value: r425, phi_ref: r1463 }
         r1574 <- Upsilon { value: r1461, phi_ref: r1464 }
         r1575 <- Upsilon { value: r403, phi_ref: r1485 }
         r411 <- Const { value: 16, size: 8 }
         r412 <- Arith(Add, r411, r83)
         r413 <- LoadMem { mem: r1461, addr: r412, size: 8 }
         r415 <- Const { value: 1, size: 8 }
         r416 <- Arith(Add, r214, r415)
         r433 <- Arith(Sub, r416, r413)
         r437 <- IsZero(r433)
         r440 <- JmpIf { cond: r437, target: 1170 }
.B14:    ;; preds:B5,B13.
         r441 <- Const { value: 56, size: 8 }
         r442 <- Arith(Add, r441, r83)
         r1464 <- Phi
         r443 <- StoreMem { mem: r1464, addr: r442, value: r1452 }
         r445 <- Const { value: 40, size: 8 }
         r446 <- Arith(Add, r445, r83)
         r447 <- StoreMem { mem: r443, addr: r446, value: r172 }
         r1462 <- Phi
         r448 <- Const { value: 48, size: 8 }
         r449 <- Arith(Add, r448, r83)
         r450 <- StoreMem { mem: r447, addr: r449, value: r1462 }
         r451 <- Jmp(601)
         r1463 <- Phi
         r1537 <- Upsilon { value: r1463, phi_ref: r1465 }
         r1538 <- Upsilon { value: r450, phi_ref: r1466 }
.B19:    ;; preds:B14,B18.
  (  4)  r1465 <- Phi
         r601 <- Const { value: 8, size: 8 }
         r602 <- Arith(Add, r601, r1465)
  (  7)  r1466 <- Phi
         r603 <- LoadMem { mem: r1466, addr: r602, size: 8 }
         r610 <- CArg { value: r603, next_arg: None }
         r611 <- Const { value: 4199136, size: 8 }
         r612 <- Call { callee: r611, first_arg: Some(r610) }
         r622 <- Part { src: r612, offset: 0, size: 8 }
  (  2)  r623 <- Arith(Sub, r622, r139)
         r627 <- IsZero(r623)
         r630 <- Not(r627)
         r631 <- JmpIf { cond: r630, target: 452 }
.B20:    ;; preds:B19.
         r628 <- Part { src: r623, offset: 0, size: 1 }
         r647 <- CArg { value: r628, next_arg: None }
         r632 <- Const { value: 0, size: 8 }
  (  2)  r633 <- Arith(Add, r632, r83)
         r648 <- CArg { value: r633, next_arg: Some(r647) }
         r634 <- LoadMem { mem: r1466, addr: r633, size: 8 }
         r649 <- CArg { value: r634, next_arg: Some(r648) }
         r650 <- Const { value: 4199232, size: 8 }
         r651 <- Call { callee: r650, first_arg: Some(r649) }
  (  2)  r661 <- Part { src: r651, offset: 0, size: 8 }
         r663 <- Part { src: r661, offset: 0, size: 4 }
         r662 <- Part { src: r661, offset: 0, size: 4 }
         r664 <- Arith(BitAnd, r662, r663)
         r666 <- IsZero(r664)
         r671 <- Not(r666)
         r672 <- JmpIf { cond: r671, target: 452 }
.B15:    ;; preds:B19,B20.
         r452 <- Const { value: 48, size: 8 }
         r453 <- Arith(Add, r452, r1465)
         r454 <- LoadMem { mem: r1466, addr: r453, size: 8 }
         r466 <- Const { value: 8, size: 8 }
         r467 <- Arith(Add, r466, r83)
  (  4)  r468 <- StoreMem { mem: r1466, addr: r467, value: r454 }
         r459 <- Const { value: 1, size: 8 }
  (  5)  r460 <- Arith(Add, r459, r214)
         r472 <- CArg { value: r460, next_arg: None }
         r473 <- Const { value: 4199136, size: 8 }
         r474 <- Call { callee: r473, first_arg: Some(r472) }
         r484 <- Part { src: r474, offset: 0, size: 8 }
  (  2)  r489 <- Arith(Sub, r484, r139)
         r493 <- IsZero(r489)
         r496 <- JmpIf { cond: r493, target: 687 }
.B22:    ;; preds:B15.
         r494 <- Part { src: r489, offset: 0, size: 1 }
         r701 <- CArg { value: r494, next_arg: None }
         r687 <- Const { value: 0, size: 8 }
  (  2)  r688 <- Arith(Add, r687, r83)
         r702 <- CArg { value: r688, next_arg: Some(r701) }
         r689 <- LoadMem { mem: r468, addr: r688, size: 8 }
         r703 <- CArg { value: r689, next_arg: Some(r702) }
         r704 <- Const { value: 4199232, size: 8 }
         r705 <- Call { callee: r704, first_arg: Some(r703) }
         r1551 <- Upsilon { value: r468, phi_ref: r1469 }
         r456 <- Const { value: 40, size: 8 }
  (  7)  r457 <- Arith(Add, r456, r1465)
         r1549 <- Upsilon { value: r457, phi_ref: r1467 }
         r1550 <- Upsilon { value: r457, phi_ref: r1468 }
  (  2)  r715 <- Part { src: r705, offset: 0, size: 8 }
         r717 <- Part { src: r715, offset: 0, size: 4 }
         r716 <- Part { src: r715, offset: 0, size: 4 }
         r718 <- Arith(BitAnd, r716, r717)
         r720 <- IsZero(r718)
         r725 <- Not(r720)
         r726 <- JmpIf { cond: r725, target: 497 }
.B16:    ;; preds:B15,B22.
         r497 <- Const { value: 48, size: 8 }
         r498 <- Arith(Add, r497, r457)
         r499 <- LoadMem { mem: r468, addr: r498, size: 8 }
         r509 <- Const { value: 8, size: 8 }
         r510 <- Arith(Add, r509, r83)
  (  4)  r511 <- StoreMem { mem: r468, addr: r510, value: r499 }
         r504 <- Const { value: 1, size: 8 }
         r505 <- Arith(Add, r504, r460)
         r515 <- CArg { value: r505, next_arg: None }
         r516 <- Const { value: 4199136, size: 8 }
         r517 <- Call { callee: r516, first_arg: Some(r515) }
         r527 <- Part { src: r517, offset: 0, size: 8 }
  (  2)  r532 <- Arith(Sub, r527, r139)
         r536 <- IsZero(r532)
         r539 <- JmpIf { cond: r536, target: 1088 }
.B37:    ;; preds:B16.
         r537 <- Part { src: r532, offset: 0, size: 1 }
         r1102 <- CArg { value: r537, next_arg: None }
         r1088 <- Const { value: 0, size: 8 }
  (  2)  r1089 <- Arith(Add, r1088, r83)
         r1103 <- CArg { value: r1089, next_arg: Some(r1102) }
         r1090 <- LoadMem { mem: r511, addr: r1089, size: 8 }
         r1104 <- CArg { value: r1090, next_arg: Some(r1103) }
         r1105 <- Const { value: 4199232, size: 8 }
         r1106 <- Call { callee: r1105, first_arg: Some(r1104) }
  (  2)  r1116 <- Part { src: r1106, offset: 0, size: 8 }
         r1118 <- Part { src: r1116, offset: 0, size: 4 }
         r1117 <- Part { src: r1116, offset: 0, size: 4 }
         r1119 <- Arith(BitAnd, r1117, r1118)
         r1121 <- IsZero(r1119)
         r1126 <- Not(r1121)
         r1127 <- JmpIf { cond: r1126, target: 540 }
.B38:    ;; preds:B37.
         r1128 <- Jmp(727)
         r501 <- Const { value: 40, size: 8 }
  (  2)  r502 <- Arith(Add, r501, r457)
         r1552 <- Upsilon { value: r502, phi_ref: r1467 }
         r1553 <- Upsilon { value: r502, phi_ref: r1468 }
         r1554 <- Upsilon { value: r511, phi_ref: r1469 }
.B17:    ;; preds:B16,B37.
         r540 <- Const { value: 88, size: 8 }
         r541 <- Arith(Add, r540, r457)
         r542 <- LoadMem { mem: r511, addr: r541, size: 8 }
         r552 <- Const { value: 8, size: 8 }
         r553 <- Arith(Add, r552, r83)
  (  5)  r554 <- StoreMem { mem: r511, addr: r553, value: r542 }
         r547 <- Const { value: 2, size: 8 }
         r548 <- Arith(Add, r547, r460)
         r558 <- CArg { value: r548, next_arg: None }
         r559 <- Const { value: 4199136, size: 8 }
         r560 <- Call { callee: r559, first_arg: Some(r558) }
         r570 <- Part { src: r560, offset: 0, size: 8 }
  (  3)  r575 <- Arith(Sub, r570, r139)
         r579 <- IsZero(r575)
         r582 <- JmpIf { cond: r579, target: 1129 }
.B39:    ;; preds:B17.
         r580 <- Part { src: r575, offset: 0, size: 1 }
         r1143 <- CArg { value: r580, next_arg: None }
         r1129 <- Const { value: 0, size: 8 }
  (  2)  r1130 <- Arith(Add, r1129, r83)
         r1144 <- CArg { value: r1130, next_arg: Some(r1143) }
         r1131 <- LoadMem { mem: r554, addr: r1130, size: 8 }
         r1145 <- CArg { value: r1131, next_arg: Some(r1144) }
         r1146 <- Const { value: 4199232, size: 8 }
         r1147 <- Call { callee: r1146, first_arg: Some(r1145) }
  (  2)  r1157 <- Part { src: r1147, offset: 0, size: 8 }
         r1159 <- Part { src: r1157, offset: 0, size: 4 }
         r1158 <- Part { src: r1157, offset: 0, size: 4 }
         r1160 <- Arith(BitAnd, r1158, r1159)
         r1162 <- IsZero(r1160)
         r1167 <- Not(r1162)
         r1168 <- JmpIf { cond: r1167, target: 583 }
.B40:    ;; preds:B39.
         r1169 <- Jmp(727)
         r544 <- Const { value: 80, size: 8 }
  (  2)  r545 <- Arith(Add, r544, r457)
         r1555 <- Upsilon { value: r545, phi_ref: r1467 }
         r1556 <- Upsilon { value: r545, phi_ref: r1468 }
         r1557 <- Upsilon { value: r554, phi_ref: r1469 }
.B23:    ;; preds:B22,B38,B40.
         r1544 <- Upsilon { value: r460, phi_ref: r1470 }
         r1468 <- Phi
         r1545 <- Upsilon { value: r1468, phi_ref: r1471 }
         r737 <- Const { value: 56, size: 8 }
         r738 <- Arith(Add, r737, r83)
  (  3)  r1469 <- Phi
         r739 <- LoadMem { mem: r1469, addr: r738, size: 8 }
         r1546 <- Upsilon { value: r739, phi_ref: r1472 }
         r728 <- Const { value: 40, size: 8 }
         r729 <- Arith(Add, r728, r83)
         r730 <- LoadMem { mem: r1469, addr: r729, size: 8 }
         r1547 <- Upsilon { value: r730, phi_ref: r1473 }
         r1548 <- Upsilon { value: r1469, phi_ref: r1474 }
.B18:    ;; preds:B17,B39.
         r1561 <- Upsilon { value: r554, phi_ref: r1486 }
         r590 <- Const { value: 120, size: 8 }
         r591 <- Arith(Add, r590, r457)
         r1558 <- Upsilon { value: r591, phi_ref: r1465 }
         r1559 <- Upsilon { value: r554, phi_ref: r1466 }
         r1560 <- Upsilon { value: r575, phi_ref: r1485 }
         r583 <- Const { value: 16, size: 8 }
         r584 <- Arith(Add, r583, r83)
         r585 <- LoadMem { mem: r554, addr: r584, size: 8 }
         r587 <- Const { value: 3, size: 8 }
         r588 <- Arith(Add, r587, r460)
         r593 <- Arith(Sub, r588, r585)
         r597 <- IsZero(r593)
         r600 <- JmpIf { cond: r597, target: 1170 }
.B21:    ;; preds:B20.
         r686 <- Jmp(741)
         r1539 <- Upsilon { value: r214, phi_ref: r1470 }
         r1540 <- Upsilon { value: r1465, phi_ref: r1471 }
         r682 <- Const { value: 56, size: 8 }
         r683 <- Arith(Add, r682, r83)
         r684 <- LoadMem { mem: r1466, addr: r683, size: 8 }
         r1541 <- Upsilon { value: r684, phi_ref: r1472 }
         r674 <- Const { value: 40, size: 8 }
         r675 <- Arith(Add, r674, r83)
         r676 <- LoadMem { mem: r1466, addr: r675, size: 8 }
         r1542 <- Upsilon { value: r676, phi_ref: r1473 }
         r1543 <- Upsilon { value: r1466, phi_ref: r1474 }
.B24:    ;; preds:B21,B23,B47,B49,B51.
         r1470 <- Phi
         r1473 <- Phi
         r747 <- ArithK(Mul, r1473, 8)
         r741 <- Const { value: 32, size: 8 }
         r742 <- Arith(Add, r741, r83)
  (  2)  r1474 <- Phi
         r743 <- LoadMem { mem: r1474, addr: r742, size: 8 }
         r745 <- Const { value: 0, size: 8 }
         r746 <- Arith(Add, r745, r743)
         r748 <- Arith(Add, r746, r747)
  (  3)  r749 <- StoreMem { mem: r1474, addr: r748, value: r1470 }
         r1533 <- Upsilon { value: r749, phi_ref: r1486 }
         r1532 <- Upsilon { value: r136, phi_ref: r1485 }
         r1472 <- Phi
         r1471 <- Phi
         r750 <- Arith(Sub, r1471, r1472)
         r754 <- IsZero(r750)
         r757 <- JmpIf { cond: r754, target: 1170 }
.B25:    ;; preds:B24.
         r769 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1536 <- Upsilon { value: r749, phi_ref: r1481 }
         r1534 <- Upsilon { value: r18, phi_ref: r1475 }
         r1535 <- Upsilon { value: r18, phi_ref: r1480 }
         r761 <- Const { value: 0, size: 8 }
         r758 <- Const { value: 32, size: 8 }
         r759 <- Arith(Add, r758, r24)
         r760 <- LoadMem { mem: r749, addr: r759, size: 8 }
         r762 <- Arith(Sub, r760, r761)
         r766 <- IsZero(r762)
         r770 <- Not(r766)
         r771 <- JmpIf { cond: r770, target: 1015 }
.B33:    ;; preds:B25,B32.
  (  2)  r1481 <- Phi
         r1511 <- Upsilon { value: r1481, phi_ref: r1486 }
         r1015 <- Const { value: 72, size: 8 }
         r1016 <- Arith(Add, r1015, r83)
         r1017 <- LoadMem { mem: r1481, addr: r1016, size: 8 }
         r1509 <- Upsilon { value: r1017, phi_ref: r1482 }
         r1510 <- Upsilon { value: r136, phi_ref: r1485 }
  (  2)  r1480 <- Phi
         r1020 <- Part { src: r1480, offset: 0, size: 1 }
         r1019 <- Part { src: r1480, offset: 0, size: 1 }
         r1021 <- Arith(BitAnd, r1019, r1020)
         r1023 <- IsZero(r1021)
         r1028 <- Not(r1023)
         r1029 <- JmpIf { cond: r1028, target: 1170 }
.B41:    ;; preds:B1,B4,B13,B18,B24,B30,B31,B33.
         r1485 <- Phi
         r1180 <- Part { src: r1485, offset: 4, size: 4 }
         r1179 <- Const { value: 2, size: 4 }
         r1181 <- Concat { lo: r1179, hi: r1180 }
         r1200 <- Ret(r1181)
.B34:    ;; preds:B33,B53.
         r1030 <- Const { value: 1, size: 8 }
         r1031 <- Arith(Add, r1030, r172)
         r1033 <- Const { value: 24, size: 8 }
         r1034 <- Arith(Add, r1033, r83)
         r1035 <- LoadMem { mem: r181, addr: r1034, size: 8 }
         r1037 <- Const { value: 0, size: 8 }
         r1038 <- Arith(Add, r1037, r1035)
         r1039 <- StoreMem { mem: r181, addr: r1038, value: r1031 }
         r1508 <- Upsilon { value: r1039, phi_ref: r1489 }
  (  2)  r1482 <- Phi
  (  2)  r1040 <- Arith(BitAnd, r1482, r1482)
         r1507 <- Upsilon { value: r1040, phi_ref: r1488 }
         r1042 <- IsZero(r1040)
         r1047 <- Not(r1042)
         r1048 <- JmpIf { cond: r1047, target: 1259 }
.B45:    ;; preds:B34,B44.
         r1488 <- Phi
         r1259 <- Const { value: 0, size: 8 }
         r1260 <- Arith(Add, r1259, r1488)
         r1489 <- Phi
         r1261 <- StoreMem { mem: r1489, addr: r1260, value: r24 }
         r1273 <- Jmp(1060)
         r1265 <- Part { src: r136, offset: 4, size: 4 }
         r1263 <- Part { src: r136, offset: 0, size: 4 }
         r1262 <- Part { src: r136, offset: 0, size: 4 }
         r1264 <- Arith(BitXor, r1262, r1263)
         r1266 <- Concat { lo: r1264, hi: r1265 }
         r1495 <- Upsilon { value: r1266, phi_ref: r1483 }
         r1496 <- Upsilon { value: r1261, phi_ref: r1484 }
.B35:    ;; preds:B34,B44.
         r1052 <- Part { src: r136, offset: 4, size: 4 }
         r1050 <- Part { src: r136, offset: 0, size: 4 }
         r1049 <- Part { src: r136, offset: 0, size: 4 }
         r1051 <- Arith(BitXor, r1049, r1050)
         r1053 <- Concat { lo: r1051, hi: r1052 }
         r1499 <- Upsilon { value: r1053, phi_ref: r1483 }
         r1500 <- Upsilon { value: r103, phi_ref: r1484 }
.B36:    ;; preds:B35,B45.
         r1483 <- Phi
         r1087 <- Ret(r1483)


cfg:
  entry: BlockID(0)
  exit: BlockID(55)
  BlockID(0) [0:134] -> Alt { straight: (0, BlockID(1)), side: (0, BlockID(52)) }
  BlockID(1) [134:148] -> Alt { straight: (0, BlockID(2)), side: (0, BlockID(41)) }
  BlockID(2) [148:164] -> Alt { straight: (0, BlockID(3)), side: (0, BlockID(54)) }
  BlockID(3) [164:194] -> Alt { straight: (0, BlockID(4)), side: (0, BlockID(30)) }
  BlockID(4) [194:209] -> Alt { straight: (0, BlockID(5)), side: (1, BlockID(41)) }
  BlockID(5) [209:233] -> Alt { straight: (0, BlockID(6)), side: (0, BlockID(14)) }
  BlockID(6) [233:242] -> Alt { straight: (0, BlockID(7)), side: (0, BlockID(12)) }
  BlockID(7) [242:251] -> Alt { straight: (0, BlockID(8)), side: (0, BlockID(10)) }
  BlockID(8) [251:299] -> Alt { straight: (0, BlockID(9)), side: (0, BlockID(50)) }
  BlockID(9) [299:305] -> Jmp((1, BlockID(10)))
  BlockID(10) [305:349] -> Alt { straight: (0, BlockID(11)), side: (0, BlockID(48)) }
  BlockID(11) [349:367] -> Jmp((1, BlockID(12)))
  BlockID(12) [367:411] -> Alt { straight: (0, BlockID(13)), side: (0, BlockID(46)) }
  BlockID(13) [411:441] -> Alt { straight: (1, BlockID(14)), side: (2, BlockID(41)) }
  BlockID(14) [441:452] -> Jmp((0, BlockID(19)))
  BlockID(15) [452:497] -> Alt { straight: (0, BlockID(16)), side: (0, BlockID(22)) }
  BlockID(16) [497:540] -> Alt { straight: (0, BlockID(17)), side: (0, BlockID(37)) }
  BlockID(17) [540:583] -> Alt { straight: (0, BlockID(18)), side: (0, BlockID(39)) }
  BlockID(18) [583:601] -> Alt { straight: (1, BlockID(19)), side: (3, BlockID(41)) }
  BlockID(19) [601:632] -> Alt { straight: (0, BlockID(20)), side: (0, BlockID(15)) }
  BlockID(20) [632:673] -> Alt { straight: (0, BlockID(21)), side: (1, BlockID(15)) }
  BlockID(21) [673:687] -> Jmp((0, BlockID(24)))
  BlockID(22) [687:727] -> Alt { straight: (0, BlockID(23)), side: (1, BlockID(16)) }
  BlockID(23) [727:741] -> Jmp((1, BlockID(24)))
  BlockID(24) [741:758] -> Alt { straight: (0, BlockID(25)), side: (4, BlockID(41)) }
  BlockID(25) [758:772] -> Alt { straight: (0, BlockID(26)), side: (0, BlockID(33)) }
  BlockID(26) [772:782] -> Alt { straight: (0, BlockID(27)), side: (0, BlockID(53)) }
  BlockID(27) [782:821] -> Alt { straight: (0, BlockID(28)), side: (0, BlockID(42)) }
  BlockID(28) [821:859] -> Alt { straight: (0, BlockID(29)), side: (0, BlockID(43)) }
  BlockID(29) [859:877] -> Alt { straight: (1, BlockID(30)), side: (1, BlockID(4)) }
  BlockID(30) [877:927] -> Alt { straight: (0, BlockID(31)), side: (5, BlockID(41)) }
  BlockID(31) [927:993] -> Alt { straight: (0, BlockID(32)), side: (6, BlockID(41)) }
  BlockID(32) [993:1015] -> Alt { straight: (1, BlockID(33)), side: (1, BlockID(26)) }
  BlockID(33) [1015:1030] -> Alt { straight: (0, BlockID(34)), side: (7, BlockID(41)) }
  BlockID(34) [1030:1049] -> Alt { straight: (0, BlockID(35)), side: (0, BlockID(45)) }
  BlockID(35) [1049:1060] -> Jmp((0, BlockID(36)))
  BlockID(36) [1060:1088] -> Jmp((0, BlockID(55)))
  BlockID(37) [1088:1128] -> Alt { straight: (0, BlockID(38)), side: (1, BlockID(17)) }
  BlockID(38) [1128:1129] -> Jmp((1, BlockID(23)))
  BlockID(39) [1129:1169] -> Alt { straight: (0, BlockID(40)), side: (1, BlockID(18)) }
  BlockID(40) [1169:1170] -> Jmp((2, BlockID(23)))
  BlockID(41) [1170:1201] -> Jmp((1, BlockID(55)))
  BlockID(42) [1201:1247] -> Alt { straight: (1, BlockID(43)), side: (1, BlockID(29)) }
  BlockID(43) [1247:1251] -> Jmp((0, BlockID(44)))
  BlockID(44) [1251:1259] -> Alt { straight: (1, BlockID(45)), side: (1, BlockID(35)) }
  BlockID(45) [1259:1274] -> Jmp((1, BlockID(36)))
  BlockID(46) [1274:1321] -> Alt { straight: (0, BlockID(47)), side: (1, BlockID(13)) }
  BlockID(47) [1321:1322] -> Jmp((2, BlockID(24)))
  BlockID(48) [1322:1369] -> Alt { straight: (0, BlockID(49)), side: (1, BlockID(11)) }
  BlockID(49) [1369:1370] -> Jmp((3, BlockID(24)))
  BlockID(50) [1370:1421] -> Alt { straight: (0, BlockID(51)), side: (1, BlockID(9)) }
  BlockID(51) [1421:1422] -> Jmp((4, BlockID(24)))
  BlockID(52) [1422:1444] -> Jmp((1, BlockID(1)))
  BlockID(53) [1444:1449] -> Jmp((1, BlockID(34)))
  BlockID(54) [1449:1451] -> Jmp((1, BlockID(44)))
  BlockID(55) [1451:1451] -> End
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(50)
    |  |  |  |  |  |  |  |  |  |  BlockID(51)
    |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  |  BlockID(48)
    |  |  |  |  |  |  |  |  |  |  BlockID(49)
    |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  BlockID(46)
    |  |  |  |  |  |  |  |  |  BlockID(47)
    |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(39)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(40)
    |  |  |  |  |  |  |  |  |  |  BlockID(37)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(38)
    |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  BlockID(26)
    |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  BlockID(42)
    |  |  |  |  |  |  BlockID(43)
    |  |  |  |  |  BlockID(53)
    |  |  |  |  BlockID(30)
    |  |  |  |  |  BlockID(31)
    |  |  |  |  |  |  BlockID(32)
    |  |  |  |  BlockID(33)
    |  |  |  |  BlockID(34)
    |  |  |  BlockID(35)
    |  |  |  BlockID(36)
    |  |  |  BlockID(44)
    |  |  |  BlockID(45)
    |  |  |  BlockID(54)
    |  |  BlockID(41)
    |  |  BlockID(55)
    |  BlockID(52)

ssa post-xform:
ssa program  1658 instrs
.B0:    ;; .
  (  4)  r26 <- Ancestral(AncestralName("R15"))
  ( 50)  r11 <- Ancestral(AncestralName("RSP"))
         r65 <- ArithK(Add, r11, -8)
         r43 <- Ancestral(AncestralName("memory"))
         r66 <- StoreMem { mem: r43, addr: r65, value: r26 }
         r25 <- Ancestral(AncestralName("R14"))
         r67 <- ArithK(Add, r11, -16)
         r68 <- StoreMem { mem: r66, addr: r67, value: r25 }
  (  5)  r24 <- Ancestral(AncestralName("R13"))
         r73 <- ArithK(Add, r11, -24)
         r74 <- StoreMem { mem: r68, addr: r73, value: r24 }
         r23 <- Ancestral(AncestralName("R12"))
         r75 <- ArithK(Add, r11, -32)
         r76 <- StoreMem { mem: r74, addr: r75, value: r23 }
         r10 <- Ancestral(AncestralName("RBP"))
         r77 <- ArithK(Add, r11, -40)
         r78 <- StoreMem { mem: r76, addr: r77, value: r10 }
         r16 <- Ancestral(AncestralName("RBX"))
         r79 <- ArithK(Add, r11, -48)
         r80 <- StoreMem { mem: r78, addr: r79, value: r16 }
         r13 <- Ancestral(AncestralName("RDI"))
         r92 <- ArithK(Add, r11, -72)
         r93 <- StoreMem { mem: r80, addr: r92, value: r13 }
         r19 <- Ancestral(AncestralName("R8"))
         r96 <- ArithK(Add, r11, -104)
         r97 <- StoreMem { mem: r93, addr: r96, value: r19 }
  ( 15)  r18 <- Ancestral(AncestralName("RDX"))
         r99 <- ArithK(Add, r11, -136)
         r100 <- StoreMem { mem: r97, addr: r99, value: r18 }
  (  5)  r20 <- Ancestral(AncestralName("R9"))
  (  2)  r102 <- ArithK(Add, r11, -112)
  (  6)  r103 <- StoreMem { mem: r100, addr: r102, value: r20 }
         r111 <- CArg { value: r102, next_arg: None }
  (  2)  r70 <- Const { value: 46, size: 4 }
         r112 <- CArg { value: r70, next_arg: Some(r111) }
         r113 <- Const { value: 4199040, size: 8 }
  (  3)  r114 <- Call { callee: r113, first_arg: Some(r112) }
         r1490 <- Upsilon { value: r114, phi_ref: r1451 }
         r128 <- IsZero(r114)
         r133 <- JmpIf { cond: r128, target: 1422 }
.B52:    ;; preds:B0.
         r1427 <- Const { value: 4199136, size: 8 }
         r1428 <- Call { callee: r1427, first_arg: None }
         r1443 <- Jmp(134)
         r1441 <- Arith(Add, r18, r114)
         r1491 <- Upsilon { value: r1441, phi_ref: r1451 }
.B1:    ;; preds:B0,B52.
         r1493 <- Upsilon { value: r103, phi_ref: r1486 }
         r1492 <- Upsilon { value: r18, phi_ref: r1485 }
  (  9)  r1451 <- Phi
  (  8)  r139 <- Arith(Sub, r1451, r18)
         r144 <- IsZero(r139)
         r147 <- JmpIf { cond: r144, target: 1170 }
.B2:    ;; preds:B1.
         r154 <- LoadMem { mem: r103, addr: r20, size: 8 }
         r160 <- IsZero(r154)
         r163 <- JmpIf { cond: r160, target: 1449 }
.B54:    ;; preds:B2.
         r1450 <- Jmp(1251)
  (  7)  r17 <- Ancestral(AncestralName("RCX"))
         r1494 <- Upsilon { value: r17, phi_ref: r1487 }
.B3:    ;; preds:B2.
         r180 <- ArithK(Add, r11, -64)
  (  5)  r181 <- StoreMem { mem: r103, addr: r180, value: r17 }
         r185 <- Const { value: 0, size: 1 }
         r1506 <- Upsilon { value: r185, phi_ref: r1479 }
  (  5)  r14 <- Ancestral(AncestralName("RSI"))
         r1501 <- Upsilon { value: r14, phi_ref: r1452 }
         r1502 <- Upsilon { value: r181, phi_ref: r1453 }
         r71 <- Part { src: r14, offset: 4, size: 4 }
         r72 <- Concat { lo: r70, hi: r71 }
         r1503 <- Upsilon { value: r72, phi_ref: r1476 }
         r1504 <- Upsilon { value: r1451, phi_ref: r1477 }
         r1505 <- Upsilon { value: r181, phi_ref: r1478 }
         r165 <- ArithK(Add, r14, 24)
  ( 10)  r166 <- LoadMem { mem: r103, addr: r165, size: 8 }
         r184 <- LoadMem { mem: r181, addr: r166, size: 1 }
         r190 <- IsZero(r184)
         r193 <- JmpIf { cond: r190, target: 877 }
.B30:    ;; preds:B3,B29.
  (  2)  r1477 <- Phi
  (  2)  r896 <- ArithK(Add, r11, -128)
         r1478 <- Phi
  (  3)  r897 <- StoreMem { mem: r1478, addr: r896, value: r1477 }
         r1479 <- Phi
         r898 <- CArg { value: r1479, next_arg: None }
         r899 <- CArg { value: r896, next_arg: Some(r898) }
         r892 <- Const { value: 10, size: 4 }
         r900 <- CArg { value: r892, next_arg: Some(r899) }
         r901 <- Const { value: 6451424, size: 8 }
  (  2)  r902 <- Call { callee: r901, first_arg: Some(r900) }
         r1513 <- Upsilon { value: r897, phi_ref: r1486 }
  (  6)  r918 <- ArithK(Add, r902, 1)
         r1512 <- Upsilon { value: r918, phi_ref: r1485 }
         r922 <- IsZero(r918)
         r926 <- JmpIf { cond: r922, target: 1170 }
.B31:    ;; preds:B30.
         r932 <- ArithK(Add, r11, -136)
  ( 10)  r933 <- StoreMem { mem: r897, addr: r932, value: r1477 }
         r928 <- ArithK(Add, r14, 24)
  (  2)  r929 <- LoadMem { mem: r897, addr: r928, size: 8 }
         r936 <- LoadMem { mem: r933, addr: r929, size: 1 }
         r942 <- IsZero(r936)
         r945 <- Not(r942)
         r946 <- JmpExtIf { cond: r945, addr: 4206915 }
         r965 <- CArg { value: r918, next_arg: None }
         r948 <- ArithK(Add, r11, -112)
         r949 <- LoadMem { mem: r933, addr: r948, size: 8 }
         r961 <- LoadMem { mem: r933, addr: r949, size: 8 }
         r966 <- CArg { value: r961, next_arg: Some(r965) }
         r952 <- ArithK(Add, r11, -104)
  (  2)  r953 <- LoadMem { mem: r933, addr: r952, size: 8 }
         r967 <- CArg { value: r953, next_arg: Some(r966) }
         r956 <- ArithK(Add, r11, -72)
  (  3)  r957 <- LoadMem { mem: r933, addr: r956, size: 8 }
         r968 <- CArg { value: r957, next_arg: Some(r967) }
         r970 <- ArithK(Add, r929, 8)
         r971 <- LoadMem { mem: r933, addr: r970, size: 8 }
         r972 <- LoadMem { mem: r933, addr: r971, size: 8 }
         r973 <- Call { callee: r972, first_arg: Some(r968) }
         r1515 <- Upsilon { value: r933, phi_ref: r1486 }
         r1514 <- Upsilon { value: r918, phi_ref: r1485 }
         r987 <- IsZero(r918)
         r992 <- JmpIf { cond: r987, target: 1170 }
.B32:    ;; preds:B31.
         r171 <- Part { src: r26, offset: 4, size: 4 }
         r169 <- Part { src: r26, offset: 0, size: 4 }
         r168 <- Part { src: r26, offset: 0, size: 4 }
         r170 <- Arith(BitXor, r168, r169)
  (  8)  r172 <- Concat { lo: r170, hi: r171 }
         r1010 <- ArithK(Mul, r172, 8)
         r1011 <- Arith(Add, r953, r1010)
         r1012 <- StoreMem { mem: r933, addr: r1011, value: r918 }
         r1013 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1518 <- Upsilon { value: r957, phi_ref: r1475 }
         r1516 <- Upsilon { value: r957, phi_ref: r1480 }
         r1517 <- Upsilon { value: r1012, phi_ref: r1481 }
         r998 <- ArithK(Add, r902, 33)
         r999 <- LoadMem { mem: r933, addr: r998, size: 8 }
         r1005 <- IsZero(r999)
         r1014 <- JmpIf { cond: r1005, target: 772 }
.B26:    ;; preds:B25,B32.
  (  2)  r1475 <- Phi
         r773 <- Part { src: r1475, offset: 0, size: 1 }
         r772 <- Part { src: r1475, offset: 0, size: 1 }
         r774 <- Arith(BitAnd, r772, r773)
         r776 <- IsZero(r774)
         r781 <- JmpIf { cond: r776, target: 1444 }
.B53:    ;; preds:B26.
         r1448 <- Jmp(1030)
         r1519 <- Upsilon { value: r17, phi_ref: r1482 }
.B27:    ;; preds:B26.
         r783 <- ArithK(Add, r1451, 1)
  (  2)  r789 <- ArithK(Add, r11, -136)
  (  6)  r790 <- StoreMem { mem: r181, addr: r789, value: r783 }
         r798 <- CArg { value: r789, next_arg: None }
  (  2)  r785 <- Const { value: 46, size: 4 }
         r799 <- CArg { value: r785, next_arg: Some(r798) }
         r800 <- Const { value: 4199040, size: 8 }
  (  2)  r801 <- Call { callee: r800, first_arg: Some(r799) }
         r815 <- IsZero(r801)
         r820 <- JmpIf { cond: r815, target: 1201 }
.B42:    ;; preds:B27.
         r1215 <- Const { value: 4199136, size: 8 }
         r1216 <- Call { callee: r1215, first_arg: None }
         r1238 <- LoadMem { mem: r790, addr: r20, size: 8 }
         r1206 <- ArithK(Add, r172, 1)
         r1239 <- Arith(Sub, r1206, r1238)
         r1241 <- CarryOf(r1239)
         r1246 <- JmpIf { cond: r1241, target: 859 }
.B28:    ;; preds:B27.
         r849 <- LoadMem { mem: r790, addr: r20, size: 8 }
         r831 <- ArithK(Add, r172, 1)
         r850 <- Arith(Sub, r831, r849)
         r852 <- CarryOf(r850)
         r857 <- Not(r852)
         r858 <- JmpIf { cond: r857, target: 1247 }
.B43:    ;; preds:B28,B42.
         r1520 <- Upsilon { value: r17, phi_ref: r1487 }
.B44:    ;; preds:B43,B54.
         r1498 <- Upsilon { value: r103, phi_ref: r1489 }
  (  2)  r1487 <- Phi
         r1497 <- Upsilon { value: r1487, phi_ref: r1488 }
         r1253 <- IsZero(r1487)
         r1258 <- JmpIf { cond: r1253, target: 1049 }
.B29:    ;; preds:B28,B42.
         r1526 <- Upsilon { value: r790, phi_ref: r1453 }
         r786 <- Part { src: r14, offset: 4, size: 4 }
         r787 <- Concat { lo: r785, hi: r786 }
         r1521 <- Upsilon { value: r787, phi_ref: r1476 }
         r1522 <- Upsilon { value: r801, phi_ref: r1477 }
         r1523 <- Upsilon { value: r790, phi_ref: r1478 }
         r867 <- Const { value: 0, size: 1 }
         r1524 <- Upsilon { value: r867, phi_ref: r1479 }
         r1525 <- Upsilon { value: r24, phi_ref: r1452 }
         r861 <- ArithK(Add, r24, 24)
         r862 <- LoadMem { mem: r790, addr: r861, size: 8 }
         r866 <- LoadMem { mem: r790, addr: r862, size: 1 }
         r872 <- IsZero(r866)
         r875 <- Not(r872)
         r876 <- JmpIf { cond: r875, target: 194 }
.B4:    ;; preds:B3,B29.
  (  5)  r1452 <- Phi
         r195 <- ArithK(Add, r1452, 16)
  (  2)  r1453 <- Phi
  (  4)  r196 <- LoadMem { mem: r1453, addr: r195, size: 8 }
         r199 <- ArithK(Add, r11, -120)
  (  6)  r200 <- StoreMem { mem: r1453, addr: r199, value: r196 }
         r1528 <- Upsilon { value: r200, phi_ref: r1486 }
         r1527 <- Upsilon { value: r18, phi_ref: r1485 }
         r203 <- IsZero(r196)
         r208 <- JmpIf { cond: r203, target: 1170 }
.B5:    ;; preds:B4.
         r1531 <- Upsilon { value: r200, phi_ref: r1464 }
         r1529 <- Upsilon { value: r1451, phi_ref: r1462 }
         r1530 <- Upsilon { value: r166, phi_ref: r1463 }
         r221 <- Part { src: r196, offset: 0, size: 4 }
  (  2)  r223 <- ArithK(BitAnd, r221, 3)
         r229 <- IsZero(r223)
         r232 <- JmpIf { cond: r229, target: 441 }
.B6:    ;; preds:B5.
         r1564 <- Upsilon { value: r200, phi_ref: r1460 }
         r1562 <- Upsilon { value: r1451, phi_ref: r1458 }
         r1563 <- Upsilon { value: r166, phi_ref: r1459 }
         r224 <- Part { src: r196, offset: 4, size: 4 }
  (  2)  r225 <- Concat { lo: r223, hi: r224 }
         r234 <- ArithK(Add, r225, -1)
         r238 <- IsZero(r234)
         r241 <- JmpIf { cond: r238, target: 367 }
.B7:    ;; preds:B6.
         r1579 <- Upsilon { value: r200, phi_ref: r1457 }
         r1577 <- Upsilon { value: r1451, phi_ref: r1455 }
         r1578 <- Upsilon { value: r166, phi_ref: r1456 }
         r243 <- ArithK(Add, r225, -3)
         r247 <- IsZero(r243)
         r250 <- JmpIf { cond: r247, target: 305 }
.B8:    ;; preds:B7.
         r256 <- ArithK(Add, r11, -88)
         r257 <- StoreMem { mem: r200, addr: r256, value: r1451 }
         r260 <- ArithK(Add, r11, -96)
         r261 <- StoreMem { mem: r257, addr: r260, value: r166 }
         r252 <- ArithK(Add, r166, 8)
  (  2)  r253 <- LoadMem { mem: r200, addr: r252, size: 8 }
         r264 <- ArithK(Add, r11, -128)
  (  3)  r265 <- StoreMem { mem: r261, addr: r264, value: r253 }
         r269 <- CArg { value: r253, next_arg: None }
         r270 <- Const { value: 4199136, size: 8 }
         r271 <- Call { callee: r270, first_arg: Some(r269) }
         r1588 <- Upsilon { value: r166, phi_ref: r1454 }
  (  2)  r291 <- Arith(Sub, r271, r139)
         r295 <- IsZero(r291)
         r298 <- JmpIf { cond: r295, target: 1370 }
.B50:    ;; preds:B8.
         r1376 <- ArithK(Add, r11, -96)
         r1377 <- StoreMem { mem: r265, addr: r1376, value: r1451 }
  (  2)  r1379 <- ArithK(Add, r11, -128)
         r1380 <- StoreMem { mem: r1377, addr: r1379, value: r166 }
         r296 <- Part { src: r291, offset: 0, size: 1 }
         r1390 <- CArg { value: r296, next_arg: None }
         r1391 <- CArg { value: r1379, next_arg: Some(r1390) }
         r1371 <- ArithK(Add, r11, -136)
         r1372 <- LoadMem { mem: r265, addr: r1371, size: 8 }
         r1392 <- CArg { value: r1372, next_arg: Some(r1391) }
         r1393 <- Const { value: 4199232, size: 8 }
  (  2)  r1394 <- Call { callee: r1393, first_arg: Some(r1392) }
         r1589 <- Upsilon { value: r166, phi_ref: r1454 }
         r1411 <- Part { src: r1394, offset: 0, size: 4 }
         r1410 <- Part { src: r1394, offset: 0, size: 4 }
         r1412 <- Arith(BitAnd, r1410, r1411)
         r1414 <- IsZero(r1412)
         r1419 <- Not(r1414)
         r1420 <- JmpIf { cond: r1419, target: 299 }
.B51:    ;; preds:B50.
         r1421 <- Jmp(741)
         r213 <- Part { src: r17, offset: 4, size: 4 }
         r211 <- Part { src: r17, offset: 0, size: 4 }
         r210 <- Part { src: r17, offset: 0, size: 4 }
         r212 <- Arith(BitXor, r210, r211)
  (  9)  r214 <- Concat { lo: r212, hi: r213 }
         r1590 <- Upsilon { value: r214, phi_ref: r1470 }
         r1591 <- Upsilon { value: r166, phi_ref: r1471 }
         r1592 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1593 <- Upsilon { value: r172, phi_ref: r1473 }
         r1594 <- Upsilon { value: r1380, phi_ref: r1474 }
.B9:    ;; preds:B8,B50.
         r1595 <- Upsilon { value: r1451, phi_ref: r1455 }
         r1454 <- Phi
         r303 <- ArithK(Add, r1454, 40)
         r1596 <- Upsilon { value: r303, phi_ref: r1456 }
         r1597 <- Upsilon { value: r265, phi_ref: r1457 }
.B10:    ;; preds:B7,B9.
  (  3)  r1455 <- Phi
         r310 <- ArithK(Add, r11, -96)
  (  2)  r1457 <- Phi
         r311 <- StoreMem { mem: r1457, addr: r310, value: r1455 }
  (  3)  r1456 <- Phi
         r306 <- ArithK(Add, r1456, 8)
  (  2)  r307 <- LoadMem { mem: r1457, addr: r306, size: 8 }
         r315 <- ArithK(Add, r11, -128)
  (  3)  r316 <- StoreMem { mem: r311, addr: r315, value: r307 }
         r320 <- CArg { value: r307, next_arg: None }
         r321 <- Const { value: 4199136, size: 8 }
         r322 <- Call { callee: r321, first_arg: Some(r320) }
  (  2)  r341 <- Arith(Sub, r322, r139)
         r345 <- IsZero(r341)
         r348 <- JmpIf { cond: r345, target: 1322 }
.B48:    ;; preds:B10.
  (  2)  r1328 <- ArithK(Add, r11, -128)
         r1329 <- StoreMem { mem: r316, addr: r1328, value: r1455 }
         r346 <- Part { src: r341, offset: 0, size: 1 }
         r1339 <- CArg { value: r346, next_arg: None }
         r1340 <- CArg { value: r1328, next_arg: Some(r1339) }
         r1323 <- ArithK(Add, r11, -136)
         r1324 <- LoadMem { mem: r316, addr: r1323, size: 8 }
         r1341 <- CArg { value: r1324, next_arg: Some(r1340) }
         r1342 <- Const { value: 4199232, size: 8 }
  (  2)  r1343 <- Call { callee: r1342, first_arg: Some(r1341) }
         r1359 <- Part { src: r1343, offset: 0, size: 4 }
         r1358 <- Part { src: r1343, offset: 0, size: 4 }
         r1360 <- Arith(BitAnd, r1358, r1359)
         r1362 <- IsZero(r1360)
         r1367 <- Not(r1362)
         r1368 <- JmpIf { cond: r1367, target: 349 }
.B49:    ;; preds:B48.
         r1369 <- Jmp(741)
         r1580 <- Upsilon { value: r214, phi_ref: r1470 }
         r1581 <- Upsilon { value: r1456, phi_ref: r1471 }
         r1582 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1583 <- Upsilon { value: r172, phi_ref: r1473 }
         r1584 <- Upsilon { value: r1329, phi_ref: r1474 }
.B11:    ;; preds:B10,B48.
         r1585 <- Upsilon { value: r1455, phi_ref: r1458 }
         r359 <- ArithK(Add, r1456, 40)
         r1586 <- Upsilon { value: r359, phi_ref: r1459 }
         r1587 <- Upsilon { value: r316, phi_ref: r1460 }
.B12:    ;; preds:B6,B11.
  (  3)  r1458 <- Phi
         r372 <- ArithK(Add, r11, -96)
  (  2)  r1460 <- Phi
         r373 <- StoreMem { mem: r1460, addr: r372, value: r1458 }
  (  3)  r1459 <- Phi
         r368 <- ArithK(Add, r1459, 8)
  (  2)  r369 <- LoadMem { mem: r1460, addr: r368, size: 8 }
         r377 <- ArithK(Add, r11, -128)
  (  3)  r378 <- StoreMem { mem: r373, addr: r377, value: r369 }
         r382 <- CArg { value: r369, next_arg: None }
         r383 <- Const { value: 4199136, size: 8 }
         r384 <- Call { callee: r383, first_arg: Some(r382) }
         r1565 <- Upsilon { value: r378, phi_ref: r1461 }
  (  3)  r403 <- Arith(Sub, r384, r139)
         r407 <- IsZero(r403)
         r410 <- JmpIf { cond: r407, target: 1274 }
.B46:    ;; preds:B12.
  (  2)  r1280 <- ArithK(Add, r11, -128)
  (  2)  r1281 <- StoreMem { mem: r378, addr: r1280, value: r1458 }
         r408 <- Part { src: r403, offset: 0, size: 1 }
         r1291 <- CArg { value: r408, next_arg: None }
         r1292 <- CArg { value: r1280, next_arg: Some(r1291) }
         r1275 <- ArithK(Add, r11, -136)
         r1276 <- LoadMem { mem: r378, addr: r1275, size: 8 }
         r1293 <- CArg { value: r1276, next_arg: Some(r1292) }
         r1294 <- Const { value: 4199232, size: 8 }
  (  2)  r1295 <- Call { callee: r1294, first_arg: Some(r1293) }
         r1566 <- Upsilon { value: r1281, phi_ref: r1461 }
         r1311 <- Part { src: r1295, offset: 0, size: 4 }
         r1310 <- Part { src: r1295, offset: 0, size: 4 }
         r1312 <- Arith(BitAnd, r1310, r1311)
         r1314 <- IsZero(r1312)
         r1319 <- Not(r1314)
         r1320 <- JmpIf { cond: r1319, target: 411 }
.B47:    ;; preds:B46.
         r1321 <- Jmp(741)
         r1567 <- Upsilon { value: r214, phi_ref: r1470 }
         r1568 <- Upsilon { value: r1459, phi_ref: r1471 }
         r1569 <- Upsilon { value: r1452, phi_ref: r1472 }
         r1570 <- Upsilon { value: r172, phi_ref: r1473 }
         r1571 <- Upsilon { value: r1281, phi_ref: r1474 }
.B13:    ;; preds:B12,B46.
  (  3)  r1461 <- Phi
         r1576 <- Upsilon { value: r1461, phi_ref: r1486 }
         r1572 <- Upsilon { value: r1458, phi_ref: r1462 }
         r425 <- ArithK(Add, r1459, 40)
         r1573 <- Upsilon { value: r425, phi_ref: r1463 }
         r1574 <- Upsilon { value: r1461, phi_ref: r1464 }
         r1575 <- Upsilon { value: r403, phi_ref: r1485 }
         r412 <- ArithK(Add, r11, -120)
         r413 <- LoadMem { mem: r1461, addr: r412, size: 8 }
         r416 <- ArithK(Add, r214, 1)
         r433 <- Arith(Sub, r416, r413)
         r437 <- IsZero(r433)
         r440 <- JmpIf { cond: r437, target: 1170 }
.B14:    ;; preds:B5,B13.
         r442 <- ArithK(Add, r11, -80)
         r1464 <- Phi
         r443 <- StoreMem { mem: r1464, addr: r442, value: r1452 }
         r446 <- ArithK(Add, r11, -96)
         r447 <- StoreMem { mem: r443, addr: r446, value: r172 }
         r1462 <- Phi
         r449 <- ArithK(Add, r11, -88)
         r450 <- StoreMem { mem: r447, addr: r449, value: r1462 }
         r451 <- Jmp(601)
         r1463 <- Phi
         r1537 <- Upsilon { value: r1463, phi_ref: r1465 }
         r1538 <- Upsilon { value: r450, phi_ref: r1466 }
.B19:    ;; preds:B14,B18.
  (  9)  r1465 <- Phi
         r602 <- ArithK(Add, r1465, 8)
  (  7)  r1466 <- Phi
         r603 <- LoadMem { mem: r1466, addr: r602, size: 8 }
         r610 <- CArg { value: r603, next_arg: None }
         r611 <- Const { value: 4199136, size: 8 }
         r612 <- Call { callee: r611, first_arg: Some(r610) }
  (  2)  r623 <- Arith(Sub, r612, r139)
         r627 <- IsZero(r623)
         r630 <- Not(r627)
         r631 <- JmpIf { cond: r630, target: 452 }
.B20:    ;; preds:B19.
         r628 <- Part { src: r623, offset: 0, size: 1 }
         r647 <- CArg { value: r628, next_arg: None }
  (  2)  r633 <- ArithK(Add, r11, -136)
         r648 <- CArg { value: r633, next_arg: Some(r647) }
         r634 <- LoadMem { mem: r1466, addr: r633, size: 8 }
         r649 <- CArg { value: r634, next_arg: Some(r648) }
         r650 <- Const { value: 4199232, size: 8 }
  (  2)  r651 <- Call { callee: r650, first_arg: Some(r649) }
         r663 <- Part { src: r651, offset: 0, size: 4 }
         r662 <- Part { src: r651, offset: 0, size: 4 }
         r664 <- Arith(BitAnd, r662, r663)
         r666 <- IsZero(r664)
         r671 <- Not(r666)
         r672 <- JmpIf { cond: r671, target: 452 }
.B15:    ;; preds:B19,B20.
         r453 <- ArithK(Add, r1465, 48)
         r454 <- LoadMem { mem: r1466, addr: r453, size: 8 }
         r467 <- ArithK(Add, r11, -128)
  (  4)  r468 <- StoreMem { mem: r1466, addr: r467, value: r454 }
  (  2)  r460 <- ArithK(Add, r214, 1)
         r472 <- CArg { value: r460, next_arg: None }
         r473 <- Const { value: 4199136, size: 8 }
         r474 <- Call { callee: r473, first_arg: Some(r472) }
  (  2)  r489 <- Arith(Sub, r474, r139)
         r493 <- IsZero(r489)
         r496 <- JmpIf { cond: r493, target: 687 }
.B22:    ;; preds:B15.
         r494 <- Part { src: r489, offset: 0, size: 1 }
         r701 <- CArg { value: r494, next_arg: None }
  (  2)  r688 <- ArithK(Add, r11, -136)
         r702 <- CArg { value: r688, next_arg: Some(r701) }
         r689 <- LoadMem { mem: r468, addr: r688, size: 8 }
         r703 <- CArg { value: r689, next_arg: Some(r702) }
         r704 <- Const { value: 4199232, size: 8 }
  (  2)  r705 <- Call { callee: r704, first_arg: Some(r703) }
         r1551 <- Upsilon { value: r468, phi_ref: r1469 }
  (  2)  r457 <- ArithK(Add, r1465, 40)
         r1549 <- Upsilon { value: r457, phi_ref: r1467 }
         r1550 <- Upsilon { value: r457, phi_ref: r1468 }
         r717 <- Part { src: r705, offset: 0, size: 4 }
         r716 <- Part { src: r705, offset: 0, size: 4 }
         r718 <- Arith(BitAnd, r716, r717)
         r720 <- IsZero(r718)
         r725 <- Not(r720)
         r726 <- JmpIf { cond: r725, target: 497 }
.B16:    ;; preds:B15,B22.
         r498 <- ArithK(Add, r1465, 88)
         r499 <- LoadMem { mem: r468, addr: r498, size: 8 }
         r510 <- ArithK(Add, r11, -128)
  (  4)  r511 <- StoreMem { mem: r468, addr: r510, value: r499 }
         r505 <- ArithK(Add, r214, 2)
         r515 <- CArg { value: r505, next_arg: None }
         r516 <- Const { value: 4199136, size: 8 }
         r517 <- Call { callee: r516, first_arg: Some(r515) }
  (  2)  r532 <- Arith(Sub, r517, r139)
         r536 <- IsZero(r532)
         r539 <- JmpIf { cond: r536, target: 1088 }
.B37:    ;; preds:B16.
         r537 <- Part { src: r532, offset: 0, size: 1 }
         r1102 <- CArg { value: r537, next_arg: None }
  (  2)  r1089 <- ArithK(Add, r11, -136)
         r1103 <- CArg { value: r1089, next_arg: Some(r1102) }
         r1090 <- LoadMem { mem: r511, addr: r1089, size: 8 }
         r1104 <- CArg { value: r1090, next_arg: Some(r1103) }
         r1105 <- Const { value: 4199232, size: 8 }
  (  2)  r1106 <- Call { callee: r1105, first_arg: Some(r1104) }
         r1118 <- Part { src: r1106, offset: 0, size: 4 }
         r1117 <- Part { src: r1106, offset: 0, size: 4 }
         r1119 <- Arith(BitAnd, r1117, r1118)
         r1121 <- IsZero(r1119)
         r1126 <- Not(r1121)
         r1127 <- JmpIf { cond: r1126, target: 540 }
.B38:    ;; preds:B37.
         r1128 <- Jmp(727)
  (  2)  r502 <- ArithK(Add, r1465, 80)
         r1552 <- Upsilon { value: r502, phi_ref: r1467 }
         r1553 <- Upsilon { value: r502, phi_ref: r1468 }
         r1554 <- Upsilon { value: r511, phi_ref: r1469 }
.B17:    ;; preds:B16,B37.
         r541 <- ArithK(Add, r1465, 128)
         r542 <- LoadMem { mem: r511, addr: r541, size: 8 }
         r553 <- ArithK(Add, r11, -128)
  (  5)  r554 <- StoreMem { mem: r511, addr: r553, value: r542 }
         r548 <- ArithK(Add, r214, 3)
         r558 <- CArg { value: r548, next_arg: None }
         r559 <- Const { value: 4199136, size: 8 }
         r560 <- Call { callee: r559, first_arg: Some(r558) }
  (  3)  r575 <- Arith(Sub, r560, r139)
         r579 <- IsZero(r575)
         r582 <- JmpIf { cond: r579, target: 1129 }
.B39:    ;; preds:B17.
         r580 <- Part { src: r575, offset: 0, size: 1 }
         r1143 <- CArg { value: r580, next_arg: None }
  (  2)  r1130 <- ArithK(Add, r11, -136)
         r1144 <- CArg { value: r1130, next_arg: Some(r1143) }
         r1131 <- LoadMem { mem: r554, addr: r1130, size: 8 }
         r1145 <- CArg { value: r1131, next_arg: Some(r1144) }
         r1146 <- Const { value: 4199232, size: 8 }
  (  2)  r1147 <- Call { callee: r1146, first_arg: Some(r1145) }
         r1159 <- Part { src: r1147, offset: 0, size: 4 }
         r1158 <- Part { src: r1147, offset: 0, size: 4 }
         r1160 <- Arith(BitAnd, r1158, r1159)
         r1162 <- IsZero(r1160)
         r1167 <- Not(r1162)
         r1168 <- JmpIf { cond: r1167, target: 583 }
.B40:    ;; preds:B39.
         r1169 <- Jmp(727)
  (  2)  r545 <- ArithK(Add, r1465, 120)
         r1555 <- Upsilon { value: r545, phi_ref: r1467 }
         r1556 <- Upsilon { value: r545, phi_ref: r1468 }
         r1557 <- Upsilon { value: r554, phi_ref: r1469 }
.B23:    ;; preds:B22,B38,B40.
         r1544 <- Upsilon { value: r460, phi_ref: r1470 }
         r1468 <- Phi
         r1545 <- Upsilon { value: r1468, phi_ref: r1471 }
         r738 <- ArithK(Add, r11, -80)
  (  3)  r1469 <- Phi
         r739 <- LoadMem { mem: r1469, addr: r738, size: 8 }
         r1546 <- Upsilon { value: r739, phi_ref: r1472 }
         r729 <- ArithK(Add, r11, -96)
         r730 <- LoadMem { mem: r1469, addr: r729, size: 8 }
         r1547 <- Upsilon { value: r730, phi_ref: r1473 }
         r1548 <- Upsilon { value: r1469, phi_ref: r1474 }
.B18:    ;; preds:B17,B39.
         r1561 <- Upsilon { value: r554, phi_ref: r1486 }
         r591 <- ArithK(Add, r1465, 160)
         r1558 <- Upsilon { value: r591, phi_ref: r1465 }
         r1559 <- Upsilon { value: r554, phi_ref: r1466 }
         r1560 <- Upsilon { value: r575, phi_ref: r1485 }
         r584 <- ArithK(Add, r11, -120)
         r585 <- LoadMem { mem: r554, addr: r584, size: 8 }
         r588 <- ArithK(Add, r214, 4)
         r593 <- Arith(Sub, r588, r585)
         r597 <- IsZero(r593)
         r600 <- JmpIf { cond: r597, target: 1170 }
.B21:    ;; preds:B20.
         r686 <- Jmp(741)
         r1539 <- Upsilon { value: r214, phi_ref: r1470 }
         r1540 <- Upsilon { value: r1465, phi_ref: r1471 }
         r683 <- ArithK(Add, r11, -80)
         r684 <- LoadMem { mem: r1466, addr: r683, size: 8 }
         r1541 <- Upsilon { value: r684, phi_ref: r1472 }
         r675 <- ArithK(Add, r11, -96)
         r676 <- LoadMem { mem: r1466, addr: r675, size: 8 }
         r1542 <- Upsilon { value: r676, phi_ref: r1473 }
         r1543 <- Upsilon { value: r1466, phi_ref: r1474 }
.B24:    ;; preds:B21,B23,B47,B49,B51.
         r1470 <- Phi
         r1473 <- Phi
         r747 <- ArithK(Mul, r1473, 8)
         r742 <- ArithK(Add, r11, -104)
  (  2)  r1474 <- Phi
         r743 <- LoadMem { mem: r1474, addr: r742, size: 8 }
         r748 <- Arith(Add, r743, r747)
  (  3)  r749 <- StoreMem { mem: r1474, addr: r748, value: r1470 }
         r1533 <- Upsilon { value: r749, phi_ref: r1486 }
         r1532 <- Upsilon { value: r18, phi_ref: r1485 }
         r1472 <- Phi
         r1471 <- Phi
         r750 <- Arith(Sub, r1471, r1472)
         r754 <- IsZero(r750)
         r757 <- JmpIf { cond: r754, target: 1170 }
.B25:    ;; preds:B24.
         r769 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1536 <- Upsilon { value: r749, phi_ref: r1481 }
         r1534 <- Upsilon { value: r18, phi_ref: r1475 }
         r1535 <- Upsilon { value: r18, phi_ref: r1480 }
         r759 <- ArithK(Add, r24, 32)
         r760 <- LoadMem { mem: r749, addr: r759, size: 8 }
         r766 <- IsZero(r760)
         r770 <- Not(r766)
         r771 <- JmpIf { cond: r770, target: 1015 }
.B33:    ;; preds:B25,B32.
  (  2)  r1481 <- Phi
         r1511 <- Upsilon { value: r1481, phi_ref: r1486 }
         r1016 <- ArithK(Add, r11, -64)
         r1017 <- LoadMem { mem: r1481, addr: r1016, size: 8 }
         r1509 <- Upsilon { value: r1017, phi_ref: r1482 }
         r1510 <- Upsilon { value: r18, phi_ref: r1485 }
  (  2)  r1480 <- Phi
         r1020 <- Part { src: r1480, offset: 0, size: 1 }
         r1019 <- Part { src: r1480, offset: 0, size: 1 }
         r1021 <- Arith(BitAnd, r1019, r1020)
         r1023 <- IsZero(r1021)
         r1028 <- Not(r1023)
         r1029 <- JmpIf { cond: r1028, target: 1170 }
.B41:    ;; preds:B1,B4,B13,B18,B24,B30,B31,B33.
         r1485 <- Phi
         r1180 <- Part { src: r1485, offset: 4, size: 4 }
         r1179 <- Const { value: 2, size: 4 }
         r1181 <- Concat { lo: r1179, hi: r1180 }
         r1200 <- Ret(r1181)
.B34:    ;; preds:B33,B53.
         r1031 <- ArithK(Add, r172, 1)
         r1039 <- StoreMem { mem: r181, addr: r20, value: r1031 }
         r1508 <- Upsilon { value: r1039, phi_ref: r1489 }
  (  2)  r1482 <- Phi
         r1507 <- Upsilon { value: r1482, phi_ref: r1488 }
         r1042 <- IsZero(r1482)
         r1047 <- Not(r1042)
         r1048 <- JmpIf { cond: r1047, target: 1259 }
.B45:    ;; preds:B34,B44.
         r1488 <- Phi
         r1489 <- Phi
         r1261 <- StoreMem { mem: r1489, addr: r1488, value: r24 }
         r1273 <- Jmp(1060)
         r1265 <- Part { src: r18, offset: 4, size: 4 }
         r1263 <- Part { src: r18, offset: 0, size: 4 }
         r1262 <- Part { src: r18, offset: 0, size: 4 }
         r1264 <- Arith(BitXor, r1262, r1263)
         r1266 <- Concat { lo: r1264, hi: r1265 }
         r1495 <- Upsilon { value: r1266, phi_ref: r1483 }
         r1496 <- Upsilon { value: r1261, phi_ref: r1484 }
.B35:    ;; preds:B34,B44.
         r1052 <- Part { src: r18, offset: 4, size: 4 }
         r1050 <- Part { src: r18, offset: 0, size: 4 }
         r1049 <- Part { src: r18, offset: 0, size: 4 }
         r1051 <- Arith(BitXor, r1049, r1050)
         r1053 <- Concat { lo: r1051, hi: r1052 }
         r1499 <- Upsilon { value: r1053, phi_ref: r1483 }
         r1500 <- Upsilon { value: r103, phi_ref: r1484 }
.B36:    ;; preds:B35,B45.
         r1483 <- Phi
         r1087 <- Ret(r1483)



T0: {
  [pre:RSP - 8] <- pre:R15;
  [pre:RSP - 16] <- pre:R14;
  [pre:RSP - 24] <- pre:R13;
  [pre:RSP - 32] <- pre:R12;
  [pre:RSP - 40] <- pre:RBP;
  [pre:RSP - 48] <- pre:RBX;
  [pre:RSP - 72] <- pre:RDI;
  [pre:RSP - 104] <- pre:R8;
  [pre:RSP - 136] <- pre:RDX;
  let r102: Bytes(8) = pre:RSP - 112;
  [r102] <- pre:R9;
  4199040(46,
          r102)
  let r114: Bytes(8) = 4199040(46,
                               r102);
  r1451 := 4199040(46,
                   r102);
  if IsZero (r114) {
    4199136()
    
    r1451 := pre:RDX + r114;
    goto T1
  }
  goto T1
  
  T1: {
    let r103: MemoryEffect = [r102] <- pre:R9;;
    
    r1485 := pre:RDX;
    let mut r1451: Bytes(8);
    let r139: Bytes(8) = r1451 - pre:RDX;
    if IsZero (r139) {
      goto T41
    }
    if IsZero ([pre:R9]:8) {
      
      r1487 := pre:RCX;
      goto T44
    }
    [pre:RSP - 64] <- pre:RCX;
    r1479 := 0;
    r1452 := pre:RSI;
    let r181: MemoryEffect = [pre:RSP - 64] <- pre:RCX;;
    
    r1476 := pre:RSI[8 .. 4] ++ 46;
    r1477 := phi ();
    
    let r166: Bytes(8) = [pre:RSI + 24]:8;
    if IsZero ([r166]:1) {
      goto T30
    }
    goto T4
    
    T4: {
      let mut r1453: MemoryEffect;
      let mut r1452: Bytes(8);
      let r196: Bytes(8) = [r1452 + 16]:8;
      [pre:RSP - 120] <- r196;
      let r200: MemoryEffect = [pre:RSP - 120] <- r196;;
      
      r1485 := pre:RDX;
      if IsZero (r196) {
        goto T41
      }
      
      r1462 := phi ();
      r1463 := [pre:RSI + 24]:8;
      let r223: Bytes(4) = r196[4 .. 0] & 3;
      if IsZero (r223) {
        goto T14
      }
      
      r1458 := phi ();
      r1459 := [pre:RSI + 24]:8;
      let r225: Bytes(8) = r196[8 .. 4] ++ r223;
      if IsZero (r225 - 1) {
        goto T12
      }
      
      r1455 := phi ();
      r1456 := [pre:RSI + 24]:8;
      if IsZero (r225 - 3) {
        goto T10
      }
      [pre:RSP - 88] <- r1451;
      [pre:RSP - 96] <- r166;
      let r253: Bytes(8) = [r166 + 8]:8;
      [pre:RSP - 128] <- r253;
      4199136(r253)
      r1454 := [pre:RSI + 24]:8;
      let r291: Bytes(8) = 4199136(r253) - r139;
      if IsZero (r291) {
        let r265: MemoryEffect = [pre:RSP - 128] <- r253;;
        [pre:RSP - 96] <- r1451;
        let r1379: Bytes(8) = pre:RSP - 128;
        [r1379] <- r166;
        4199232([pre:RSP - 136]:8,
                r1379,
                r291[1 .. 0])
        r1454 := [pre:RSI + 24]:8;
        let r1394: Bytes(8) = 4199232([pre:RSP - 136]:8,
                                      r1379,
                                      r291[1 .. 0]);
        if ! ((IsZero (r1394[4 .. 0] & r1394[4 .. 0]))) {
          goto T9
        }
        
        let r214: Bytes(8) = pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1470 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1471 := [pre:RSI + 24]:8;
        r1472 := phi ();
        let r172: Bytes(8) = pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        r1473 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        
        goto T24
      }
      goto T9
      
      T9: {
        r1455 := phi ();
        let mut r1454: Bytes(8);
        r1456 := r1454 + 40;
        
        goto T10
      }
      
      
      T10: {
        let mut r1457: MemoryEffect;
        let mut r1455: Bytes(8);
        [pre:RSP - 96] <- r1455;
        let mut r1456: Bytes(8);
        let r307: Bytes(8) = [r1456 + 8]:8;
        [pre:RSP - 128] <- r307;
        4199136(r307)
        let r341: Bytes(8) = 4199136(r307) - r139;
        if IsZero (r341) {
          let r316: MemoryEffect = [pre:RSP - 128] <- r307;;
          let r1328: Bytes(8) = pre:RSP - 128;
          [r1328] <- r1455;
          4199232([pre:RSP - 136]:8,
                  r1328,
                  r341[1 .. 0])
          let r1343: Bytes(8) = 4199232([pre:RSP - 136]:8,
                                        r1328,
                                        r341[1 .. 0]);
          if ! ((IsZero (r1343[4 .. 0] & r1343[4 .. 0]))) {
            goto T11
          }
          
          r1470 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1471 := phi ();
          r1472 := phi ();
          r1473 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          
          goto T24
        }
        goto T11
        
        T11: {
          r1458 := phi ();
          r1459 := r1456 + 40;
          
          goto T12
        }
      
      }
      
      
      T12: {
        let mut r1460: MemoryEffect;
        let mut r1458: Bytes(8);
        [pre:RSP - 96] <- r1458;
        let mut r1459: Bytes(8);
        let r369: Bytes(8) = [r1459 + 8]:8;
        [pre:RSP - 128] <- r369;
        4199136(r369)
        let r378: MemoryEffect = [pre:RSP - 128] <- r369;;
        
        let r403: Bytes(8) = 4199136(r369) - r139;
        if IsZero (r403) {
          let r1280: Bytes(8) = pre:RSP - 128;
          [r1280] <- r1458;
          4199232([pre:RSP - 136]:8,
                  r1280,
                  r403[1 .. 0])
          let r1281: MemoryEffect = [r1280] <- r1458;;
          
          let r1295: Bytes(8) = 4199232([pre:RSP - 136]:8,
                                        r1280,
                                        r403[1 .. 0]);
          if ! ((IsZero (r1295[4 .. 0] & r1295[4 .. 0]))) {
            goto T13
          }
          
          r1470 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1471 := phi ();
          r1472 := phi ();
          r1473 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          
          goto T24
        }
        goto T13
        
        T13: {
          let mut r1461: MemoryEffect;
          
          r1462 := phi ();
          r1463 := r1459 + 40;
          
          r1485 := 4199136(r369) - r139;
          if IsZero (r214 + 1 - [pre:RSP - 120]:8) {
            goto T41
          }
          goto T14
        }
      
      }
      
      
      T14: {
        let mut r1464: MemoryEffect;
        [pre:RSP - 80] <- r1452;
        [pre:RSP - 96] <- r172;
        let mut r1462: Bytes(8);
        [pre:RSP - 88] <- r1462;
        
        let mut r1463: Bytes(8);
        r1465 := phi ();
        
        goto T19
        
        T19: {
          let mut r1466: MemoryEffect;
          let mut r1465: Bytes(8);
          4199136([r1465 + 8]:8)
          let r623: Bytes(8) = 4199136([r1465 + 8]:8) - r139;
          if ! ((IsZero (r623))) {
            goto T15
          }
          let r633: Bytes(8) = pre:RSP - 136;
          4199232([r633]:8,
                  r633,
                  r623[1 .. 0])
          let r651: Bytes(8) = 4199232([r633]:8,
                                       r633,
                                       r623[1 .. 0]);
          if ! ((IsZero (r651[4 .. 0] & r651[4 .. 0]))) {
            goto T15
          }
          
          r1470 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1471 := phi ();
          r1472 := [pre:RSP - 80]:8;
          r1473 := [pre:RSP - 96]:8;
          
          goto T24
          
          T15: {
            [pre:RSP - 128] <- [r1465 + 48]:8;
            let r460: Bytes(8) = r214 + 1;
            4199136(r460)
            let r489: Bytes(8) = 4199136(r460) - r139;
            if IsZero (r489) {
              let r468: MemoryEffect = [pre:RSP - 128] <- [r1465 + 48]:8;;
              let r688: Bytes(8) = pre:RSP - 136;
              4199232([r688]:8,
                      r688,
                      r489[1 .. 0])
              
              let r457: Bytes(8) = r1465 + 40;
              r1467 := r1465 + 40;
              r1468 := r1465 + 40;
              let r705: Bytes(8) = 4199232([r688]:8,
                                           r688,
                                           r489[1 .. 0]);
              if ! ((IsZero (r705[4 .. 0] & r705[4 .. 0]))) {
                goto T16
              }
              goto T23
            }
            goto T16
            
            T16: {
              [pre:RSP - 128] <- [r1465 + 88]:8;
              4199136((r214 + 2))
              let r532: Bytes(8) = 4199136((r214 + 2)) - r139;
              if IsZero (r532) {
                let r511: MemoryEffect = [pre:RSP - 128] <- [r1465 + 88]:8;;
                let r1089: Bytes(8) = pre:RSP - 136;
                4199232([r1089]:8,
                        r1089,
                        r532[1 .. 0])
                let r1106: Bytes(8) = 4199232([r1089]:8,
                                              r1089,
                                              r532[1 .. 0]);
                if ! ((IsZero (r1106[4 .. 0] & r1106[4 .. 0]))) {
                  goto T17
                }
                
                let r502: Bytes(8) = r1465 + 80;
                r1467 := r1465 + 80;
                r1468 := r1465 + 80;
                
                goto T23
              }
              goto T17
              
              T17: {
                [pre:RSP - 128] <- [r1465 + 128]:8;
                4199136((r214 + 3))
                let r575: Bytes(8) = 4199136((r214 + 3)) - r139;
                if IsZero (r575) {
                  let r554: MemoryEffect = [pre:RSP - 128] <- [r1465 + 128]:8;;
                  let r1130: Bytes(8) = pre:RSP - 136;
                  4199232([r1130]:8,
                          r1130,
                          r575[1 .. 0])
                  let r1147: Bytes(8) = 4199232([r1130]:8,
                                                r1130,
                                                r575[1 .. 0]);
                  if ! ((IsZero (r1147[4 .. 0] & r1147[4 .. 0]))) {
                    goto T18
                  }
                  
                  let r545: Bytes(8) = r1465 + 120;
                  r1467 := r1465 + 120;
                  r1468 := r1465 + 120;
                  
                  goto T23
                }
                goto T18
                
                T18: {
                  
                  r1465 := r1465 + 160;
                  
                  r1485 := 4199136((r214 + 3)) - r139;
                  if IsZero (r214 + 4 - [pre:RSP - 120]:8) {
                    goto T41
                  }
                  loop T19
                }
              
              }
            
            }
            
            
            T23: {
              r1470 := r214 + 1;
              let mut r1468: Bytes(8);
              r1471 := phi ();
              let mut r1469: MemoryEffect;
              r1472 := [pre:RSP - 80]:8;
              r1473 := [pre:RSP - 96]:8;
              
              goto T24
            }
          
          }
        
        }
      
      }
      
      
      T24: {
        let mut r1474: MemoryEffect;
        let mut r1473: Bytes(8);
        let mut r1470: Bytes(8);
        [[pre:RSP - 104]:8 + r1473 * 8] <- r1470;
        let r749: MemoryEffect = [[pre:RSP - 104]:8 + r1473 * 8] <- r1470;;
        
        r1485 := pre:RDX;
        let mut r1471: Bytes(8);
        let mut r1472: Bytes(8);
        if IsZero (r1471 - r1472) {
          goto T41
        }
        TODO /* unsupported: movzx edi,byte ptr [r8] */
        
        r1475 := pre:RDX;
        r1480 := pre:RDX;
        if ! ((IsZero ([pre:R13 + 32]:8))) {
          goto T33
        }
        goto T26
      }
    
    }
    
    
    T26: {
      let mut r1475: Bytes(8);
      if IsZero (r1475[1 .. 0] & r1475[1 .. 0]) {
        
        r1482 := pre:RCX;
        goto T34
      }
      let r789: Bytes(8) = pre:RSP - 136;
      [r789] <- r1451 + 1;
      4199040(46,
              r789)
      let r801: Bytes(8) = 4199040(46,
                                   r789);
      if IsZero (r801) {
        4199136()
        let r790: MemoryEffect = [r789] <- r1451 + 1;;
        if CarryOf (r172 + 1 - [pre:R9]:8) {
          goto T29
        }
        goto T43
      }
      if ! ((CarryOf (r172 + 1 - [pre:R9]:8))) {
        goto T43
      }
      goto T29
      
      T29: {
        
        r1476 := pre:RSI[8 .. 4] ++ 46;
        r1477 := 4199040(46,
                         r789);
        
        r1479 := 0;
        r1452 := pre:R13;
        if ! ((IsZero ([[pre:R13 + 24]:8]:1))) {
          goto T4
        }
        goto T30
      }
      
      
      T43: {
        r1487 := pre:RCX;
        goto T44
      }
    
    }
    
    
    T30: {
      let mut r1478: MemoryEffect;
      let r896: Bytes(8) = pre:RSP - 128;
      let mut r1477: Bytes(8);
      [r896] <- r1477;
      let mut r1479: Bytes(1);
      6451424(10,
              r896,
              r1479)
      let r897: MemoryEffect = [r896] <- r1477;;
      
      let r902: Bytes(8) = 6451424(10,
                                   r896,
                                   r1479);
      let r918: Bytes(8) = r902 + 1;
      r1485 := r902 + 1;
      if IsZero (r918) {
        goto T41
      }
      [pre:RSP - 136] <- r1477;
      let r933: MemoryEffect = [pre:RSP - 136] <- r1477;;
      let r929: Bytes(8) = [pre:RSI + 24]:8;
      if ! ((IsZero ([r929]:1))){
        goto 0x403143
      }
      let r957: Bytes(8) = [pre:RSP - 72]:8;
      let r953: Bytes(8) = [pre:RSP - 104]:8;
      [[r929 + 8]:8]:8(r957,
                       r953,
                       [[pre:RSP - 112]:8]:8,
                       r918)
      
      r1485 := r902 + 1;
      if IsZero (r918) {
        goto T41
      }
      [r953 + r172 * 8] <- r918;
      TODO /* unsupported: movzx edi,byte ptr [r8] */
      r1475 := [pre:RSP - 72]:8;
      r1480 := [pre:RSP - 72]:8;
      
      if IsZero ([r902 + 33]:8) {
        goto T26
      }
      goto T33
    }
    
    
    T33: {
      let mut r1481: MemoryEffect;
      
      r1482 := [pre:RSP - 64]:8;
      r1485 := pre:RDX;
      let mut r1480: Bytes(8);
      if ! ((IsZero (r1480[1 .. 0] & r1480[1 .. 0]))) {
        goto T41
      }
      goto T34
    }
    
    
    T34: {
      [pre:R9] <- r172 + 1;
      
      let mut r1482: Bytes(8);
      r1488 := phi ();
      if ! ((IsZero (r1482))) {
        goto T45
      }
      goto T35
    }
    
    
    T35: {
      r1483 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      
      goto T36
    }
    
    
    T36: {
      let mut r1483: Bytes(8);
      Ret (r1483)
      goto T55
    }
    
    
    T44: {
      
      let mut r1487: Bytes(8);
      r1488 := phi ();
      if IsZero (r1487) {
        goto T35
      }
      goto T45
    }
    
    
    T45: {
      let mut r1489: MemoryEffect;
      let mut r1488: Bytes(8);
      [r1488] <- pre:R13;
      
      r1483 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      
      goto T36
    }
    
    
    T41: {
      let mut r1485: Bytes(8);
      Ret (r1485[8 .. 4] ++ 2)
      goto T55
    }
    
    
    T55: {
      end
    }
  
  }

}
