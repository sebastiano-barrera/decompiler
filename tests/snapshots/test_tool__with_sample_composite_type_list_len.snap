---
source: tests/test_tool.rs
expression: out
---
list_len 0x1120+28 (file 0x1120)
            1120: 31 c0                   xor eax,eax
            1122: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1127: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1130: ff c0                   inc eax
            1132: 48 8b 49 10             mov rcx,[rcx+10h]
            1136: 48 85 c9                test rcx,rcx
            1139: 75 f5                   jne short 0000000000001130h
            113b: c3                      ret

mil program = 
program  76 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
0x1120:
   38 r28 <- Part { src: r16, offset: 0, size: 4 }
   39 r29 <- Part { src: r16, offset: 0, size: 4 }
   40 r28 <- Arith4(BitXor, r28, r29)
   41 r16 <- Part { src: r16, offset: 4, size: 4 }
   42 r16 <- Concat { lo: r28, hi: r16 }
   43 r10 <- False
   44 r2 <- False
   45 r6 <- SignOf(r28)
   46 r5 <- IsZero(r28)
   47 r30 <- Part { src: r28, offset: 0, size: 1 }
   48 r3 <- Parity(r30)
0x1122:
   49 r28 <- Const8(8)
   50 r28 <- Arith8(Add, r28, r12)
   51 r18 <- Get(r28)
0x1130:
   52 r28 <- Part { src: r16, offset: 0, size: 4 }
   53 r28 <- ArithK4(Add, r28, 1)
   54 r16 <- Part { src: r16, offset: 4, size: 4 }
   55 r16 <- Concat { lo: r28, hi: r16 }
   56 r10 <- False
   57 r2 <- False
   58 r6 <- SignOf(r28)
   59 r5 <- IsZero(r28)
   60 r29 <- Part { src: r28, offset: 0, size: 1 }
   61 r3 <- Parity(r29)
0x1132:
   62 r29 <- Const8(16)
   63 r29 <- Arith8(Add, r29, r18)
   64 r28 <- LoadMem8(r29)
   65 r18 <- Get(r28)
0x1136:
   66 r18 <- Arith8(BitAnd, r18, r18)
   67 r6 <- SignOf(r18)
   68 r5 <- IsZero(r18)
   69 r30 <- Part { src: r18, offset: 0, size: 1 }
   70 r3 <- Parity(r18)
   71 r2 <- Const1(0)
   72 r10 <- Const1(0)
0x1139:
   73 r28 <- Not(r5)
   74 r29 <- JmpIf { cond: r28, target: 52 }
0x113b:
   75 r28 <- Ret(r16)


ssa pre-xform:
ssa program
  11 control nodes, 22 data nodes
  ControlNID(6v1) -- IfTrue(ControlNID(5v1))
  ControlNID(1v1) -- Merge { preds: [] }
  ControlNID(2v1) -- Merge { preds: [ControlNID(1v1), ControlNID(6v1)] }
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(50v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(51v1) -- Arith(Add, DataNID(50v1), DataNID(12v1))
    DataNID(53v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(1v1), DataNID(51v1))] })
    DataNID(64v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(65v1) -- Arith(Add, DataNID(64v1), DataNID(53v1))
  ControlNID(4v1) -- Load { pred: ControlNID(2v1), addr: DataNID(65v1) }
    DataNID(66v1) -- LoadedValueOf(ControlNID(4v1))
    DataNID(66v1) -- LoadedValueOf(ControlNID(4v1))
    DataNID(67v1) -- Arith(BitAnd, DataNID(66v1), DataNID(66v1))
    DataNID(69v1) -- IsZero(DataNID(67v1))
    DataNID(74v1) -- Not(DataNID(69v1))
  ControlNID(5v1) -- Branch { pred: ControlNID(4v1), cond: DataNID(74v1) }
  ControlNID(8v1) -- IfFalse(ControlNID(5v1))
  ControlNID(7v1) -- Merge { preds: [ControlNID(7v1), ControlNID(8v1)] }
  ControlNID(3v1) -- Merge { preds: [ControlNID(7v1)] }
  ControlNID(9v1) -- Jump { pred: ControlNID(3v1) }
  ControlNID(10v1) -- Merge { preds: [ControlNID(9v1)] }
    DataNID(16v1) -- Ancestral(AncestralName("RAX"))
    DataNID(42v1) -- Part { src: DataNID(16v1), offset: 4, size: 4 }
    DataNID(40v1) -- Part { src: DataNID(16v1), offset: 0, size: 4 }
    DataNID(39v1) -- Part { src: DataNID(16v1), offset: 0, size: 4 }
    DataNID(41v1) -- Arith(BitXor, DataNID(39v1), DataNID(40v1))
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(52v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(1v1), DataNID(43v1))] })
    DataNID(56v1) -- Part { src: DataNID(52v1), offset: 4, size: 4 }
    DataNID(54v1) -- Part { src: DataNID(52v1), offset: 0, size: 4 }
    DataNID(55v1) -- ArithK(Add, DataNID(54v1), 1)
    DataNID(57v1) -- Concat { lo: DataNID(55v1), hi: DataNID(56v1) }
    DataNID(75v1) -- Phi(Phi { merge_nid: ControlNID(10v1), values: [(ControlNID(9v1), DataNID(57v1))] })
  ControlNID(11v1) -- End { pred: ControlNID(10v1), ret: DataNID(75v1) }


ssa post-xform:
ssa program
  11 control nodes, 22 data nodes
  ControlNID(6v1) -- IfTrue(ControlNID(5v1))
  ControlNID(1v1) -- Merge { preds: [] }
  ControlNID(2v1) -- Merge { preds: [ControlNID(1v1), ControlNID(6v1)] }
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(50v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(51v1) -- Arith(Add, DataNID(50v1), DataNID(12v1))
    DataNID(53v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(1v1), DataNID(51v1))] })
    DataNID(64v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(65v1) -- Arith(Add, DataNID(64v1), DataNID(53v1))
  ControlNID(4v1) -- Load { pred: ControlNID(2v1), addr: DataNID(65v1) }
    DataNID(66v1) -- LoadedValueOf(ControlNID(4v1))
    DataNID(66v1) -- LoadedValueOf(ControlNID(4v1))
    DataNID(67v1) -- Arith(BitAnd, DataNID(66v1), DataNID(66v1))
    DataNID(69v1) -- IsZero(DataNID(67v1))
    DataNID(74v1) -- Not(DataNID(69v1))
  ControlNID(5v1) -- Branch { pred: ControlNID(4v1), cond: DataNID(74v1) }
  ControlNID(8v1) -- IfFalse(ControlNID(5v1))
  ControlNID(7v1) -- Merge { preds: [ControlNID(7v1), ControlNID(8v1)] }
  ControlNID(3v1) -- Merge { preds: [ControlNID(7v1)] }
  ControlNID(9v1) -- Jump { pred: ControlNID(3v1) }
  ControlNID(10v1) -- Merge { preds: [ControlNID(9v1)] }
    DataNID(16v1) -- Ancestral(AncestralName("RAX"))
    DataNID(42v1) -- Part { src: DataNID(16v1), offset: 4, size: 4 }
    DataNID(40v1) -- Part { src: DataNID(16v1), offset: 0, size: 4 }
    DataNID(39v1) -- Part { src: DataNID(16v1), offset: 0, size: 4 }
    DataNID(41v1) -- Arith(BitXor, DataNID(39v1), DataNID(40v1))
    DataNID(43v1) -- Concat { lo: DataNID(41v1), hi: DataNID(42v1) }
    DataNID(52v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(1v1), DataNID(43v1))] })
    DataNID(56v1) -- Part { src: DataNID(52v1), offset: 4, size: 4 }
    DataNID(54v1) -- Part { src: DataNID(52v1), offset: 0, size: 4 }
    DataNID(55v1) -- ArithK(Add, DataNID(54v1), 1)
    DataNID(57v1) -- Concat { lo: DataNID(55v1), hi: DataNID(56v1) }
    DataNID(75v1) -- Phi(Phi { merge_nid: ControlNID(10v1), values: [(ControlNID(9v1), DataNID(57v1))] })
  ControlNID(11v1) -- End { pred: ControlNID(10v1), ret: DataNID(75v1) }
