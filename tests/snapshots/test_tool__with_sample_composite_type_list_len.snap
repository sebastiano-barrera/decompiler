---
source: tests/test_tool.rs
expression: out
---
dwarf types --[[
TypeSet (10 types) = {
  <0> = "i8" i8
  <1> = "i32" i32
  <2> = "void" void
  <3> = "point_init" func (p *point <5>) void <2>
  <4> = *point <5>
  <5> = "point" struct {
            @  0 x float <6>
            @  4 y float <6>
            @  8 prev *point <5>
            @ 16 next *point <5>
        }
  <6> = "float" float32
  <10> = "join" func (a *point <5>,
                      b *point <5>) void <2>
  <13> = "list_len" func (p point <5>) int <14>
  <14> = "int" i32
}

0 non-fatal errors:
]]--
list_len 0x1130+28 (file 0x1130)
            1130: 31 c0                   xor eax,eax
            1132: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1137: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1140: ff c0                   inc eax
            1142: 48 8b 49 10             mov rcx,[rcx+10h]
            1146: 48 85 c9                test rcx,rcx
            1149: 75 f5                   jne short 0000000000001140h
            114b: c3                      ret

mil program = 
program  70 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- undef
   28 r29 <- undef
   29 r30 <- undef
   30 r31 <- undef
   31 r32 <- undef
   32 r33 <- undef
   33 r34 <- undef
0x1130:
   34 r28 <- l4       r16
   35 r29 <- l4       r16
   36 r28 <- xor      r28,r29  dword
   37 r16 <- v8.l4=   r16 ← r28
   38 r10 <- false
   39 r2 <- false
   40 r6 <- sign     r28
   41 r5 <- is0      r28
   42 r30 <- l1       r28
   43 r3 <- parity   r30
0x1132:
   44 r28 <- const8   8 (0x8)
   45 r28 <- add      r28,r12  qword
   46 r18 <- get      r28
0x1140:
   47 r28 <- l4       r16
   48 r28 <- addk     r28,1 dword
   49 r16 <- v8.l4=   r16 ← r28
   50 r10 <- false
   51 r2 <- false
   52 r6 <- sign     r28
   53 r5 <- is0      r28
   54 r29 <- l1       r28
   55 r3 <- parity   r29
0x1142:
   56 r29 <- const8   16 (0x10)
   57 r29 <- add      r29,r18  qword
   58 r28 <- loadm8   addr:r29
   59 r18 <- get      r28
0x1146:
   60 r18 <- and      r18,r18  qword
   61 r6 <- sign     r18
   62 r5 <- is0      r18
   63 r30 <- l1       r18
   64 r3 <- parity   r18
   65 r2 <- const1   0 (0x0)
   66 r10 <- const1   0 (0x0)
0x1149:
   67 r28 <- not      r5
   68 r29 <- jmp.if   r28,47
0x114b:
   69 r28 <- ret      r16


ssa program  19 instrs
.B0:  in[]     ;; 0x0  47 insn 0 phis
         r11 <- #pre:RSP
         r15 <- #pre:RAX
         r36 <- const4   0 (0x0)
         r37 <- v8.l4=   r15 ← r36
         r45 <- addk     r11,8 qword
.B1:  in[.B0 .B1 ]     ;; 0x1140  22 insn 2 phis
  (  2)  r70 <- phi8
         r71 <- phiarg   r37
         r72 <- phiarg   r49
         r73 <- phi8
         r74 <- phiarg   r45
         r75 <- phiarg   r60
         r48 <- addk     r70,1 dword
  (  2)  r49 <- v8.l4=   r70 ← r48
         r57 <- addk     r73,16 qword
         r58 <- loadm8   addr:r57
         r62 <- is0      r58
         r67 <- not      r62
         r68 <- jmp.if   r67,47
.B2:  in[.B1 ]     ;; 0x114b  1 insn 0 phis
         r69 <- ret      r49



'T0: {
    let mut r70 = (<pre:RAX> with l4 = 0);
    let mut r73 = <pre:RSP> + 8;
    
    'T1(r70, r73): {
        let r49 = (r70 with l4 = r70 + 1);
        if not [r73 + 16]:8 == 0 return r49 else goto T1 with (r70 = r49,
                                                               r73 = [r73 + 16]:8)
    }
}
