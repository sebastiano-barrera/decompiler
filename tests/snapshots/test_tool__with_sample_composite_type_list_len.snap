---
source: tests/test_tool.rs
expression: out
---
list_len 0x1120+28 (file 0x1120)
            1120: 31 c0                   xor eax,eax
            1122: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1127: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1130: ff c0                   inc eax
            1132: 48 8b 49 10             mov rcx,[rcx+10h]
            1136: 48 85 c9                test rcx,rcx
            1139: 75 f5                   jne short 0000000000001130h
            113b: c3                      ret

function type: 0x1120: [TypeID(4v1)]
mil program = 
program  89 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Ancestral(AncestralName("arg0"))
   28 r30 <- StructGetMember { struct_value: r28, name: "x", size: 4 }
   29 r29 <- ArithK8(Add, r12, 8)
   30 r29 <- StoreMem(r29, r30)
   31 r30 <- StructGetMember { struct_value: r28, name: "y", size: 4 }
   32 r29 <- ArithK8(Add, r12, 12)
   33 r29 <- StoreMem(r29, r30)
   34 r30 <- StructGetMember { struct_value: r28, name: "prev", size: 8 }
   35 r29 <- ArithK8(Add, r12, 16)
   36 r29 <- StoreMem(r29, r30)
   37 r30 <- StructGetMember { struct_value: r28, name: "next", size: 8 }
   38 r29 <- ArithK8(Add, r12, 24)
   39 r29 <- StoreMem(r29, r30)
   40 r28 <- Undefined
   41 r29 <- Undefined
   42 r30 <- Undefined
   43 r31 <- Undefined
   44 r32 <- Undefined
   45 r33 <- Undefined
   46 r34 <- Undefined
   47 r35 <- Undefined
   48 r36 <- Undefined
   49 r37 <- Undefined
   50 r38 <- Undefined
0x1120:
   51 r28 <- Part { src: r16, offset: 0, size: 4 }
   52 r29 <- Part { src: r16, offset: 0, size: 4 }
   53 r28 <- Arith4(BitXor, r28, r29)
   54 r16 <- Part { src: r16, offset: 4, size: 4 }
   55 r16 <- Concat { lo: r28, hi: r16 }
   56 r10 <- False
   57 r2 <- False
   58 r6 <- SignOf(r28)
   59 r5 <- IsZero(r28)
   60 r30 <- Part { src: r28, offset: 0, size: 1 }
   61 r3 <- Parity(r30)
0x1122:
   62 r28 <- Const8(8)
   63 r28 <- Arith8(Add, r28, r12)
   64 r18 <- Get(r28)
0x1130:
   65 r28 <- Part { src: r16, offset: 0, size: 4 }
   66 r28 <- ArithK4(Add, r28, 1)
   67 r16 <- Part { src: r16, offset: 4, size: 4 }
   68 r16 <- Concat { lo: r28, hi: r16 }
   69 r10 <- False
   70 r2 <- False
   71 r6 <- SignOf(r28)
   72 r5 <- IsZero(r28)
   73 r29 <- Part { src: r28, offset: 0, size: 1 }
   74 r3 <- Parity(r29)
0x1132:
   75 r29 <- Const8(16)
   76 r29 <- Arith8(Add, r29, r18)
   77 r28 <- LoadMem8(r29)
   78 r18 <- Get(r28)
0x1136:
   79 r18 <- Arith8(BitAnd, r18, r18)
   80 r6 <- SignOf(r18)
   81 r5 <- IsZero(r18)
   82 r30 <- Part { src: r18, offset: 0, size: 1 }
   83 r3 <- Parity(r18)
   84 r2 <- Const1(0)
   85 r10 <- Const1(0)
0x1139:
   86 r28 <- Not(r5)
   87 r29 <- JmpIf { cond: r28, target: 65 }
0x113b:
   88 r28 <- Ret(r16)


ssa pre-xform:
ssa program  23 instrs
.B0:    ;;  addr:0x0; 65 insn 0 phis
         r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r15 <- Ancestral(AncestralName("RAX"))
         r51 <- Part { src: r15, offset: 0, size: 4 }
         r52 <- Part { src: r15, offset: 0, size: 4 }
         r53 <- Arith4(BitXor, r51, r52)
         r54 <- Part { src: r15, offset: 4, size: 4 }
         r55 <- Concat { lo: r53, hi: r54 }
         r62 <- Const8(8)
         r63 <- Arith8(Add, r62, r11)
.B1:    ;;  preds:B0,B1  addr:0x1130; 23 insn 2 phis
                  ɸ  B0     B1     
  (  2)    r89    <- r55    r68    
           r92    <- r63    r79    
         r65 <- Part { src: r89, offset: 0, size: 4 }
         r66 <- ArithK4(Add, r65, 1)
         r67 <- Part { src: r89, offset: 4, size: 4 }
  (  2)  r68 <- Concat { lo: r66, hi: r67 }
         r75 <- Const8(16)
  (  2)  r76 <- Arith8(Add, r75, r92)
  (  2)  r77 <- LoadMem8(r76)
  (  2)  r79 <- Arith8(BitAnd, r77, r77)
         r81 <- IsZero(r79)
         r86 <- Not(r81)
         r87 <- JmpIf { cond: r86, target: 65 }
.B2:    ;;  preds:B1  addr:0x113b; 1 insn 0 phis
         r88 <- Ret(r68)


ssa post-xform:
ssa program  20 instrs
.B0:    ;;  addr:0x0; 65 insn 0 phis
         r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r15 <- Ancestral(AncestralName("RAX"))
         r51 <- Part { src: r15, offset: 0, size: 4 }
         r52 <- Part { src: r15, offset: 0, size: 4 }
         r53 <- Arith4(BitXor, r51, r52)
         r54 <- Part { src: r15, offset: 4, size: 4 }
         r55 <- Concat { lo: r53, hi: r54 }
         r63 <- ArithK8(Add, r11, 8)
.B1:    ;;  preds:B0,B1  addr:0x1130; 23 insn 2 phis
                  ɸ  B0     B1     
  (  2)    r89    <- r55    r68    
           r92    <- r63    r79    
         r65 <- Part { src: r89, offset: 0, size: 4 }
         r66 <- ArithK4(Add, r65, 1)
         r67 <- Part { src: r89, offset: 4, size: 4 }
  (  2)  r68 <- Concat { lo: r66, hi: r67 }
         r76 <- ArithK8(Add, r92, 16)
  (  2)  r79 <- Get(r77)
         r81 <- IsZero(r79)
         r86 <- Not(r81)
         r87 <- JmpIf { cond: r86, target: 65 }
.B2:    ;;  preds:B1  addr:0x113b; 1 insn 0 phis
         r88 <- Ret(r68)


T0(): {
  goto T1 (
    r89 = pre:RAX[4 .. 8]⧺pre:RAX[0 .. 4] ^ pre:RAX[0 .. 4]
    r92 = pre:RSP + 8
  )
  
  T1(r89, r92): {
    let r68 = r89[4 .. 8]⧺r89[0 .. 4] + 1;
    if !(IsZero([r92 + 16]:8)) {
      goto T1 (
        r89 = r68
        r92 = [r92 + 16]:8
      )
    
    }
    Ret(r68);
  }
}
