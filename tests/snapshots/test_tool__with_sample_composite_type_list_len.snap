---
source: tests/test_tool.rs
expression: out
---
list_len 0x1120+28 (file 0x1120)
            1120: 31 c0                   xor eax,eax
            1122: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1127: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1130: ff c0                   inc eax
            1132: 48 8b 49 10             mov rcx,[rcx+10h]
            1136: 48 85 c9                test rcx,rcx
            1139: 75 f5                   jne short 0000000000001130h
            113b: c3                      ret

function type: 0x1120: [TypeID(4v1)]
mil program = 
program  83 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- #pre:arg0
   28 r30 <- memb     r28,"x"
   29 r29 <- addk     r12,8 qword
   30 r29 <- store    *r29 ← r30
   31 r30 <- memb     r28,"y"
   32 r29 <- addk     r12,12 qword
   33 r29 <- store    *r29 ← r30
   34 r30 <- memb     r28,"prev"
   35 r29 <- addk     r12,16 qword
   36 r29 <- store    *r29 ← r30
   37 r30 <- memb     r28,"next"
   38 r29 <- addk     r12,24 qword
   39 r29 <- store    *r29 ← r30
   40 r28 <- undef
   41 r29 <- undef
   42 r30 <- undef
   43 r31 <- undef
   44 r32 <- undef
   45 r33 <- undef
   46 r34 <- undef
0x1120:
   47 r28 <- l4       r16
   48 r29 <- l4       r16
   49 r28 <- xor      r28,r29  dword
   50 r16 <- v8.l4=   r16 ← r28
   51 r10 <- false
   52 r2 <- false
   53 r6 <- sign     r28
   54 r5 <- is0      r28
   55 r30 <- l1       r28
   56 r3 <- parity   r30
0x1122:
   57 r28 <- const8   8 (0x8)
   58 r28 <- add      r28,r12  qword
   59 r18 <- get      r28
0x1130:
   60 r28 <- l4       r16
   61 r28 <- addk     r28,1 dword
   62 r16 <- v8.l4=   r16 ← r28
   63 r10 <- false
   64 r2 <- false
   65 r6 <- sign     r28
   66 r5 <- is0      r28
   67 r29 <- l1       r28
   68 r3 <- parity   r29
0x1132:
   69 r29 <- const8   16 (0x10)
   70 r29 <- add      r29,r18  qword
   71 r28 <- loadm8   addr:r29
   72 r18 <- get      r28
0x1136:
   73 r18 <- and      r18,r18  qword
   74 r6 <- sign     r18
   75 r5 <- is0      r18
   76 r30 <- l1       r18
   77 r3 <- parity   r18
   78 r2 <- const1   0 (0x0)
   79 r10 <- const1   0 (0x0)
0x1139:
   80 r28 <- not      r5
   81 r29 <- jmp.if   r28,60
0x113b:
   82 r28 <- ret      r16


ssa pre-xform:
ssa program  34 instrs
.B0:    ;;  addr:0x0; 60 insn 0 phis
  (  5)  r11 <- #pre:RSP
  (  3)  r15 <- #pre:RAX
  (  4)  r27 <- #pre:arg0
         r28 <- memb     r27,"x"
         r29 <- addk     r11,8 qword
         r30 <- store    *r29 ← r28
         r31 <- memb     r27,"y"
         r32 <- addk     r11,12 qword
         r33 <- store    *r32 ← r31
         r34 <- memb     r27,"prev"
         r35 <- addk     r11,16 qword
         r36 <- store    *r35 ← r34
         r37 <- memb     r27,"next"
         r38 <- addk     r11,24 qword
         r39 <- store    *r38 ← r37
         r47 <- l4       r15
         r48 <- l4       r15
         r49 <- xor      r47,r48  dword
  (  2)  r50 <- v8.l4=   r15 ← r49
         r57 <- const8   8 (0x8)
         r58 <- add      r57,r11  qword
.B1:    ;;  preds:B0,B1  addr:0x1130; 22 insn 2 phis
                  ɸ  B0     B1     
  (  2)    r83    <- r50    r62    
           r86    <- r58    r73    
         r60 <- l4       r83
         r61 <- addk     r60,1 dword
  (  3)  r62 <- v8.l4=   r83 ← r61
         r69 <- const8   16 (0x10)
  (  2)  r70 <- add      r69,r86  qword
  (  2)  r71 <- loadm8   addr:r70
  (  2)  r73 <- and      r71,r71  qword
         r75 <- is0      r73
         r80 <- not      r75
         r81 <- jmp.if   r80,60
.B2:    ;;  preds:B1  addr:0x113b; 1 insn 0 phis
         r82 <- ret      r62


ssa post-xform:
ssa program  28 instrs
.B0:    ;;  addr:0x0; 60 insn 0 phis
  (  5)  r11 <- #pre:RSP
         r15 <- #pre:RAX
  (  4)  r27 <- #pre:arg0
         r28 <- memb     r27,"x"
         r29 <- addk     r11,8 qword
         r30 <- store    *r29 ← r28
         r31 <- memb     r27,"y"
         r32 <- addk     r11,12 qword
         r33 <- store    *r32 ← r31
         r34 <- memb     r27,"prev"
         r35 <- addk     r11,16 qword
         r36 <- store    *r35 ← r34
         r37 <- memb     r27,"next"
         r38 <- addk     r11,24 qword
         r39 <- store    *r38 ← r37
         r49 <- const4   0 (0x0)
  (  2)  r50 <- v8.l4=   r15 ← r49
         r58 <- addk     r11,8 qword
.B1:    ;;  preds:B0,B1  addr:0x1130; 22 insn 2 phis
                  ɸ  B0     B1     
  (  2)    r83    <- r50    r62    
           r86    <- r58    r71    
         r61 <- addk     r83,1 dword
  (  3)  r62 <- v8.l4=   r83 ← r61
         r70 <- addk     r86,16 qword
  (  2)  r71 <- loadm8   addr:r70
         r75 <- is0      r71
         r80 <- not      r75
         r81 <- jmp.if   r80,60
.B2:    ;;  preds:B1  addr:0x113b; 1 insn 0 phis
         r82 <- ret      r62


T0(): {
  [pre:RSP + 8] = pre:arg0."x";
  [pre:RSP + 12] = pre:arg0."y";
  [pre:RSP + 16] = pre:arg0."prev";
  [pre:RSP + 24] = pre:arg0."next";
  let r50 = V8WithL4(pre:RAX, 0x0 /* 0 */);
  goto T1 (
    r83 = r50
    r86 = pre:RSP + 8
  )
  
  T1(r83, r86): {
    let r62 = V8WithL4(r83, r83 + 1);
    if !(IsZero([r86 + 16]:8)) {
      goto T1 (
        r83 = r62
        r86 = [r86 + 16]:8
      )
    
    }
    Ret(r62);
  }
}
