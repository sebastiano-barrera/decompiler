---
source: tests/test_tool.rs
expression: out
---
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

mil program = 
program  329 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
0x401090:
   38 r12 <- ArithK8(Add, r12, -8)
   39 r29 <- StoreMem(r12, r24)
0x401092:
   40 r28 <- Const4(8)
   41 r15 <- Part { src: r15, offset: 4, size: 4 }
   42 r15 <- Concat { lo: r28, hi: r15 }
0x401097:
   43 r28 <- Const4(3)
   44 r14 <- Part { src: r14, offset: 4, size: 4 }
   45 r14 <- Concat { lo: r28, hi: r14 }
0x40109c:
   46 r12 <- ArithK8(Add, r12, -8)
   47 r29 <- StoreMem(r12, r11)
0x40109d:
   48 r12 <- ArithK8(Add, r12, -8)
   49 r29 <- StoreMem(r12, r17)
0x40109e:
   50 r29 <- Const8(16)
   51 r12 <- Arith8(Sub, r12, r29)
   52 r12 <- Get(r12)
   53 r10 <- OverflowOf(r12)
   54 r2 <- CarryOf(r12)
   55 r6 <- SignOf(r12)
   56 r5 <- IsZero(r12)
   57 r30 <- Part { src: r12, offset: 0, size: 1 }
   58 r3 <- Parity(r30)
0x4010a2:
   59 r19 <- Get(r12)
0x4010a5:
   60 r28 <- Const8(4198512)
   61 r16 <- Call(r28)
   62 r29 <- CArg(r14)
   63 r30 <- CArg(r15)
   64 r31 <- CArg(r19)
   65 r32 <- CArg(r18)
   66 r2 <- Undefined
   67 r3 <- Undefined
   68 r4 <- Undefined
   69 r5 <- Undefined
   70 r6 <- Undefined
   71 r7 <- Undefined
   72 r8 <- Undefined
   73 r9 <- Undefined
   74 r10 <- Undefined
0x4010aa:
   75 r28 <- Part { src: r16, offset: 0, size: 4 }
   76 r29 <- Part { src: r16, offset: 0, size: 4 }
   77 r28 <- Arith4(BitAnd, r28, r29)
   78 r6 <- SignOf(r28)
   79 r5 <- IsZero(r28)
   80 r30 <- Part { src: r28, offset: 0, size: 1 }
   81 r3 <- Parity(r28)
   82 r2 <- Const1(0)
   83 r10 <- Const1(0)
0x4010ac:
   84 r28 <- Not(r5)
   85 r29 <- JmpIf { cond: r28, target: 317 }
0x4010b2:
   86 r29 <- Const8(0)
   87 r29 <- Arith8(Add, r29, r12)
   88 r28 <- LoadMem8(r29)
   89 r14 <- Get(r28)
0x4010b6:
   90 r28 <- Const8(8)
   91 r28 <- Arith8(Add, r28, r12)
   92 r21 <- Get(r28)
0x4010bb:
   93 r28 <- Part { src: r20, offset: 0, size: 4 }
   94 r29 <- Part { src: r20, offset: 0, size: 4 }
   95 r28 <- Arith4(BitXor, r28, r29)
   96 r20 <- Part { src: r20, offset: 4, size: 4 }
   97 r20 <- Concat { lo: r28, hi: r20 }
   98 r10 <- False
   99 r2 <- False
  100 r6 <- SignOf(r28)
  101 r5 <- IsZero(r28)
  102 r30 <- Part { src: r28, offset: 0, size: 1 }
  103 r3 <- Parity(r30)
0x4010be:
  104 r24 <- Get(r12)
0x4010c1:
  105 r28 <- Const4(4096)
  106 r18 <- Part { src: r18, offset: 4, size: 4 }
  107 r18 <- Concat { lo: r28, hi: r18 }
0x4010c6:
  108 r28 <- Const4(8)
  109 r19 <- Part { src: r19, offset: 4, size: 4 }
  110 r19 <- Concat { lo: r28, hi: r19 }
0x4010cb:
  111 r28 <- Const4(4203184)
  112 r15 <- Part { src: r15, offset: 4, size: 4 }
  113 r15 <- Concat { lo: r28, hi: r15 }
0x4010d0:
  114 r28 <- Const8(4198496)
  115 r16 <- Call(r28)
  116 r29 <- CArg(r14)
  117 r30 <- CArg(r15)
  118 r31 <- CArg(r19)
  119 r32 <- CArg(r18)
  120 r2 <- Undefined
  121 r3 <- Undefined
  122 r4 <- Undefined
  123 r5 <- Undefined
  124 r6 <- Undefined
  125 r7 <- Undefined
  126 r8 <- Undefined
  127 r9 <- Undefined
  128 r10 <- Undefined
0x4010d5:
  129 r11 <- Get(r16)
0x4010d8:
  130 r16 <- Arith8(BitAnd, r16, r16)
  131 r6 <- SignOf(r16)
  132 r5 <- IsZero(r16)
  133 r30 <- Part { src: r16, offset: 0, size: 1 }
  134 r3 <- Parity(r16)
  135 r2 <- Const1(0)
  136 r10 <- Const1(0)
0x4010db:
  137 r28 <- JmpIf { cond: r5, target: 298 }
0x4010dd:
  138 r28 <- Part { src: r17, offset: 0, size: 4 }
  139 r29 <- Part { src: r17, offset: 0, size: 4 }
  140 r28 <- Arith4(BitXor, r28, r29)
  141 r17 <- Part { src: r17, offset: 4, size: 4 }
  142 r17 <- Concat { lo: r28, hi: r17 }
  143 r10 <- False
  144 r2 <- False
  145 r6 <- SignOf(r28)
  146 r5 <- IsZero(r28)
  147 r30 <- Part { src: r28, offset: 0, size: 1 }
  148 r3 <- Parity(r30)
0x4010e0:
  149 r16 <- Get(r17)
0x4010e3:
  150 r29 <- Const8(8)
  151 r29 <- Arith8(Add, r29, r12)
  152 r28 <- LoadMem8(r29)
  153 r19 <- Get(r28)
0x4010e8:
  154 r28 <- Const4(4203193)
  155 r14 <- Part { src: r14, offset: 4, size: 4 }
  156 r14 <- Concat { lo: r28, hi: r14 }
0x4010ed:
  157 r29 <- Const1(5)
  158 r29 <- Widen1_8(r29)
  159 r16 <- Arith8(Shl, r16, r29)
  160 r16 <- Get(r16)
  161 r6 <- SignOf(r16)
  162 r5 <- IsZero(r16)
  163 r30 <- Part { src: r16, offset: 0, size: 1 }
  164 r3 <- Parity(r30)
0x4010f1:
  165 r16 <- Arith8(Sub, r16, r17)
  166 r16 <- Get(r16)
  167 r10 <- OverflowOf(r16)
  168 r2 <- CarryOf(r16)
  169 r6 <- SignOf(r16)
  170 r5 <- IsZero(r16)
  171 r30 <- Part { src: r16, offset: 0, size: 1 }
  172 r3 <- Parity(r30)
0x4010f4:
  173 r29 <- Const8(1)
  174 r17 <- Arith8(Add, r17, r29)
  175 r17 <- Get(r17)
  176 r10 <- OverflowOf(r17)
  177 r2 <- CarryOf(r17)
  178 r6 <- SignOf(r17)
  179 r5 <- IsZero(r17)
  180 r30 <- Part { src: r17, offset: 0, size: 1 }
  181 r3 <- Parity(r30)
0x4010f8:
  182 r28 <- Const8(0)
  183 r28 <- Arith8(Add, r28, r19)
  184 r29 <- ArithK8(Mul, r16, 8)
  185 r28 <- Arith8(Add, r28, r29)
  186 r16 <- Get(r28)
0x4010fc:
  187 r29 <- Const8(8)
  188 r29 <- Arith8(Add, r29, r16)
  189 r28 <- LoadMem8(r29)
  190 r15 <- Get(r28)
0x401100:
  191 r28 <- Const8(74)
  192 r28 <- Arith8(Add, r28, r16)
  193 r18 <- Get(r28)
0x401104:
  194 r28 <- Const8(42)
  195 r28 <- Arith8(Add, r28, r16)
  196 r19 <- Get(r28)
0x401108:
  197 r28 <- Part { src: r16, offset: 0, size: 4 }
  198 r29 <- Part { src: r16, offset: 0, size: 4 }
  199 r28 <- Arith4(BitXor, r28, r29)
  200 r16 <- Part { src: r16, offset: 4, size: 4 }
  201 r16 <- Concat { lo: r28, hi: r16 }
  202 r10 <- False
  203 r2 <- False
  204 r6 <- SignOf(r28)
  205 r5 <- IsZero(r28)
  206 r30 <- Part { src: r28, offset: 0, size: 1 }
  207 r3 <- Parity(r30)
0x40110a:
  208 r28 <- Const8(4198480)
  209 r16 <- Call(r28)
  210 r29 <- CArg(r14)
  211 r30 <- CArg(r15)
  212 r31 <- CArg(r19)
  213 r32 <- CArg(r18)
  214 r2 <- Undefined
  215 r3 <- Undefined
  216 r4 <- Undefined
  217 r5 <- Undefined
  218 r6 <- Undefined
  219 r7 <- Undefined
  220 r8 <- Undefined
  221 r9 <- Undefined
  222 r10 <- Undefined
0x40110f:
  223 r11 <- Arith8(Sub, r11, r17)
  224 r10 <- OverflowOf(r11)
  225 r2 <- CarryOf(r11)
  226 r6 <- SignOf(r11)
  227 r5 <- IsZero(r11)
  228 r30 <- Part { src: r11, offset: 0, size: 1 }
  229 r3 <- Parity(r30)
0x401112:
  230 r28 <- Not(r5)
  231 r29 <- JmpIf { cond: r28, target: 149 }
0x401114:
  232 r29 <- Const8(8)
  233 r29 <- Arith8(Add, r29, r12)
  234 r28 <- LoadMem8(r29)
  235 r14 <- Get(r28)
0x401119:
  236 r15 <- Get(r11)
0x40111c:
  237 r28 <- Const8(4198464)
  238 r16 <- Call(r28)
  239 r29 <- CArg(r14)
  240 r30 <- CArg(r15)
  241 r31 <- CArg(r19)
  242 r32 <- CArg(r18)
  243 r2 <- Undefined
  244 r3 <- Undefined
  245 r4 <- Undefined
  246 r5 <- Undefined
  247 r6 <- Undefined
  248 r7 <- Undefined
  249 r8 <- Undefined
  250 r9 <- Undefined
  251 r10 <- Undefined
0x401121:
  252 r14 <- Get(r24)
0x401124:
  253 r28 <- Const8(4198528)
  254 r16 <- Call(r28)
  255 r29 <- CArg(r14)
  256 r30 <- CArg(r15)
  257 r31 <- CArg(r19)
  258 r32 <- CArg(r18)
  259 r2 <- Undefined
  260 r3 <- Undefined
  261 r4 <- Undefined
  262 r5 <- Undefined
  263 r6 <- Undefined
  264 r7 <- Undefined
  265 r8 <- Undefined
  266 r9 <- Undefined
  267 r10 <- Undefined
0x401129:
  268 r28 <- Part { src: r16, offset: 0, size: 4 }
  269 r29 <- Part { src: r16, offset: 0, size: 4 }
  270 r28 <- Arith4(BitXor, r28, r29)
  271 r16 <- Part { src: r16, offset: 4, size: 4 }
  272 r16 <- Concat { lo: r28, hi: r16 }
  273 r10 <- False
  274 r2 <- False
  275 r6 <- SignOf(r28)
  276 r5 <- IsZero(r28)
  277 r30 <- Part { src: r28, offset: 0, size: 1 }
  278 r3 <- Parity(r30)
0x40112b:
  279 r29 <- Const8(16)
  280 r12 <- Arith8(Add, r12, r29)
  281 r12 <- Get(r12)
  282 r10 <- OverflowOf(r12)
  283 r2 <- CarryOf(r12)
  284 r6 <- SignOf(r12)
  285 r5 <- IsZero(r12)
  286 r30 <- Part { src: r12, offset: 0, size: 1 }
  287 r3 <- Parity(r30)
0x40112f:
  288 r28 <- LoadMem8(r12)
  289 r17 <- Get(r28)
  290 r12 <- ArithK8(Add, r12, 8)
0x401130:
  291 r28 <- LoadMem8(r12)
  292 r11 <- Get(r28)
  293 r12 <- ArithK8(Add, r12, 8)
0x401131:
  294 r28 <- LoadMem8(r12)
  295 r24 <- Get(r28)
  296 r12 <- ArithK8(Add, r12, 8)
0x401133:
  297 r28 <- Ret(r16)
0x401134:
  298 r28 <- Const4(4203208)
  299 r14 <- Part { src: r14, offset: 4, size: 4 }
  300 r14 <- Concat { lo: r28, hi: r14 }
0x401139:
  301 r28 <- Const8(4198448)
  302 r16 <- Call(r28)
  303 r29 <- CArg(r14)
  304 r30 <- CArg(r15)
  305 r31 <- CArg(r19)
  306 r32 <- CArg(r18)
  307 r2 <- Undefined
  308 r3 <- Undefined
  309 r4 <- Undefined
  310 r5 <- Undefined
  311 r6 <- Undefined
  312 r7 <- Undefined
  313 r8 <- Undefined
  314 r9 <- Undefined
  315 r10 <- Undefined
0x40113e:
  316 r28 <- Jmp(252)
0x401140:
  317 r28 <- Part { src: r16, offset: 0, size: 4 }
  318 r29 <- Const4(-1)
  319 r28 <- Arith4(BitOr, r28, r29)
  320 r16 <- Part { src: r16, offset: 4, size: 4 }
  321 r16 <- Concat { lo: r28, hi: r16 }
  322 r10 <- False
  323 r2 <- False
  324 r6 <- SignOf(r28)
  325 r5 <- IsZero(r28)
  326 r30 <- Part { src: r28, offset: 0, size: 1 }
  327 r3 <- Parity(r30)
0x401143:
  328 r28 <- Jmp(279)


ssa pre-xform:
ssa program
  41 control nodes, 99 data nodes
  ControlNID(28v1) -- IfTrue(ControlNID(27v1))
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(24v1) -- Ancestral(AncestralName("R12"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(10v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(24v1) }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(46v1) -- ArithK(Add, DataNID(39v1), -8)
  ControlNID(11v1) -- Store { pred: ControlNID(10v1), addr: DataNID(46v1), value: DataNID(11v1) }
    DataNID(17v1) -- Ancestral(AncestralName("RBX"))
    DataNID(47v1) -- ArithK(Add, DataNID(46v1), -8)
  ControlNID(12v1) -- Store { pred: ControlNID(11v1), addr: DataNID(47v1), value: DataNID(17v1) }
    DataNID(56v1) -- ConstInt { size: ValueSize(8), value: 4198512 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(41v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(40v1) -- ConstInt { size: ValueSize(4), value: 8 }
    DataNID(42v1) -- Concat { lo: DataNID(40v1), hi: DataNID(41v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(44v1) -- Part { src: DataNID(14v1), offset: 4, size: 4 }
    DataNID(43v1) -- ConstInt { size: ValueSize(4), value: 3 }
    DataNID(45v1) -- Concat { lo: DataNID(43v1), hi: DataNID(44v1) }
  ControlNID(13v1) -- Call { pred: ControlNID(12v1), callee: DataNID(56v1), args: [DataNID(45v1), DataNID(42v1), DataNID(49v1), DataNID(18v1)] }
    DataNID(57v1) -- ReturnValueOf(ControlNID(13v1))
    DataNID(68v1) -- Part { src: DataNID(57v1), offset: 0, size: 4 }
    DataNID(67v1) -- Part { src: DataNID(57v1), offset: 0, size: 4 }
    DataNID(69v1) -- Arith(BitAnd, DataNID(67v1), DataNID(68v1))
    DataNID(71v1) -- IsZero(DataNID(69v1))
    DataNID(76v1) -- Not(DataNID(71v1))
  ControlNID(14v1) -- Branch { pred: ControlNID(13v1), cond: DataNID(76v1) }
  ControlNID(16v1) -- IfFalse(ControlNID(14v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(16v1)] }
    DataNID(77v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(78v1) -- Arith(Add, DataNID(77v1), DataNID(49v1))
  ControlNID(17v1) -- Load { pred: ControlNID(2v1), addr: DataNID(78v1) }
    DataNID(102v1) -- ConstInt { size: ValueSize(8), value: 4198496 }
    DataNID(94v1) -- Part { src: DataNID(18v1), offset: 4, size: 4 }
    DataNID(93v1) -- ConstInt { size: ValueSize(4), value: 4096 }
    DataNID(95v1) -- Concat { lo: DataNID(93v1), hi: DataNID(94v1) }
    DataNID(97v1) -- Part { src: DataNID(49v1), offset: 4, size: 4 }
    DataNID(96v1) -- ConstInt { size: ValueSize(4), value: 8 }
    DataNID(98v1) -- Concat { lo: DataNID(96v1), hi: DataNID(97v1) }
    DataNID(100v1) -- Part { src: DataNID(42v1), offset: 4, size: 4 }
    DataNID(99v1) -- ConstInt { size: ValueSize(4), value: 4203184 }
    DataNID(101v1) -- Concat { lo: DataNID(99v1), hi: DataNID(100v1) }
    DataNID(79v1) -- LoadedValueOf(ControlNID(17v1))
  ControlNID(18v1) -- Call { pred: ControlNID(17v1), callee: DataNID(102v1), args: [DataNID(79v1), DataNID(101v1), DataNID(98v1), DataNID(95v1)] }
    DataNID(103v1) -- ReturnValueOf(ControlNID(18v1))
    DataNID(103v1) -- ReturnValueOf(ControlNID(18v1))
    DataNID(113v1) -- Arith(BitAnd, DataNID(103v1), DataNID(103v1))
    DataNID(115v1) -- IsZero(DataNID(113v1))
  ControlNID(19v1) -- Branch { pred: ControlNID(18v1), cond: DataNID(115v1) }
  ControlNID(21v1) -- IfFalse(ControlNID(19v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(21v1)] }
  ControlNID(4v1) -- Merge { preds: [ControlNID(3v1), ControlNID(28v1)] }
    DataNID(148v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(149v1) -- Arith(Add, DataNID(148v1), DataNID(49v1))
  ControlNID(24v1) -- Load { pred: ControlNID(4v1), addr: DataNID(149v1) }
    DataNID(137v1) -- Part { src: DataNID(17v1), offset: 4, size: 4 }
    DataNID(135v1) -- Part { src: DataNID(17v1), offset: 0, size: 4 }
    DataNID(134v1) -- Part { src: DataNID(17v1), offset: 0, size: 4 }
    DataNID(136v1) -- Arith(BitXor, DataNID(134v1), DataNID(135v1))
    DataNID(138v1) -- Concat { lo: DataNID(136v1), hi: DataNID(137v1) }
    DataNID(147v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(138v1))] })
    DataNID(154v1) -- ConstInt { size: ValueSize(1), value: 5 }
    DataNID(155v1) -- Widen { input: DataNID(154v1), out_size: ValueSize(8) }
    DataNID(156v1) -- Arith(Shl, DataNID(147v1), DataNID(155v1))
    DataNID(161v1) -- Arith(Sub, DataNID(156v1), DataNID(147v1))
    DataNID(178v1) -- ArithK(Mul, DataNID(161v1), 8)
    DataNID(150v1) -- LoadedValueOf(ControlNID(24v1))
    DataNID(176v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(177v1) -- Arith(Add, DataNID(176v1), DataNID(150v1))
    DataNID(179v1) -- Arith(Add, DataNID(177v1), DataNID(178v1))
    DataNID(180v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(181v1) -- Arith(Add, DataNID(180v1), DataNID(179v1))
  ControlNID(25v1) -- Load { pred: ControlNID(24v1), addr: DataNID(181v1) }
    DataNID(198v1) -- ConstInt { size: ValueSize(8), value: 4198480 }
    DataNID(183v1) -- ConstInt { size: ValueSize(8), value: 74 }
    DataNID(184v1) -- Arith(Add, DataNID(183v1), DataNID(179v1))
    DataNID(185v1) -- ConstInt { size: ValueSize(8), value: 42 }
    DataNID(186v1) -- Arith(Add, DataNID(185v1), DataNID(179v1))
    DataNID(182v1) -- LoadedValueOf(ControlNID(25v1))
    DataNID(146v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(79v1))] })
    DataNID(152v1) -- Part { src: DataNID(146v1), offset: 4, size: 4 }
    DataNID(151v1) -- ConstInt { size: ValueSize(4), value: 4203193 }
    DataNID(153v1) -- Concat { lo: DataNID(151v1), hi: DataNID(152v1) }
  ControlNID(26v1) -- Call { pred: ControlNID(25v1), callee: DataNID(198v1), args: [DataNID(153v1), DataNID(182v1), DataNID(186v1), DataNID(184v1)] }
    DataNID(168v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(169v1) -- Arith(Add, DataNID(147v1), DataNID(168v1))
    DataNID(145v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(103v1))] })
    DataNID(209v1) -- Arith(Sub, DataNID(145v1), DataNID(169v1))
    DataNID(213v1) -- IsZero(DataNID(209v1))
    DataNID(216v1) -- Not(DataNID(213v1))
  ControlNID(27v1) -- Branch { pred: ControlNID(26v1), cond: DataNID(216v1) }
  ControlNID(30v1) -- IfFalse(ControlNID(27v1))
  ControlNID(29v1) -- Merge { preds: [ControlNID(29v1), ControlNID(30v1)] }
  ControlNID(5v1) -- Merge { preds: [ControlNID(29v1)] }
    DataNID(217v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(218v1) -- Arith(Add, DataNID(217v1), DataNID(49v1))
  ControlNID(31v1) -- Load { pred: ControlNID(5v1), addr: DataNID(218v1) }
    DataNID(220v1) -- ConstInt { size: ValueSize(8), value: 4198464 }
    DataNID(184v1) -- Arith(Add, DataNID(183v1), DataNID(179v1))
    DataNID(186v1) -- Arith(Add, DataNID(185v1), DataNID(179v1))
    DataNID(209v1) -- Arith(Sub, DataNID(145v1), DataNID(169v1))
    DataNID(219v1) -- LoadedValueOf(ControlNID(31v1))
  ControlNID(32v1) -- Call { pred: ControlNID(31v1), callee: DataNID(220v1), args: [DataNID(219v1), DataNID(209v1), DataNID(186v1), DataNID(184v1)] }
  ControlNID(20v1) -- IfTrue(ControlNID(19v1))
  ControlNID(8v1) -- Merge { preds: [ControlNID(20v1), ControlNID(21v1)] }
    DataNID(123v1) -- ConstInt { size: ValueSize(8), value: 4198448 }
    DataNID(121v1) -- Part { src: DataNID(79v1), offset: 4, size: 4 }
    DataNID(120v1) -- ConstInt { size: ValueSize(4), value: 4203208 }
    DataNID(122v1) -- Concat { lo: DataNID(120v1), hi: DataNID(121v1) }
  ControlNID(22v1) -- Call { pred: ControlNID(8v1), callee: DataNID(123v1), args: [DataNID(122v1), DataNID(101v1), DataNID(98v1), DataNID(95v1)] }
  ControlNID(23v1) -- Jump { pred: ControlNID(22v1) }
  ControlNID(23v1) -- Jump { pred: ControlNID(22v1) }
  ControlNID(6v1) -- Merge { preds: [ControlNID(23v1), ControlNID(23v1), ControlNID(32v1)] }
    DataNID(234v1) -- ConstInt { size: ValueSize(8), value: 4198528 }
    DataNID(232v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(95v1)), (ControlNID(32v1), DataNID(184v1))] })
    DataNID(233v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(98v1)), (ControlNID(32v1), DataNID(186v1))] })
    DataNID(231v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(101v1)), (ControlNID(32v1), DataNID(209v1))] })
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
  ControlNID(33v1) -- Call { pred: ControlNID(6v1), callee: DataNID(234v1), args: [DataNID(49v1), DataNID(231v1), DataNID(233v1), DataNID(232v1)] }
  ControlNID(7v1) -- Merge { preds: [ControlNID(33v1)] }
    DataNID(256v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(257v1) -- Arith(Add, DataNID(49v1), DataNID(256v1))
  ControlNID(34v1) -- Load { pred: ControlNID(7v1), addr: DataNID(257v1) }
    DataNID(265v1) -- ArithK(Add, DataNID(257v1), 8)
  ControlNID(35v1) -- Load { pred: ControlNID(34v1), addr: DataNID(265v1) }
    DataNID(267v1) -- ArithK(Add, DataNID(265v1), 8)
  ControlNID(36v1) -- Load { pred: ControlNID(35v1), addr: DataNID(267v1) }
  ControlNID(39v1) -- Jump { pred: ControlNID(36v1) }
  ControlNID(15v1) -- IfTrue(ControlNID(14v1))
  ControlNID(9v1) -- Merge { preds: [ControlNID(15v1), ControlNID(16v1), ControlNID(37v1)] }
  ControlNID(38v1) -- Jump { pred: ControlNID(9v1) }
  ControlNID(37v1) -- Merge { preds: [ControlNID(38v1), ControlNID(39v1)] }
  ControlNID(40v1) -- Merge { preds: [ControlNID(37v1)] }
    DataNID(235v1) -- ReturnValueOf(ControlNID(33v1))
    DataNID(248v1) -- Part { src: DataNID(235v1), offset: 4, size: 4 }
    DataNID(246v1) -- Part { src: DataNID(235v1), offset: 0, size: 4 }
    DataNID(245v1) -- Part { src: DataNID(235v1), offset: 0, size: 4 }
    DataNID(247v1) -- Arith(BitXor, DataNID(245v1), DataNID(246v1))
    DataNID(249v1) -- Concat { lo: DataNID(247v1), hi: DataNID(248v1) }
    DataNID(282v1) -- Phi(Phi { merge_nid: ControlNID(40v1), values: [(ControlNID(37v1), DataNID(249v1))] })
  ControlNID(41v1) -- End { pred: ControlNID(40v1), ret: DataNID(282v1) }


ssa post-xform:
ssa program
  41 control nodes, 99 data nodes
  ControlNID(28v1) -- IfTrue(ControlNID(27v1))
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(24v1) -- Ancestral(AncestralName("R12"))
    DataNID(12v1) -- Ancestral(AncestralName("RSP"))
    DataNID(39v1) -- ArithK(Add, DataNID(12v1), -8)
  ControlNID(10v1) -- Store { pred: ControlNID(1v1), addr: DataNID(39v1), value: DataNID(24v1) }
    DataNID(11v1) -- Ancestral(AncestralName("RBP"))
    DataNID(46v1) -- ArithK(Add, DataNID(39v1), -8)
  ControlNID(11v1) -- Store { pred: ControlNID(10v1), addr: DataNID(46v1), value: DataNID(11v1) }
    DataNID(17v1) -- Ancestral(AncestralName("RBX"))
    DataNID(47v1) -- ArithK(Add, DataNID(46v1), -8)
  ControlNID(12v1) -- Store { pred: ControlNID(11v1), addr: DataNID(47v1), value: DataNID(17v1) }
    DataNID(56v1) -- ConstInt { size: ValueSize(8), value: 4198512 }
    DataNID(18v1) -- Ancestral(AncestralName("RCX"))
    DataNID(48v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(41v1) -- Part { src: DataNID(15v1), offset: 4, size: 4 }
    DataNID(40v1) -- ConstInt { size: ValueSize(4), value: 8 }
    DataNID(42v1) -- Concat { lo: DataNID(40v1), hi: DataNID(41v1) }
    DataNID(14v1) -- Ancestral(AncestralName("RDI"))
    DataNID(44v1) -- Part { src: DataNID(14v1), offset: 4, size: 4 }
    DataNID(43v1) -- ConstInt { size: ValueSize(4), value: 3 }
    DataNID(45v1) -- Concat { lo: DataNID(43v1), hi: DataNID(44v1) }
  ControlNID(13v1) -- Call { pred: ControlNID(12v1), callee: DataNID(56v1), args: [DataNID(45v1), DataNID(42v1), DataNID(49v1), DataNID(18v1)] }
    DataNID(57v1) -- ReturnValueOf(ControlNID(13v1))
    DataNID(68v1) -- Part { src: DataNID(57v1), offset: 0, size: 4 }
    DataNID(67v1) -- Part { src: DataNID(57v1), offset: 0, size: 4 }
    DataNID(69v1) -- Arith(BitAnd, DataNID(67v1), DataNID(68v1))
    DataNID(71v1) -- IsZero(DataNID(69v1))
    DataNID(76v1) -- Not(DataNID(71v1))
  ControlNID(14v1) -- Branch { pred: ControlNID(13v1), cond: DataNID(76v1) }
  ControlNID(16v1) -- IfFalse(ControlNID(14v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(16v1)] }
    DataNID(77v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(78v1) -- Arith(Add, DataNID(77v1), DataNID(49v1))
  ControlNID(17v1) -- Load { pred: ControlNID(2v1), addr: DataNID(78v1) }
    DataNID(102v1) -- ConstInt { size: ValueSize(8), value: 4198496 }
    DataNID(94v1) -- Part { src: DataNID(18v1), offset: 4, size: 4 }
    DataNID(93v1) -- ConstInt { size: ValueSize(4), value: 4096 }
    DataNID(95v1) -- Concat { lo: DataNID(93v1), hi: DataNID(94v1) }
    DataNID(97v1) -- Part { src: DataNID(49v1), offset: 4, size: 4 }
    DataNID(96v1) -- ConstInt { size: ValueSize(4), value: 8 }
    DataNID(98v1) -- Concat { lo: DataNID(96v1), hi: DataNID(97v1) }
    DataNID(100v1) -- Part { src: DataNID(42v1), offset: 4, size: 4 }
    DataNID(99v1) -- ConstInt { size: ValueSize(4), value: 4203184 }
    DataNID(101v1) -- Concat { lo: DataNID(99v1), hi: DataNID(100v1) }
    DataNID(79v1) -- LoadedValueOf(ControlNID(17v1))
  ControlNID(18v1) -- Call { pred: ControlNID(17v1), callee: DataNID(102v1), args: [DataNID(79v1), DataNID(101v1), DataNID(98v1), DataNID(95v1)] }
    DataNID(103v1) -- ReturnValueOf(ControlNID(18v1))
    DataNID(103v1) -- ReturnValueOf(ControlNID(18v1))
    DataNID(113v1) -- Arith(BitAnd, DataNID(103v1), DataNID(103v1))
    DataNID(115v1) -- IsZero(DataNID(113v1))
  ControlNID(19v1) -- Branch { pred: ControlNID(18v1), cond: DataNID(115v1) }
  ControlNID(21v1) -- IfFalse(ControlNID(19v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(21v1)] }
  ControlNID(4v1) -- Merge { preds: [ControlNID(3v1), ControlNID(28v1)] }
    DataNID(148v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(149v1) -- Arith(Add, DataNID(148v1), DataNID(49v1))
  ControlNID(24v1) -- Load { pred: ControlNID(4v1), addr: DataNID(149v1) }
    DataNID(137v1) -- Part { src: DataNID(17v1), offset: 4, size: 4 }
    DataNID(135v1) -- Part { src: DataNID(17v1), offset: 0, size: 4 }
    DataNID(134v1) -- Part { src: DataNID(17v1), offset: 0, size: 4 }
    DataNID(136v1) -- Arith(BitXor, DataNID(134v1), DataNID(135v1))
    DataNID(138v1) -- Concat { lo: DataNID(136v1), hi: DataNID(137v1) }
    DataNID(147v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(138v1))] })
    DataNID(154v1) -- ConstInt { size: ValueSize(1), value: 5 }
    DataNID(155v1) -- Widen { input: DataNID(154v1), out_size: ValueSize(8) }
    DataNID(156v1) -- Arith(Shl, DataNID(147v1), DataNID(155v1))
    DataNID(161v1) -- Arith(Sub, DataNID(156v1), DataNID(147v1))
    DataNID(178v1) -- ArithK(Mul, DataNID(161v1), 8)
    DataNID(150v1) -- LoadedValueOf(ControlNID(24v1))
    DataNID(176v1) -- ConstInt { size: ValueSize(8), value: 0 }
    DataNID(177v1) -- Arith(Add, DataNID(176v1), DataNID(150v1))
    DataNID(179v1) -- Arith(Add, DataNID(177v1), DataNID(178v1))
    DataNID(180v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(181v1) -- Arith(Add, DataNID(180v1), DataNID(179v1))
  ControlNID(25v1) -- Load { pred: ControlNID(24v1), addr: DataNID(181v1) }
    DataNID(198v1) -- ConstInt { size: ValueSize(8), value: 4198480 }
    DataNID(183v1) -- ConstInt { size: ValueSize(8), value: 74 }
    DataNID(184v1) -- Arith(Add, DataNID(183v1), DataNID(179v1))
    DataNID(185v1) -- ConstInt { size: ValueSize(8), value: 42 }
    DataNID(186v1) -- Arith(Add, DataNID(185v1), DataNID(179v1))
    DataNID(182v1) -- LoadedValueOf(ControlNID(25v1))
    DataNID(146v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(79v1))] })
    DataNID(152v1) -- Part { src: DataNID(146v1), offset: 4, size: 4 }
    DataNID(151v1) -- ConstInt { size: ValueSize(4), value: 4203193 }
    DataNID(153v1) -- Concat { lo: DataNID(151v1), hi: DataNID(152v1) }
  ControlNID(26v1) -- Call { pred: ControlNID(25v1), callee: DataNID(198v1), args: [DataNID(153v1), DataNID(182v1), DataNID(186v1), DataNID(184v1)] }
    DataNID(168v1) -- ConstInt { size: ValueSize(8), value: 1 }
    DataNID(169v1) -- Arith(Add, DataNID(147v1), DataNID(168v1))
    DataNID(145v1) -- Phi(Phi { merge_nid: ControlNID(4v1), values: [(ControlNID(3v1), DataNID(103v1))] })
    DataNID(209v1) -- Arith(Sub, DataNID(145v1), DataNID(169v1))
    DataNID(213v1) -- IsZero(DataNID(209v1))
    DataNID(216v1) -- Not(DataNID(213v1))
  ControlNID(27v1) -- Branch { pred: ControlNID(26v1), cond: DataNID(216v1) }
  ControlNID(30v1) -- IfFalse(ControlNID(27v1))
  ControlNID(29v1) -- Merge { preds: [ControlNID(29v1), ControlNID(30v1)] }
  ControlNID(5v1) -- Merge { preds: [ControlNID(29v1)] }
    DataNID(217v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(218v1) -- Arith(Add, DataNID(217v1), DataNID(49v1))
  ControlNID(31v1) -- Load { pred: ControlNID(5v1), addr: DataNID(218v1) }
    DataNID(220v1) -- ConstInt { size: ValueSize(8), value: 4198464 }
    DataNID(184v1) -- Arith(Add, DataNID(183v1), DataNID(179v1))
    DataNID(186v1) -- Arith(Add, DataNID(185v1), DataNID(179v1))
    DataNID(209v1) -- Arith(Sub, DataNID(145v1), DataNID(169v1))
    DataNID(219v1) -- LoadedValueOf(ControlNID(31v1))
  ControlNID(32v1) -- Call { pred: ControlNID(31v1), callee: DataNID(220v1), args: [DataNID(219v1), DataNID(209v1), DataNID(186v1), DataNID(184v1)] }
  ControlNID(20v1) -- IfTrue(ControlNID(19v1))
  ControlNID(8v1) -- Merge { preds: [ControlNID(20v1), ControlNID(21v1)] }
    DataNID(123v1) -- ConstInt { size: ValueSize(8), value: 4198448 }
    DataNID(121v1) -- Part { src: DataNID(79v1), offset: 4, size: 4 }
    DataNID(120v1) -- ConstInt { size: ValueSize(4), value: 4203208 }
    DataNID(122v1) -- Concat { lo: DataNID(120v1), hi: DataNID(121v1) }
  ControlNID(22v1) -- Call { pred: ControlNID(8v1), callee: DataNID(123v1), args: [DataNID(122v1), DataNID(101v1), DataNID(98v1), DataNID(95v1)] }
  ControlNID(23v1) -- Jump { pred: ControlNID(22v1) }
  ControlNID(23v1) -- Jump { pred: ControlNID(22v1) }
  ControlNID(6v1) -- Merge { preds: [ControlNID(23v1), ControlNID(23v1), ControlNID(32v1)] }
    DataNID(234v1) -- ConstInt { size: ValueSize(8), value: 4198528 }
    DataNID(232v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(95v1)), (ControlNID(32v1), DataNID(184v1))] })
    DataNID(233v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(98v1)), (ControlNID(32v1), DataNID(186v1))] })
    DataNID(231v1) -- Phi(Phi { merge_nid: ControlNID(6v1), values: [(ControlNID(23v1), DataNID(101v1)), (ControlNID(32v1), DataNID(209v1))] })
    DataNID(49v1) -- Arith(Sub, DataNID(47v1), DataNID(48v1))
  ControlNID(33v1) -- Call { pred: ControlNID(6v1), callee: DataNID(234v1), args: [DataNID(49v1), DataNID(231v1), DataNID(233v1), DataNID(232v1)] }
  ControlNID(7v1) -- Merge { preds: [ControlNID(33v1)] }
    DataNID(256v1) -- ConstInt { size: ValueSize(8), value: 16 }
    DataNID(257v1) -- Arith(Add, DataNID(49v1), DataNID(256v1))
  ControlNID(34v1) -- Load { pred: ControlNID(7v1), addr: DataNID(257v1) }
    DataNID(265v1) -- ArithK(Add, DataNID(257v1), 8)
  ControlNID(35v1) -- Load { pred: ControlNID(34v1), addr: DataNID(265v1) }
    DataNID(267v1) -- ArithK(Add, DataNID(265v1), 8)
  ControlNID(36v1) -- Load { pred: ControlNID(35v1), addr: DataNID(267v1) }
  ControlNID(39v1) -- Jump { pred: ControlNID(36v1) }
  ControlNID(15v1) -- IfTrue(ControlNID(14v1))
  ControlNID(9v1) -- Merge { preds: [ControlNID(15v1), ControlNID(16v1), ControlNID(37v1)] }
  ControlNID(38v1) -- Jump { pred: ControlNID(9v1) }
  ControlNID(37v1) -- Merge { preds: [ControlNID(38v1), ControlNID(39v1)] }
  ControlNID(40v1) -- Merge { preds: [ControlNID(37v1)] }
    DataNID(235v1) -- ReturnValueOf(ControlNID(33v1))
    DataNID(248v1) -- Part { src: DataNID(235v1), offset: 4, size: 4 }
    DataNID(246v1) -- Part { src: DataNID(235v1), offset: 0, size: 4 }
    DataNID(245v1) -- Part { src: DataNID(235v1), offset: 0, size: 4 }
    DataNID(247v1) -- Arith(BitXor, DataNID(245v1), DataNID(246v1))
    DataNID(249v1) -- Concat { lo: DataNID(247v1), hi: DataNID(248v1) }
    DataNID(282v1) -- Phi(Phi { merge_nid: ControlNID(40v1), values: [(ControlNID(37v1), DataNID(249v1))] })
  ControlNID(41v1) -- End { pred: ControlNID(40v1), ret: DataNID(282v1) }
