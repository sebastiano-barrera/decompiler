---
source: tests/test_tool.rs
expression: out
---
dwarf types --[[
TypeSet (363 types) = {
  <0> = "i8" i8
  <1> = "i32" i32
  <2> = "void" void
  <3> = "unknown42" ?
  <4> = "unknown54" ?
  <5> = "long unsigned int" u64
  <6> = "unsigned int" u32
  <7> = "unsigned char" u8
  <8> = "short unsigned int" u16
  <9> = "unknown87" ?
  <10> = "signed char" i8
  <11> = "unknown106" ?
  <12> = "unknown118" ?
  <13> = "short int" i16
  <14> = "unknown137" ?
  <15> = "unknown149" ?
  <16> = "int" i32
  <17> = "unknown168" ?
  <18> = "unknown180" ?
  <19> = "long int" i64
  <20> = "unknown199" ?
  <21> = "char" i8
  <22> = "unknown218" ?
  <23> = *unknown218 <22>
  <25> = "unknown228" ?
  <26> = "unknown240" ?
  <27> = "unknown252" ?
  <28> = "unknown264" ?
  <29> = "unknown276" ?
  <30> = "unknown288" ?
  <31> = "unknown293" ?
  <32> = "unknown305" ?
  <33> = "unknown317" ?
  <34> = "long long int" i64
  <35> = "long long unsigned int" u64
  <36> = "unknown343" ?
  <37> = "unknown359" ?
  <38> = "unknown371" ?
  <39> = "unknown508" ?
  <40> = "unknown520" ?
  <41> = "unknown914" ?
  <42> = *unknown288 <30>
  <44> = "unknown931" ?
  <45> = "unknown1013" ?
  <46> = "unknown1025" ?
  <47> = "unknown1137" ?
  <48> = "unknown1149" ?
  <49> = "unknown1267" ?
  <50> = "unknown1279" ?
  <51> = "unknown1349" ?
  <52> = "unknown1361" ?
  <53> = "unknown1395" ?
  <54> = "unknown1407" ?
  <55> = "unknown1441" ?
  <56> = "unknown1453" ?
  <57> = "unknown1499" ?
  <58> = "unknown1511" ?
  <59> = "unknown1785" ?
  <60> = "unknown1797" ?
  <61> = "unknown2528" ?
  <62> = "arm_op_mem" struct {
             @  0 base unknown2528 <61>
             @  4 index unknown2528 <61>
             @  8 scale int <16>
             @ 12 disp int <16>
             @ 16 lshift int <16>
         }
  <68> = "unknown2624" ?
  <69> = struct {
             @  0 type unknown1013 <45>
             @  4 value unsigned int <6>
         }
  <72> = "unknown2674" ?
  <73> = "double" float64
  <74> = "cs_arm_op" struct {
             @  0 vector_index int <16>
             @  4 shift struct {
                 @  0 type unknown1013 <45>
                 @  4 value unsigned int <6>
             }
             @ 12 type unknown1349 <51>
             @ 16  unknown2674 <72>
             @ 40 subtracted _Bool <79>
             @ 41 access unknown276 <29>
             @ 42 neon_lane unknown228 <25>
         }
  <79> = "_Bool" bool8
  <83> = "unknown2867" ?
  <84> = "cs_arm" struct {
             @  0 usermode _Bool <79>
             @  4 vector_size int <16>
             @  8 vector_data unknown1785 <59>
             @ 12 cps_mode unknown1441 <55>
             @ 16 cps_flag unknown1499 <57>
             @ 20 cc unknown1137 <47>
             @ 24 update_flags _Bool <79>
             @ 25 writeback _Bool <79>
             @ 26 post_index _Bool <79>
             @ 28 mem_barrier unknown1267 <49>
             @ 32 op_count unknown276 <29>
         }
  <96> = "unknown3061" ?
  <98> = "unknown3077" ?
  <99> = "unknown3089" ?
  <100> = "unknown3141" ?
  <101> = "unknown3153" ?
  <102> = "unknown3223" ?
  <103> = "unknown3235" ?
  <104> = "unknown3353" ?
  <105> = "unknown3365" ?
  <106> = "unknown3424" ?
  <107> = "unknown3436" ?
  <108> = "unknown3543" ?
  <109> = "unknown3555" ?
  <110> = "unknown3650" ?
  <111> = "unknown3662" ?
  <112> = "unknown3763" ?
  <113> = "unknown3775" ?
  <114> = "unknown5052" ?
  <115> = "unknown5064" ?
  <116> = "unknown5105" ?
  <117> = "unknown5117" ?
  <118> = "unknown5248" ?
  <119> = "unknown5260" ?
  <120> = "unknown7446" ?
  <121> = "arm64_op_mem" struct {
              @  0 base unknown7446 <120>
              @  4 index unknown7446 <120>
              @  8 disp unknown252 <27>
          }
  <125> = "unknown7514" ?
  <126> = "arm64_op_sme_index" struct {
              @  0 reg unknown7446 <120>
              @  4 base unknown7446 <120>
              @  8 disp unknown252 <27>
          }
  <130> = "unknown7582" ?
  <131> = struct {
              @  0 type unknown3141 <100>
              @  4 value unsigned int <6>
          }
  <134> = "unknown7632" ?
  <135> = "cs_arm64_op" struct {
              @  0 vector_index int <16>
              @  4 vas unknown3543 <108>
              @  8 shift struct {
                  @  0 type unknown3141 <100>
                  @  4 value unsigned int <6>
              }
              @ 16 ext unknown3223 <102>
              @ 20 type unknown3763 <112>
              @ 24 svcr unknown5105 <116>
              @ 32  unknown7632 <134>
              @ 48 access unknown276 <29>
          }
  <144> = "unknown7877" ?
  <145> = "cs_arm64" struct {
              @  0 cc unknown3353 <104>
              @  4 update_flags _Bool <79>
              @  5 writeback _Bool <79>
              @  6 post_index _Bool <79>
              @  7 op_count unknown276 <29>
          }
  <151> = "unknown7987" ?
  <153> = "unknown8003" ?
  <154> = "unknown8015" ?
  <155> = "unknown8319" ?
  <156> = "unknown8331" ?
  <157> = "unknown8467" ?
  <158> = "unknown8479" ?
  <159> = "unknown8549" ?
  <160> = "m68k_op_mem" struct {
              @  0 base_reg unknown8319 <155>
              @  4 index_reg unknown8319 <155>
              @  8 in_base_reg unknown8319 <155>
              @ 12 in_disp unknown305 <32>
              @ 16 out_disp unknown305 <32>
              @ 20 disp unknown240 <26>
              @ 22 scale unknown276 <29>
              @ 23 bitfield unknown276 <29>
              @ 24 width unknown276 <29>
              @ 25 offset unknown276 <29>
              @ 26 index_size unknown276 <29>
          }
  <172> = "unknown8717" ?
  <173> = "m68k_op_br_disp" struct {
              @  0 disp unknown252 <27>
              @  4 disp_size unknown276 <29>
          }
  <176> = "unknown8768" ?
  <177> = "cs_m68k_op_reg_pair" struct {
              @  0 reg_0 unknown8319 <155>
              @  4 reg_1 unknown8319 <155>
          }
  <180> = "unknown8819" ?
  <181> = "unknown8831" ?
  <182> = "float" float32
  <183> = "cs_m68k_op" struct {
              @  0  unknown8831 <181>
              @  8 mem unknown8717 <172>
              @ 36 br_disp unknown8768 <176>
              @ 44 register_bits unknown305 <32>
              @ 48 type unknown8549 <159>
              @ 52 address_mode unknown8467 <157>
          }
  <190> = "unknown8991" ?
  <191> = "unknown9003" ?
  <192> = "unknown9043" ?
  <193> = "unknown9055" ?
  <194> = "unknown9095" ?
  <195> = "unknown9107" ?
  <196> = "unknown9141" ?
  <197> = "unknown9153" ?
  <198> = "m68k_op_size" struct {
              @  0 type unknown9141 <196>
              @  4  unknown9153 <197>
          }
  <201> = "unknown9218" ?
  <202> = "cs_m68k" struct {
              @224 op_size unknown9218 <201>
              @232 op_count unknown276 <29>
          }
  <203> = "unknown9282" ?
  <207> = "unknown9298" ?
  <208> = "unknown9310" ?
  <209> = "unknown9350" ?
  <210> = "unknown9362" ?
  <211> = "unknown10452" ?
  <212> = "mips_op_mem" struct {
              @  0 base unknown10452 <211>
              @  8 disp unknown264 <28>
          }
  <215> = "unknown10503" ?
  <216> = "unknown10515" ?
  <217> = "cs_mips_op" struct {
              @  0 type unknown9350 <209>
              @  8  unknown10515 <216>
          }
  <220> = "unknown10592" ?
  <221> = "cs_mips" struct {
              @  0 op_count unknown276 <29>
          }
  <223> = "unknown10643" ?
  <225> = "unknown10659" ?
  <226> = "unknown10671" ?
  <227> = "unknown10753" ?
  <228> = "unknown10765" ?
  <229> = "unknown10799" ?
  <230> = "unknown10811" ?
  <231> = "unknown10857" ?
  <232> = "unknown10869" ?
  <233> = "unknown12399" ?
  <234> = "ppc_op_mem" struct {
              @  0 base unknown12399 <233>
              @  4 disp unknown252 <27>
          }
  <237> = "unknown12453" ?
  <238> = "ppc_op_crx" struct {
              @  0 scale unsigned int <6>
              @  4 reg unknown12399 <233>
              @  8 cond unknown10753 <227>
          }
  <242> = "unknown12521" ?
  <243> = "unknown12533" ?
  <244> = "cs_ppc_op" struct {
              @  0 type unknown10857 <231>
              @  8  unknown12533 <243>
          }
  <247> = "unknown12630" ?
  <248> = "cs_ppc" struct {
              @  0 bc unknown10753 <227>
              @  4 bh unknown10799 <229>
              @  8 update_cr0 _Bool <79>
              @  9 op_count unknown276 <29>
          }
  <253> = "unknown12724" ?
  <255> = "unknown12740" ?
  <256> = "unknown12752" ?
  <257> = "unknown12998" ?
  <258> = "unknown13010" ?
  <259> = "unknown13050" ?
  <260> = "unknown13062" ?
  <261> = "unknown13102" ?
  <262> = "unknown13114" ?
  <263> = "unknown13676" ?
  <264> = "sparc_op_mem" struct {
              @  0 base unknown276 <29>
              @  1 index unknown276 <29>
              @  4 disp unknown252 <27>
          }
  <268> = "unknown13740" ?
  <269> = "unknown13752" ?
  <270> = "cs_sparc_op" struct {
              @  0 type unknown13102 <261>
              @  8  unknown13752 <269>
          }
  <273> = "unknown13829" ?
  <274> = "cs_sparc" struct {
              @  0 cc unknown12998 <257>
              @  4 hint unknown13050 <259>
              @  8 op_count unknown276 <29>
          }
  <278> = "unknown13905" ?
  <280> = "unknown13921" ?
  <281> = "unknown13933" ?
  <282> = "unknown14039" ?
  <283> = "unknown14051" ?
  <284> = "unknown14097" ?
  <285> = "unknown14109" ?
  <286> = "unknown14833" ?
  <287> = "sysz_op_mem" struct {
              @  0 base unknown276 <29>
              @  1 index unknown276 <29>
              @  8 length unknown317 <33>
              @ 16 disp unknown264 <28>
          }
  <292> = "unknown14910" ?
  <293> = "unknown14922" ?
  <294> = "cs_sysz_op" struct {
              @  0 type unknown14097 <284>
              @  8  unknown14922 <293>
          }
  <297> = "unknown14999" ?
  <298> = "cs_sysz" struct {
              @  0 cc unknown14039 <282>
              @  4 op_count unknown276 <29>
          }
  <301> = "unknown15062" ?
  <303> = "unknown15078" ?
  <304> = "unknown15090" ?
  <305> = "unknown16588" ?
  <306> = "unknown16600" ?
  <307> = "unknown16640" ?
  <308> = "unknown16652" ?
  <309> = "unknown16722" ?
  <310> = "unknown16734" ?
  <311> = "unknown16780" ?
  <312> = "unknown16792" ?
  <313> = "unknown16862" ?
  <314> = "unknown16874" ?
  <315> = "unknown17088" ?
  <316> = "unknown17100" ?
  <317> = "unknown17146" ?
  <318> = "x86_op_mem" struct {
              @  0 segment unknown16588 <305>
              @  4 base unknown16588 <305>
              @  8 index unknown16588 <305>
              @ 12 scale int <16>
              @ 16 disp unknown264 <28>
          }
  <324> = "unknown17242" ?
  <325> = "unknown17254" ?
  <326> = "cs_x86_op" struct {
              @  0 type unknown16640 <307>
              @  8  unknown17254 <325>
              @ 32 size unknown276 <29>
              @ 33 access unknown276 <29>
              @ 36 avx_bcast unknown16780 <311>
              @ 40 avx_zero_opmask _Bool <79>
          }
  <333> = "unknown17394" ?
  <334> = "cs_x86_encoding" struct {
              @  0 modrm_offset unknown276 <29>
              @  1 disp_offset unknown276 <29>
              @  2 disp_size unknown276 <29>
              @  3 imm_offset unknown276 <29>
              @  4 imm_size unknown276 <29>
          }
  <340> = "unknown17490" ?
  <341> = "unknown17502" ?
  <342> = "cs_x86" struct {
              @  4 opcode unknown17813 <343>
              @  8 rex unknown276 <29>
              @  9 addr_size unknown276 <29>
              @ 10 modrm unknown276 <29>
              @ 11 sib unknown276 <29>
              @ 16 disp unknown264 <28>
              @ 24 sib_index unknown16588 <305>
              @ 28 sib_scale unknown228 <25>
              @ 32 sib_base unknown16588 <305>
              @ 36 xop_cc unknown16722 <309>
              @ 40 sse_cc unknown16862 <313>
              @ 44 avx_cc unknown17088 <315>
              @ 48 avx_sae _Bool <79>
              @ 52 avx_rm unknown17146 <317>
              @ 56  unknown17502 <341>
              @ 64 op_count unknown276 <29>
              @456 encoding unknown17490 <340>
          }
  <343> = "unknown17813" ?
  <360> = "unknown17829" ?
  <364> = "unknown17845" ?
  <365> = "unknown17857" ?
  <366> = "unknown17897" ?
  <367> = "unknown17909" ?
  <368> = "unknown18087" ?
  <369> = "xcore_op_mem" struct {
              @  0 base unknown276 <29>
              @  1 index unknown276 <29>
              @  4 disp unknown252 <27>
              @  8 direct int <16>
          }
  <374> = "unknown18164" ?
  <375> = "unknown18176" ?
  <376> = "cs_xcore_op" struct {
              @  0 type unknown17897 <366>
              @  4  unknown18176 <375>
          }
  <379> = "unknown18253" ?
  <380> = "cs_xcore" struct {
              @  0 op_count unknown276 <29>
          }
  <382> = "unknown18304" ?
  <384> = "unknown18320" ?
  <385> = "unknown18332" ?
  <386> = "unknown18378" ?
  <387> = "tms320c64x_op_mem" struct {
              @  0 base unsigned int <6>
              @  4 disp unsigned int <6>
              @  8 unit unsigned int <6>
              @ 12 scaled unsigned int <6>
              @ 16 disptype unsigned int <6>
              @ 20 direction unsigned int <6>
              @ 24 modify unsigned int <6>
          }
  <395> = "unknown18494" ?
  <396> = "unknown18506" ?
  <397> = "cs_tms320c64x_op" struct {
              @  0 type unknown18378 <386>
              @  4  unknown18506 <396>
          }
  <400> = "unknown18583" ?
  <401> = struct {
              @  0 reg unsigned int <6>
              @  4 zero unsigned int <6>
          }
  <404> = struct {
              @  0 unit unsigned int <6>
              @  4 side unsigned int <6>
              @  8 crosspath unsigned int <6>
          }
  <408> = "cs_tms320c64x" struct {
              @  0 op_count unknown276 <29>
              @260 condition struct {
                  @  0 reg unsigned int <6>
                  @  4 zero unsigned int <6>
              }
              @268 funit struct {
                  @  0 unit unsigned int <6>
                  @  4 side unsigned int <6>
                  @  8 crosspath unsigned int <6>
              }
              @280 parallel unsigned int <6>
          }
  <410> = "unknown18756" ?
  <415> = "unknown18772" ?
  <416> = "unknown18784" ?
  <417> = "unknown18938" ?
  <418> = "unknown18950" ?
  <419> = "unknown19014" ?
  <420> = "m680x_op_idx" struct {
              @  0 base_reg unknown18938 <417>
              @  4 offset_reg unknown18938 <417>
              @  8 offset unknown240 <26>
              @ 10 offset_addr unknown293 <31>
              @ 12 offset_bits unknown276 <29>
              @ 13 inc_dec unknown228 <25>
              @ 14 flags unknown276 <29>
          }
  <428> = "unknown19130" ?
  <429> = "m680x_op_rel" struct {
              @  0 address unknown293 <31>
              @  2 offset unknown240 <26>
          }
  <432> = "unknown19181" ?
  <433> = "m680x_op_ext" struct {
              @  0 address unknown293 <31>
              @  2 indirect _Bool <79>
          }
  <436> = "unknown19232" ?
  <437> = "unknown19244" ?
  <438> = "cs_m680x_op" struct {
              @  0 type unknown19014 <419>
              @  4  unknown19244 <437>
              @ 20 size unknown276 <29>
              @ 21 access unknown276 <29>
          }
  <443> = "unknown19395" ?
  <444> = "cs_m680x" struct {
              @  0 flags unknown276 <29>
              @  1 op_count unknown276 <29>
          }
  <447> = "unknown19459" ?
  <449> = "unknown19475" ?
  <450> = "cs_evm" struct {
              @  0 pop unsigned char <7>
              @  1 push unsigned char <7>
              @  4 fee unsigned int <6>
          }
  <454> = "unknown19539" ?
  <455> = "unknown19551" ?
  <456> = "unknown19591" ?
  <457> = "riscv_op_mem" struct {
              @  0 base unsigned int <6>
              @  8 disp unknown264 <28>
          }
  <460> = "unknown19642" ?
  <461> = "unknown19654" ?
  <462> = "cs_riscv_op" struct {
              @  0 type unknown19591 <456>
              @  8  unknown19654 <461>
          }
  <465> = "unknown19731" ?
  <466> = "cs_riscv" struct {
              @  0 need_effective_addr _Bool <79>
              @  1 op_count unknown276 <29>
          }
  <469> = "unknown19795" ?
  <471> = "unknown19811" ?
  <472> = "unknown19823" ?
  <473> = "unknown19893" ?
  <474> = "cs_wasm_brtable" struct {
              @  0 length unknown305 <32>
              @  8 address unknown317 <33>
              @ 16 default_target unknown305 <32>
          }
  <478> = "unknown19957" ?
  <479> = "unknown19969" ?
  <480> = "unknown20062" ?
  <481> = "cs_wasm_op" struct {
              @  0 type unknown19893 <473>
              @  4 size unknown305 <32>
              @  8  unknown19969 <479>
          }
  <485> = "unknown20123" ?
  <486> = "cs_wasm" struct {
              @  0 op_count unknown276 <29>
          }
  <488> = "unknown20174" ?
  <490> = "unknown20190" ?
  <491> = "unknown20202" ?
  <492> = "unknown20278" ?
  <493> = "unknown20290" ?
  <494> = "unknown20462" ?
  <495> = "unknown20474" ?
  <496> = "unknown20514" ?
  <497> = "unknown20526" ?
  <498> = "cs_mos65xx_op" struct {
              @  0 type unknown20514 <496>
              @  4  unknown20526 <497>
          }
  <501> = "unknown20603" ?
  <502> = "cs_mos65xx" struct {
              @  0 am unknown20462 <494>
              @  4 modifies_flags _Bool <79>
              @  5 op_count unknown276 <29>
          }
  <506> = "unknown20679" ?
  <508> = "unknown20695" ?
  <509> = "unknown20707" ?
  <510> = "unknown20771" ?
  <511> = "unknown20783" ?
  <512> = "unknown20889" ?
  <513> = "bpf_op_mem" struct {
              @  0 base unknown20889 <512>
              @  4 disp unknown305 <32>
          }
  <516> = "unknown20940" ?
  <517> = "unknown20952" ?
  <518> = "cs_bpf_op" struct {
              @  0 type unknown20771 <510>
              @  8  unknown20952 <517>
              @ 16 access unknown276 <29>
          }
  <522> = "unknown21090" ?
  <523> = "cs_bpf" struct {
              @  0 op_count unknown276 <29>
          }
  <525> = "unknown21141" ?
  <527> = "unknown21157" ?
  <528> = "unknown21169" ?
  <529> = "unknown21918" ?
  <530> = "unknown21930" ?
  <531> = "unknown21965" ?
  <532> = "unknown21977" ?
  <533> = "unknown22048" ?
  <534> = "sh_op_mem" struct {
              @  0 address unknown22048 <533>
              @  4 reg unknown21918 <529>
              @  8 disp unknown305 <32>
          }
  <538> = "unknown22112" ?
  <539> = "unknown22124" ?
  <540> = "unknown22320" ?
  <541> = "unknown22332" ?
  <542> = "unknown22390" ?
  <543> = "unknown22402" ?
  <544> = "unknown22442" ?
  <545> = "sh_op_dsp" struct {
              @  0 insn unknown22320 <540>
              @ 36 cc unknown22442 <544>
              @ 40 imm unknown276 <29>
              @ 44 size int <16>
          }
  <547> = "unknown22542" ?
  <548> = "unknown22558" ?
  <554> = "unknown22574" ?
  <555> = "unknown22586" ?
  <556> = "cs_sh_op" struct {
              @  0 type unknown21965 <531>
              @  8  unknown22586 <555>
          }
  <559> = "unknown22681" ?
  <560> = "unknown22693" ?
  <561> = "unknown23670" ?
  <562> = "cs_sh" struct {
              @  0 insn unknown23670 <561>
              @  4 size unknown276 <29>
              @  5 op_count unknown276 <29>
          }
  <566> = "unknown23752" ?
  <568> = "unknown23768" ?
  <569> = "unknown23780" ?
  <570> = "unknown23820" ?
  <571> = "tricore_op_mem" struct {
              @  0 base unknown276 <29>
              @  4 disp unknown252 <27>
          }
  <574> = "unknown23871" ?
  <575> = "unknown23883" ?
  <576> = "cs_tricore_op" struct {
              @  0 type unknown23820 <570>
              @  4  unknown23883 <575>
              @ 12 access unknown276 <29>
          }
  <580> = "unknown23973" ?
  <581> = "cs_tricore" struct {
              @  0 op_count unknown276 <29>
              @132 update_flags _Bool <79>
          }
  <583> = "unknown24037" ?
  <586> = "unknown24053" ?
  <587> = "unknown24065" ?
  <588> = "cs_detail" struct {
              @ 40 regs_read_count unknown276 <29>
              @ 42 regs_write unknown24429 <589>
              @ 82 regs_write_count unknown276 <29>
              @ 91 groups_count unknown276 <29>
              @ 92 writeback _Bool <79>
              @ 96  unknown24065 <587>
          }
  <589> = "unknown24429" ?
  <593> = "unknown24445" ?
  <599> = "unknown24461" ?
  <600> = "cs_insn" struct {
              @  0 id unsigned int <6>
              @  8 address unknown317 <33>
              @ 16 size unknown293 <31>
              @ 42 mnemonic unknown343 <36>
              @240 detail *unknown24461 <599>
          }
  <604> = "unknown24584" ?
  <606> = "unknown24600" ?
  <607> = *unknown24461 <599>
  <612> = "unknown24621" ?
  <613> = "unknown24633" ?
  <614> = "unknown24740" ?
  <615> = "cs_close" func (<unnamed> *unknown359 <37>) unknown24740 <614>
  <617> = *unknown359 <37>
  <620> = "cs_free" func (<unnamed> *unknown24621 <612>,
                          <unnamed> unknown42 <3>) void <2>
  <621> = *unknown24621 <612>
  <625> = "printf" func (<unnamed> *unknown218 <22>) int <16>
  <628> = "cs_disasm" func (<unnamed> unknown359 <37>,
                            <unnamed> *unknown288 <30>,
                            <unnamed> unknown42 <3>,
                            <unnamed> unknown317 <33>,
                            <unnamed> unknown42 <3>,
                            <unnamed> **unknown24621 <612>) unknown42 <3>
  <635> = **unknown24621 <612>
  <638> = "cs_open" func (<unnamed> unknown508 <39>,
                          <unnamed> unknown914 <41>,
                          <unnamed> *unknown359 <37>) unknown24740 <614>
  <643> = "main" func () int <16>
  <645> = "__builtin_puts" func () void <2>
}

24 non-fatal errors:
offset 0x     be6: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    1f24: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    241a: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    2985: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    31a5: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    3643: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    3ac8: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4491: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4577: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4772: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    490f: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4bf5: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4d45: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    4ec0: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    50b9: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5287: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    57cf: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    57dc: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5cb9: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5dca: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5f04: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5f3c: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5fcf: unsupported DWARF entry tag: DW_TAG_array_type
offset 0x    5feb: unsupported DWARF entry tag: DW_TAG_array_type
]]--
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

mil program = 
program  305 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- undef
   28 r29 <- undef
   29 r30 <- undef
   30 r31 <- undef
   31 r32 <- undef
   32 r33 <- undef
   33 r34 <- undef
0x401090:
   34 r12 <- addk     r12,-8 qword
   35 r29 <- store    *r12 ← r24
0x401092:
   36 r28 <- const4   8 (0x8)
   37 r15 <- v8.l4=   r15 ← r28
0x401097:
   38 r28 <- const4   3 (0x3)
   39 r14 <- v8.l4=   r14 ← r28
0x40109c:
   40 r12 <- addk     r12,-8 qword
   41 r29 <- store    *r12 ← r11
0x40109d:
   42 r12 <- addk     r12,-8 qword
   43 r29 <- store    *r12 ← r17
0x40109e:
   44 r29 <- const8   16 (0x10)
   45 r12 <- sub      r12,r29  qword
   46 r12 <- get      r12
   47 r10 <- overflow r12
   48 r2 <- carry    r12
   49 r6 <- sign     r12
   50 r5 <- is0      r12
   51 r30 <- l1       r12
   52 r3 <- parity   r30
0x4010a2:
   53 r19 <- get      r12
0x4010a5:
   54 r28 <- const8   4198512 (0x401070)
   55 r16 <- call     r28
   56 r29 <- carg     r14
   57 r30 <- carg     r15
   58 r31 <- carg     r19
   59 r32 <- carg     r18
   60 r2 <- undef
   61 r3 <- undef
   62 r4 <- undef
   63 r5 <- undef
   64 r6 <- undef
   65 r7 <- undef
   66 r8 <- undef
   67 r9 <- undef
   68 r10 <- undef
0x4010aa:
   69 r28 <- l4       r16
   70 r29 <- l4       r16
   71 r28 <- and      r28,r29  dword
   72 r6 <- sign     r28
   73 r5 <- is0      r28
   74 r30 <- l1       r28
   75 r3 <- parity   r28
   76 r2 <- const1   0 (0x0)
   77 r10 <- const1   0 (0x0)
0x4010ac:
   78 r28 <- not      r5
   79 r29 <- jmp.if   r28,303
0x4010b2:
   80 r29 <- const8   0 (0x0)
   81 r29 <- add      r29,r12  qword
   82 r28 <- loadm8   addr:r29
   83 r14 <- get      r28
0x4010b6:
   84 r28 <- const8   8 (0x8)
   85 r28 <- add      r28,r12  qword
   86 r21 <- get      r28
0x4010bb:
   87 r28 <- l4       r20
   88 r29 <- l4       r20
   89 r28 <- xor      r28,r29  dword
   90 r20 <- v8.l4=   r20 ← r28
   91 r10 <- false
   92 r2 <- false
   93 r6 <- sign     r28
   94 r5 <- is0      r28
   95 r30 <- l1       r28
   96 r3 <- parity   r30
0x4010be:
   97 r24 <- get      r12
0x4010c1:
   98 r28 <- const4   4096 (0x1000)
   99 r18 <- v8.l4=   r18 ← r28
0x4010c6:
  100 r28 <- const4   8 (0x8)
  101 r19 <- v8.l4=   r19 ← r28
0x4010cb:
  102 r28 <- const4   4203184 (0x4022b0)
  103 r15 <- v8.l4=   r15 ← r28
0x4010d0:
  104 r28 <- const8   4198496 (0x401060)
  105 r16 <- call     r28
  106 r29 <- carg     r14
  107 r30 <- carg     r15
  108 r31 <- carg     r19
  109 r32 <- carg     r18
  110 r2 <- undef
  111 r3 <- undef
  112 r4 <- undef
  113 r5 <- undef
  114 r6 <- undef
  115 r7 <- undef
  116 r8 <- undef
  117 r9 <- undef
  118 r10 <- undef
0x4010d5:
  119 r11 <- get      r16
0x4010d8:
  120 r16 <- and      r16,r16  qword
  121 r6 <- sign     r16
  122 r5 <- is0      r16
  123 r30 <- l1       r16
  124 r3 <- parity   r16
  125 r2 <- const1   0 (0x0)
  126 r10 <- const1   0 (0x0)
0x4010db:
  127 r28 <- jmp.if   r5,285
0x4010dd:
  128 r28 <- l4       r17
  129 r29 <- l4       r17
  130 r28 <- xor      r28,r29  dword
  131 r17 <- v8.l4=   r17 ← r28
  132 r10 <- false
  133 r2 <- false
  134 r6 <- sign     r28
  135 r5 <- is0      r28
  136 r30 <- l1       r28
  137 r3 <- parity   r30
0x4010df:
  138 r28 <- TODO     unsupported: nop
0x4010e0:
  139 r16 <- get      r17
0x4010e3:
  140 r29 <- const8   8 (0x8)
  141 r29 <- add      r29,r12  qword
  142 r28 <- loadm8   addr:r29
  143 r19 <- get      r28
0x4010e8:
  144 r28 <- const4   4203193 (0x4022b9)
  145 r14 <- v8.l4=   r14 ← r28
0x4010ed:
  146 r29 <- const1   5 (0x5)
  147 r29 <- widen    1->8 r29
  148 r16 <- shl      r16,r29  qword
  149 r16 <- get      r16
  150 r6 <- sign     r16
  151 r5 <- is0      r16
  152 r30 <- l1       r16
  153 r3 <- parity   r30
0x4010f1:
  154 r16 <- sub      r16,r17  qword
  155 r16 <- get      r16
  156 r10 <- overflow r16
  157 r2 <- carry    r16
  158 r6 <- sign     r16
  159 r5 <- is0      r16
  160 r30 <- l1       r16
  161 r3 <- parity   r30
0x4010f4:
  162 r29 <- const8   1 (0x1)
  163 r17 <- add      r17,r29  qword
  164 r17 <- get      r17
  165 r10 <- overflow r17
  166 r2 <- carry    r17
  167 r6 <- sign     r17
  168 r5 <- is0      r17
  169 r30 <- l1       r17
  170 r3 <- parity   r30
0x4010f8:
  171 r28 <- const8   0 (0x0)
  172 r28 <- add      r28,r19  qword
  173 r29 <- mulk     r16,8 qword
  174 r28 <- add      r28,r29  qword
  175 r16 <- get      r28
0x4010fc:
  176 r29 <- const8   8 (0x8)
  177 r29 <- add      r29,r16  qword
  178 r28 <- loadm8   addr:r29
  179 r15 <- get      r28
0x401100:
  180 r28 <- const8   74 (0x4a)
  181 r28 <- add      r28,r16  qword
  182 r18 <- get      r28
0x401104:
  183 r28 <- const8   42 (0x2a)
  184 r28 <- add      r28,r16  qword
  185 r19 <- get      r28
0x401108:
  186 r28 <- l4       r16
  187 r29 <- l4       r16
  188 r28 <- xor      r28,r29  dword
  189 r16 <- v8.l4=   r16 ← r28
  190 r10 <- false
  191 r2 <- false
  192 r6 <- sign     r28
  193 r5 <- is0      r28
  194 r30 <- l1       r28
  195 r3 <- parity   r30
0x40110a:
  196 r28 <- const8   4198480 (0x401050)
  197 r16 <- call     r28
  198 r29 <- carg     r14
  199 r30 <- carg     r15
  200 r31 <- carg     r19
  201 r32 <- carg     r18
  202 r2 <- undef
  203 r3 <- undef
  204 r4 <- undef
  205 r5 <- undef
  206 r6 <- undef
  207 r7 <- undef
  208 r8 <- undef
  209 r9 <- undef
  210 r10 <- undef
0x40110f:
  211 r11 <- sub      r11,r17  qword
  212 r10 <- overflow r11
  213 r2 <- carry    r11
  214 r6 <- sign     r11
  215 r5 <- is0      r11
  216 r30 <- l1       r11
  217 r3 <- parity   r30
0x401112:
  218 r28 <- not      r5
  219 r29 <- jmp.if   r28,139
0x401114:
  220 r29 <- const8   8 (0x8)
  221 r29 <- add      r29,r12  qword
  222 r28 <- loadm8   addr:r29
  223 r14 <- get      r28
0x401119:
  224 r15 <- get      r11
0x40111c:
  225 r28 <- const8   4198464 (0x401040)
  226 r16 <- call     r28
  227 r29 <- carg     r14
  228 r30 <- carg     r15
  229 r31 <- carg     r19
  230 r32 <- carg     r18
  231 r2 <- undef
  232 r3 <- undef
  233 r4 <- undef
  234 r5 <- undef
  235 r6 <- undef
  236 r7 <- undef
  237 r8 <- undef
  238 r9 <- undef
  239 r10 <- undef
0x401121:
  240 r14 <- get      r24
0x401124:
  241 r28 <- const8   4198528 (0x401080)
  242 r16 <- call     r28
  243 r29 <- carg     r14
  244 r30 <- carg     r15
  245 r31 <- carg     r19
  246 r32 <- carg     r18
  247 r2 <- undef
  248 r3 <- undef
  249 r4 <- undef
  250 r5 <- undef
  251 r6 <- undef
  252 r7 <- undef
  253 r8 <- undef
  254 r9 <- undef
  255 r10 <- undef
0x401129:
  256 r28 <- l4       r16
  257 r29 <- l4       r16
  258 r28 <- xor      r28,r29  dword
  259 r16 <- v8.l4=   r16 ← r28
  260 r10 <- false
  261 r2 <- false
  262 r6 <- sign     r28
  263 r5 <- is0      r28
  264 r30 <- l1       r28
  265 r3 <- parity   r30
0x40112b:
  266 r29 <- const8   16 (0x10)
  267 r12 <- add      r12,r29  qword
  268 r12 <- get      r12
  269 r10 <- overflow r12
  270 r2 <- carry    r12
  271 r6 <- sign     r12
  272 r5 <- is0      r12
  273 r30 <- l1       r12
  274 r3 <- parity   r30
0x40112f:
  275 r28 <- loadm8   addr:r12
  276 r17 <- get      r28
  277 r12 <- addk     r12,8 qword
0x401130:
  278 r28 <- loadm8   addr:r12
  279 r11 <- get      r28
  280 r12 <- addk     r12,8 qword
0x401131:
  281 r28 <- loadm8   addr:r12
  282 r24 <- get      r28
  283 r12 <- addk     r12,8 qword
0x401133:
  284 r28 <- ret      r16
0x401134:
  285 r28 <- const4   4203208 (0x4022c8)
  286 r14 <- v8.l4=   r14 ← r28
0x401139:
  287 r28 <- const8   4198448 (0x401030)
  288 r16 <- call     r28
  289 r29 <- carg     r14
  290 r30 <- carg     r15
  291 r31 <- carg     r19
  292 r32 <- carg     r18
  293 r2 <- undef
  294 r3 <- undef
  295 r4 <- undef
  296 r5 <- undef
  297 r6 <- undef
  298 r7 <- undef
  299 r8 <- undef
  300 r9 <- undef
  301 r10 <- undef
0x40113e:
  302 r28 <- jmp      240
0x401140:
  303 r28 <- TODO     unsupported: or eax,0FFFFFFFFh
0x401143:
  304 r28 <- jmp      266


ssa program  100 instrs
.B0:  in[]     ;; 0x0  80 insn 0 phis
         r10 <- #pre:RBP
  (  3)  r11 <- #pre:RSP
         r13 <- #pre:RDI
  (  2)  r14 <- #pre:RSI
  (  4)  r16 <- #pre:RBX
  (  2)  r17 <- #pre:RCX
         r23 <- #pre:R12
         r34 <- addk     r11,-8 qword
         r35 <- store    *r34 ← r23
         r36 <- const4   8 (0x8)
         r37 <- v8.l4=   r14 ← r36
         r38 <- const4   3 (0x3)
         r39 <- v8.l4=   r13 ← r38
         r40 <- addk     r11,-16 qword
         r41 <- store    *r40 ← r10
  (  3)  r42 <- addk     r11,-24 qword
         r43 <- store    *r42 ← r16
  (  2)  r44 <- const8   16 (0x10)
  (  5)  r45 <- sub      r42,r44  qword
         r54 <- const8   4198512 (0x401070)
  (  3)  r55 <- call     r54
         r56 <- carg     r39
         r57 <- carg     r37
         r58 <- carg     r45
         r59 <- carg     r17
         r71 <- and      r55,r55  dword
         r73 <- is0      r71
         r78 <- not      r73
         r79 <- jmp.if   r78,303
.B1:  in[.B0 ]     ;; 0x4010b2  48 insn 0 phis
         r81 <- sub      r42,r44  qword
  (  3)  r82 <- loadm8   addr:r81
         r98 <- const4   4096 (0x1000)
  (  3)  r99 <- v8.l4=   r17 ← r98
         r100 <- const4   8 (0x8)
  (  3)  r101 <- v8.l4=   r45 ← r100
         r102 <- const4   4203184 (0x4022b0)
  (  3)  r103 <- v8.l4=   r14 ← r102
         r104 <- const8   4198496 (0x401060)
  (  3)  r105 <- call     r104
         r106 <- carg     r82
         r107 <- carg     r103
         r108 <- carg     r101
         r109 <- carg     r99
         r120 <- and      r105,r105  qword
         r122 <- is0      r120
         r127 <- jmp.if   r122,285
.B2:  in[.B1 ]     ;; 0x4010dd  11 insn 0 phis
         r130 <- xor      r16,r16  dword
  (  3)  r131 <- v8.l4=   r16 ← r130
         r138 <- TODO     unsupported: nop
.B3:  in[.B2 .B3 ]     ;; 0x4010e0  81 insn 0 phis
         r141 <- addk     r45,8 qword
         r144 <- const4   4203193 (0x4022b9)
         r145 <- v8.l4=   r82 ← r144
         r146 <- const1   5 (0x5)
         r147 <- widen    1->8 r146
         r148 <- shl      r131,r147  qword
         r154 <- sub      r148,r131  qword
         r163 <- addk     r131,1 qword
         r172 <- loadm8   addr:r141
         r173 <- mulk     r154,8 qword
  (  3)  r174 <- add      r172,r173  qword
         r177 <- addk     r174,8 qword
         r178 <- loadm8   addr:r177
  (  2)  r181 <- addk     r174,74 qword
  (  2)  r184 <- addk     r174,42 qword
         r196 <- const8   4198480 (0x401050)
         r197 <- call     r196
         r198 <- carg     r145
         r199 <- carg     r178
         r200 <- carg     r184
         r201 <- carg     r181
  (  2)  r211 <- sub      r105,r163  qword
         r215 <- is0      r211
         r218 <- not      r215
         r219 <- jmp.if   r218,139
.B4:  in[.B3 ]     ;; 0x401114  20 insn 0 phis
         r221 <- addk     r45,8 qword
         r222 <- loadm8   addr:r221
         r225 <- const8   4198464 (0x401040)
         r226 <- call     r225
         r227 <- carg     r222
         r228 <- carg     r211
         r229 <- carg     r184
         r230 <- carg     r181
.B5:  in[.B4 .B7 ]     ;; 0x401121  26 insn 0 phis
         r241 <- const8   4198528 (0x401080)
         r242 <- call     r241
         r243 <- carg     r45
         r244 <- carg     r103
         r245 <- carg     r101
         r246 <- carg     r99
.B6:  in[.B5 .B8 ]     ;; 0x40112b  19 insn 0 phis
         r284 <- ret      r55
.B7:  in[.B1 ]     ;; 0x401134  18 insn 0 phis
         r285 <- const4   4203208 (0x4022c8)
         r286 <- v8.l4=   r82 ← r285
         r287 <- const8   4198448 (0x401030)
         r288 <- call     r287
         r289 <- carg     r286
         r290 <- carg     r103
         r291 <- carg     r101
         r292 <- carg     r99
         r302 <- jmp      240
.B8:  in[.B0 ]     ;; 0x401140  2 insn 0 phis
         r303 <- TODO     unsupported: or eax,0FFFFFFFFh
         r304 <- jmp      266



'T0: {
    [<pre:RSP> + -8]:8 = <pre:R12>;
    [<pre:RSP> + -16]:8 = <pre:RBP>;
    let r42 = <pre:RSP> + -24;
    [r42]:8 = <pre:RBX>;
    let r45 = r42 - 16;
    let r55 = 4198512(
                (<pre:RDI> with l4 = 3),
                (<pre:RSI> with l4 = 8),
                r45,
                <pre:RCX>,
              );
    if not r55 & r55 == 0 {
        let r99 = (<pre:RCX> with l4 = 4096);
        let r101 = (r45 with l4 = 8);
        let r103 = (<pre:RSI> with l4 = 4203184);
        let r105 = 4198496(
                     [r42 - 16]:8,
                     r103,
                     r101,
                     r99,
                   );
        if r105 & r105 == 0 {
            let r131 = (<pre:RBX> with l4 = <pre:RBX> ^ <pre:RBX>);
            <-- TODO: unsupported: nop -->;
            
            'T3: {
                let r174 = [r45 + 8]:8 + (r131 << (5).widen[1->8] - r131) * 8;
                let r181 = r174 + 74;
                let r184 = r174 + 42;
                let r197 = 4198480(
                             ([r42 - 16]:8 with l4 = 4203193),
                             [r174 + 8]:8,
                             r184,
                             r181,
                           );
                let r211 = r105 - r131 + 1;
                if not r211 == 0 {
                    let r226 = 4198464(
                                 [r45 + 8]:8,
                                 r211,
                                 r184,
                                 r181,
                               );
                    goto T5
                } else goto T3
            }
        } else {
            let r288 = 4198448(
                         ([r42 - 16]:8 with l4 = 4203208),
                         r103,
                         r101,
                         r99,
                       );
            goto T5
        };
        
        'T5: {
            let r242 = 4198528(
                         r45,
                         r103,
                         r101,
                         r99,
                       );
            goto T6
        }
    } else {
        <-- TODO: unsupported: or eax,0FFFFFFFFh -->;
        goto T6
    };
    
    'T6: return r55
}
