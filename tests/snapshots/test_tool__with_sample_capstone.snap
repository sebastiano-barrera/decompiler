---
source: tests/test_tool.rs
expression: out
---
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

mil program = 
program  313 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- undef
   28 r29 <- undef
   29 r30 <- undef
   30 r31 <- undef
   31 r32 <- undef
   32 r33 <- undef
   33 r34 <- undef
0x401090:
   34 r12 <- addk     r12,-8 qword
   35 r29 <- store    *r12 ← r24
0x401092:
   36 r28 <- const4   8 (0x8)
   37 r15 <- v8.l4=   r15 ← r28
0x401097:
   38 r28 <- const4   3 (0x3)
   39 r14 <- v8.l4=   r14 ← r28
0x40109c:
   40 r12 <- addk     r12,-8 qword
   41 r29 <- store    *r12 ← r11
0x40109d:
   42 r12 <- addk     r12,-8 qword
   43 r29 <- store    *r12 ← r17
0x40109e:
   44 r29 <- const8   16 (0x10)
   45 r12 <- sub      r12,r29  qword
   46 r12 <- get      r12
   47 r10 <- overflow r12
   48 r2 <- carry    r12
   49 r6 <- sign     r12
   50 r5 <- is0      r12
   51 r30 <- l1       r12
   52 r3 <- parity   r30
0x4010a2:
   53 r19 <- get      r12
0x4010a5:
   54 r28 <- const8   4198512 (0x401070)
   55 r16 <- call     r28
   56 r29 <- carg     r14
   57 r30 <- carg     r15
   58 r31 <- carg     r19
   59 r32 <- carg     r18
   60 r2 <- undef
   61 r3 <- undef
   62 r4 <- undef
   63 r5 <- undef
   64 r6 <- undef
   65 r7 <- undef
   66 r8 <- undef
   67 r9 <- undef
   68 r10 <- undef
0x4010aa:
   69 r28 <- l4       r16
   70 r29 <- l4       r16
   71 r28 <- and      r28,r29  dword
   72 r6 <- sign     r28
   73 r5 <- is0      r28
   74 r30 <- l1       r28
   75 r3 <- parity   r28
   76 r2 <- const1   0 (0x0)
   77 r10 <- const1   0 (0x0)
0x4010ac:
   78 r28 <- not      r5
   79 r29 <- jmp.if   r28,302
0x4010b2:
   80 r29 <- const8   0 (0x0)
   81 r29 <- add      r29,r12  qword
   82 r28 <- loadm8   addr:r29
   83 r14 <- get      r28
0x4010b6:
   84 r28 <- const8   8 (0x8)
   85 r28 <- add      r28,r12  qword
   86 r21 <- get      r28
0x4010bb:
   87 r28 <- l4       r20
   88 r29 <- l4       r20
   89 r28 <- xor      r28,r29  dword
   90 r20 <- v8.l4=   r20 ← r28
   91 r10 <- false
   92 r2 <- false
   93 r6 <- sign     r28
   94 r5 <- is0      r28
   95 r30 <- l1       r28
   96 r3 <- parity   r30
0x4010be:
   97 r24 <- get      r12
0x4010c1:
   98 r28 <- const4   4096 (0x1000)
   99 r18 <- v8.l4=   r18 ← r28
0x4010c6:
  100 r28 <- const4   8 (0x8)
  101 r19 <- v8.l4=   r19 ← r28
0x4010cb:
  102 r28 <- const4   4203184 (0x4022b0)
  103 r15 <- v8.l4=   r15 ← r28
0x4010d0:
  104 r28 <- const8   4198496 (0x401060)
  105 r16 <- call     r28
  106 r29 <- carg     r14
  107 r30 <- carg     r15
  108 r31 <- carg     r19
  109 r32 <- carg     r18
  110 r2 <- undef
  111 r3 <- undef
  112 r4 <- undef
  113 r5 <- undef
  114 r6 <- undef
  115 r7 <- undef
  116 r8 <- undef
  117 r9 <- undef
  118 r10 <- undef
0x4010d5:
  119 r11 <- get      r16
0x4010d8:
  120 r16 <- and      r16,r16  qword
  121 r6 <- sign     r16
  122 r5 <- is0      r16
  123 r30 <- l1       r16
  124 r3 <- parity   r16
  125 r2 <- const1   0 (0x0)
  126 r10 <- const1   0 (0x0)
0x4010db:
  127 r28 <- jmp.if   r5,284
0x4010dd:
  128 r28 <- l4       r17
  129 r29 <- l4       r17
  130 r28 <- xor      r28,r29  dword
  131 r17 <- v8.l4=   r17 ← r28
  132 r10 <- false
  133 r2 <- false
  134 r6 <- sign     r28
  135 r5 <- is0      r28
  136 r30 <- l1       r28
  137 r3 <- parity   r30
0x4010e0:
  138 r16 <- get      r17
0x4010e3:
  139 r29 <- const8   8 (0x8)
  140 r29 <- add      r29,r12  qword
  141 r28 <- loadm8   addr:r29
  142 r19 <- get      r28
0x4010e8:
  143 r28 <- const4   4203193 (0x4022b9)
  144 r14 <- v8.l4=   r14 ← r28
0x4010ed:
  145 r29 <- const1   5 (0x5)
  146 r29 <- widen    1->8 r29
  147 r16 <- shl      r16,r29  qword
  148 r16 <- get      r16
  149 r6 <- sign     r16
  150 r5 <- is0      r16
  151 r30 <- l1       r16
  152 r3 <- parity   r30
0x4010f1:
  153 r16 <- sub      r16,r17  qword
  154 r16 <- get      r16
  155 r10 <- overflow r16
  156 r2 <- carry    r16
  157 r6 <- sign     r16
  158 r5 <- is0      r16
  159 r30 <- l1       r16
  160 r3 <- parity   r30
0x4010f4:
  161 r29 <- const8   1 (0x1)
  162 r17 <- add      r17,r29  qword
  163 r17 <- get      r17
  164 r10 <- overflow r17
  165 r2 <- carry    r17
  166 r6 <- sign     r17
  167 r5 <- is0      r17
  168 r30 <- l1       r17
  169 r3 <- parity   r30
0x4010f8:
  170 r28 <- const8   0 (0x0)
  171 r28 <- add      r28,r19  qword
  172 r29 <- mulk     r16,8 qword
  173 r28 <- add      r28,r29  qword
  174 r16 <- get      r28
0x4010fc:
  175 r29 <- const8   8 (0x8)
  176 r29 <- add      r29,r16  qword
  177 r28 <- loadm8   addr:r29
  178 r15 <- get      r28
0x401100:
  179 r28 <- const8   74 (0x4a)
  180 r28 <- add      r28,r16  qword
  181 r18 <- get      r28
0x401104:
  182 r28 <- const8   42 (0x2a)
  183 r28 <- add      r28,r16  qword
  184 r19 <- get      r28
0x401108:
  185 r28 <- l4       r16
  186 r29 <- l4       r16
  187 r28 <- xor      r28,r29  dword
  188 r16 <- v8.l4=   r16 ← r28
  189 r10 <- false
  190 r2 <- false
  191 r6 <- sign     r28
  192 r5 <- is0      r28
  193 r30 <- l1       r28
  194 r3 <- parity   r30
0x40110a:
  195 r28 <- const8   4198480 (0x401050)
  196 r16 <- call     r28
  197 r29 <- carg     r14
  198 r30 <- carg     r15
  199 r31 <- carg     r19
  200 r32 <- carg     r18
  201 r2 <- undef
  202 r3 <- undef
  203 r4 <- undef
  204 r5 <- undef
  205 r6 <- undef
  206 r7 <- undef
  207 r8 <- undef
  208 r9 <- undef
  209 r10 <- undef
0x40110f:
  210 r11 <- sub      r11,r17  qword
  211 r10 <- overflow r11
  212 r2 <- carry    r11
  213 r6 <- sign     r11
  214 r5 <- is0      r11
  215 r30 <- l1       r11
  216 r3 <- parity   r30
0x401112:
  217 r28 <- not      r5
  218 r29 <- jmp.if   r28,138
0x401114:
  219 r29 <- const8   8 (0x8)
  220 r29 <- add      r29,r12  qword
  221 r28 <- loadm8   addr:r29
  222 r14 <- get      r28
0x401119:
  223 r15 <- get      r11
0x40111c:
  224 r28 <- const8   4198464 (0x401040)
  225 r16 <- call     r28
  226 r29 <- carg     r14
  227 r30 <- carg     r15
  228 r31 <- carg     r19
  229 r32 <- carg     r18
  230 r2 <- undef
  231 r3 <- undef
  232 r4 <- undef
  233 r5 <- undef
  234 r6 <- undef
  235 r7 <- undef
  236 r8 <- undef
  237 r9 <- undef
  238 r10 <- undef
0x401121:
  239 r14 <- get      r24
0x401124:
  240 r28 <- const8   4198528 (0x401080)
  241 r16 <- call     r28
  242 r29 <- carg     r14
  243 r30 <- carg     r15
  244 r31 <- carg     r19
  245 r32 <- carg     r18
  246 r2 <- undef
  247 r3 <- undef
  248 r4 <- undef
  249 r5 <- undef
  250 r6 <- undef
  251 r7 <- undef
  252 r8 <- undef
  253 r9 <- undef
  254 r10 <- undef
0x401129:
  255 r28 <- l4       r16
  256 r29 <- l4       r16
  257 r28 <- xor      r28,r29  dword
  258 r16 <- v8.l4=   r16 ← r28
  259 r10 <- false
  260 r2 <- false
  261 r6 <- sign     r28
  262 r5 <- is0      r28
  263 r30 <- l1       r28
  264 r3 <- parity   r30
0x40112b:
  265 r29 <- const8   16 (0x10)
  266 r12 <- add      r12,r29  qword
  267 r12 <- get      r12
  268 r10 <- overflow r12
  269 r2 <- carry    r12
  270 r6 <- sign     r12
  271 r5 <- is0      r12
  272 r30 <- l1       r12
  273 r3 <- parity   r30
0x40112f:
  274 r28 <- loadm8   addr:r12
  275 r17 <- get      r28
  276 r12 <- addk     r12,8 qword
0x401130:
  277 r28 <- loadm8   addr:r12
  278 r11 <- get      r28
  279 r12 <- addk     r12,8 qword
0x401131:
  280 r28 <- loadm8   addr:r12
  281 r24 <- get      r28
  282 r12 <- addk     r12,8 qword
0x401133:
  283 r28 <- ret      r16
0x401134:
  284 r28 <- const4   4203208 (0x4022c8)
  285 r14 <- v8.l4=   r14 ← r28
0x401139:
  286 r28 <- const8   4198448 (0x401030)
  287 r16 <- call     r28
  288 r29 <- carg     r14
  289 r30 <- carg     r15
  290 r31 <- carg     r19
  291 r32 <- carg     r18
  292 r2 <- undef
  293 r3 <- undef
  294 r4 <- undef
  295 r5 <- undef
  296 r6 <- undef
  297 r7 <- undef
  298 r8 <- undef
  299 r9 <- undef
  300 r10 <- undef
0x40113e:
  301 r28 <- jmp      239
0x401140:
  302 r28 <- l4       r16
  303 r29 <- const4   -1 (0xffffffff)
  304 r28 <- or       r28,r29  dword
  305 r16 <- v8.l4=   r16 ← r28
  306 r10 <- false
  307 r2 <- false
  308 r6 <- sign     r28
  309 r5 <- is0      r28
  310 r30 <- l1       r28
  311 r3 <- parity   r30
0x401143:
  312 r28 <- jmp      265


ssa pre-xform:
ssa program  121 instrs
.B0:  in[]     ;; 0x0  80 insn 0 phis
         r10 <- #pre:RBP
         r11 <- #pre:RSP
         r13 <- #pre:RDI
         r14 <- #pre:RSI
  (  4)  r16 <- #pre:RBX
  (  2)  r17 <- #pre:RCX
         r23 <- #pre:R12
  (  2)  r34 <- addk     r11,-8 qword
         r35 <- store    *r34 ← r23
         r36 <- const4   8 (0x8)
  (  2)  r37 <- v8.l4=   r14 ← r36
         r38 <- const4   3 (0x3)
         r39 <- v8.l4=   r13 ← r38
  (  2)  r40 <- addk     r34,-8 qword
         r41 <- store    *r40 ← r10
  (  2)  r42 <- addk     r40,-8 qword
         r43 <- store    *r42 ← r16
         r44 <- const8   16 (0x10)
  (  6)  r45 <- sub      r42,r44  qword
  (  2)  r54 <- const8   4198512 (0x401070)
  (  3)  r55 <- call     r54
         r56 <- carg     r39
         r57 <- carg     r37
         r58 <- carg     r45
         r59 <- carg     r17
         r69 <- l4       r55
         r70 <- l4       r55
         r71 <- and      r69,r70  dword
         r73 <- is0      r71
         r78 <- not      r73
         r79 <- jmp.if   r78,302
.B1:  in[.B0 ]     ;; 0x4010b2  48 insn 0 phis
         r80 <- const8   0 (0x0)
         r81 <- add      r80,r45  qword
  (  3)  r82 <- loadm8   addr:r81
         r98 <- const4   4096 (0x1000)
  (  3)  r99 <- v8.l4=   r17 ← r98
         r100 <- const4   8 (0x8)
  (  3)  r101 <- v8.l4=   r45 ← r100
         r102 <- const4   4203184 (0x4022b0)
  (  3)  r103 <- v8.l4=   r37 ← r102
  (  2)  r104 <- const8   4198496 (0x401060)
  (  4)  r105 <- call     r104
         r106 <- carg     r82
         r107 <- carg     r103
         r108 <- carg     r101
         r109 <- carg     r99
         r120 <- and      r105,r105  qword
         r122 <- is0      r120
         r127 <- jmp.if   r122,284
.B2:  in[.B1 ]     ;; 0x4010dd  10 insn 0 phis
         r128 <- l4       r16
         r129 <- l4       r16
         r130 <- xor      r128,r129  dword
         r131 <- v8.l4=   r16 ← r130
.B3:  in[.B2 .B3 ]     ;; 0x4010e0  81 insn 3 phis
         r313 <- phi8
         r316 <- phi8
  (  3)  r319 <- phi8
         r139 <- const8   8 (0x8)
         r140 <- add      r139,r45  qword
         r141 <- loadm8   addr:r140
         r143 <- const4   4203193 (0x4022b9)
  (  2)  r144 <- v8.l4=   r316 ← r143
         r145 <- const1   5 (0x5)
         r146 <- widen    1->8 r145
         r147 <- shl      r319,r146  qword
         r153 <- sub      r147,r319  qword
         r161 <- const8   1 (0x1)
  (  2)  r162 <- add      r319,r161  qword
         r170 <- const8   0 (0x0)
         r171 <- add      r170,r141  qword
         r172 <- mulk     r153,8 qword
  (  3)  r173 <- add      r171,r172  qword
         r175 <- const8   8 (0x8)
         r176 <- add      r175,r173  qword
         r177 <- loadm8   addr:r176
         r179 <- const8   74 (0x4a)
  (  3)  r180 <- add      r179,r173  qword
         r182 <- const8   42 (0x2a)
  (  3)  r183 <- add      r182,r173  qword
         r195 <- const8   4198480 (0x401050)
         r196 <- call     r195
         r197 <- carg     r144
         r198 <- carg     r177
         r199 <- carg     r183
         r200 <- carg     r180
  (  4)  r210 <- sub      r313,r162  qword
         r214 <- is0      r210
         r217 <- not      r214
         r218 <- jmp.if   r217,138
.B4:  in[.B3 ]     ;; 0x401114  20 insn 0 phis
         r219 <- const8   8 (0x8)
         r220 <- add      r219,r45  qword
         r221 <- loadm8   addr:r220
         r224 <- const8   4198464 (0x401040)
         r225 <- call     r224
         r226 <- carg     r221
         r227 <- carg     r210
         r228 <- carg     r183
         r229 <- carg     r180
.B5:  in[.B4 .B7 ]     ;; 0x401121  26 insn 3 phis
         r322 <- phi8
         r325 <- phi8
         r328 <- phi8
  (  3)  r240 <- const8   4198528 (0x401080)
  (  4)  r241 <- call     r240
         r242 <- carg     r45
         r243 <- carg     r322
         r244 <- carg     r328
         r245 <- carg     r325
         r255 <- l4       r241
         r256 <- l4       r241
         r257 <- xor      r255,r256  dword
         r258 <- v8.l4=   r241 ← r257
.B6:  in[.B5 ]     ;; 0x40112b  19 insn 0 phis
         r283 <- ret      r258
.B7:  in[.B1 ]     ;; 0x401134  18 insn 0 phis
         r284 <- const4   4203208 (0x4022c8)
         r285 <- v8.l4=   r82 ← r284
         r286 <- const8   4198448 (0x401030)
         r287 <- call     r286
         r288 <- carg     r285
         r289 <- carg     r103
         r290 <- carg     r101
         r291 <- carg     r99
         r301 <- jmp      239
.B8:  in[.B0 .B6 ]     ;; 0x401140  11 insn 1 phis
         r312 <- jmp      265


ssa post-xform:
ssa program  103 instrs
.B0:  in[]     ;; 0x0  80 insn 0 phis
         r10 <- #pre:RBP
  (  7)  r11 <- #pre:RSP
         r13 <- #pre:RDI
  (  2)  r14 <- #pre:RSI
  (  2)  r16 <- #pre:RBX
  (  2)  r17 <- #pre:RCX
         r23 <- #pre:R12
         r34 <- addk     r11,-8 qword
         r35 <- store    *r34 ← r23
         r36 <- const4   8 (0x8)
         r37 <- v8.l4=   r14 ← r36
         r38 <- const4   3 (0x3)
         r39 <- v8.l4=   r13 ← r38
         r40 <- addk     r11,-16 qword
         r41 <- store    *r40 ← r10
         r42 <- addk     r11,-24 qword
         r43 <- store    *r42 ← r16
  (  3)  r45 <- subk     r11,-8 qword
  (  2)  r54 <- const8   4198512 (0x401070)
  (  2)  r55 <- call     r54
         r56 <- carg     r39
         r57 <- carg     r37
         r58 <- carg     r45
         r59 <- carg     r17
         r73 <- is0      r55
         r78 <- not      r73
         r79 <- jmp.if   r78,302
.B1:  in[.B0 ]     ;; 0x4010b2  48 insn 0 phis
         r81 <- subk     r11,-8 qword
  (  3)  r82 <- loadm8   addr:r81
         r98 <- const4   4096 (0x1000)
  (  3)  r99 <- v8.l4=   r17 ← r98
         r100 <- const4   8 (0x8)
  (  3)  r101 <- v8.l4=   r45 ← r100
         r102 <- const4   4203184 (0x4022b0)
  (  3)  r103 <- v8.l4=   r14 ← r102
  (  2)  r104 <- const8   4198496 (0x401060)
  (  3)  r105 <- call     r104
         r106 <- carg     r82
         r107 <- carg     r103
         r108 <- carg     r101
         r109 <- carg     r99
         r122 <- is0      r105
         r127 <- jmp.if   r122,284
.B2:  in[.B1 ]     ;; 0x4010dd  10 insn 0 phis
         r130 <- const4   0 (0x0)
         r131 <- v8.l4=   r16 ← r130
.B3:  in[.B2 .B3 ]     ;; 0x4010e0  81 insn 3 phis
         r313 <- phi8
         r316 <- phi8
  (  3)  r319 <- phi8
         r140 <- subk     r11,16 qword
         r143 <- const4   4203193 (0x4022b9)
  (  2)  r144 <- v8.l4=   r316 ← r143
         r145 <- const1   5 (0x5)
         r146 <- widen    1->8 r145
         r147 <- shl      r319,r146  qword
         r153 <- sub      r147,r319  qword
  (  2)  r162 <- addk     r319,1 qword
         r171 <- loadm8   addr:r140
         r172 <- mulk     r153,8 qword
  (  3)  r173 <- add      r171,r172  qword
         r176 <- addk     r173,8 qword
         r177 <- loadm8   addr:r176
  (  3)  r180 <- addk     r173,74 qword
  (  3)  r183 <- addk     r173,42 qword
         r195 <- const8   4198480 (0x401050)
         r196 <- call     r195
         r197 <- carg     r144
         r198 <- carg     r177
         r199 <- carg     r183
         r200 <- carg     r180
  (  4)  r210 <- sub      r313,r162  qword
         r214 <- is0      r210
         r217 <- not      r214
         r218 <- jmp.if   r217,138
.B4:  in[.B3 ]     ;; 0x401114  20 insn 0 phis
         r220 <- subk     r11,16 qword
         r221 <- loadm8   addr:r220
         r224 <- const8   4198464 (0x401040)
         r225 <- call     r224
         r226 <- carg     r221
         r227 <- carg     r210
         r228 <- carg     r183
         r229 <- carg     r180
.B5:  in[.B4 .B7 ]     ;; 0x401121  26 insn 3 phis
         r322 <- phi8
         r325 <- phi8
         r328 <- phi8
  (  2)  r240 <- const8   4198528 (0x401080)
  (  2)  r241 <- call     r240
         r242 <- carg     r45
         r243 <- carg     r322
         r244 <- carg     r328
         r245 <- carg     r325
         r257 <- const4   0 (0x0)
         r258 <- v8.l4=   r241 ← r257
.B6:  in[.B5 ]     ;; 0x40112b  19 insn 0 phis
         r283 <- ret      r258
.B7:  in[.B1 ]     ;; 0x401134  18 insn 0 phis
         r284 <- const4   4203208 (0x4022c8)
         r285 <- v8.l4=   r82 ← r284
         r286 <- const8   4198448 (0x401030)
         r287 <- call     r286
         r288 <- carg     r285
         r289 <- carg     r103
         r290 <- carg     r101
         r291 <- carg     r99
         r301 <- jmp      239
.B8:  in[.B0 .B6 ]     ;; 0x401140  11 insn 1 phis
         r312 <- jmp      265



'T0: {
    [<pre:RSP> + -8]:8 = <pre:R12>;
    [<pre:RSP> + -16]:8 = <pre:RBP>;
    [<pre:RSP> + -24]:8 = <pre:RBX>;
    let r45 = <pre:RSP> - -8;
    let r55 = 4198512(
                (<pre:RDI> with l4 = 3),
                (<pre:RSI> with l4 = 8),
                r45,
                <pre:RCX>,
              );
    if not r55 == 0 {
        let r99 = (<pre:RCX> with l4 = 4096);
        let r101 = (r45 with l4 = 8);
        let r103 = (<pre:RSI> with l4 = 4203184);
        let r105 = 4198496(
                     [<pre:RSP> - -8]:8,
                     r103,
                     r101,
                     r99,
                   );
        if r105 == 0 {
            let mut r313 = r105;
            let mut r316 = [<pre:RSP> - -8]:8;
            let mut r319 = (<pre:RBX> with l4 = 0);
            
            'T3(r313, r316, r319): {
                let r144 = (r316 with l4 = 4203193);
                let r162 = r319 + 1;
                let r173 = [<pre:RSP> - 16]:8 + (r319 << (5).widen[1->8] - r319) * 8;
                let r180 = r173 + 74;
                let r183 = r173 + 42;
                let r196 = 4198480(
                             r144,
                             [r173 + 8]:8,
                             r183,
                             r180,
                           );
                let r210 = r313 - r162;
                if not r210 == 0 {
                    let r225 = 4198464(
                                 [<pre:RSP> - 16]:8,
                                 r210,
                                 r183,
                                 r180,
                               );
                    goto T5 with (r322 = r210,
                                  r325 = r180,
                                  r328 = r183)
                } else goto T3 with (r313 = r210,
                                     r316 = r144,
                                     r319 = r162)
            }
        } else {
            let r287 = 4198448(
                         ([<pre:RSP> - -8]:8 with l4 = 4203208),
                         r103,
                         r101,
                         r99,
                       );
            goto T5 with (r322 = r103,
                          r325 = r99,
                          r328 = r101)
        };
        
        'T5(r322, r325, r328): {
            let r241 = 4198528(
                         r45,
                         r322,
                         r328,
                         r325,
                       );
            {
                return (r241 with l4 = 0);
                goto T8
            }
        }
    } else 
    'T8: {
        
    }
}
