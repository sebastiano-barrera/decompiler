---
source: tests/test_tool.rs
expression: out
---
sum_matrix 0x4011c9+115 (file 0x11c9)
          4011c9: 55                      push rbp
          4011ca: 48 89 e5                mov rbp,rsp
          4011cd: 48 89 f8                mov rax,rdi
          4011d0: 48 89 f1                mov rcx,rsi
          4011d3: 48 89 c0                mov rax,rax
          4011d6: ba 00 00 00 00          mov edx,0
          4011db: 48 89 ca                mov rdx,rcx
          4011de: 48 89 45 e0             mov [rbp-20h],rax
          4011e2: 48 89 55 e8             mov [rbp-18h],rdx
          4011e6: c7 45 fc 00 00 00 00    mov dword ptr [rbp-4],0
          4011ed: c7 45 f8 00 00 00 00    mov dword ptr [rbp-8],0
          4011f4: eb 39                   jmp short 000000000040122Fh
          4011f6: c7 45 f4 00 00 00 00    mov dword ptr [rbp-0Ch],0
          4011fd: eb 24                   jmp short 0000000000401223h
          4011ff: 48 8b 55 e0             mov rdx,[rbp-20h]
          401203: 8b 45 ec                mov eax,[rbp-14h]
          401206: 0f af 45 f8             imul eax,[rbp-8]
          40120a: 89 c1                   mov ecx,eax
          40120c: 8b 45 f4                mov eax,[rbp-0Ch]
          40120f: 01 c8                   add eax,ecx
          401211: 48 98                   cdqe
          401213: 48 c1 e0 02             shl rax,2
          401217: 48 01 d0                add rax,rdx
          40121a: 8b 00                   mov eax,[rax]
          40121c: 01 45 fc                add [rbp-4],eax
          40121f: 83 45 f4 01             add dword ptr [rbp-0Ch],1
          401223: 8b 45 ec                mov eax,[rbp-14h]
          401226: 39 45 f4                cmp [rbp-0Ch],eax
          401229: 7c d4                   jl short 00000000004011FFh
          40122b: 83 45 f8 01             add dword ptr [rbp-8],1
          40122f: 8b 45 e8                mov eax,[rbp-18h]
          401232: 39 45 f8                cmp [rbp-8],eax
          401235: 7c bf                   jl short 00000000004011F6h
          401237: 8b 45 fc                mov eax,[rbp-4]
          40123a: 5d                      pop rbp
          40123b: c3                      ret

mil program = 
program  223 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
0x4011c9:
   38 r12 <- ArithK(Add, r12, -8)
   39 r29 <- StoreMem(r12, r11)
0x4011ca:
   40 r11 <- Get(r12)
0x4011cd:
   41 r16 <- Get(r14)
0x4011d0:
   42 r18 <- Get(r15)
0x4011d3:
   43 r16 <- Get(r16)
0x4011d6:
   44 r28 <- Const { value: 0, size: 4 }
   45 r19 <- Part { src: r19, offset: 4, size: 4 }
   46 r19 <- Concat { lo: r28, hi: r19 }
0x4011db:
   47 r19 <- Get(r18)
0x4011de:
   48 r29 <- Const { value: -32, size: 8 }
   49 r29 <- Arith(Add, r29, r11)
   50 r30 <- StoreMem(r29, r16)
0x4011e2:
   51 r29 <- Const { value: -24, size: 8 }
   52 r29 <- Arith(Add, r29, r11)
   53 r30 <- StoreMem(r29, r19)
0x4011e6:
   54 r28 <- Const { value: 0, size: 4 }
   55 r29 <- Const { value: -4, size: 8 }
   56 r29 <- Arith(Add, r29, r11)
   57 r30 <- StoreMem(r29, r28)
0x4011ed:
   58 r28 <- Const { value: 0, size: 4 }
   59 r29 <- Const { value: -8, size: 8 }
   60 r29 <- Arith(Add, r29, r11)
   61 r30 <- StoreMem(r29, r28)
0x4011f4:
   62 r28 <- Jmp(193)
0x4011f6:
   63 r28 <- Const { value: 0, size: 4 }
   64 r29 <- Const { value: -12, size: 8 }
   65 r29 <- Arith(Add, r29, r11)
   66 r30 <- StoreMem(r29, r28)
0x4011fd:
   67 r28 <- Jmp(156)
0x4011ff:
   68 r29 <- Const { value: -32, size: 8 }
   69 r29 <- Arith(Add, r29, r11)
   70 r28 <- LoadMem { reg: r29, size: 8 }
   71 r19 <- Get(r28)
0x401203:
   72 r29 <- Const { value: -20, size: 8 }
   73 r29 <- Arith(Add, r29, r11)
   74 r28 <- LoadMem { reg: r29, size: 4 }
   75 r16 <- Part { src: r16, offset: 4, size: 4 }
   76 r16 <- Concat { lo: r28, hi: r16 }
0x401206:
   77 r28 <- TODO("unsupported: imul eax,[rbp-8]")
0x40120a:
   78 r28 <- Part { src: r16, offset: 0, size: 4 }
   79 r18 <- Part { src: r18, offset: 4, size: 4 }
   80 r18 <- Concat { lo: r28, hi: r18 }
0x40120c:
   81 r29 <- Const { value: -12, size: 8 }
   82 r29 <- Arith(Add, r29, r11)
   83 r28 <- LoadMem { reg: r29, size: 4 }
   84 r16 <- Part { src: r16, offset: 4, size: 4 }
   85 r16 <- Concat { lo: r28, hi: r16 }
0x40120f:
   86 r28 <- Part { src: r16, offset: 0, size: 4 }
   87 r29 <- Part { src: r18, offset: 0, size: 4 }
   88 r28 <- Widen { reg: r28, target_size: 4 }
   89 r29 <- Widen { reg: r29, target_size: 4 }
   90 r28 <- Arith(Add, r28, r29)
   91 r16 <- Part { src: r16, offset: 4, size: 4 }
   92 r16 <- Concat { lo: r28, hi: r16 }
   93 r10 <- OverflowOf(r28)
   94 r2 <- CarryOf(r28)
   95 r6 <- SignOf(r28)
   96 r5 <- IsZero(r28)
   97 r30 <- Part { src: r28, offset: 0, size: 1 }
   98 r3 <- Parity(r30)
0x401211:
   99 r28 <- TODO("unsupported: cdqe")
0x401213:
  100 r29 <- Const { value: 2, size: 1 }
  101 r16 <- Widen { reg: r16, target_size: 8 }
  102 r29 <- Widen { reg: r29, target_size: 8 }
  103 r16 <- Arith(Shl, r16, r29)
  104 r16 <- Get(r16)
  105 r6 <- SignOf(r16)
  106 r5 <- IsZero(r16)
  107 r30 <- Part { src: r16, offset: 0, size: 1 }
  108 r3 <- Parity(r30)
0x401217:
  109 r16 <- Widen { reg: r16, target_size: 8 }
  110 r19 <- Widen { reg: r19, target_size: 8 }
  111 r16 <- Arith(Add, r16, r19)
  112 r16 <- Get(r16)
  113 r10 <- OverflowOf(r16)
  114 r2 <- CarryOf(r16)
  115 r6 <- SignOf(r16)
  116 r5 <- IsZero(r16)
  117 r30 <- Part { src: r16, offset: 0, size: 1 }
  118 r3 <- Parity(r30)
0x40121a:
  119 r29 <- Const { value: 0, size: 8 }
  120 r29 <- Arith(Add, r29, r16)
  121 r28 <- LoadMem { reg: r29, size: 4 }
  122 r16 <- Part { src: r16, offset: 4, size: 4 }
  123 r16 <- Concat { lo: r28, hi: r16 }
0x40121c:
  124 r29 <- Const { value: -4, size: 8 }
  125 r29 <- Arith(Add, r29, r11)
  126 r28 <- LoadMem { reg: r29, size: 4 }
  127 r30 <- Part { src: r16, offset: 0, size: 4 }
  128 r28 <- Widen { reg: r28, target_size: 4 }
  129 r30 <- Widen { reg: r30, target_size: 4 }
  130 r28 <- Arith(Add, r28, r30)
  131 r31 <- Const { value: -4, size: 8 }
  132 r31 <- Arith(Add, r31, r11)
  133 r32 <- StoreMem(r31, r28)
  134 r10 <- OverflowOf(r28)
  135 r2 <- CarryOf(r28)
  136 r6 <- SignOf(r28)
  137 r5 <- IsZero(r28)
  138 r33 <- Part { src: r28, offset: 0, size: 1 }
  139 r3 <- Parity(r33)
0x40121f:
  140 r29 <- Const { value: -12, size: 8 }
  141 r29 <- Arith(Add, r29, r11)
  142 r28 <- LoadMem { reg: r29, size: 4 }
  143 r30 <- Const { value: 1, size: 4 }
  144 r28 <- Widen { reg: r28, target_size: 4 }
  145 r30 <- Widen { reg: r30, target_size: 4 }
  146 r28 <- Arith(Add, r28, r30)
  147 r31 <- Const { value: -12, size: 8 }
  148 r31 <- Arith(Add, r31, r11)
  149 r32 <- StoreMem(r31, r28)
  150 r10 <- OverflowOf(r28)
  151 r2 <- CarryOf(r28)
  152 r6 <- SignOf(r28)
  153 r5 <- IsZero(r28)
  154 r33 <- Part { src: r28, offset: 0, size: 1 }
  155 r3 <- Parity(r33)
0x401223:
  156 r29 <- Const { value: -20, size: 8 }
  157 r29 <- Arith(Add, r29, r11)
  158 r28 <- LoadMem { reg: r29, size: 4 }
  159 r16 <- Part { src: r16, offset: 4, size: 4 }
  160 r16 <- Concat { lo: r28, hi: r16 }
0x401226:
  161 r29 <- Const { value: -12, size: 8 }
  162 r29 <- Arith(Add, r29, r11)
  163 r28 <- LoadMem { reg: r29, size: 4 }
  164 r30 <- Part { src: r16, offset: 0, size: 4 }
  165 r28 <- Widen { reg: r28, target_size: 4 }
  166 r30 <- Widen { reg: r30, target_size: 4 }
  167 r28 <- Arith(Sub, r28, r30)
  168 r10 <- OverflowOf(r28)
  169 r2 <- CarryOf(r28)
  170 r6 <- SignOf(r28)
  171 r5 <- IsZero(r28)
  172 r31 <- Part { src: r28, offset: 0, size: 1 }
  173 r3 <- Parity(r31)
0x401229:
  174 r28 <- Cmp(EQ, r6, r10)
  175 r28 <- Not(r28)
  176 r29 <- JmpIf { cond: r28, target: 68 }
0x40122b:
  177 r29 <- Const { value: -8, size: 8 }
  178 r29 <- Arith(Add, r29, r11)
  179 r28 <- LoadMem { reg: r29, size: 4 }
  180 r30 <- Const { value: 1, size: 4 }
  181 r28 <- Widen { reg: r28, target_size: 4 }
  182 r30 <- Widen { reg: r30, target_size: 4 }
  183 r28 <- Arith(Add, r28, r30)
  184 r31 <- Const { value: -8, size: 8 }
  185 r31 <- Arith(Add, r31, r11)
  186 r32 <- StoreMem(r31, r28)
  187 r10 <- OverflowOf(r28)
  188 r2 <- CarryOf(r28)
  189 r6 <- SignOf(r28)
  190 r5 <- IsZero(r28)
  191 r33 <- Part { src: r28, offset: 0, size: 1 }
  192 r3 <- Parity(r33)
0x40122f:
  193 r29 <- Const { value: -24, size: 8 }
  194 r29 <- Arith(Add, r29, r11)
  195 r28 <- LoadMem { reg: r29, size: 4 }
  196 r16 <- Part { src: r16, offset: 4, size: 4 }
  197 r16 <- Concat { lo: r28, hi: r16 }
0x401232:
  198 r29 <- Const { value: -8, size: 8 }
  199 r29 <- Arith(Add, r29, r11)
  200 r28 <- LoadMem { reg: r29, size: 4 }
  201 r30 <- Part { src: r16, offset: 0, size: 4 }
  202 r28 <- Widen { reg: r28, target_size: 4 }
  203 r30 <- Widen { reg: r30, target_size: 4 }
  204 r28 <- Arith(Sub, r28, r30)
  205 r10 <- OverflowOf(r28)
  206 r2 <- CarryOf(r28)
  207 r6 <- SignOf(r28)
  208 r5 <- IsZero(r28)
  209 r31 <- Part { src: r28, offset: 0, size: 1 }
  210 r3 <- Parity(r31)
0x401235:
  211 r28 <- Cmp(EQ, r6, r10)
  212 r28 <- Not(r28)
  213 r29 <- JmpIf { cond: r28, target: 63 }
0x401237:
  214 r29 <- Const { value: -4, size: 8 }
  215 r29 <- Arith(Add, r29, r11)
  216 r28 <- LoadMem { reg: r29, size: 4 }
  217 r16 <- Part { src: r16, offset: 4, size: 4 }
  218 r16 <- Concat { lo: r28, hi: r16 }
0x40123a:
  219 r28 <- LoadMem { reg: r12, size: 8 }
  220 r11 <- Get(r28)
  221 r12 <- ArithK(Add, r12, 8)
0x40123b:
  222 r28 <- Ret(r16)


ssa pre-xform:
ssa program  229 instrs
.B0:    ;; .
         r62 <- Jmp(193)
         r13 <- Ancestral(AncestralName("RDI"))
         r225 <- Upsilon { value: r13, phi_ref: r224 }
.B5:    ;; preds:B0,B4.
         r224 <- Phi
         r196 <- Part { src: r224, offset: 4, size: 4 }
         r11 <- Ancestral(AncestralName("RSP"))
  (  8)  r38 <- ArithK(Add, r11, -8)
         r193 <- Const { value: -24, size: 8 }
         r194 <- Arith(Add, r193, r38)
         r195 <- LoadMem { reg: r194, size: 4 }
  (  3)  r197 <- Concat { lo: r195, hi: r196 }
         r201 <- Part { src: r197, offset: 0, size: 4 }
         r203 <- Widen { reg: r201, target_size: 4 }
         r198 <- Const { value: -8, size: 8 }
         r199 <- Arith(Add, r198, r38)
         r200 <- LoadMem { reg: r199, size: 4 }
         r202 <- Widen { reg: r200, target_size: 4 }
  (  2)  r204 <- Arith(Sub, r202, r203)
         r205 <- OverflowOf(r204)
         r207 <- SignOf(r204)
         r211 <- Cmp(EQ, r207, r205)
         r212 <- Not(r211)
         r213 <- JmpIf { cond: r212, target: 63 }
.B1:    ;; preds:B5.
         r67 <- Jmp(156)
         r226 <- Upsilon { value: r197, phi_ref: r223 }
.B3:    ;; preds:B1,B2.
         r223 <- Phi
         r159 <- Part { src: r223, offset: 4, size: 4 }
         r156 <- Const { value: -20, size: 8 }
         r157 <- Arith(Add, r156, r38)
         r158 <- LoadMem { reg: r157, size: 4 }
  (  3)  r160 <- Concat { lo: r158, hi: r159 }
         r164 <- Part { src: r160, offset: 0, size: 4 }
         r166 <- Widen { reg: r164, target_size: 4 }
         r161 <- Const { value: -12, size: 8 }
         r162 <- Arith(Add, r161, r38)
         r163 <- LoadMem { reg: r162, size: 4 }
         r165 <- Widen { reg: r163, target_size: 4 }
  (  2)  r167 <- Arith(Sub, r165, r166)
         r168 <- OverflowOf(r167)
         r170 <- SignOf(r167)
         r174 <- Cmp(EQ, r170, r168)
         r175 <- Not(r174)
         r176 <- JmpIf { cond: r175, target: 68 }
.B2:    ;; preds:B3.
         r77 <- TODO("unsupported: imul eax,[rbp-8]")
         r99 <- TODO("unsupported: cdqe")
         r68 <- Const { value: -32, size: 8 }
         r69 <- Arith(Add, r68, r38)
         r70 <- LoadMem { reg: r69, size: 8 }
         r110 <- Widen { reg: r70, target_size: 8 }
         r100 <- Const { value: 2, size: 1 }
         r102 <- Widen { reg: r100, target_size: 8 }
         r75 <- Part { src: r160, offset: 4, size: 4 }
         r72 <- Const { value: -20, size: 8 }
         r73 <- Arith(Add, r72, r38)
         r74 <- LoadMem { reg: r73, size: 4 }
  (  2)  r76 <- Concat { lo: r74, hi: r75 }
         r84 <- Part { src: r76, offset: 4, size: 4 }
         r81 <- Const { value: -12, size: 8 }
         r82 <- Arith(Add, r81, r38)
         r83 <- LoadMem { reg: r82, size: 4 }
  (  2)  r85 <- Concat { lo: r83, hi: r84 }
         r91 <- Part { src: r85, offset: 4, size: 4 }
         r14 <- Ancestral(AncestralName("RSI"))
         r79 <- Part { src: r14, offset: 4, size: 4 }
         r78 <- Part { src: r76, offset: 0, size: 4 }
         r80 <- Concat { lo: r78, hi: r79 }
         r87 <- Part { src: r80, offset: 0, size: 4 }
         r89 <- Widen { reg: r87, target_size: 4 }
         r86 <- Part { src: r85, offset: 0, size: 4 }
         r88 <- Widen { reg: r86, target_size: 4 }
         r90 <- Arith(Add, r88, r89)
         r92 <- Concat { lo: r90, hi: r91 }
         r101 <- Widen { reg: r92, target_size: 8 }
         r103 <- Arith(Shl, r101, r102)
         r109 <- Widen { reg: r103, target_size: 8 }
  (  2)  r111 <- Arith(Add, r109, r110)
         r122 <- Part { src: r111, offset: 4, size: 4 }
         r119 <- Const { value: 0, size: 8 }
         r120 <- Arith(Add, r119, r111)
         r121 <- LoadMem { reg: r120, size: 4 }
         r123 <- Concat { lo: r121, hi: r122 }
         r228 <- Upsilon { value: r123, phi_ref: r223 }
.B4:    ;; preds:B3.
         r227 <- Upsilon { value: r160, phi_ref: r224 }
.B6:    ;; preds:B5.
         r217 <- Part { src: r197, offset: 4, size: 4 }
         r214 <- Const { value: -4, size: 8 }
         r215 <- Arith(Add, r214, r38)
         r216 <- LoadMem { reg: r215, size: 4 }
         r218 <- Concat { lo: r216, hi: r217 }
         r222 <- Ret(r218)


cfg:
  BlockID(0) -> Jmp((0, BlockID(5)))
  BlockID(1) -> Jmp((0, BlockID(3)))
  BlockID(2) -> Jmp((1, BlockID(3)))
  BlockID(3) -> Alt { straight: (0, BlockID(4)), side: (0, BlockID(2)) }
  BlockID(4) -> Jmp((1, BlockID(5)))
  BlockID(5) -> Alt { straight: (0, BlockID(6)), side: (0, BlockID(1)) }
  BlockID(6) -> End
  domtree:
BlockID(0)
|  BlockID(5)
|  |  BlockID(1)
|  |  |  BlockID(3)
|  |  |  |  BlockID(2)
|  |  |  |  BlockID(4)
|  |  BlockID(6)

ssa post-xform:
ssa program  229 instrs
.B0:    ;; .
         r62 <- Jmp(193)
         r13 <- Ancestral(AncestralName("RDI"))
         r225 <- Upsilon { value: r13, phi_ref: r224 }
.B5:    ;; preds:B0,B4.
         r224 <- Phi
         r196 <- Part { src: r224, offset: 4, size: 4 }
         r11 <- Ancestral(AncestralName("RSP"))
  (  8)  r38 <- ArithK(Add, r11, -8)
         r193 <- Const { value: -24, size: 8 }
         r194 <- Arith(Add, r193, r38)
         r195 <- LoadMem { reg: r194, size: 4 }
  (  3)  r197 <- Concat { lo: r195, hi: r196 }
         r201 <- Part { src: r197, offset: 0, size: 4 }
         r203 <- Widen { reg: r201, target_size: 4 }
         r198 <- Const { value: -8, size: 8 }
         r199 <- Arith(Add, r198, r38)
         r200 <- LoadMem { reg: r199, size: 4 }
         r202 <- Widen { reg: r200, target_size: 4 }
  (  2)  r204 <- Arith(Sub, r202, r203)
         r205 <- OverflowOf(r204)
         r207 <- SignOf(r204)
         r211 <- Cmp(EQ, r207, r205)
         r212 <- Not(r211)
         r213 <- JmpIf { cond: r212, target: 63 }
.B1:    ;; preds:B5.
         r67 <- Jmp(156)
         r226 <- Upsilon { value: r197, phi_ref: r223 }
.B3:    ;; preds:B1,B2.
         r223 <- Phi
         r159 <- Part { src: r223, offset: 4, size: 4 }
         r156 <- Const { value: -20, size: 8 }
         r157 <- Arith(Add, r156, r38)
         r158 <- LoadMem { reg: r157, size: 4 }
  (  3)  r160 <- Concat { lo: r158, hi: r159 }
         r164 <- Part { src: r160, offset: 0, size: 4 }
         r166 <- Widen { reg: r164, target_size: 4 }
         r161 <- Const { value: -12, size: 8 }
         r162 <- Arith(Add, r161, r38)
         r163 <- LoadMem { reg: r162, size: 4 }
         r165 <- Widen { reg: r163, target_size: 4 }
  (  2)  r167 <- Arith(Sub, r165, r166)
         r168 <- OverflowOf(r167)
         r170 <- SignOf(r167)
         r174 <- Cmp(EQ, r170, r168)
         r175 <- Not(r174)
         r176 <- JmpIf { cond: r175, target: 68 }
.B2:    ;; preds:B3.
         r77 <- TODO("unsupported: imul eax,[rbp-8]")
         r99 <- TODO("unsupported: cdqe")
         r68 <- Const { value: -32, size: 8 }
         r69 <- Arith(Add, r68, r38)
         r70 <- LoadMem { reg: r69, size: 8 }
         r110 <- Widen { reg: r70, target_size: 8 }
         r100 <- Const { value: 2, size: 1 }
         r102 <- Widen { reg: r100, target_size: 8 }
         r75 <- Part { src: r160, offset: 4, size: 4 }
         r72 <- Const { value: -20, size: 8 }
         r73 <- Arith(Add, r72, r38)
         r74 <- LoadMem { reg: r73, size: 4 }
  (  2)  r76 <- Concat { lo: r74, hi: r75 }
         r84 <- Part { src: r76, offset: 4, size: 4 }
         r81 <- Const { value: -12, size: 8 }
         r82 <- Arith(Add, r81, r38)
         r83 <- LoadMem { reg: r82, size: 4 }
  (  2)  r85 <- Concat { lo: r83, hi: r84 }
         r91 <- Part { src: r85, offset: 4, size: 4 }
         r14 <- Ancestral(AncestralName("RSI"))
         r79 <- Part { src: r14, offset: 4, size: 4 }
         r78 <- Part { src: r76, offset: 0, size: 4 }
         r80 <- Concat { lo: r78, hi: r79 }
         r87 <- Part { src: r80, offset: 0, size: 4 }
         r89 <- Widen { reg: r87, target_size: 4 }
         r86 <- Part { src: r85, offset: 0, size: 4 }
         r88 <- Widen { reg: r86, target_size: 4 }
         r90 <- Arith(Add, r88, r89)
         r92 <- Concat { lo: r90, hi: r91 }
         r101 <- Widen { reg: r92, target_size: 8 }
         r103 <- Arith(Shl, r101, r102)
         r109 <- Widen { reg: r103, target_size: 8 }
  (  2)  r111 <- Arith(Add, r109, r110)
         r122 <- Part { src: r111, offset: 4, size: 4 }
         r119 <- Const { value: 0, size: 8 }
         r120 <- Arith(Add, r119, r111)
         r121 <- LoadMem { reg: r120, size: 4 }
         r123 <- Concat { lo: r121, hi: r122 }
         r228 <- Upsilon { value: r123, phi_ref: r223 }
.B4:    ;; preds:B3.
         r227 <- Upsilon { value: r160, phi_ref: r224 }
.B6:    ;; preds:B5.
         r217 <- Part { src: r197, offset: 4, size: 4 }
         r214 <- Const { value: -4, size: 8 }
         r215 <- Arith(Add, r214, r38)
         r216 <- LoadMem { reg: r215, size: 4 }
         r218 <- Concat { lo: r216, hi: r217 }
         r222 <- Ret(r218)


T0: {
  
  r224 := pre:RDI;
  goto T5
  T5: {
    let r38 = pre:RSP + -8;
    let r197 = r224[4 .. 8]⧺[-24i64 /* 0xffffffffffffffe8 */ + r38]:4;
    let r204 = WidenTo4([-8i64 /* 0xfffffffffffffff8 */ + r38]:4) - WidenTo4(r197[0 .. 4]);
    if(!(EQ(SignOf(r204), OverflowOf(r204)))) {
      
      r223 := r224[4 .. 8]⧺[-24i64 /* 0xffffffffffffffe8 */ + r38]:4;
      goto T3
      T3: {
        let r160 = r223[4 .. 8]⧺[-20i64 /* 0xffffffffffffffec */ + r38]:4;
        let r167 = WidenTo4([-12i64 /* 0xfffffffffffffff4 */ + r38]:4) - WidenTo4(r160[0 .. 4]);
        if(!(EQ(SignOf(r167), OverflowOf(r167)))) {
          TODO /* unsupported: imul eax,[rbp-8] */
          TODO /* unsupported: cdqe */
          let r76 = r160[4 .. 8]⧺[-20i64 /* 0xffffffffffffffec */ + r38]:4;
          let r85 = r76[4 .. 8]⧺[-12i64 /* 0xfffffffffffffff4 */ + r38]:4;
          let r111 = WidenTo8(WidenTo8(r85[4 .. 8]⧺WidenTo4(r85[0 .. 4]) + WidenTo4(pre:RSI[4 .. 8]⧺r76[0 .. 4][0 .. 4])) / WidenTo8(2i8 /* 0x2 */)) + WidenTo8([-32i64 /* 0xffffffffffffffe0 */ + r38]:8);
          r223 := r111[4 .. 8]⧺[0i64 /* 0x0 */ + r111]:4;
          loop T3
        }
        r224 := r223[4 .. 8]⧺[-20i64 /* 0xffffffffffffffec */ + r38]:4;
        loop T5
      }
    
    }
    Ret(r197[4 .. 8]⧺[-4i64 /* 0xfffffffffffffffc */ + r38]:4)
  }

}
