---
source: src/tests.rs
expression: output
---
mil program = 
program  70 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- #pre:arg0
   28 r14 <- sget8    r28,0
   29 r15 <- sget8    r28,8
   30 r28 <- undef
   31 r29 <- undef
   32 r30 <- undef
   33 r31 <- undef
   34 r32 <- undef
   35 r33 <- undef
   36 r34 <- undef
   37 r28 <- const4   1 (0x1)
   38 r16 <- v8.l4=   r16 ← r28
   39 r15 <- and      r15,r15  qword
   40 r6 <- sign     r15
   41 r5 <- is0      r15
   42 r30 <- l1       r15
   43 r3 <- parity   r15
   44 r2 <- const1   0 (0x0)
   45 r10 <- const1   0 (0x0)
   46 r28 <- jmp.if   r5,69
0x2:
   47 r28 <- l4       r16
   48 r28 <- addk     r28,1 dword
   49 r16 <- v8.l4=   r16 ← r28
   50 r10 <- false
   51 r2 <- false
   52 r6 <- sign     r28
   53 r5 <- is0      r28
   54 r29 <- l1       r28
   55 r3 <- parity   r29
0x0:
   56 r29 <- const8   8 (0x8)
   57 r29 <- add      r29,r15  qword
   58 r28 <- loadm8   addr:r29
   59 r15 <- get      r28
   60 r15 <- and      r15,r15  qword
   61 r6 <- sign     r15
   62 r5 <- is0      r15
   63 r30 <- l1       r15
   64 r3 <- parity   r15
   65 r2 <- const1   0 (0x0)
   66 r10 <- const1   0 (0x0)
   67 r28 <- not      r5
   68 r29 <- jmp.if   r28,47
0x1:
   69 r28 <- ret      r16


ssa program  18 instrs
.B0:    ;;  addr:0x0; 47 insn 0 phis
  (  2)  r15 <- #pre:RAX
         r27 <- #pre:arg0
  (  2)  r29 <- sget8    r27,8
  (  2)  r37 <- const4   1 (0x1)
  (  3)  r38 <- v8.l4=   r15 ← r37
         r41 <- is0      r29
         r46 <- jmp.if   r41,69
.B1:    ;;  preds:B0,B1  addr:0x2; 22 insn 2 phis
                  ɸ  B0     B1     
           r70    <- r29    r58    
  (  2)    r73    <- r38    r49    
         r48 <- addk     r73,1 dword
  (  3)  r49 <- v8.l4=   r73 ← r48
         r57 <- addk     r70,8 qword
  (  2)  r58 <- loadm8   addr:r57
         r62 <- is0      r58
         r67 <- not      r62
         r68 <- jmp.if   r67,47
.B2:    ;;  preds:B0,B1  addr:0x1; 1 insn 1 phis
                  ɸ  B0     B1     
           r76    <- r38    r49    
         r69 <- ret      r76


T0(): {
  let r29 = StructGet8[8](pre:arg0);
  let r38 = V8WithL4(pre:RAX, 0x1 /* 1 */);
  if IsZero(r29) {
    goto T2 (
      r76 = r38
    )
  
  }
  goto T1 (
    r70 = r29
    r73 = r38
  )
  
  T1(r70, r73): {
    let r49 = V8WithL4(r73, r73 + 1);
    if !(IsZero([r70 + 8]:8)) {
      goto T1 (
        r70 = [r70 + 8]:8
        r73 = r49
      )
    
    }
    goto T2 (
      r76 = r49
    )
  }
  
  T2(r76): {
    Ret(r76);
  }
}
