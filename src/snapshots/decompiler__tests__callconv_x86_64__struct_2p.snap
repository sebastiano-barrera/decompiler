---
source: src/tests.rs
expression: output
---
mil program = 
program  73 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Undefined
   28 r29 <- Undefined
   29 r30 <- Undefined
   30 r31 <- Undefined
   31 r32 <- Undefined
   32 r33 <- Undefined
   33 r34 <- Undefined
   34 r35 <- Undefined
   35 r36 <- Undefined
   36 r37 <- Undefined
   37 r38 <- Undefined
   38 r28 <- Const4(1)
   39 r16 <- Part { src: r16, offset: 4, size: 4 }
   40 r16 <- Concat { lo: r28, hi: r16 }
   41 r15 <- Arith8(BitAnd, r15, r15)
   42 r6 <- SignOf(r15)
   43 r5 <- IsZero(r15)
   44 r30 <- Part { src: r15, offset: 0, size: 1 }
   45 r3 <- Parity(r15)
   46 r2 <- Const1(0)
   47 r10 <- Const1(0)
   48 r28 <- JmpIf { cond: r5, target: 72 }
0x2:
   49 r28 <- Part { src: r16, offset: 0, size: 4 }
   50 r28 <- ArithK4(Add, r28, 1)
   51 r16 <- Part { src: r16, offset: 4, size: 4 }
   52 r16 <- Concat { lo: r28, hi: r16 }
   53 r10 <- False
   54 r2 <- False
   55 r6 <- SignOf(r28)
   56 r5 <- IsZero(r28)
   57 r29 <- Part { src: r28, offset: 0, size: 1 }
   58 r3 <- Parity(r29)
0x0:
   59 r29 <- Const8(8)
   60 r29 <- Arith8(Add, r29, r15)
   61 r28 <- LoadMem8(r29)
   62 r15 <- Get(r28)
   63 r15 <- Arith8(BitAnd, r15, r15)
   64 r6 <- SignOf(r15)
   65 r5 <- IsZero(r15)
   66 r30 <- Part { src: r15, offset: 0, size: 1 }
   67 r3 <- Parity(r15)
   68 r2 <- Const1(0)
   69 r10 <- Const1(0)
   70 r28 <- Not(r5)
   71 r29 <- JmpIf { cond: r28, target: 49 }
0x1:
   72 r28 <- Ret(r16)


ssa program
  14 control nodes, 21 data nodes
  ControlNID(9v1) -- IfTrue(ControlNID(8v1))
  ControlNID(1v1) -- Merge { preds: [] }
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(15v1) -- Ancestral(AncestralName("RSI"))
    DataNID(42v1) -- Arith(BitAnd, DataNID(15v1), DataNID(15v1))
    DataNID(44v1) -- IsZero(DataNID(42v1))
  ControlNID(4v1) -- Branch { pred: ControlNID(1v1), cond: DataNID(44v1) }
  ControlNID(6v1) -- IfFalse(ControlNID(4v1))
  ControlNID(2v1) -- Merge { preds: [ControlNID(6v1), ControlNID(9v1)] }
    DataNID(49v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(6v1), DataNID(42v1))] })
    DataNID(61v1) -- ConstInt { size: ValueSize(8), value: 8 }
    DataNID(62v1) -- Arith(Add, DataNID(61v1), DataNID(49v1))
  ControlNID(7v1) -- Load { pred: ControlNID(2v1), addr: DataNID(62v1) }
    DataNID(63v1) -- LoadedValueOf(ControlNID(7v1))
    DataNID(63v1) -- LoadedValueOf(ControlNID(7v1))
    DataNID(64v1) -- Arith(BitAnd, DataNID(63v1), DataNID(63v1))
    DataNID(66v1) -- IsZero(DataNID(64v1))
    DataNID(71v1) -- Not(DataNID(66v1))
  ControlNID(8v1) -- Branch { pred: ControlNID(7v1), cond: DataNID(71v1) }
  ControlNID(11v1) -- IfFalse(ControlNID(8v1))
  ControlNID(10v1) -- Merge { preds: [ControlNID(10v1), ControlNID(11v1)] }
  ControlNID(6v1) -- IfFalse(ControlNID(4v1))
  ControlNID(5v1) -- IfTrue(ControlNID(4v1))
  ControlNID(3v1) -- Merge { preds: [ControlNID(5v1), ControlNID(6v1), ControlNID(10v1)] }
  ControlNID(12v1) -- Jump { pred: ControlNID(3v1) }
  ControlNID(13v1) -- Merge { preds: [ControlNID(12v1)] }
    DataNID(16v1) -- Ancestral(AncestralName("RAX"))
    DataNID(40v1) -- Part { src: DataNID(16v1), offset: 4, size: 4 }
    DataNID(39v1) -- ConstInt { size: ValueSize(4), value: 1 }
    DataNID(41v1) -- Concat { lo: DataNID(39v1), hi: DataNID(40v1) }
    DataNID(50v1) -- Phi(Phi { merge_nid: ControlNID(2v1), values: [(ControlNID(6v1), DataNID(41v1))] })
    DataNID(53v1) -- Part { src: DataNID(50v1), offset: 4, size: 4 }
    DataNID(51v1) -- Part { src: DataNID(50v1), offset: 0, size: 4 }
    DataNID(52v1) -- ArithK(Add, DataNID(51v1), 1)
    DataNID(54v1) -- Concat { lo: DataNID(52v1), hi: DataNID(53v1) }
    DataNID(41v1) -- Concat { lo: DataNID(39v1), hi: DataNID(40v1) }
    DataNID(72v1) -- Phi(Phi { merge_nid: ControlNID(3v1), values: [(ControlNID(6v1), DataNID(41v1)), (ControlNID(10v1), DataNID(54v1))] })
    DataNID(73v1) -- Phi(Phi { merge_nid: ControlNID(13v1), values: [(ControlNID(12v1), DataNID(72v1))] })
  ControlNID(14v1) -- End { pred: ControlNID(13v1), ret: DataNID(73v1) }
