---
source: src/tests.rs
expression: output
---
mil program = 
program  78 instrs
    0 r12 <- #pre:stack_bottom
    1 r2 <- #pre:CF
    2 r3 <- #pre:PF
    3 r4 <- #pre:AF
    4 r5 <- #pre:ZF
    5 r6 <- #pre:SF
    6 r7 <- #pre:TF
    7 r8 <- #pre:IF
    8 r9 <- #pre:DF
    9 r10 <- #pre:OF
   10 r11 <- #pre:RBP
   11 r12 <- #pre:RSP
   12 r13 <- #pre:RIP
   13 r14 <- #pre:RDI
   14 r15 <- #pre:RSI
   15 r16 <- #pre:RAX
   16 r17 <- #pre:RBX
   17 r18 <- #pre:RCX
   18 r19 <- #pre:RDX
   19 r20 <- #pre:R8
   20 r21 <- #pre:R9
   21 r22 <- #pre:R10
   22 r23 <- #pre:R11
   23 r24 <- #pre:R12
   24 r25 <- #pre:R13
   25 r26 <- #pre:R14
   26 r27 <- #pre:R15
   27 r28 <- #pre:arg0
   28 r29 <- sget8    r28,0
   29 r14 <- get      r29
   30 r30 <- sget8    r28,8
   31 r15 <- get      r30
   32 r28 <- undef
   33 r29 <- undef
   34 r30 <- undef
   35 r31 <- undef
   36 r32 <- undef
   37 r33 <- undef
   38 r34 <- undef
   39 r35 <- undef
   40 r36 <- undef
   41 r37 <- undef
   42 r38 <- undef
   43 r28 <- const4   1 (0x1)
   44 r16 <- part     r16[4..8]
   45 r16 <- concat   r16⌢r28
   46 r15 <- and      r15,r15  qword
   47 r6 <- sign     r15
   48 r5 <- is0      r15
   49 r30 <- part     r15[0..1]
   50 r3 <- parity   r15
   51 r2 <- const1   0 (0x0)
   52 r10 <- const1   0 (0x0)
   53 r28 <- jmp.if   r5,77
0x2:
   54 r28 <- part     r16[0..4]
   55 r28 <- addk     r28,1 dword
   56 r16 <- part     r16[4..8]
   57 r16 <- concat   r16⌢r28
   58 r10 <- false
   59 r2 <- false
   60 r6 <- sign     r28
   61 r5 <- is0      r28
   62 r29 <- part     r28[0..1]
   63 r3 <- parity   r29
0x0:
   64 r29 <- const8   8 (0x8)
   65 r29 <- add      r29,r15  qword
   66 r28 <- loadm8   addr:r29
   67 r15 <- get      r28
   68 r15 <- and      r15,r15  qword
   69 r6 <- sign     r15
   70 r5 <- is0      r15
   71 r30 <- part     r15[0..1]
   72 r3 <- parity   r15
   73 r2 <- const1   0 (0x0)
   74 r10 <- const1   0 (0x0)
   75 r28 <- not      r5
   76 r29 <- jmp.if   r28,54
0x1:
   77 r28 <- ret      r16


ssa program  21 instrs
.B0:    ;;  addr:0x0; 54 insn 0 phis
         r15 <- #pre:RAX
         r27 <- #pre:arg0
  (  2)  r30 <- sget8    r27,8
  (  2)  r43 <- const4   1 (0x1)
  (  2)  r44 <- part     r15[4..8]
  (  2)  r45 <- concat   r44⌢r43
         r48 <- is0      r30
         r53 <- jmp.if   r48,77
.B1:    ;;  preds:B0,B1  addr:0x2; 23 insn 2 phis
                  ɸ  B0     B1     
           r78    <- r30    r66    
  (  2)    r81    <- r45    r57    
         r54 <- part     r81[0..4]
         r55 <- addk     r54,1 dword
         r56 <- part     r81[4..8]
  (  2)  r57 <- concat   r56⌢r55
         r65 <- addk     r78,8 qword
  (  2)  r66 <- loadm8   addr:r65
         r70 <- is0      r66
         r75 <- not      r70
         r76 <- jmp.if   r75,54
.B2:    ;;  preds:B0,B1  addr:0x1; 1 insn 1 phis
                  ɸ  B0     B1     
           r84    <- r45    r57    
         r77 <- ret      r84


T0(): {
  let r30 = StructGet8[8](pre:arg0);
  let r44 = pre:RAX[4 .. 8];
  let r45 = r44⌢0x1 /* 1 */;
  if IsZero(r30) {
    goto T2 (
      r84 = r45
    )
  
  }
  goto T1 (
    r78 = r30
    r81 = r45
  )
  
  T1(r78, r81): {
    let r57 = r81[4 .. 8]⌢r81[0 .. 4] + 1;
    if !(IsZero([r78 + 8]:8)) {
      goto T1 (
        r78 = [r78 + 8]:8
        r81 = r57
      )
    
    }
    goto T2 (
      r84 = r57
    )
  }
  
  T2(r84): {
    Ret(r84);
  }
}
