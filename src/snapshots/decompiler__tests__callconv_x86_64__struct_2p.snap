---
source: src/tests.rs
expression: output
---
mil program = 
program  86 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Ancestral(AncestralName("arg0"))
   28 r29 <- StructGetMember { struct_value: r28, name: "name", size: 8 }
   29 r29 <- StructGetMember { struct_value: r28, name: "next", size: 8 }
   30 r30 <- Part { src: r15, offset: 0, size: 0 }
   31 r31 <- Part { src: r29, offset: 0, size: 8 }
   32 r31 <- Concat { lo: r30, hi: r31 }
   33 r30 <- Part { src: r15, offset: 8, size: 0 }
   34 r15 <- Concat { lo: r31, hi: r30 }
   35 r32 <- Part { src: r14, offset: 0, size: 0 }
   36 r33 <- Part { src: r29, offset: 0, size: 8 }
   37 r33 <- Concat { lo: r32, hi: r33 }
   38 r32 <- Part { src: r14, offset: 8, size: 0 }
   39 r14 <- Concat { lo: r33, hi: r32 }
   40 r28 <- Undefined
   41 r29 <- Undefined
   42 r30 <- Undefined
   43 r31 <- Undefined
   44 r32 <- Undefined
   45 r33 <- Undefined
   46 r34 <- Undefined
   47 r35 <- Undefined
   48 r36 <- Undefined
   49 r37 <- Undefined
   50 r38 <- Undefined
   51 r28 <- Const4(1)
   52 r16 <- Part { src: r16, offset: 4, size: 4 }
   53 r16 <- Concat { lo: r28, hi: r16 }
   54 r15 <- Arith8(BitAnd, r15, r15)
   55 r6 <- SignOf(r15)
   56 r5 <- IsZero(r15)
   57 r30 <- Part { src: r15, offset: 0, size: 1 }
   58 r3 <- Parity(r15)
   59 r2 <- Const1(0)
   60 r10 <- Const1(0)
   61 r28 <- JmpIf { cond: r5, target: 85 }
0x2:
   62 r28 <- Part { src: r16, offset: 0, size: 4 }
   63 r28 <- ArithK4(Add, r28, 1)
   64 r16 <- Part { src: r16, offset: 4, size: 4 }
   65 r16 <- Concat { lo: r28, hi: r16 }
   66 r10 <- False
   67 r2 <- False
   68 r6 <- SignOf(r28)
   69 r5 <- IsZero(r28)
   70 r29 <- Part { src: r28, offset: 0, size: 1 }
   71 r3 <- Parity(r29)
0x0:
   72 r29 <- Const8(8)
   73 r29 <- Arith8(Add, r29, r15)
   74 r28 <- LoadMem8(r29)
   75 r15 <- Get(r28)
   76 r15 <- Arith8(BitAnd, r15, r15)
   77 r6 <- SignOf(r15)
   78 r5 <- IsZero(r15)
   79 r30 <- Part { src: r15, offset: 0, size: 1 }
   80 r3 <- Parity(r15)
   81 r2 <- Const1(0)
   82 r10 <- Const1(0)
   83 r28 <- Not(r5)
   84 r29 <- JmpIf { cond: r28, target: 62 }
0x1:
   85 r28 <- Ret(r16)


ssa program  22 instrs
.B0:    ;;  addr:0x0; 62 insn 0 phis
         r15 <- Ancestral(AncestralName("RAX"))
         r27 <- Ancestral(AncestralName("arg0"))
         r29 <- StructGetMember { struct_value: r27, name: "next", size: 8 }
  (  2)  r51 <- Const4(1)
  (  2)  r52 <- Part { src: r15, offset: 4, size: 4 }
  (  2)  r53 <- Concat { lo: r51, hi: r52 }
  (  2)  r54 <- Get(r34)
         r56 <- IsZero(r54)
         r61 <- JmpIf { cond: r56, target: 85 }
.B1:    ;;  preds:B0,B1  addr:0x2; 23 insn 2 phis
                  ɸ  B0     B1     
           r86    <- r54    r76    
  (  2)    r89    <- r53    r65    
         r62 <- Part { src: r89, offset: 0, size: 4 }
         r63 <- ArithK4(Add, r62, 1)
         r64 <- Part { src: r89, offset: 4, size: 4 }
  (  2)  r65 <- Concat { lo: r63, hi: r64 }
         r73 <- ArithK8(Add, r86, 8)
  (  2)  r76 <- Get(r74)
         r78 <- IsZero(r76)
         r83 <- Not(r78)
         r84 <- JmpIf { cond: r83, target: 62 }
.B2:    ;;  preds:B0,B1  addr:0x1; 1 insn 1 phis
                  ɸ  B0     B1     
           r92    <- r53    r65    
         r85 <- Ret(r92)


T0(): {
  let r52 = pre:RAX[4 .. 8];
  let r53 = r52⧺0x1 /* 1 */;
  if IsZero(pre:arg0.next[0 .. 8]) {
    goto T2 (
      r92 = r53
    )
  
  }
  goto T1 (
    r86 = pre:arg0.next[0 .. 8]
    r89 = r53
  )
  
  T1(r86, r89): {
    let r65 = r89[4 .. 8]⧺r89[0 .. 4] + 1;
    if !(IsZero([r86 + 8]:8)) {
      goto T1 (
        r86 = [r86 + 8]:8
        r89 = r65
      )
    
    }
    goto T2 (
      r92 = r65
    )
  }
  
  T2(r92): {
    Ret(r92);
  }
}
