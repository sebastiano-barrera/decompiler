---
source: src/tests.rs
expression: output
---
mil program = 
program  78 instrs
    0 r12 <- Ancestral(AncestralName("stack_bottom"))
    1 r2 <- Ancestral(AncestralName("CF"))
    2 r3 <- Ancestral(AncestralName("PF"))
    3 r4 <- Ancestral(AncestralName("AF"))
    4 r5 <- Ancestral(AncestralName("ZF"))
    5 r6 <- Ancestral(AncestralName("SF"))
    6 r7 <- Ancestral(AncestralName("TF"))
    7 r8 <- Ancestral(AncestralName("IF"))
    8 r9 <- Ancestral(AncestralName("DF"))
    9 r10 <- Ancestral(AncestralName("OF"))
   10 r11 <- Ancestral(AncestralName("RBP"))
   11 r12 <- Ancestral(AncestralName("RSP"))
   12 r13 <- Ancestral(AncestralName("RIP"))
   13 r14 <- Ancestral(AncestralName("RDI"))
   14 r15 <- Ancestral(AncestralName("RSI"))
   15 r16 <- Ancestral(AncestralName("RAX"))
   16 r17 <- Ancestral(AncestralName("RBX"))
   17 r18 <- Ancestral(AncestralName("RCX"))
   18 r19 <- Ancestral(AncestralName("RDX"))
   19 r20 <- Ancestral(AncestralName("R8"))
   20 r21 <- Ancestral(AncestralName("R9"))
   21 r22 <- Ancestral(AncestralName("R10"))
   22 r23 <- Ancestral(AncestralName("R11"))
   23 r24 <- Ancestral(AncestralName("R12"))
   24 r25 <- Ancestral(AncestralName("R13"))
   25 r26 <- Ancestral(AncestralName("R14"))
   26 r27 <- Ancestral(AncestralName("R15"))
   27 r28 <- Ancestral(AncestralName("arg0"))
   28 r29 <- StructGet8 { struct_value: r28, offset: 0 }
   29 r14 <- Get(r29)
   30 r30 <- StructGet8 { struct_value: r28, offset: 8 }
   31 r15 <- Get(r30)
   32 r28 <- Undefined
   33 r29 <- Undefined
   34 r30 <- Undefined
   35 r31 <- Undefined
   36 r32 <- Undefined
   37 r33 <- Undefined
   38 r34 <- Undefined
   39 r35 <- Undefined
   40 r36 <- Undefined
   41 r37 <- Undefined
   42 r38 <- Undefined
   43 r28 <- Const4(1)
   44 r16 <- Part { src: r16, offset: 4, size: 4 }
   45 r16 <- Concat { lo: r28, hi: r16 }
   46 r15 <- Arith8(BitAnd, r15, r15)
   47 r6 <- SignOf(r15)
   48 r5 <- IsZero(r15)
   49 r30 <- Part { src: r15, offset: 0, size: 1 }
   50 r3 <- Parity(r15)
   51 r2 <- Const1(0)
   52 r10 <- Const1(0)
   53 r28 <- JmpIf { cond: r5, target: 77 }
0x2:
   54 r28 <- Part { src: r16, offset: 0, size: 4 }
   55 r28 <- ArithK4(Add, r28, 1)
   56 r16 <- Part { src: r16, offset: 4, size: 4 }
   57 r16 <- Concat { lo: r28, hi: r16 }
   58 r10 <- False
   59 r2 <- False
   60 r6 <- SignOf(r28)
   61 r5 <- IsZero(r28)
   62 r29 <- Part { src: r28, offset: 0, size: 1 }
   63 r3 <- Parity(r29)
0x0:
   64 r29 <- Const8(8)
   65 r29 <- Arith8(Add, r29, r15)
   66 r28 <- LoadMem8(r29)
   67 r15 <- Get(r28)
   68 r15 <- Arith8(BitAnd, r15, r15)
   69 r6 <- SignOf(r15)
   70 r5 <- IsZero(r15)
   71 r30 <- Part { src: r15, offset: 0, size: 1 }
   72 r3 <- Parity(r15)
   73 r2 <- Const1(0)
   74 r10 <- Const1(0)
   75 r28 <- Not(r5)
   76 r29 <- JmpIf { cond: r28, target: 54 }
0x1:
   77 r28 <- Ret(r16)


ssa program  23 instrs
.B0:    ;;  addr:0x0; 54 insn 0 phis
         r15 <- Ancestral(AncestralName("RAX"))
         r27 <- Ancestral(AncestralName("arg0"))
  (  2)  r30 <- StructGet8 { struct_value: r27, offset: 8 }
  (  2)  r43 <- Const4(1)
  (  2)  r44 <- Part { src: r15, offset: 4, size: 4 }
  (  2)  r45 <- Concat { lo: r43, hi: r44 }
         r46 <- Get(r30)
         r48 <- IsZero(r30)
         r53 <- JmpIf { cond: r48, target: 77 }
.B1:    ;;  preds:B0,B1  addr:0x2; 23 insn 2 phis
                  ɸ  B0     B1     
           r78    <- r46    r68    
  (  2)    r81    <- r45    r57    
         r54 <- Part { src: r81, offset: 0, size: 4 }
         r55 <- ArithK4(Add, r54, 1)
         r56 <- Part { src: r81, offset: 4, size: 4 }
  (  2)  r57 <- Concat { lo: r55, hi: r56 }
         r65 <- ArithK8(Add, r78, 8)
  (  2)  r66 <- LoadMem8(r65)
         r68 <- Get(r66)
         r70 <- IsZero(r66)
         r75 <- Not(r70)
         r76 <- JmpIf { cond: r75, target: 54 }
.B2:    ;;  preds:B0,B1  addr:0x1; 1 insn 1 phis
                  ɸ  B0     B1     
           r84    <- r45    r57    
         r77 <- Ret(r84)


T0(): {
  let r30 = StructGet8[8](pre:arg0);
  let r44 = pre:RAX[4 .. 8];
  let r45 = r44⧺0x1 /* 1 */;
  if IsZero(r30) {
    goto T2 (
      r84 = r45
    )
  
  }
  goto T1 (
    r78 = StructGet8[8](pre:arg0)
    r81 = r45
  )
  
  T1(r78, r81): {
    let r57 = r81[4 .. 8]⧺r81[0 .. 4] + 1;
    if !(IsZero([r78 + 8]:8)) {
      goto T1 (
        r78 = [r78 + 8]:8
        r81 = r57
      )
    
    }
    goto T2 (
      r84 = r57
    )
  }
  
  T2(r84): {
    Ret(r84);
  }
}
