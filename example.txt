
#
# Problem: dealing with subsets of registers (e.g. al, eax, rax)
#


let push x =
	# push can have both 32 and 64 bit operands
	let x = to_reg x in
	match size x with
	| Size8 ->
		emit (I.addk  rsp <- rsp -8);
		emit (I.memw8 mem <- rsp x)
	| Size4 ->
		emit (I.addk  rsp <- rsp -4);
		emit (I.memw4 mem <- rsp x)
	| Size2 
	| Size1 -> fail

val to_reg : operand -> Mil.reg

let mov dest src =
	let src = to_reg src in
	write dest src

let write dest src =
	match dest with
	| Reg r ->
		assert size r == size src;
		(match size r with
		| Size8 -> emit (I.Copy dest src)
		| Size4 -> 
		| Size2 -> 
		| Size1 -> 
		)
        | Mem addr ->
		(match size src with
		| Size1 -> emit (I.MemWriteKR1 addr src)
		| Size2 -> emit (I.MemWriteKR2 addr src)
		| Size4 -> emit (I.MemWriteKR4 addr src)
		| Size8 -> emit (I.MemWriteKR8 addr src)
		)
        | MemIndirect addr_reg ->
		assert (size addr_reg) == Size8
		write (MemWriteRR addr_reg src)


# push al
	addk rsp -1
	memw1 rsp al

movzx


          401176: 55                      push rbp
          401177: 48 89 e5                mov rbp,rsp
          40117a: 48 83 ec 20             sub rsp,20h
          40117e: 48 8d 45 e8             lea rax,[rbp-18h]
          401182: 48 89 c2                mov rdx,rax
          401185: be 08 00 00 00          mov esi,8
          40118a: bf 03 00 00 00          mov edi,3
          40118f: e8 dc fe ff ff          call 0000000000401070h
          401194: 85 c0                   test eax,eax
          401196: 74 0a                   je short 00000000004011A2h
          401198: b8 ff ff ff ff          mov eax,0FFFFFFFFh
          40119d: e9 ec 00 00 00          jmp 000000000040128Eh
          4011a2: 48 8b 45 e8             mov rax,[rbp-18h]
          4011a6: 48 8d 55 e0             lea rdx,[rbp-20h]
          4011aa: 49 89 d1                mov r9,rdx
          4011ad: 41 b8 00 00 00 00       mov r8d,0
          4011b3: b9 00 10 00 00          mov ecx,1000h
          4011b8: ba 08 00 00 00          mov edx,8
          4011bd: be 10 20 40 00          mov esi,402010h
          4011c2: 48 89 c7                mov rdi,rax
          4011c5: e8 96 fe ff ff          call 0000000000401060h
          4011ca: 48 89 45 f0             mov [rbp-10h],rax
          4011ce: 48 83 7d f0 00          cmp qword ptr [rbp-10h],0
          4011d3: 0f 84 9a 00 00 00       je 0000000000401273h
          4011d9: 48 c7 45 f8 00 00 00 00 mov qword ptr [rbp-8],0
          4011e1: eb 71                   jmp short 0000000000401254h
          4011e3: 48 8b 4d e0             mov rcx,[rbp-20h]
          4011e7: 48 8b 55 f8             mov rdx,[rbp-8]
          4011eb: 48 89 d0                mov rax,rdx
          4011ee: 48 c1 e0 05             shl rax,5
          4011f2: 48 29 d0                sub rax,rdx
          4011f5: 48 c1 e0 03             shl rax,3
          4011f9: 48 01 c8                add rax,rcx
          4011fc: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401200: 48 8b 75 e0             mov rsi,[rbp-20h]
          401204: 48 8b 55 f8             mov rdx,[rbp-8]
          401208: 48 89 d0                mov rax,rdx
          40120b: 48 c1 e0 05             shl rax,5
          40120f: 48 29 d0                sub rax,rdx
          401212: 48 c1 e0 03             shl rax,3
          401216: 48 01 f0                add rax,rsi
          401219: 48 8d 70 2a             lea rsi,[rax+2Ah]
          40121d: 48 8b 7d e0             mov rdi,[rbp-20h]
          401221: 48 8b 55 f8             mov rdx,[rbp-8]
          401225: 48 89 d0                mov rax,rdx
          401228: 48 c1 e0 05             shl rax,5
          40122c: 48 29 d0                sub rax,rdx
          40122f: 48 c1 e0 03             shl rax,3
          401233: 48 01 f8                add rax,rdi
          401236: 48 8b 40 08             mov rax,[rax+8]
          40123a: 48 89 f2                mov rdx,rsi
          40123d: 48 89 c6                mov rsi,rax
          401240: bf 19 20 40 00          mov edi,402019h
          401245: b8 00 00 00 00          mov eax,0
          40124a: e8 01 fe ff ff          call 0000000000401050h
          40124f: 48 83 45 f8 01          add qword ptr [rbp-8],1
          401254: 48 8b 45 f8             mov rax,[rbp-8]
          401258: 48 3b 45 f0             cmp rax,[rbp-10h]
          40125c: 72 85                   jb short 00000000004011E3h
          40125e: 48 8b 45 e0             mov rax,[rbp-20h]
          401262: 48 8b 55 f0             mov rdx,[rbp-10h]
          401266: 48 89 d6                mov rsi,rdx
          401269: 48 89 c7                mov rdi,rax
          40126c: e8 cf fd ff ff          call 0000000000401040h
          401271: eb 0a                   jmp short 000000000040127Dh
          401273: bf 28 20 40 00          mov edi,402028h
          401278: e8 b3 fd ff ff          call 0000000000401030h
          40127d: 48 8d 45 e8             lea rax,[rbp-18h]
          401281: 48 89 c7                mov rdi,rax
          401284: e8 f7 fd ff ff          call 0000000000401080h
          401289: b8 00 00 00 00          mov eax,0
          40128e: c9                      leave
          40128f: c3                      ret

