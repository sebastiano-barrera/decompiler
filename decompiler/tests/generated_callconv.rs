// This file is generated by scripts/gen_callconv_tests.rb -- do not edit
mod utils;
use decompiler::{Insn, R};
use test_log::test;
use utils::dataflow::*;

#[test]
fn func000_in() {
    let data_flow = compute_data_flow("func000_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func001_in() {
    let data_flow = compute_data_flow("func001_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func002_in() {
    let data_flow = compute_data_flow("func002_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func003_in() {
    let data_flow = compute_data_flow("func003_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func004_in() {
    let data_flow = compute_data_flow("func004_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func005_in() {
    let data_flow = compute_data_flow("func005_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func006_in() {
    let data_flow = compute_data_flow("func006_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func007_in() {
    let data_flow = compute_data_flow("func007_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func008_in() {
    let data_flow = compute_data_flow("func008_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func009_in() {
    let data_flow = compute_data_flow("func009_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func010_in() {
    let data_flow = compute_data_flow("func010_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func011_in() {
    let data_flow = compute_data_flow("func011_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func012_in() {
    let data_flow = compute_data_flow("func012_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func013_in() {
    let data_flow = compute_data_flow("func013_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func014_in() {
    let data_flow = compute_data_flow("func014_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func015_in() {
    let data_flow = compute_data_flow("func015_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func016_in() {
    let data_flow = compute_data_flow("func016_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func017_in() {
    let data_flow = compute_data_flow("func017_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func018_in() {
    let data_flow = compute_data_flow("func018_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func019_in() {
    let data_flow = compute_data_flow("func019_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func020_in() {
    let data_flow = compute_data_flow("func020_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func021_in() {
    let data_flow = compute_data_flow("func021_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func022_in() {
    let data_flow = compute_data_flow("func022_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func023_in() {
    let data_flow = compute_data_flow("func023_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func024_in() {
    let data_flow = compute_data_flow("func024_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func025_in() {
    let data_flow = compute_data_flow("func025_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func026_in() {
    let data_flow = compute_data_flow("func026_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func027_in() {
    let data_flow = compute_data_flow("func027_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func028_in() {
    let data_flow = compute_data_flow("func028_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func029_in() {
    let data_flow = compute_data_flow("func029_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func030_in() {
    let data_flow = compute_data_flow("func030_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func031_in() {
    let data_flow = compute_data_flow("func031_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func032_in() {
    let data_flow = compute_data_flow("func032_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func033_in() {
    let data_flow = compute_data_flow("func033_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func034_in() {
    let data_flow = compute_data_flow("func034_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func035_in() {
    let data_flow = compute_data_flow("func035_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func036_in() {
    let data_flow = compute_data_flow("func036_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func037_in() {
    let data_flow = compute_data_flow("func037_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func038_in() {
    let data_flow = compute_data_flow("func038_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func039_in() {
    let data_flow = compute_data_flow("func039_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func040_in() {
    let data_flow = compute_data_flow("func040_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func041_in() {
    let data_flow = compute_data_flow("func041_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func042_in() {
    let data_flow = compute_data_flow("func042_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func043_in() {
    let data_flow = compute_data_flow("func043_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func044_in() {
    let data_flow = compute_data_flow("func044_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func045_in() {
    let data_flow = compute_data_flow("func045_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func046_in() {
    let data_flow = compute_data_flow("func046_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func047_in() {
    let data_flow = compute_data_flow("func047_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func048_in() {
    let data_flow = compute_data_flow("func048_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func049_in() {
    let data_flow = compute_data_flow("func049_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func050_in() {
    let data_flow = compute_data_flow("func050_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func051_in() {
    let data_flow = compute_data_flow("func051_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func052_in() {
    let data_flow = compute_data_flow("func052_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func053_in() {
    let data_flow = compute_data_flow("func053_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func054_in() {
    let data_flow = compute_data_flow("func054_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func055_in() {
    let data_flow = compute_data_flow("func055_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func056_in() {
    let data_flow = compute_data_flow("func056_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func057_in() {
    let data_flow = compute_data_flow("func057_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func058_in() {
    let data_flow = compute_data_flow("func058_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func059_in() {
    let data_flow = compute_data_flow("func059_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func060_in() {
    let data_flow = compute_data_flow("func060_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func061_in() {
    let data_flow = compute_data_flow("func061_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func062_in() {
    let data_flow = compute_data_flow("func062_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func063_in() {
    let data_flow = compute_data_flow("func063_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func064_in() {
    let data_flow = compute_data_flow("func064_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func065_in() {
    let data_flow = compute_data_flow("func065_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func066_in() {
    let data_flow = compute_data_flow("func066_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func067_in() {
    let data_flow = compute_data_flow("func067_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func068_in() {
    let data_flow = compute_data_flow("func068_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func069_in() {
    let data_flow = compute_data_flow("func069_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func070_in() {
    let data_flow = compute_data_flow("func070_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func071_in() {
    let data_flow = compute_data_flow("func071_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func072_in() {
    let data_flow = compute_data_flow("func072_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func073_in() {
    let data_flow = compute_data_flow("func073_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func074_in() {
    let data_flow = compute_data_flow("func074_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func075_in() {
    let data_flow = compute_data_flow("func075_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func076_in() {
    let data_flow = compute_data_flow("func076_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func077_in() {
    let data_flow = compute_data_flow("func077_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func078_in() {
    let data_flow = compute_data_flow("func078_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func079_in() {
    let data_flow = compute_data_flow("func079_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func080_in() {
    let data_flow = compute_data_flow("func080_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func081_in() {
    let data_flow = compute_data_flow("func081_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func082_in() {
    let data_flow = compute_data_flow("func082_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func083_in() {
    let data_flow = compute_data_flow("func083_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func084_in() {
    let data_flow = compute_data_flow("func084_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func085_in() {
    let data_flow = compute_data_flow("func085_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func086_in() {
    let data_flow = compute_data_flow("func086_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func087_in() {
    let data_flow = compute_data_flow("func087_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func088_in() {
    let data_flow = compute_data_flow("func088_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func089_in() {
    let data_flow = compute_data_flow("func089_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func090_in() {
    let data_flow = compute_data_flow("func090_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func091_in() {
    let data_flow = compute_data_flow("func091_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func092_in() {
    let data_flow = compute_data_flow("func092_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func093_in() {
    let data_flow = compute_data_flow("func093_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func094_in() {
    let data_flow = compute_data_flow("func094_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func095_in() {
    let data_flow = compute_data_flow("func095_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func096_in() {
    let data_flow = compute_data_flow("func096_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func097_in() {
    let data_flow = compute_data_flow("func097_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func098_in() {
    let data_flow = compute_data_flow("func098_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func099_in() {
    let data_flow = compute_data_flow("func099_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func100_in() {
    let data_flow = compute_data_flow("func100_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func101_in() {
    let data_flow = compute_data_flow("func101_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func102_in() {
    let data_flow = compute_data_flow("func102_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func103_in() {
    let data_flow = compute_data_flow("func103_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func104_in() {
    let data_flow = compute_data_flow("func104_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func105_in() {
    let data_flow = compute_data_flow("func105_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func106_in() {
    let data_flow = compute_data_flow("func106_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func107_in() {
    let data_flow = compute_data_flow("func107_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func108_in() {
    let data_flow = compute_data_flow("func108_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func109_in() {
    let data_flow = compute_data_flow("func109_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func110_in() {
    let data_flow = compute_data_flow("func110_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func111_in() {
    let data_flow = compute_data_flow("func111_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func112_in() {
    let data_flow = compute_data_flow("func112_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func113_in() {
    let data_flow = compute_data_flow("func113_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func114_in() {
    let data_flow = compute_data_flow("func114_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func115_in() {
    let data_flow = compute_data_flow("func115_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func116_in() {
    let data_flow = compute_data_flow("func116_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func117_in() {
    let data_flow = compute_data_flow("func117_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func118_in() {
    let data_flow = compute_data_flow("func118_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func119_in() {
    let data_flow = compute_data_flow("func119_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func120_in() {
    let data_flow = compute_data_flow("func120_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func121_in() {
    let data_flow = compute_data_flow("func121_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func122_in() {
    let data_flow = compute_data_flow("func122_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func123_in() {
    let data_flow = compute_data_flow("func123_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func124_in() {
    let data_flow = compute_data_flow("func124_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func125_in() {
    let data_flow = compute_data_flow("func125_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func126_in() {
    let data_flow = compute_data_flow("func126_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func127_in() {
    let data_flow = compute_data_flow("func127_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func128_in() {
    let data_flow = compute_data_flow("func128_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func129_in() {
    let data_flow = compute_data_flow("func129_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func130_in() {
    let data_flow = compute_data_flow("func130_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func131_in() {
    let data_flow = compute_data_flow("func131_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func132_in() {
    let data_flow = compute_data_flow("func132_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func133_in() {
    let data_flow = compute_data_flow("func133_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func134_in() {
    let data_flow = compute_data_flow("func134_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func135_in() {
    let data_flow = compute_data_flow("func135_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func136_in() {
    let data_flow = compute_data_flow("func136_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func137_in() {
    let data_flow = compute_data_flow("func137_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func138_in() {
    let data_flow = compute_data_flow("func138_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func139_in() {
    let data_flow = compute_data_flow("func139_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func140_in() {
    let data_flow = compute_data_flow("func140_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func141_in() {
    let data_flow = compute_data_flow("func141_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func142_in() {
    let data_flow = compute_data_flow("func142_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func143_in() {
    let data_flow = compute_data_flow("func143_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func144_in() {
    let data_flow = compute_data_flow("func144_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func145_in() {
    let data_flow = compute_data_flow("func145_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func146_in() {
    let data_flow = compute_data_flow("func146_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func147_in() {
    let data_flow = compute_data_flow("func147_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func148_in() {
    let data_flow = compute_data_flow("func148_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func149_in() {
    let data_flow = compute_data_flow("func149_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func150_in() {
    let data_flow = compute_data_flow("func150_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func151_in() {
    let data_flow = compute_data_flow("func151_in");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
