// This file is generated by scripts/gen_callconv_tests.rb -- do not edit
mod utils;
use decompiler::{Insn, R};
use test_log::test;
use utils::dataflow::*;

#[test]
fn func000() {
    let data_flow = compute_data_flow("func000");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func001() {
    let data_flow = compute_data_flow("func001");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func002() {
    let data_flow = compute_data_flow("func002");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func003() {
    let data_flow = compute_data_flow("func003");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func004() {
    let data_flow = compute_data_flow("func004");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func005() {
    let data_flow = compute_data_flow("func005");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func006() {
    let data_flow = compute_data_flow("func006");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
}
#[test]
fn func007() {
    let data_flow = compute_data_flow("func007");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func008() {
    let data_flow = compute_data_flow("func008");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func009() {
    let data_flow = compute_data_flow("func009");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func010() {
    let data_flow = compute_data_flow("func010");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func011() {
    let data_flow = compute_data_flow("func011");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func012() {
    let data_flow = compute_data_flow("func012");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func013() {
    let data_flow = compute_data_flow("func013");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func014() {
    let data_flow = compute_data_flow("func014");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func015() {
    let data_flow = compute_data_flow("func015");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func016() {
    let data_flow = compute_data_flow("func016");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func017() {
    let data_flow = compute_data_flow("func017");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func018() {
    let data_flow = compute_data_flow("func018");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 0);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func019() {
    let data_flow = compute_data_flow("func019");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func020() {
    let data_flow = compute_data_flow("func020");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func021() {
    let data_flow = compute_data_flow("func021");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func022() {
    let data_flow = compute_data_flow("func022");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func023() {
    let data_flow = compute_data_flow("func023");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func024() {
    let data_flow = compute_data_flow("func024");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func025() {
    let data_flow = compute_data_flow("func025");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
}
#[test]
fn func026() {
    let data_flow = compute_data_flow("func026");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func027() {
    let data_flow = compute_data_flow("func027");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func028() {
    let data_flow = compute_data_flow("func028");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func029() {
    let data_flow = compute_data_flow("func029");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func030() {
    let data_flow = compute_data_flow("func030");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func031() {
    let data_flow = compute_data_flow("func031");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func032() {
    let data_flow = compute_data_flow("func032");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func033() {
    let data_flow = compute_data_flow("func033");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func034() {
    let data_flow = compute_data_flow("func034");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func035() {
    let data_flow = compute_data_flow("func035");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func036() {
    let data_flow = compute_data_flow("func036");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func037() {
    let data_flow = compute_data_flow("func037");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 1);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func038() {
    let data_flow = compute_data_flow("func038");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func039() {
    let data_flow = compute_data_flow("func039");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func040() {
    let data_flow = compute_data_flow("func040");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func041() {
    let data_flow = compute_data_flow("func041");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func042() {
    let data_flow = compute_data_flow("func042");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func043() {
    let data_flow = compute_data_flow("func043");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func044() {
    let data_flow = compute_data_flow("func044");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
}
#[test]
fn func045() {
    let data_flow = compute_data_flow("func045");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func046() {
    let data_flow = compute_data_flow("func046");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func047() {
    let data_flow = compute_data_flow("func047");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func048() {
    let data_flow = compute_data_flow("func048");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func049() {
    let data_flow = compute_data_flow("func049");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func050() {
    let data_flow = compute_data_flow("func050");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func051() {
    let data_flow = compute_data_flow("func051");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func052() {
    let data_flow = compute_data_flow("func052");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func053() {
    let data_flow = compute_data_flow("func053");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func054() {
    let data_flow = compute_data_flow("func054");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func055() {
    let data_flow = compute_data_flow("func055");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func056() {
    let data_flow = compute_data_flow("func056");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 2);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func057() {
    let data_flow = compute_data_flow("func057");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func058() {
    let data_flow = compute_data_flow("func058");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func059() {
    let data_flow = compute_data_flow("func059");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func060() {
    let data_flow = compute_data_flow("func060");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func061() {
    let data_flow = compute_data_flow("func061");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func062() {
    let data_flow = compute_data_flow("func062");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func063() {
    let data_flow = compute_data_flow("func063");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
}
#[test]
fn func064() {
    let data_flow = compute_data_flow("func064");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func065() {
    let data_flow = compute_data_flow("func065");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func066() {
    let data_flow = compute_data_flow("func066");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func067() {
    let data_flow = compute_data_flow("func067");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func068() {
    let data_flow = compute_data_flow("func068");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func069() {
    let data_flow = compute_data_flow("func069");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func070() {
    let data_flow = compute_data_flow("func070");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func071() {
    let data_flow = compute_data_flow("func071");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func072() {
    let data_flow = compute_data_flow("func072");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func073() {
    let data_flow = compute_data_flow("func073");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func074() {
    let data_flow = compute_data_flow("func074");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func075() {
    let data_flow = compute_data_flow("func075");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 3);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func076() {
    let data_flow = compute_data_flow("func076");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func077() {
    let data_flow = compute_data_flow("func077");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func078() {
    let data_flow = compute_data_flow("func078");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func079() {
    let data_flow = compute_data_flow("func079");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func080() {
    let data_flow = compute_data_flow("func080");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func081() {
    let data_flow = compute_data_flow("func081");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func082() {
    let data_flow = compute_data_flow("func082");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
}
#[test]
fn func083() {
    let data_flow = compute_data_flow("func083");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func084() {
    let data_flow = compute_data_flow("func084");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func085() {
    let data_flow = compute_data_flow("func085");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func086() {
    let data_flow = compute_data_flow("func086");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func087() {
    let data_flow = compute_data_flow("func087");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func088() {
    let data_flow = compute_data_flow("func088");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func089() {
    let data_flow = compute_data_flow("func089");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func090() {
    let data_flow = compute_data_flow("func090");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func091() {
    let data_flow = compute_data_flow("func091");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func092() {
    let data_flow = compute_data_flow("func092");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func093() {
    let data_flow = compute_data_flow("func093");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func094() {
    let data_flow = compute_data_flow("func094");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 4);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func095() {
    let data_flow = compute_data_flow("func095");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func096() {
    let data_flow = compute_data_flow("func096");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func097() {
    let data_flow = compute_data_flow("func097");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func098() {
    let data_flow = compute_data_flow("func098");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func099() {
    let data_flow = compute_data_flow("func099");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func100() {
    let data_flow = compute_data_flow("func100");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func101() {
    let data_flow = compute_data_flow("func101");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
}
#[test]
fn func102() {
    let data_flow = compute_data_flow("func102");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func103() {
    let data_flow = compute_data_flow("func103");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func104() {
    let data_flow = compute_data_flow("func104");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func105() {
    let data_flow = compute_data_flow("func105");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func106() {
    let data_flow = compute_data_flow("func106");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func107() {
    let data_flow = compute_data_flow("func107");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func108() {
    let data_flow = compute_data_flow("func108");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func109() {
    let data_flow = compute_data_flow("func109");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func110() {
    let data_flow = compute_data_flow("func110");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func111() {
    let data_flow = compute_data_flow("func111");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func112() {
    let data_flow = compute_data_flow("func112");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func113() {
    let data_flow = compute_data_flow("func113");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 5);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func114() {
    let data_flow = compute_data_flow("func114");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func115() {
    let data_flow = compute_data_flow("func115");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func116() {
    let data_flow = compute_data_flow("func116");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func117() {
    let data_flow = compute_data_flow("func117");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func118() {
    let data_flow = compute_data_flow("func118");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func119() {
    let data_flow = compute_data_flow("func119");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func120() {
    let data_flow = compute_data_flow("func120");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
}
#[test]
fn func121() {
    let data_flow = compute_data_flow("func121");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func122() {
    let data_flow = compute_data_flow("func122");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func123() {
    let data_flow = compute_data_flow("func123");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func124() {
    let data_flow = compute_data_flow("func124");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func125() {
    let data_flow = compute_data_flow("func125");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func126() {
    let data_flow = compute_data_flow("func126");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func127() {
    let data_flow = compute_data_flow("func127");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func128() {
    let data_flow = compute_data_flow("func128");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func129() {
    let data_flow = compute_data_flow("func129");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func130() {
    let data_flow = compute_data_flow("func130");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func131() {
    let data_flow = compute_data_flow("func131");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func132() {
    let data_flow = compute_data_flow("func132");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 6);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
#[test]
fn func133() {
    let data_flow = compute_data_flow("func133");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func134() {
    let data_flow = compute_data_flow("func134");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func135() {
    let data_flow = compute_data_flow("func135");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func136() {
    let data_flow = compute_data_flow("func136");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func137() {
    let data_flow = compute_data_flow("func137");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func138() {
    let data_flow = compute_data_flow("func138");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func139() {
    let data_flow = compute_data_flow("func139");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 1);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
}
#[test]
fn func140() {
    let data_flow = compute_data_flow("func140");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func141() {
    let data_flow = compute_data_flow("func141");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func142() {
    let data_flow = compute_data_flow("func142");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func143() {
    let data_flow = compute_data_flow("func143");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func144() {
    let data_flow = compute_data_flow("func144");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func145() {
    let data_flow = compute_data_flow("func145");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member0");
        }
    );
}
#[test]
fn func146() {
    let data_flow = compute_data_flow("func146");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member1");
        }
    );
}
#[test]
fn func147() {
    let data_flow = compute_data_flow("func147");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member2");
        }
    );
}
#[test]
fn func148() {
    let data_flow = compute_data_flow("func148");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 2);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member3");
        }
    );
}
#[test]
fn func149() {
    let data_flow = compute_data_flow("func149");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 0);
    });
}
#[test]
fn func150() {
    let data_flow = compute_data_flow("func150");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 1);
    });
}
#[test]
fn func151() {
    let data_flow = compute_data_flow("func151");
    let insns = data_flow.as_slice();

    assert_eq!(insns.len(), 3);
    assert_matches!(&insns[0], Insn::FuncArgument { index, .. }, {
        assert_eq!(*index, 7);
    });
    assert_matches!(
        &insns[1],
        Insn::StructGetMember {
            struct_value,
            name,
            ..
        },
        {
            assert_eq!(*struct_value, R(0));
            assert_eq!(*name, "member4");
        }
    );
    assert_matches!(&insns[2], Insn::ArrayGetElement { array, index, .. }, {
        assert_eq!(*array, R(1));
        assert_eq!(*index, 2);
    });
}
