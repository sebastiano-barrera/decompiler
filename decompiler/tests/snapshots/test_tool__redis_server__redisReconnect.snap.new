---
source: decompiler/tests/test_tool.rs
assertion_line: 71
expression: out
---
redisReconnect 0x595020+390 (file 0x195020)
          595020: 55                      push rbp
          595021: 48 8d 6f 0c             lea rbp,[rdi+0Ch]
          595025: 53                      push rbx
          595026: 48 89 fb                mov rbx,rdi
          595029: 48 83 ec 08             sub rsp,8
          59502d: c7 47 08 00 00 00 00    mov dword ptr [rdi+8],0
          595034: 48 89 ef                mov rdi,rbp
          595037: e8 a4 c2 e6 ff          call 00000000004012E0h
          59503c: 48 89 ef                mov rdi,rbp
          59503f: 31 f6                   xor esi,esi
          595041: 48 89 c2                mov rdx,rax
          595044: e8 f7 c3 e6 ff          call 0000000000401440h
          595049: 48 8b bb 00 01 00 00    mov rdi,[rbx+100h]
          595050: 48 85 ff                test rdi,rdi
          595053: 74 19                   je short 000000000059506Eh
          595055: 48 8b 03                mov rax,[rbx]
          595058: 48 8b 50 08             mov rdx,[rax+8]
          59505c: 48 85 d2                test rdx,rdx
          59505f: 74 15                   je short 0000000000595076h
          595061: ff d2                   call rdx
          595063: 48 c7 83 00 01 00 00 00 mov qword ptr [rbx+100h],0
          59506e: 48 8b 03                mov rax,[rbx]
          595071: 48 85 c0                test rax,rax
          595074: 74 0d                   je short 0000000000595083h
          595076: 48 8b 00                mov rax,[rax]
          595079: 48 85 c0                test rax,rax
          59507c: 74 05                   je short 0000000000595083h
          59507e: 48 89 df                mov rdi,rbx
          595081: ff d0                   call rax
          595083: 48 8b bb 98 00 00 00    mov rdi,[rbx+98h]
          59508a: e8 e1 0f 00 00          call 0000000000596070h
          59508f: 48 8b bb a0 00 00 00    mov rdi,[rbx+0A0h]
          595096: e8 f5 47 00 00          call 0000000000599890h
          59509b: e8 30 0f 00 00          call 0000000000595FD0h
          5950a0: 48 89 83 98 00 00 00    mov [rbx+98h],rax
          5950a7: e8 44 fe ff ff          call 0000000000594EF0h
          5950ac: 48 83 bb 98 00 00 00 00 cmp qword ptr [rbx+98h],0
          5950b4: 48 89 83 a0 00 00 00    mov [rbx+0A0h],rax
          5950bb: 0f 84 c7 00 00 00       je 0000000000595188h
          5950c1: 48 85 c0                test rax,rax
          5950c4: 0f 84 be 00 00 00       je 0000000000595188h
          5950ca: 8b 83 a8 00 00 00       mov eax,[rbx+0A8h]
          5950d0: 85 c0                   test eax,eax
          5950d2: 74 6c                   je short 0000000000595140h
          5950d4: 83 f8 01                cmp eax,1
          5950d7: 74 47                   je short 0000000000595120h
          5950d9: 48 8d 15 58 9d 11 00    lea rdx,[6AEE38h]
          5950e0: be 02 00 00 00          mov esi,2
          5950e5: 48 89 df                mov rdi,rbx
          5950e8: bd ff ff ff ff          mov ebp,0FFFFFFFFh
          5950ed: e8 fe fc ff ff          call 0000000000594DF0h
          5950f2: 48 8b 83 b8 00 00 00    mov rax,[rbx+0B8h]
          5950f9: 48 85 c0                test rax,rax
          5950fc: 74 12                   je short 0000000000595110h
          5950fe: f6 83 90 00 00 00 01    test byte ptr [rbx+90h],1
          595105: 74 09                   je short 0000000000595110h
          595107: 83 bb 8c 00 00 00 ff    cmp dword ptr [rbx+8Ch],0FFFFFFFFh
          59510e: 75 60                   jne short 0000000000595170h
          595110: 48 83 c4 08             add rsp,8
          595114: 89 e8                   mov eax,ebp
          595116: 5b                      pop rbx
          595117: 5d                      pop rbp
          595118: c3                      ret
          595119: 0f 1f 80 00 00 00 00    nop [rax]
          595120: 48 8b 93 b0 00 00 00    mov rdx,[rbx+0B0h]
          595127: 48 8b b3 d8 00 00 00    mov rsi,[rbx+0D8h]
          59512e: 48 89 df                mov rdi,rbx
          595131: e8 9a df ff ff          call 00000000005930D0h
          595136: 89 c5                   mov ebp,eax
          595138: eb b8                   jmp short 00000000005950F2h
          59513a: 66 0f 1f 44 00 00       nop [rax+rax]
          595140: 48 8b 8b b0 00 00 00    mov rcx,[rbx+0B0h]
          595147: 8b 93 d0 00 00 00       mov edx,[rbx+0D0h]
          59514d: 48 89 df                mov rdi,rbx
          595150: 48 8b b3 c0 00 00 00    mov rsi,[rbx+0C0h]
          595157: 4c 8b 83 c8 00 00 00    mov r8,[rbx+0C8h]
          59515e: e8 5d df ff ff          call 00000000005930C0h
          595163: 89 c5                   mov ebp,eax
          595165: eb 8b                   jmp short 00000000005950F2h
          595167: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
          595170: 48 8b 30                mov rsi,[rax]
          595173: 48 8b 50 08             mov rdx,[rax+8]
          595177: 48 89 df                mov rdi,rbx
          59517a: e8 c1 dd ff ff          call 0000000000592F40h
          59517f: 48 83 c4 08             add rsp,8
          595183: 89 e8                   mov eax,ebp
          595185: 5b                      pop rbx
          595186: 5d                      pop rbp
          595187: c3                      ret
          595188: 48 8d 15 1f c2 10 00    lea rdx,[6A13AEh]
          59518f: be 05 00 00 00          mov esi,5
          595194: 48 89 df                mov rdi,rbx
          595197: bd ff ff ff ff          mov ebp,0FFFFFFFFh
          59519c: e8 4f fc ff ff          call 0000000000594DF0h
          5951a1: e9 6a ff ff ff          jmp 0000000000595110h

function type: "redisReconnect" func (c *redisContext <TypeID(297540v1)>) int <TypeID(297248v1)>
#call: to address 0x4012e0, returning to 0x59503c      -> resolved call to: TypeID(297696v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(297245v1), param_names: [None], param_tyids: [TypeID(297417v1)] }) }
#call: to address 0x401440, returning to 0x595049      -> resolved call to: TypeID(298680v1) = Type { name: "__builtin_memset", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [], param_tyids: [] }) }
#call: to address 0x596070, returning to 0x59508f      -> resolved call to: TypeID(297676v1) = Type { name: "hi_sdsfree", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [None], param_tyids: [TypeID(297374v1)] }) }
#call: to address 0x599890, returning to 0x59509b      -> resolved call to: TypeID(297650v1) = Type { name: "redisReaderFree", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [None], param_tyids: [TypeID(297536v1)] }) }
#call: to address 0x595fd0, returning to 0x5950a0      -> resolved call to: TypeID(297702v1) = Type { name: "hi_sdsempty", ty: Subroutine(Subroutine { return_tyid: TypeID(297374v1), param_names: [], param_tyids: [] }) }
#call: to address 0x594ef0, returning to 0x5950ac      -> resolved call to: TypeID(298074v1) = Type { name: "redisReaderCreate", ty: Subroutine(Subroutine { return_tyid: TypeID(297536v1), param_names: [], param_tyids: [] }) }
#call: to address 0x594df0, returning to 0x5950f2      -> resolved call to: TypeID(298077v1) = Type { name: "__redisSetError", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [Some("c"), Some("type"), Some("str")], param_tyids: [TypeID(297610v1), TypeID(297248v1), TypeID(297417v1)] }) }
#call: to address 0x5930d0, returning to 0x595136      -> resolved call to: TypeID(297636v1) = Type { name: "redisContextConnectUnix", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None, None], param_tyids: [TypeID(297610v1), TypeID(297417v1), TypeID(297481v1)] }) }
#call: to address 0x5930c0, returning to 0x595163      -> resolved call to: TypeID(297640v1) = Type { name: "redisContextConnectBindTcp", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None, None, None, None], param_tyids: [TypeID(297610v1), TypeID(297417v1), TypeID(297248v1), TypeID(297481v1), TypeID(297417v1)] }) }
#call: to address 0x592f40, returning to 0x59517f      -> resolved call to: TypeID(297633v1) = Type { name: "redisContextSetTimeout", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None], param_tyids: [TypeID(297610v1), TypeID(297369v1)] }) }
#call: to address 0x594df0, returning to 0x5951a1      -> resolved call to: TypeID(298077v1) = Type { name: "__redisSetError", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [Some("c"), Some("type"), Some("str")], param_tyids: [TypeID(297610v1), TypeID(297248v1), TypeID(297417v1)] }) }
3 warnings:
  #   0: no type hints for this callsite
  #   1: no type hints for this callsite
  #   2: call: call resolved but only packed 1/2 params


mil program = 
program  569 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
0x595020:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x595021:
   47 r45: TypeID(2v1) <- Const { value: 12, size: 8 }
   48 r45: TypeID(2v1) <- Arith(Add, r45, r14)
   49 r11: TypeID(2v1) <- Get(r45)
0x595025:
   50 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   51 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x595026:
   52 r17: TypeID(2v1) <- Get(r14)
0x595029:
   53 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   54 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   55 r12: TypeID(2v1) <- Get(r12)
   56 r10: TypeID(2v1) <- OverflowOf(r12)
   57 r2: TypeID(2v1) <- CarryOf(r12)
   58 r6: TypeID(2v1) <- SignOf(r12)
   59 r5: TypeID(2v1) <- IsZero(r12)
   60 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   61 r3: TypeID(2v1) <- Parity(r47)
0x59502d:
   62 r45: TypeID(2v1) <- Const { value: 0, size: 4 }
   63 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   64 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   65 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x595034:
   66 r14: TypeID(2v1) <- Get(r11)
0x595037:
   67 r45: TypeID(2v1) <- Void
   68 r45: TypeID(2v1) <- Get(r14)
   69 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
   70 r47: TypeID(297696v1) <- Const { value: 4199136, size: 8 }
   71 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
   72 r2: TypeID(2v1) <- Undefined
   73 r3: TypeID(2v1) <- Undefined
   74 r4: TypeID(2v1) <- Undefined
   75 r5: TypeID(2v1) <- Undefined
   76 r6: TypeID(2v1) <- Undefined
   77 r7: TypeID(2v1) <- Undefined
   78 r8: TypeID(2v1) <- Undefined
   79 r9: TypeID(2v1) <- Undefined
   80 r10: TypeID(2v1) <- Undefined
   81 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59503c:
   82 r14: TypeID(2v1) <- Get(r11)
0x59503f:
   83 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
   84 r48: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
   85 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
   86 r49: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   87 r15: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
   88 r10: TypeID(2v1) <- False
   89 r2: TypeID(2v1) <- False
   90 r6: TypeID(2v1) <- SignOf(r46)
   91 r5: TypeID(2v1) <- IsZero(r46)
   92 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   93 r3: TypeID(2v1) <- Parity(r50)
0x595041:
   94 r19: TypeID(2v1) <- Get(r16)
0x595044:
   95 r46: TypeID(298680v1) <- Const { value: 4199488, size: 8 }
   96 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
   97 r2: TypeID(2v1) <- Undefined
   98 r3: TypeID(2v1) <- Undefined
   99 r4: TypeID(2v1) <- Undefined
  100 r5: TypeID(2v1) <- Undefined
  101 r6: TypeID(2v1) <- Undefined
  102 r7: TypeID(2v1) <- Undefined
  103 r8: TypeID(2v1) <- Undefined
  104 r9: TypeID(2v1) <- Undefined
  105 r10: TypeID(2v1) <- Undefined
0x595049:
  106 r46: TypeID(2v1) <- Const { value: 256, size: 8 }
  107 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  108 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  109 r14: TypeID(2v1) <- Get(r45)
0x595050:
  110 r14: TypeID(2v1) <- Arith(BitAnd, r14, r14)
  111 r6: TypeID(2v1) <- SignOf(r14)
  112 r5: TypeID(2v1) <- IsZero(r14)
  113 r47: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  114 r3: TypeID(2v1) <- Parity(r14)
  115 r2: TypeID(2v1) <- False
  116 r10: TypeID(2v1) <- False
0x595053:
  117 r45: TypeID(2v1) <- SetJumpCondition(r5)
  118 r45: TypeID(2v1) <- Control(JmpIf(155))
0x595055:
  119 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  120 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  121 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  122 r16: TypeID(2v1) <- Get(r45)
0x595058:
  123 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  124 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  125 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  126 r19: TypeID(2v1) <- Get(r45)
0x59505c:
  127 r19: TypeID(2v1) <- Arith(BitAnd, r19, r19)
  128 r6: TypeID(2v1) <- SignOf(r19)
  129 r5: TypeID(2v1) <- IsZero(r19)
  130 r47: TypeID(2v1) <- Part { src: r19, offset: 0, size: 1 }
  131 r3: TypeID(2v1) <- Parity(r19)
  132 r2: TypeID(2v1) <- False
  133 r10: TypeID(2v1) <- False
0x59505f:
  134 r45: TypeID(2v1) <- SetJumpCondition(r5)
  135 r45: TypeID(2v1) <- Control(JmpIf(168))
0x595061:
  136 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  137 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  138 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  139 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  140 r45: TypeID(2v1) <- Call { callee: r19, first_arg: Some(r45) }
  141 r2: TypeID(2v1) <- Undefined
  142 r3: TypeID(2v1) <- Undefined
  143 r4: TypeID(2v1) <- Undefined
  144 r5: TypeID(2v1) <- Undefined
  145 r6: TypeID(2v1) <- Undefined
  146 r7: TypeID(2v1) <- Undefined
  147 r8: TypeID(2v1) <- Undefined
  148 r9: TypeID(2v1) <- Undefined
  149 r10: TypeID(2v1) <- Undefined
  150 r45: TypeID(2v1) <- Get(r16)
0x595063:
  151 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
  152 r46: TypeID(2v1) <- Const { value: 256, size: 8 }
  153 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  154 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x59506e:
  155 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  156 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  157 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  158 r16: TypeID(2v1) <- Get(r45)
0x595071:
  159 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  160 r6: TypeID(2v1) <- SignOf(r16)
  161 r5: TypeID(2v1) <- IsZero(r16)
  162 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  163 r3: TypeID(2v1) <- Parity(r16)
  164 r2: TypeID(2v1) <- False
  165 r10: TypeID(2v1) <- False
0x595074:
  166 r45: TypeID(2v1) <- SetJumpCondition(r5)
  167 r45: TypeID(2v1) <- Control(JmpIf(197))
0x595076:
  168 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  169 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  170 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  171 r16: TypeID(2v1) <- Get(r45)
0x595079:
  172 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  173 r6: TypeID(2v1) <- SignOf(r16)
  174 r5: TypeID(2v1) <- IsZero(r16)
  175 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  176 r3: TypeID(2v1) <- Parity(r16)
  177 r2: TypeID(2v1) <- False
  178 r10: TypeID(2v1) <- False
0x59507c:
  179 r45: TypeID(2v1) <- SetJumpCondition(r5)
  180 r45: TypeID(2v1) <- Control(JmpIf(197))
0x59507e:
  181 r14: TypeID(2v1) <- Get(r17)
0x595081:
  182 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  183 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  184 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  185 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  186 r45: TypeID(2v1) <- Call { callee: r16, first_arg: Some(r45) }
  187 r2: TypeID(2v1) <- Undefined
  188 r3: TypeID(2v1) <- Undefined
  189 r4: TypeID(2v1) <- Undefined
  190 r5: TypeID(2v1) <- Undefined
  191 r6: TypeID(2v1) <- Undefined
  192 r7: TypeID(2v1) <- Undefined
  193 r8: TypeID(2v1) <- Undefined
  194 r9: TypeID(2v1) <- Undefined
  195 r10: TypeID(2v1) <- Undefined
  196 r45: TypeID(2v1) <- Get(r16)
0x595083:
  197 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  198 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  199 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  200 r14: TypeID(2v1) <- Get(r45)
0x59508a:
  201 r45: TypeID(2v1) <- Void
  202 r45: TypeID(2v1) <- Get(r14)
  203 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  204 r47: TypeID(297676v1) <- Const { value: 5857392, size: 8 }
  205 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  206 r2: TypeID(2v1) <- Undefined
  207 r3: TypeID(2v1) <- Undefined
  208 r4: TypeID(2v1) <- Undefined
  209 r5: TypeID(2v1) <- Undefined
  210 r6: TypeID(2v1) <- Undefined
  211 r7: TypeID(2v1) <- Undefined
  212 r8: TypeID(2v1) <- Undefined
  213 r9: TypeID(2v1) <- Undefined
  214 r10: TypeID(2v1) <- Undefined
0x59508f:
  215 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  216 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  217 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  218 r14: TypeID(2v1) <- Get(r45)
0x595096:
  219 r45: TypeID(2v1) <- Void
  220 r45: TypeID(2v1) <- Get(r14)
  221 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  222 r47: TypeID(297650v1) <- Const { value: 5871760, size: 8 }
  223 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  224 r2: TypeID(2v1) <- Undefined
  225 r3: TypeID(2v1) <- Undefined
  226 r4: TypeID(2v1) <- Undefined
  227 r5: TypeID(2v1) <- Undefined
  228 r6: TypeID(2v1) <- Undefined
  229 r7: TypeID(2v1) <- Undefined
  230 r8: TypeID(2v1) <- Undefined
  231 r9: TypeID(2v1) <- Undefined
  232 r10: TypeID(2v1) <- Undefined
0x59509b:
  233 r46: TypeID(297702v1) <- Const { value: 5857232, size: 8 }
  234 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  235 r2: TypeID(2v1) <- Undefined
  236 r3: TypeID(2v1) <- Undefined
  237 r4: TypeID(2v1) <- Undefined
  238 r5: TypeID(2v1) <- Undefined
  239 r6: TypeID(2v1) <- Undefined
  240 r7: TypeID(2v1) <- Undefined
  241 r8: TypeID(2v1) <- Undefined
  242 r9: TypeID(2v1) <- Undefined
  243 r10: TypeID(2v1) <- Undefined
  244 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5950a0:
  245 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  246 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  247 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5950a7:
  248 r46: TypeID(298074v1) <- Const { value: 5852912, size: 8 }
  249 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  250 r2: TypeID(2v1) <- Undefined
  251 r3: TypeID(2v1) <- Undefined
  252 r4: TypeID(2v1) <- Undefined
  253 r5: TypeID(2v1) <- Undefined
  254 r6: TypeID(2v1) <- Undefined
  255 r7: TypeID(2v1) <- Undefined
  256 r8: TypeID(2v1) <- Undefined
  257 r9: TypeID(2v1) <- Undefined
  258 r10: TypeID(2v1) <- Undefined
  259 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5950ac:
  260 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  261 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  262 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  263 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  264 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  265 r10: TypeID(2v1) <- OverflowOf(r45)
  266 r2: TypeID(2v1) <- CarryOf(r45)
  267 r6: TypeID(2v1) <- SignOf(r45)
  268 r5: TypeID(2v1) <- IsZero(r45)
  269 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  270 r3: TypeID(2v1) <- Parity(r48)
0x5950b4:
  271 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  272 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  273 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5950bb:
  274 r45: TypeID(2v1) <- SetJumpCondition(r5)
  275 r45: TypeID(2v1) <- Control(JmpIf(537))
0x5950c1:
  276 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  277 r6: TypeID(2v1) <- SignOf(r16)
  278 r5: TypeID(2v1) <- IsZero(r16)
  279 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  280 r3: TypeID(2v1) <- Parity(r16)
  281 r2: TypeID(2v1) <- False
  282 r10: TypeID(2v1) <- False
0x5950c4:
  283 r45: TypeID(2v1) <- SetJumpCondition(r5)
  284 r45: TypeID(2v1) <- Control(JmpIf(537))
0x5950ca:
  285 r46: TypeID(2v1) <- Const { value: 168, size: 8 }
  286 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  287 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  288 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  289 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x5950d0:
  290 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  291 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  292 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  293 r6: TypeID(2v1) <- SignOf(r46)
  294 r5: TypeID(2v1) <- IsZero(r46)
  295 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  296 r3: TypeID(2v1) <- Parity(r46)
  297 r2: TypeID(2v1) <- False
  298 r10: TypeID(2v1) <- False
0x5950d2:
  299 r45: TypeID(2v1) <- SetJumpCondition(r5)
  300 r45: TypeID(2v1) <- Control(JmpIf(440))
0x5950d4:
  301 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  302 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  303 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  304 r10: TypeID(2v1) <- OverflowOf(r46)
  305 r2: TypeID(2v1) <- CarryOf(r46)
  306 r6: TypeID(2v1) <- SignOf(r46)
  307 r5: TypeID(2v1) <- IsZero(r46)
  308 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  309 r3: TypeID(2v1) <- Parity(r48)
0x5950d7:
  310 r45: TypeID(2v1) <- SetJumpCondition(r5)
  311 r45: TypeID(2v1) <- Control(JmpIf(406))
0x5950d9:
  312 r45: TypeID(2v1) <- Const { value: 7007800, size: 8 }
  313 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  314 r19: TypeID(2v1) <- Get(r45)
0x5950e0:
  315 r45: TypeID(2v1) <- Const { value: 2, size: 4 }
  316 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  317 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5950e5:
  318 r14: TypeID(2v1) <- Get(r17)
0x5950e8:
  319 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  320 r46: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  321 r11: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5950ed:
  322 r45: TypeID(2v1) <- Void
  323 r45: TypeID(2v1) <- Get(r14)
  324 r46: TypeID(2v1) <- Void
  325 r46: TypeID(2v1) <- Get(r15)
  326 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  327 r47: TypeID(2v1) <- Void
  328 r47: TypeID(2v1) <- Get(r19)
  329 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  330 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  331 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  332 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  333 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  334 r2: TypeID(2v1) <- Undefined
  335 r3: TypeID(2v1) <- Undefined
  336 r4: TypeID(2v1) <- Undefined
  337 r5: TypeID(2v1) <- Undefined
  338 r6: TypeID(2v1) <- Undefined
  339 r7: TypeID(2v1) <- Undefined
  340 r8: TypeID(2v1) <- Undefined
  341 r9: TypeID(2v1) <- Undefined
  342 r10: TypeID(2v1) <- Undefined
0x5950f2:
  343 r46: TypeID(2v1) <- Const { value: 184, size: 8 }
  344 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  345 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  346 r16: TypeID(2v1) <- Get(r45)
0x5950f9:
  347 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  348 r6: TypeID(2v1) <- SignOf(r16)
  349 r5: TypeID(2v1) <- IsZero(r16)
  350 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  351 r3: TypeID(2v1) <- Parity(r16)
  352 r2: TypeID(2v1) <- False
  353 r10: TypeID(2v1) <- False
0x5950fc:
  354 r45: TypeID(2v1) <- SetJumpCondition(r5)
  355 r45: TypeID(2v1) <- Control(JmpIf(383))
0x5950fe:
  356 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  357 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  358 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  359 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  360 r45: TypeID(2v1) <- Arith(BitAnd, r45, r47)
  361 r6: TypeID(2v1) <- SignOf(r45)
  362 r5: TypeID(2v1) <- IsZero(r45)
  363 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  364 r3: TypeID(2v1) <- Parity(r45)
  365 r2: TypeID(2v1) <- False
  366 r10: TypeID(2v1) <- False
0x595105:
  367 r45: TypeID(2v1) <- SetJumpCondition(r5)
  368 r45: TypeID(2v1) <- Control(JmpIf(383))
0x595107:
  369 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  370 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  371 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  372 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  373 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  374 r10: TypeID(2v1) <- OverflowOf(r45)
  375 r2: TypeID(2v1) <- CarryOf(r45)
  376 r6: TypeID(2v1) <- SignOf(r45)
  377 r5: TypeID(2v1) <- IsZero(r45)
  378 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  379 r3: TypeID(2v1) <- Parity(r48)
0x59510e:
  380 r45: TypeID(2v1) <- Not(r5)
  381 r46: TypeID(2v1) <- SetJumpCondition(r45)
  382 r46: TypeID(2v1) <- Control(JmpIf(490))
0x595110:
  383 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  384 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  385 r12: TypeID(2v1) <- Get(r12)
  386 r10: TypeID(2v1) <- OverflowOf(r12)
  387 r2: TypeID(2v1) <- CarryOf(r12)
  388 r6: TypeID(2v1) <- SignOf(r12)
  389 r5: TypeID(2v1) <- IsZero(r12)
  390 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  391 r3: TypeID(2v1) <- Parity(r47)
0x595114:
  392 r46: TypeID(2v1) <- Part { src: r11, offset: 0, size: 4 }
  393 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  394 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595116:
  395 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  396 r17: TypeID(2v1) <- Get(r45)
  397 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595117:
  398 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  399 r11: TypeID(2v1) <- Get(r45)
  400 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595118:
  401 r45: TypeID(2v1) <- Void
  402 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  403 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  404 r47: TypeID(2v1) <- SetReturnValue(r45)
  405 r47: TypeID(2v1) <- Control(Ret)
0x595120:
  406 r46: TypeID(2v1) <- Const { value: 176, size: 8 }
  407 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  408 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  409 r19: TypeID(2v1) <- Get(r45)
0x595127:
  410 r46: TypeID(2v1) <- Const { value: 216, size: 8 }
  411 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  412 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  413 r15: TypeID(2v1) <- Get(r45)
0x59512e:
  414 r14: TypeID(2v1) <- Get(r17)
0x595131:
  415 r45: TypeID(2v1) <- Void
  416 r45: TypeID(2v1) <- Get(r14)
  417 r46: TypeID(2v1) <- Void
  418 r46: TypeID(2v1) <- Get(r15)
  419 r47: TypeID(2v1) <- Void
  420 r47: TypeID(2v1) <- Get(r19)
  421 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  422 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  423 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  424 r49: TypeID(297636v1) <- Const { value: 5845200, size: 8 }
  425 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  426 r2: TypeID(2v1) <- Undefined
  427 r3: TypeID(2v1) <- Undefined
  428 r4: TypeID(2v1) <- Undefined
  429 r5: TypeID(2v1) <- Undefined
  430 r6: TypeID(2v1) <- Undefined
  431 r7: TypeID(2v1) <- Undefined
  432 r8: TypeID(2v1) <- Undefined
  433 r9: TypeID(2v1) <- Undefined
  434 r10: TypeID(2v1) <- Undefined
  435 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x595136:
  436 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  437 r47: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  438 r11: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595138:
  439 r45: TypeID(2v1) <- Control(Jmp(343))
0x595140:
  440 r46: TypeID(2v1) <- Const { value: 176, size: 8 }
  441 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  442 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  443 r18: TypeID(2v1) <- Get(r45)
0x595147:
  444 r46: TypeID(2v1) <- Const { value: 208, size: 8 }
  445 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  446 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  447 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  448 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59514d:
  449 r14: TypeID(2v1) <- Get(r17)
0x595150:
  450 r46: TypeID(2v1) <- Const { value: 192, size: 8 }
  451 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  452 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  453 r15: TypeID(2v1) <- Get(r45)
0x595157:
  454 r46: TypeID(2v1) <- Const { value: 200, size: 8 }
  455 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  456 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  457 r20: TypeID(2v1) <- Get(r45)
0x59515e:
  458 r45: TypeID(2v1) <- Void
  459 r45: TypeID(2v1) <- Get(r14)
  460 r46: TypeID(2v1) <- Void
  461 r46: TypeID(2v1) <- Get(r15)
  462 r47: TypeID(2v1) <- Void
  463 r47: TypeID(2v1) <- Get(r19)
  464 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  465 r48: TypeID(2v1) <- Void
  466 r48: TypeID(2v1) <- Get(r18)
  467 r49: TypeID(2v1) <- Void
  468 r49: TypeID(2v1) <- Get(r20)
  469 r50: TypeID(2v1) <- CArg { value: r49, next_arg: None }
  470 r50: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r50) }
  471 r50: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r50) }
  472 r50: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r50) }
  473 r50: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r50) }
  474 r51: TypeID(297640v1) <- Const { value: 5845184, size: 8 }
  475 r50: TypeID(2v1) <- Call { callee: r51, first_arg: Some(r50) }
  476 r2: TypeID(2v1) <- Undefined
  477 r3: TypeID(2v1) <- Undefined
  478 r4: TypeID(2v1) <- Undefined
  479 r5: TypeID(2v1) <- Undefined
  480 r6: TypeID(2v1) <- Undefined
  481 r7: TypeID(2v1) <- Undefined
  482 r8: TypeID(2v1) <- Undefined
  483 r9: TypeID(2v1) <- Undefined
  484 r10: TypeID(2v1) <- Undefined
  485 r16: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
0x595163:
  486 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  487 r47: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  488 r11: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595165:
  489 r45: TypeID(2v1) <- Control(Jmp(343))
0x595170:
  490 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  491 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  492 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  493 r15: TypeID(2v1) <- Get(r45)
0x595173:
  494 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  495 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  496 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  497 r19: TypeID(2v1) <- Get(r45)
0x595177:
  498 r14: TypeID(2v1) <- Get(r17)
0x59517a:
  499 r45: TypeID(2v1) <- Void
  500 r45: TypeID(2v1) <- Get(r14)
  501 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  502 r47: TypeID(297633v1) <- Const { value: 5844800, size: 8 }
  503 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  504 r2: TypeID(2v1) <- Undefined
  505 r3: TypeID(2v1) <- Undefined
  506 r4: TypeID(2v1) <- Undefined
  507 r5: TypeID(2v1) <- Undefined
  508 r6: TypeID(2v1) <- Undefined
  509 r7: TypeID(2v1) <- Undefined
  510 r8: TypeID(2v1) <- Undefined
  511 r9: TypeID(2v1) <- Undefined
  512 r10: TypeID(2v1) <- Undefined
  513 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59517f:
  514 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  515 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  516 r12: TypeID(2v1) <- Get(r12)
  517 r10: TypeID(2v1) <- OverflowOf(r12)
  518 r2: TypeID(2v1) <- CarryOf(r12)
  519 r6: TypeID(2v1) <- SignOf(r12)
  520 r5: TypeID(2v1) <- IsZero(r12)
  521 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  522 r3: TypeID(2v1) <- Parity(r47)
0x595183:
  523 r46: TypeID(2v1) <- Part { src: r11, offset: 0, size: 4 }
  524 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  525 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595185:
  526 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  527 r17: TypeID(2v1) <- Get(r45)
  528 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595186:
  529 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  530 r11: TypeID(2v1) <- Get(r45)
  531 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595187:
  532 r45: TypeID(2v1) <- Void
  533 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  534 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  535 r47: TypeID(2v1) <- SetReturnValue(r45)
  536 r47: TypeID(2v1) <- Control(Ret)
0x595188:
  537 r45: TypeID(2v1) <- Const { value: 6951854, size: 8 }
  538 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  539 r19: TypeID(2v1) <- Get(r45)
0x59518f:
  540 r45: TypeID(2v1) <- Const { value: 5, size: 4 }
  541 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  542 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x595194:
  543 r14: TypeID(2v1) <- Get(r17)
0x595197:
  544 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  545 r46: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  546 r11: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59519c:
  547 r45: TypeID(2v1) <- Void
  548 r45: TypeID(2v1) <- Get(r14)
  549 r46: TypeID(2v1) <- Void
  550 r46: TypeID(2v1) <- Get(r15)
  551 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  552 r47: TypeID(2v1) <- Void
  553 r47: TypeID(2v1) <- Get(r19)
  554 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  555 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  556 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  557 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  558 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  559 r2: TypeID(2v1) <- Undefined
  560 r3: TypeID(2v1) <- Undefined
  561 r4: TypeID(2v1) <- Undefined
  562 r5: TypeID(2v1) <- Undefined
  563 r6: TypeID(2v1) <- Undefined
  564 r7: TypeID(2v1) <- Undefined
  565 r8: TypeID(2v1) <- Undefined
  566 r9: TypeID(2v1) <- Undefined
  567 r10: TypeID(2v1) <- Undefined
0x5951a1:
  568 r45: TypeID(2v1) <- Control(Jmp(383))


ssa pre-xform:
ssa program  582 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  2)  r12: ? <- Ancestral(AncestralName("RIP"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 27)  r43: ? <- Ancestral(AncestralName("arg0"))
  (  2)  r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 12, size: 8 }
  (  6)  r48: ? <- Arith(Add, r47, r43)
         r50: ? <- ArithK(Add, r45, -8)
         r51: ? <- StoreMem { addr: r50, value: r16 }
         r62: ? <- Const { value: 0, size: 4 }
         r63: ? <- Const { value: 8, size: 8 }
         r64: ? <- Arith(Add, r63, r43)
         r65: ? <- StoreMem { addr: r64, value: r62 }
         r69: ? <- CArg { value: r48, next_arg: None }
         r70: strlen <TypeID(297696v1)> <- Const { value: 4199136, size: 8 }
         r71: ? <- Call { callee: r70, first_arg: Some(r69) }
  (  2)  r81: ? <- Part { src: r71, offset: 0, size: 8 }
         r83: ? <- Part { src: r14, offset: 0, size: 4 }
         r84: ? <- Part { src: r14, offset: 0, size: 4 }
         r85: ? <- Arith(BitXor, r83, r84)
         r86: ? <- Part { src: r14, offset: 4, size: 4 }
  (  4)  r87: ? <- Concat { lo: r85, hi: r86 }
         r95: __builtin_memset <TypeID(298680v1)> <- Const { value: 4199488, size: 8 }
         r96: ? <- Call { callee: r95, first_arg: None }
         r106: ? <- Const { value: 256, size: 8 }
         r107: ? <- Arith(Add, r106, r43)
  (  2)  r108: ? <- LoadMem { addr: r107, size: 8 }
  (  2)  r110: ? <- Arith(BitAnd, r108, r108)
         r112: ? <- IsZero(r110)
         r117: ? <- SetJumpCondition(r112)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
         r119: ? <- Const { value: 0, size: 8 }
         r120: ? <- Arith(Add, r119, r43)
  (  2)  r121: ? <- LoadMem { addr: r120, size: 8 }
         r123: ? <- Const { value: 8, size: 8 }
         r124: ? <- Arith(Add, r123, r121)
  (  2)  r125: ? <- LoadMem { addr: r124, size: 8 }
  (  3)  r127: ? <- Arith(BitAnd, r125, r125)
         r129: ? <- IsZero(r127)
         r134: ? <- SetJumpCondition(r129)
         r581: ? <- Upsilon { value: r121, phi_ref: r569 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r136: ? <- CArg { value: r17, next_arg: None }
         r137: ? <- CArg { value: r127, next_arg: Some(r136) }
         r138: ? <- CArg { value: r87, next_arg: Some(r137) }
         r139: ? <- CArg { value: r110, next_arg: Some(r138) }
         r140: ? <- Call { callee: r127, first_arg: Some(r139) }
         r151: ? <- Const { value: 0, size: 8 }
         r152: ? <- Const { value: 256, size: 8 }
         r153: ? <- Arith(Add, r152, r43)
         r154: ? <- StoreMem { addr: r153, value: r151 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
         r155: ? <- Const { value: 0, size: 8 }
         r156: ? <- Arith(Add, r155, r43)
  (  2)  r157: ? <- LoadMem { addr: r156, size: 8 }
  (  2)  r159: ? <- Arith(BitAnd, r157, r157)
         r161: ? <- IsZero(r159)
         r166: ? <- SetJumpCondition(r161)
         r580: ? <- Upsilon { value: r159, phi_ref: r569 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r569: ? <- Phi
         r168: ? <- Const { value: 0, size: 8 }
         r169: ? <- Arith(Add, r168, r569)
  (  2)  r170: ? <- LoadMem { addr: r169, size: 8 }
  (  2)  r172: ? <- Arith(BitAnd, r170, r170)
         r174: ? <- IsZero(r172)
         r179: ? <- SetJumpCondition(r174)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r182: ? <- CArg { value: r17, next_arg: None }
         r183: ? <- CArg { value: r81, next_arg: Some(r182) }
         r184: ? <- CArg { value: r87, next_arg: Some(r183) }
         r185: ? <- CArg { value: r43, next_arg: Some(r184) }
         r186: ? <- Call { callee: r172, first_arg: Some(r185) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r197: ? <- Const { value: 152, size: 8 }
         r198: ? <- Arith(Add, r197, r43)
         r199: ? <- LoadMem { addr: r198, size: 8 }
         r203: ? <- CArg { value: r199, next_arg: None }
         r204: hi_sdsfree <TypeID(297676v1)> <- Const { value: 5857392, size: 8 }
         r205: ? <- Call { callee: r204, first_arg: Some(r203) }
         r215: ? <- Const { value: 160, size: 8 }
         r216: ? <- Arith(Add, r215, r43)
         r217: ? <- LoadMem { addr: r216, size: 8 }
         r221: ? <- CArg { value: r217, next_arg: None }
         r222: redisReaderFree <TypeID(297650v1)> <- Const { value: 5871760, size: 8 }
         r223: ? <- Call { callee: r222, first_arg: Some(r221) }
         r233: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r234: ? <- Call { callee: r233, first_arg: None }
         r244: ? <- Part { src: r234, offset: 0, size: 8 }
         r245: ? <- Const { value: 152, size: 8 }
         r246: ? <- Arith(Add, r245, r43)
         r247: ? <- StoreMem { addr: r246, value: r244 }
         r248: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
         r249: ? <- Call { callee: r248, first_arg: None }
  (  4)  r259: ? <- Part { src: r249, offset: 0, size: 8 }
         r260: ? <- Const { value: 152, size: 8 }
         r261: ? <- Arith(Add, r260, r43)
         r262: ? <- LoadMem { addr: r261, size: 8 }
         r263: ? <- Const { value: 0, size: 8 }
         r264: ? <- Arith(Sub, r262, r263)
         r268: ? <- IsZero(r264)
         r271: ? <- Const { value: 160, size: 8 }
         r272: ? <- Arith(Add, r271, r43)
         r273: ? <- StoreMem { addr: r272, value: r259 }
         r274: ? <- SetJumpCondition(r268)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
  (  2)  r276: ? <- Arith(BitAnd, r259, r259)
         r278: ? <- IsZero(r276)
         r283: ? <- SetJumpCondition(r278)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r285: ? <- Const { value: 168, size: 8 }
         r286: ? <- Arith(Add, r285, r43)
         r287: ? <- LoadMem { addr: r286, size: 4 }
         r288: ? <- Part { src: r276, offset: 4, size: 4 }
  (  3)  r289: ? <- Concat { lo: r287, hi: r288 }
         r290: ? <- Part { src: r289, offset: 0, size: 4 }
         r291: ? <- Part { src: r289, offset: 0, size: 4 }
         r292: ? <- Arith(BitAnd, r290, r291)
         r294: ? <- IsZero(r292)
         r299: ? <- SetJumpCondition(r294)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r301: ? <- Part { src: r289, offset: 0, size: 4 }
         r302: ? <- Const { value: 1, size: 4 }
         r303: ? <- Arith(Sub, r301, r302)
         r307: ? <- IsZero(r303)
         r310: ? <- SetJumpCondition(r307)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r312: ? <- Const { value: 7007800, size: 8 }
         r313: ? <- Arith(Add, r312, r12)
         r315: ? <- Const { value: 2, size: 4 }
         r316: ? <- Part { src: r87, offset: 4, size: 4 }
         r317: ? <- Concat { lo: r315, hi: r316 }
         r326: ? <- Part { src: r317, offset: 0, size: 4 }
         r329: ? <- CArg { value: r313, next_arg: None }
         r330: ? <- CArg { value: r326, next_arg: Some(r329) }
         r331: ? <- CArg { value: r43, next_arg: Some(r330) }
         r332: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r333: ? <- Call { callee: r332, first_arg: Some(r331) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r406: ? <- Const { value: 176, size: 8 }
         r407: ? <- Arith(Add, r406, r43)
         r408: ? <- LoadMem { addr: r407, size: 8 }
         r410: ? <- Const { value: 216, size: 8 }
         r411: ? <- Arith(Add, r410, r43)
         r412: ? <- LoadMem { addr: r411, size: 8 }
         r421: ? <- CArg { value: r408, next_arg: None }
         r422: ? <- CArg { value: r412, next_arg: Some(r421) }
         r423: ? <- CArg { value: r43, next_arg: Some(r422) }
         r424: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r425: ? <- Call { callee: r424, first_arg: Some(r423) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r440: ? <- Const { value: 176, size: 8 }
         r441: ? <- Arith(Add, r440, r43)
         r442: ? <- LoadMem { addr: r441, size: 8 }
         r444: ? <- Const { value: 208, size: 8 }
         r445: ? <- Arith(Add, r444, r43)
         r446: ? <- LoadMem { addr: r445, size: 4 }
         r447: ? <- Part { src: r81, offset: 4, size: 4 }
         r448: ? <- Concat { lo: r446, hi: r447 }
         r450: ? <- Const { value: 192, size: 8 }
         r451: ? <- Arith(Add, r450, r43)
         r452: ? <- LoadMem { addr: r451, size: 8 }
         r454: ? <- Const { value: 200, size: 8 }
         r455: ? <- Arith(Add, r454, r43)
         r456: ? <- LoadMem { addr: r455, size: 8 }
         r464: ? <- Part { src: r448, offset: 0, size: 4 }
         r469: ? <- CArg { value: r456, next_arg: None }
         r470: ? <- CArg { value: r442, next_arg: Some(r469) }
         r471: ? <- CArg { value: r464, next_arg: Some(r470) }
         r472: ? <- CArg { value: r452, next_arg: Some(r471) }
         r473: ? <- CArg { value: r43, next_arg: Some(r472) }
         r474: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r475: ? <- Call { callee: r474, first_arg: Some(r473) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r343: ? <- Const { value: 184, size: 8 }
         r344: ? <- Arith(Add, r343, r43)
  (  2)  r345: ? <- LoadMem { addr: r344, size: 8 }
  (  4)  r347: ? <- Arith(BitAnd, r345, r345)
         r349: ? <- IsZero(r347)
         r354: ? <- SetJumpCondition(r349)
         r574: ? <- Upsilon { value: r48, phi_ref: r570 }
         r575: ? <- Upsilon { value: r347, phi_ref: r571 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r356: ? <- Const { value: 144, size: 8 }
         r357: ? <- Arith(Add, r356, r43)
         r358: ? <- LoadMem { addr: r357, size: 1 }
         r359: ? <- Const { value: 1, size: 1 }
         r360: ? <- Arith(BitAnd, r358, r359)
         r362: ? <- IsZero(r360)
         r367: ? <- SetJumpCondition(r362)
         r576: ? <- Upsilon { value: r48, phi_ref: r570 }
         r577: ? <- Upsilon { value: r347, phi_ref: r571 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r369: ? <- Const { value: 140, size: 8 }
         r370: ? <- Arith(Add, r369, r43)
         r371: ? <- LoadMem { addr: r370, size: 4 }
         r372: ? <- Const { value: -1, size: 4 }
         r373: ? <- Arith(Sub, r371, r372)
         r377: ? <- IsZero(r373)
         r380: ? <- Not(r377)
         r381: ? <- SetJumpCondition(r380)
         r578: ? <- Upsilon { value: r48, phi_ref: r570 }
         r579: ? <- Upsilon { value: r347, phi_ref: r571 }
.B17:    ;; preds:B13  → Always(Return).
         r501: ? <- CArg { value: r43, next_arg: None }
         r502: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r503: ? <- Call { callee: r502, first_arg: Some(r501) }
         r513: ? <- Part { src: r503, offset: 0, size: 8 }
         r523: ? <- Part { src: r48, offset: 0, size: 4 }
         r524: ? <- Part { src: r513, offset: 4, size: 4 }
         r525: ? <- Concat { lo: r523, hi: r524 }
         r533: ? <- Concat { lo: r532, hi: r525 }
         r534: ? <- Part { src: r533, offset: 0, size: 4 }
         r535: ? <- SetReturnValue(r534)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r537: ? <- Const { value: 6951854, size: 8 }
         r538: ? <- Arith(Add, r537, r12)
         r540: ? <- Const { value: 5, size: 4 }
         r541: ? <- Part { src: r87, offset: 4, size: 4 }
         r542: ? <- Concat { lo: r540, hi: r541 }
         r544: ? <- Const { value: 4294967295, size: 4 }
         r545: ? <- Part { src: r48, offset: 4, size: 4 }
         r546: ? <- Concat { lo: r544, hi: r545 }
         r551: ? <- Part { src: r542, offset: 0, size: 4 }
         r554: ? <- CArg { value: r538, next_arg: None }
         r555: ? <- CArg { value: r551, next_arg: Some(r554) }
         r556: ? <- CArg { value: r43, next_arg: Some(r555) }
         r557: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: Some(r556) }
         r572: ? <- Upsilon { value: r546, phi_ref: r570 }
         r573: ? <- Upsilon { value: r259, phi_ref: r571 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r571: ? <- Phi
         r570: ? <- Phi
         r392: ? <- Part { src: r570, offset: 0, size: 4 }
         r393: ? <- Part { src: r571, offset: 4, size: 4 }
         r394: ? <- Concat { lo: r392, hi: r393 }
         r402: ? <- Concat { lo: r401, hi: r394 }
         r403: ? <- Part { src: r402, offset: 0, size: 4 }
         r404: ? <- SetReturnValue(r403)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) } [r10, r11, r12, r14, r16, r17, r43, r45, r46, r47, r48, r50, r51, r62, r63, r64, r65, r69, r70, r71, r81, r83, r84, r85, r86, r87, r95, r96, r106, r107, r108, r110, r112, r117]
  BlockID(1) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) } [r119, r120, r121, r123, r124, r125, r127, r129, r134, r581]
  BlockID(2) -> Always(Block(BlockID(3))) [r136, r137, r138, r139, r140, r151, r152, r153, r154]
  BlockID(3) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) } [r155, r156, r157, r159, r161, r166, r580]
  BlockID(4) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) } [r569, r168, r169, r170, r172, r174, r179]
  BlockID(5) -> Always(Block(BlockID(6))) [r182, r183, r184, r185, r186]
  BlockID(6) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) } [r197, r198, r199, r203, r204, r205, r215, r216, r217, r221, r222, r223, r233, r234, r244, r245, r246, r247, r248, r249, r259, r260, r261, r262, r263, r264, r268, r271, r272, r273, r274]
  BlockID(7) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) } [r276, r278, r283]
  BlockID(8) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) } [r285, r286, r287, r288, r289, r290, r291, r292, r294, r299]
  BlockID(9) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) } [r301, r302, r303, r307, r310]
  BlockID(10) -> Always(Block(BlockID(11))) [r312, r313, r315, r316, r317, r326, r329, r330, r331, r332, r333]
  BlockID(11) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) } [r343, r344, r345, r347, r349, r354, r574, r575]
  BlockID(12) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) } [r356, r357, r358, r359, r360, r362, r367, r576, r577]
  BlockID(13) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) } [r369, r370, r371, r372, r373, r377, r380, r381, r578, r579]
  BlockID(14) -> Always(Return) [r571, r570, r392, r393, r394, r401, r402, r403, r404]
  BlockID(15) -> Always(Block(BlockID(11))) [r406, r407, r408, r410, r411, r412, r421, r422, r423, r424, r425]
  BlockID(16) -> Always(Block(BlockID(11))) [r440, r441, r442, r444, r445, r446, r447, r448, r450, r451, r452, r454, r455, r456, r464, r469, r470, r471, r472, r473, r474, r475]
  BlockID(17) -> Always(Return) [r501, r502, r503, r513, r523, r524, r525, r532, r533, r534, r535]
  BlockID(18) -> Always(Block(BlockID(14))) [r537, r538, r540, r541, r542, r544, r545, r546, r551, r554, r555, r556, r557, r558, r572, r573]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  BlockID(3)
    |  BlockID(4)
    |  |  BlockID(5)
    |  BlockID(6)
    |  |  BlockID(7)
    |  |  |  BlockID(8)
    |  |  |  |  BlockID(9)
    |  |  |  |  |  BlockID(10)
    |  |  |  |  |  BlockID(15)
    |  |  |  |  BlockID(11)
    |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  BlockID(16)
    |  |  BlockID(14)
    |  |  BlockID(18)

ssa post-xform:
fold_subregs: Part { src: r71, offset: 0, size: 8 }
fold_subregs: Part { src: r14, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r234, offset: 0, size: 8 }
fold_subregs: Part { src: r249, offset: 0, size: 8 }
fold_subregs: Part { src: r249, offset: 4, size: 4 }
fold_subregs: Part { src: r289, offset: 0, size: 4 }
fold_subregs: Part { src: r289, offset: 0, size: 4 }
fold_subregs: Part { src: r289, offset: 0, size: 4 }
fold_subregs: Part { src: r87, offset: 4, size: 4 }
fold_subregs: Part { src: r317, offset: 0, size: 4 }
fold_subregs: Part { src: r71, offset: 4, size: 4 }
fold_subregs: Part { src: r448, offset: 0, size: 4 }
fold_subregs: Part { src: r503, offset: 0, size: 8 }
fold_subregs: Part { src: r48, offset: 0, size: 4 }
fold_subregs: Part { src: r503, offset: 4, size: 4 }
fold_subregs: Part { src: r525, offset: 0, size: 4 }
fold_subregs: Part { src: r87, offset: 4, size: 4 }
fold_subregs: Part { src: r48, offset: 4, size: 4 }
fold_subregs: Part { src: r542, offset: 0, size: 4 }
fold_subregs: Part { src: r570, offset: 0, size: 4 }
fold_subregs: Part { src: r571, offset: 4, size: 4 }
fold_subregs: Part { src: r394, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r249, offset: 4, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r71, offset: 4, size: 4 }
fold_subregs: Part { src: r48, offset: 0, size: 4 }
fold_subregs: Part { src: r503, offset: 4, size: 4 }
fold_subregs: Part { src: r48, offset: 0, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r48, offset: 4, size: 4 }
fold_subregs: Part { src: r570, offset: 0, size: 4 }
fold_subregs: Part { src: r571, offset: 4, size: 4 }
fold_subregs: Part { src: r570, offset: 0, size: 4 }
ssa program  582 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  2)  r12: ? <- Ancestral(AncestralName("RIP"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 27)  r43: ? <- Ancestral(AncestralName("arg0"))
         r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
  (  6)  r48: ? <- ArithK(Add, r43, 12)
         r50: ? <- ArithK(Add, r11, -16)
         r51: ? <- StoreMem { addr: r50, value: r16 }
         r62: ? <- Const { value: 0, size: 4 }
         r64: ? <- ArithK(Add, r43, 8)
         r65: ? <- StoreMem { addr: r64, value: r62 }
         r69: ? <- CArg { value: r48, next_arg: None }
         r70: strlen <TypeID(297696v1)> <- Const { value: 4199136, size: 8 }
         r71: ? <- Call { callee: r70, first_arg: Some(r69) }
         r83: ? <- Part { src: r14, offset: 0, size: 4 }
         r84: ? <- Part { src: r14, offset: 0, size: 4 }
         r85: ? <- Arith(BitXor, r83, r84)
         r86: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r87: ? <- Concat { lo: r85, hi: r86 }
         r95: __builtin_memset <TypeID(298680v1)> <- Const { value: 4199488, size: 8 }
         r96: ? <- Call { callee: r95, first_arg: None }
         r107: ? <- ArithK(Add, r43, 256)
  (  2)  r108: ? <- LoadMem { addr: r107, size: 8 }
         r112: ? <- IsZero(r108)
         r117: ? <- SetJumpCondition(r112)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
  (  2)  r121: ? <- LoadMem { addr: r43, size: 8 }
         r124: ? <- ArithK(Add, r121, 8)
  (  3)  r125: ? <- LoadMem { addr: r124, size: 8 }
         r129: ? <- IsZero(r125)
         r134: ? <- SetJumpCondition(r129)
         r581: ? <- Upsilon { value: r121, phi_ref: r569 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r136: ? <- CArg { value: r17, next_arg: None }
         r137: ? <- CArg { value: r125, next_arg: Some(r136) }
         r138: ? <- CArg { value: r87, next_arg: Some(r137) }
         r139: ? <- CArg { value: r108, next_arg: Some(r138) }
         r140: ? <- Call { callee: r125, first_arg: Some(r139) }
         r151: ? <- Const { value: 0, size: 8 }
         r153: ? <- ArithK(Add, r43, 256)
         r154: ? <- StoreMem { addr: r153, value: r151 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
  (  2)  r157: ? <- LoadMem { addr: r43, size: 8 }
         r161: ? <- IsZero(r157)
         r166: ? <- SetJumpCondition(r161)
         r580: ? <- Upsilon { value: r157, phi_ref: r569 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r569: ? <- Phi
  (  2)  r170: ? <- LoadMem { addr: r569, size: 8 }
         r174: ? <- IsZero(r170)
         r179: ? <- SetJumpCondition(r174)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r182: ? <- CArg { value: r17, next_arg: None }
         r183: ? <- CArg { value: r71, next_arg: Some(r182) }
         r184: ? <- CArg { value: r87, next_arg: Some(r183) }
         r185: ? <- CArg { value: r43, next_arg: Some(r184) }
         r186: ? <- Call { callee: r170, first_arg: Some(r185) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r198: ? <- ArithK(Add, r43, 152)
         r199: ? <- LoadMem { addr: r198, size: 8 }
         r203: ? <- CArg { value: r199, next_arg: None }
         r204: hi_sdsfree <TypeID(297676v1)> <- Const { value: 5857392, size: 8 }
         r205: ? <- Call { callee: r204, first_arg: Some(r203) }
         r216: ? <- ArithK(Add, r43, 160)
         r217: ? <- LoadMem { addr: r216, size: 8 }
         r221: ? <- CArg { value: r217, next_arg: None }
         r222: redisReaderFree <TypeID(297650v1)> <- Const { value: 5871760, size: 8 }
         r223: ? <- Call { callee: r222, first_arg: Some(r221) }
         r233: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r234: ? <- Call { callee: r233, first_arg: None }
         r246: ? <- ArithK(Add, r43, 152)
         r247: ? <- StoreMem { addr: r246, value: r234 }
         r248: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
  (  2)  r249: ? <- Call { callee: r248, first_arg: None }
         r261: ? <- ArithK(Add, r43, 152)
         r262: ? <- LoadMem { addr: r261, size: 8 }
         r268: ? <- IsZero(r262)
         r272: ? <- ArithK(Add, r43, 160)
         r273: ? <- StoreMem { addr: r272, value: r249 }
         r274: ? <- SetJumpCondition(r268)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
         r278: ? <- IsZero(r249)
         r283: ? <- SetJumpCondition(r278)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r286: ? <- ArithK(Add, r43, 168)
  (  2)  r287: ? <- LoadMem { addr: r286, size: 4 }
         r294: ? <- IsZero(r287)
         r299: ? <- SetJumpCondition(r294)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r303: ? <- ArithK(Add, r287, -1)
         r307: ? <- IsZero(r303)
         r310: ? <- SetJumpCondition(r307)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r313: ? <- ArithK(Add, r12, 7007800)
         r315: ? <- Const { value: 2, size: 4 }
         r329: ? <- CArg { value: r313, next_arg: None }
         r330: ? <- CArg { value: r315, next_arg: Some(r329) }
         r331: ? <- CArg { value: r43, next_arg: Some(r330) }
         r332: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r333: ? <- Call { callee: r332, first_arg: Some(r331) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r407: ? <- ArithK(Add, r43, 176)
         r408: ? <- LoadMem { addr: r407, size: 8 }
         r411: ? <- ArithK(Add, r43, 216)
         r412: ? <- LoadMem { addr: r411, size: 8 }
         r421: ? <- CArg { value: r408, next_arg: None }
         r422: ? <- CArg { value: r412, next_arg: Some(r421) }
         r423: ? <- CArg { value: r43, next_arg: Some(r422) }
         r424: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r425: ? <- Call { callee: r424, first_arg: Some(r423) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r441: ? <- ArithK(Add, r43, 176)
         r442: ? <- LoadMem { addr: r441, size: 8 }
         r445: ? <- ArithK(Add, r43, 208)
         r446: ? <- LoadMem { addr: r445, size: 4 }
         r451: ? <- ArithK(Add, r43, 192)
         r452: ? <- LoadMem { addr: r451, size: 8 }
         r455: ? <- ArithK(Add, r43, 200)
         r456: ? <- LoadMem { addr: r455, size: 8 }
         r469: ? <- CArg { value: r456, next_arg: None }
         r470: ? <- CArg { value: r442, next_arg: Some(r469) }
         r471: ? <- CArg { value: r446, next_arg: Some(r470) }
         r472: ? <- CArg { value: r452, next_arg: Some(r471) }
         r473: ? <- CArg { value: r43, next_arg: Some(r472) }
         r474: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r475: ? <- Call { callee: r474, first_arg: Some(r473) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r344: ? <- ArithK(Add, r43, 184)
         r345: ? <- LoadMem { addr: r344, size: 8 }
         r349: ? <- IsZero(r345)
         r354: ? <- SetJumpCondition(r349)
         r574: ? <- Upsilon { value: r48, phi_ref: r570 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r357: ? <- ArithK(Add, r43, 144)
         r358: ? <- LoadMem { addr: r357, size: 1 }
         r360: ? <- ArithK(BitAnd, r358, 1)
         r362: ? <- IsZero(r360)
         r367: ? <- SetJumpCondition(r362)
         r576: ? <- Upsilon { value: r48, phi_ref: r570 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r370: ? <- ArithK(Add, r43, 140)
         r371: ? <- LoadMem { addr: r370, size: 4 }
         r373: ? <- ArithK(Add, r371, 1)
         r377: ? <- IsZero(r373)
         r380: ? <- Not(r377)
         r381: ? <- SetJumpCondition(r380)
         r578: ? <- Upsilon { value: r48, phi_ref: r570 }
.B17:    ;; preds:B13  → Always(Return).
         r501: ? <- CArg { value: r43, next_arg: None }
         r502: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r503: ? <- Call { callee: r502, first_arg: Some(r501) }
         r534: ? <- Part { src: r48, offset: 0, size: 4 }
         r535: ? <- SetReturnValue(r534)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r538: ? <- ArithK(Add, r12, 6951854)
         r540: ? <- Const { value: 5, size: 4 }
         r544: ? <- Const { value: 4294967295, size: 4 }
         r545: ? <- Part { src: r48, offset: 4, size: 4 }
         r546: ? <- Concat { lo: r544, hi: r545 }
         r554: ? <- CArg { value: r538, next_arg: None }
         r555: ? <- CArg { value: r540, next_arg: Some(r554) }
         r556: ? <- CArg { value: r43, next_arg: Some(r555) }
         r557: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: Some(r556) }
         r572: ? <- Upsilon { value: r546, phi_ref: r570 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r570: ? <- Phi
         r403: ? <- Part { src: r570, offset: 0, size: 4 }
         r404: ? <- SetReturnValue(r403)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  let r48: Bytes(8) = pre:arg0 + 12;
  [pre:RSP - 16]:* := pre:RBX;
  [pre:arg0 + 8]:* := 0;
  strlen(r48);
  let r87: Bytes(8) = pre:RSI[8 .. 4] ++ (pre:RSI[4 .. 0] ^ pre:RSI[4 .. 0]);
  __builtin_memset();
  let r108: Bytes(8) = [pre:arg0 + 256]:8;
  ;
  if IsZero (r108) {
    goto T3
  }
  let r121: Bytes(8) = [pre:arg0]:8;
  let r125: Bytes(8) = [r121 + 8]:8;
  ;
  r569 := [pre:arg0]:8;
  if IsZero (r125) {
    goto T4
  }
  r125(r108,
       r87,
       r125,
       pre:RCX);
  [pre:arg0 + 256]:* := 0;
  goto T3
  T3: {
    let r157: Bytes(8) = [pre:arg0]:8;
    ;
    r569 := [pre:arg0]:8;
    if IsZero (r157) {
      goto T6
    }
    goto T4
  }
  
  T4: {
    let mut r569: Bytes(8);
    let r170: Bytes(8) = [r569]:8;
    ;
    if IsZero (r170) {
      goto T6
    }
    r170(pre:arg0,
         r87,
         strlen(r48),
         pre:RCX);
    goto T6
  }
  
  T6: {
    hi_sdsfree([pre:arg0 + 152]:8);
    redisReaderFree([pre:arg0 + 160]:8);
    hi_sdsempty();
    [pre:arg0 + 152]:* := hi_sdsempty();
    let r249: Bytes(8) = redisReaderCreate();
    [pre:arg0 + 160]:* := r249;
    ;
    if IsZero ([pre:arg0 + 152]:8) {
      goto T18
    }
    ;
    if IsZero (r249) {
      goto T18
    }
    let r287: Bytes(4) = [pre:arg0 + 168]:4;
    ;
    if IsZero (r287) {
      redisContextConnectBindTcp(pre:arg0,
                                 [pre:arg0 + 192]:8,
                                 [pre:arg0 + 208]:4,
                                 [pre:arg0 + 176]:8,
                                 [pre:arg0 + 200]:8);
      goto T11
    }
    ;
    if IsZero (r287 - 1) {
      redisContextConnectUnix(pre:arg0,
                              [pre:arg0 + 216]:8,
                              [pre:arg0 + 176]:8);
      goto T11
    }
    __redisSetError(pre:arg0,
                    2,
                    (pre:RIP + 7007800));
    goto T11
    T11: {
      ;
      r570 := pre:arg0 + 12;
      if IsZero ([pre:arg0 + 184]:8) {
        goto T14
      }
      ;
      r570 := pre:arg0 + 12;
      if IsZero ([pre:arg0 + 144]:1 & 1) {
        goto T14
      }
      ;
      r570 := pre:arg0 + 12;
      if ! IsZero ([pre:arg0 + 140]:4 + 1) {
        redisContextSetTimeout(pre:arg0);
        ;
        return r48[4 .. 0]
      }
      goto T14
    }
    
    T14: {
      let mut r570: Bytes(8);
      ;
      return r570[4 .. 0]
    }
    
    T18: {
      __redisSetError(pre:arg0,
                      5,
                      (pre:RIP + 6951854));
      r570 := r48[8 .. 4] ++ 4294967295;
      goto T14
    }
  
  }

}
