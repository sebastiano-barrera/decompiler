---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  105 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(8) }
   43 r15 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), reg_type: Bytes(8) }
   45 r19 <- Get(r46)
   46 r47 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(8) }
   47 r18 <- Get(r47)
   48 r48 <- Ancestral { anc_name: AncestralName("arg3"), reg_type: Bytes(8) }
   49 r20 <- Get(r48)
   50 r49 <- Ancestral { anc_name: AncestralName("arg4"), reg_type: Bytes(16) }
   51 r51 <- Part { src: r49, offset: 0, size: 8 }
   52 r50 <- ArithK(Add, r12, 8)
   53 r50 <- StoreMem { addr: r50, value: r51 }
   54 r51 <- Part { src: r49, offset: 8, size: 8 }
   55 r50 <- ArithK(Add, r12, 16)
   56 r50 <- StoreMem { addr: r50, value: r51 }
   57 r52 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(32) }
   58 r54 <- Part { src: r52, offset: 0, size: 8 }
   59 r53 <- ArithK(Add, r12, 24)
   60 r53 <- StoreMem { addr: r53, value: r54 }
   61 r54 <- Part { src: r52, offset: 8, size: 8 }
   62 r53 <- ArithK(Add, r12, 32)
   63 r53 <- StoreMem { addr: r53, value: r54 }
   64 r54 <- Part { src: r52, offset: 16, size: 8 }
   65 r53 <- ArithK(Add, r12, 40)
   66 r53 <- StoreMem { addr: r53, value: r54 }
   67 r54 <- Part { src: r52, offset: 24, size: 8 }
   68 r53 <- ArithK(Add, r12, 48)
   69 r53 <- StoreMem { addr: r53, value: r54 }
0x40137f:
   70 r16 <- Get(r14)
0x401382:
   71 r46 <- Const { value: 24, size: 8 }
   72 r46 <- Arith(Add, r46, r12)
   73 r45 <- LoadMem { addr: r46, size: 16 }
   74 r47 <- Part { src: r28, offset: 16, size: 48 }
   75 r28 <- Concat { lo: r45, hi: r47 }
0x401387:
   76 r46 <- Const { value: 40, size: 8 }
   77 r46 <- Arith(Add, r46, r12)
   78 r45 <- LoadMem { addr: r46, size: 16 }
   79 r47 <- Part { src: r29, offset: 16, size: 48 }
   80 r29 <- Concat { lo: r45, hi: r47 }
0x40138c:
   81 r46 <- Part { src: r29, offset: 0, size: 16 }
   82 r47 <- Const { value: 16, size: 8 }
   83 r47 <- Arith(Add, r47, r14)
   84 r47 <- StoreMem { addr: r47, value: r46 }
0x401390:
   85 r46 <- Part { src: r28, offset: 0, size: 16 }
   86 r47 <- Const { value: 0, size: 8 }
   87 r47 <- Arith(Add, r47, r14)
   88 r47 <- StoreMem { addr: r47, value: r46 }
0x401393:
   89 r45 <- Void
   90 r47 <- ArithK(Add, r16, 0)
   91 r48 <- LoadMem { addr: r47, size: 8 }
   92 r45 <- Concat { lo: r45, hi: r48 }
   93 r47 <- ArithK(Add, r16, 8)
   94 r49 <- LoadMem { addr: r47, size: 8 }
   95 r45 <- Concat { lo: r45, hi: r49 }
   96 r47 <- ArithK(Add, r16, 16)
   97 r50 <- LoadMem { addr: r47, size: 8 }
   98 r45 <- Concat { lo: r45, hi: r50 }
   99 r47 <- ArithK(Add, r16, 24)
  100 r51 <- LoadMem { addr: r47, size: 8 }
  101 r45 <- Concat { lo: r45, hi: r51 }
  102 r45 <- Part { src: r45, offset: 0, size: 32 }
  103 r52 <- SetReturnValue(r45)
  104 r52 <- Control(Ret)


 --- ssa pre-xform
ssa program  105 instrs
.B0:    ;;  → Always(Return).
  (  8)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
         r26 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
         r27 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
  (  2)  r50 <- Ancestral { anc_name: AncestralName("arg4"), reg_type: Bytes(16) }
         r51 <- Part { src: r50, offset: 0, size: 8 }
         r52 <- ArithK(Add, r10, 8)
         r53 <- StoreMem { addr: r52, value: r51 }
         r54 <- Part { src: r50, offset: 8, size: 8 }
         r55 <- ArithK(Add, r10, 16)
         r56 <- StoreMem { addr: r55, value: r54 }
  (  4)  r57 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(32) }
         r58 <- Part { src: r57, offset: 0, size: 8 }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r58 }
         r61 <- Part { src: r57, offset: 8, size: 8 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r64 <- Part { src: r57, offset: 16, size: 8 }
         r65 <- ArithK(Add, r10, 40)
         r66 <- StoreMem { addr: r65, value: r64 }
         r67 <- Part { src: r57, offset: 24, size: 8 }
         r68 <- ArithK(Add, r10, 48)
         r69 <- StoreMem { addr: r68, value: r67 }
         r71 <- Const { value: 24, size: 8 }
         r72 <- Arith(Add, r71, r10)
         r73 <- LoadMem { addr: r72, size: 16 }
         r74 <- Part { src: r26, offset: 16, size: 48 }
         r75 <- Concat { lo: r73, hi: r74 }
         r76 <- Const { value: 40, size: 8 }
         r77 <- Arith(Add, r76, r10)
         r78 <- LoadMem { addr: r77, size: 16 }
         r79 <- Part { src: r27, offset: 16, size: 48 }
         r80 <- Concat { lo: r78, hi: r79 }
         r81 <- Part { src: r80, offset: 0, size: 16 }
         r82 <- Const { value: 16, size: 8 }
         r83 <- Arith(Add, r82, r12)
         r84 <- StoreMem { addr: r83, value: r81 }
         r85 <- Part { src: r75, offset: 0, size: 16 }
         r86 <- Const { value: 0, size: 8 }
         r87 <- Arith(Add, r86, r12)
         r88 <- StoreMem { addr: r87, value: r85 }
         r90 <- ArithK(Add, r12, 0)
         r91 <- LoadMem { addr: r90, size: 8 }
         r92 <- Concat { lo: r89, hi: r91 }
         r93 <- ArithK(Add, r12, 8)
         r94 <- LoadMem { addr: r93, size: 8 }
         r95 <- Concat { lo: r92, hi: r94 }
         r96 <- ArithK(Add, r12, 16)
         r97 <- LoadMem { addr: r96, size: 8 }
         r98 <- Concat { lo: r95, hi: r97 }
         r99 <- ArithK(Add, r12, 24)
         r100 <- LoadMem { addr: r99, size: 8 }
         r101 <- Concat { lo: r98, hi: r100 }
         r102 <- Part { src: r101, offset: 0, size: 32 }
         r103 <- SetReturnValue(r102)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r12, r50, r51, r52, r53, r54, r55, r56, r57, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r106, r109, r121, r111, r114, r83, r84, r88, r91, r93, r94, r95, r96, r97, r98, r99, r100, r101, r103]
  domtree:
    BlockID(0)

 --- ssa
ssa program  125 instrs
.B0:    ;;  → Always(Return).
  (  6)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
  (  2)  r50 <- Ancestral { anc_name: AncestralName("arg4"), reg_type: Bytes(16) }
         r51 <- StructGetMember { struct_value: r50, name: "member0", size: 16 }
         r52 <- ArithK(Add, r10, 8)
         r53 <- StoreMem { addr: r52, value: r51 }
         r54 <- Part { src: r50, offset: 8, size: 8 }
         r55 <- ArithK(Add, r10, 16)
         r56 <- StoreMem { addr: r55, value: r54 }
  (  7)  r57 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(32) }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r57 }
  (  2)  r61 <- StructGetMember { struct_value: r57, name: "member1", size: 32 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r64 <- Part { src: r57, offset: 16, size: 8 }
         r65 <- ArithK(Add, r10, 40)
         r66 <- StoreMem { addr: r65, value: r64 }
         r67 <- Part { src: r57, offset: 24, size: 8 }
         r68 <- ArithK(Add, r10, 48)
         r69 <- StoreMem { addr: r68, value: r67 }
         r106 <- Part { src: r61, offset: 0, size: 8 }
         r109 <- Concat { lo: r106, hi: r57 }
         r121 <- Part { src: r57, offset: 16, size: 8 }
         r111 <- Part { src: r57, offset: 24, size: 8 }
         r114 <- Concat { lo: r111, hi: r121 }
         r83 <- ArithK(Add, r12, 16)
         r84 <- StoreMem { addr: r83, value: r114 }
         r88 <- StoreMem { addr: r12, value: r109 }
         r91 <- LoadMem { addr: r12, size: 8 }
         r93 <- ArithK(Add, r12, 8)
         r94 <- LoadMem { addr: r93, size: 8 }
         r95 <- Concat { lo: r91, hi: r94 }
         r96 <- ArithK(Add, r12, 16)
         r97 <- LoadMem { addr: r96, size: 8 }
         r98 <- Concat { lo: r95, hi: r97 }
         r99 <- ArithK(Add, r12, 24)
         r100 <- LoadMem { addr: r99, size: 8 }
         r101 <- Concat { lo: r98, hi: r100 }
         r103 <- SetReturnValue(r101)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg4.member0;
  [pre:RSP + 16]:* := pre:arg4[16 .. 8];
  [pre:RSP + 24]:* := pre:arg5;
  let r61: Bytes(32) = pre:arg5.member1;
  [pre:RSP + 32]:* := r61;
  [pre:RSP + 40]:* := pre:arg5[24 .. 16];
  [pre:RSP + 48]:* := pre:arg5[32 .. 24];
  [pre:RDI + 16]:* := pre:arg5[24 .. 16] ++ pre:arg5[32 .. 24];
  [pre:RDI]:* := pre:arg5 as i32 ++ r61[8 .. 0] as i8;
  ;
  return [pre:RDI + 24]:8 as i8 ++ [pre:RDI + 16]:8 as i8 ++ [pre:RDI + 8]:8 ++ [pre:RDI]:8 as i16 as i24
}
