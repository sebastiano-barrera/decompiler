---
source: decompiler/tests/test_tool.rs
expression: out
---
func119 0x40136d+7 (file 0x136d)
          40136d: f3 0f 10 44 24 10       movss xmm0,[rsp+10h]
          401373: c3                      ret

function type: "func119" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 *void <TypeID(1v1)>,
                               arg3 *void <TypeID(1v1)>,
                               arg4 small <TypeID(785v1)>,
                               arg5 small <TypeID(785v1)>) float <TypeID(783v1)>
0 warnings.


mil program = 
program  72 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r15: TypeID(2v1) <- Get(r45)
   45 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   46 r19: TypeID(2v1) <- Get(r46)
   47 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
   48 r18: TypeID(2v1) <- Get(r47)
   49 r48: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
   50 r20: TypeID(2v1) <- Get(r48)
   51 r49: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
   52 r51: TypeID(2v1) <- Part { src: r49, offset: 0, size: 8 }
   53 r50: TypeID(2v1) <- ArithK(Add, r12, 8)
   54 r50: TypeID(2v1) <- StoreMem { addr: r50, value: r51 }
   55 r51: TypeID(2v1) <- Part { src: r49, offset: 8, size: 8 }
   56 r50: TypeID(2v1) <- ArithK(Add, r12, 16)
   57 r50: TypeID(2v1) <- StoreMem { addr: r50, value: r51 }
   58 r52: TypeID(2v1) <- Ancestral(AncestralName("arg5"))
   59 r54: TypeID(2v1) <- Part { src: r52, offset: 0, size: 8 }
   60 r53: TypeID(2v1) <- ArithK(Add, r12, 24)
   61 r53: TypeID(2v1) <- StoreMem { addr: r53, value: r54 }
   62 r54: TypeID(2v1) <- Part { src: r52, offset: 8, size: 8 }
   63 r53: TypeID(2v1) <- ArithK(Add, r12, 32)
   64 r53: TypeID(2v1) <- StoreMem { addr: r53, value: r54 }
0x40136d:
   65 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movss xmm0,[rsp+10h]")
0x401373:
   66 r45: TypeID(2v1) <- Void
   67 r46: TypeID(2v1) <- Part { src: r28, offset: 0, size: 8 }
   68 r45: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
   69 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
   70 r47: TypeID(2v1) <- SetReturnValue(r45)
   71 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  72 instrs
.B0:    ;;  → Always(Return).
  (  4)  r11: ? <- Ancestral(AncestralName("RSP"))
         r27: ? <- Ancestral(AncestralName("ZMM0"))
  (  2)  r51: ? <- Ancestral(AncestralName("arg4"))
         r52: ? <- Part { src: r51, offset: 0, size: 8 }
         r53: ? <- ArithK(Add, r11, 8)
         r54: ? <- StoreMem { addr: r53, value: r52 }
         r55: ? <- Part { src: r51, offset: 8, size: 8 }
         r56: ? <- ArithK(Add, r11, 16)
         r57: ? <- StoreMem { addr: r56, value: r55 }
  (  2)  r58: ? <- Ancestral(AncestralName("arg5"))
         r59: ? <- Part { src: r58, offset: 0, size: 8 }
         r60: ? <- ArithK(Add, r11, 24)
         r61: ? <- StoreMem { addr: r60, value: r59 }
         r62: ? <- Part { src: r58, offset: 8, size: 8 }
         r63: ? <- ArithK(Add, r11, 32)
         r64: ? <- StoreMem { addr: r63, value: r62 }
         r65: ? <- NotYetImplemented("unsupported: movss xmm0,[rsp+10h]")
         r67: ? <- Part { src: r27, offset: 0, size: 8 }
         r68: ? <- Concat { lo: r66, hi: r67 }
         r69: ? <- Part { src: r68, offset: 0, size: 4 }
         r70: ? <- SetReturnValue(r69)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r27, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  72 instrs
.B0:    ;;  → Always(Return).
  (  4)  r11: ? <- Ancestral(AncestralName("RSP"))
         r27: ? <- Ancestral(AncestralName("ZMM0"))
  (  2)  r51: ? <- Ancestral(AncestralName("arg4"))
         r52: ? <- Part { src: r51, offset: 0, size: 8 }
         r53: ? <- ArithK(Add, r11, 8)
         r54: ? <- StoreMem { addr: r53, value: r52 }
         r55: ? <- Part { src: r51, offset: 8, size: 8 }
         r56: ? <- ArithK(Add, r11, 16)
         r57: ? <- StoreMem { addr: r56, value: r55 }
  (  2)  r58: ? <- Ancestral(AncestralName("arg5"))
         r59: ? <- Part { src: r58, offset: 0, size: 8 }
         r60: ? <- ArithK(Add, r11, 24)
         r61: ? <- StoreMem { addr: r60, value: r59 }
         r62: ? <- Part { src: r58, offset: 8, size: 8 }
         r63: ? <- ArithK(Add, r11, 32)
         r64: ? <- StoreMem { addr: r63, value: r62 }
         r65: ? <- NotYetImplemented("unsupported: movss xmm0,[rsp+10h]")
         r69: ? <- Part { src: r27, offset: 0, size: 4 }
         r70: ? <- SetReturnValue(r69)



T0: {
  [pre:RSP + 8]:* := pre:arg4[8 .. 0];
  [pre:RSP + 16]:* := pre:arg4[16 .. 8];
  [pre:RSP + 24]:* := pre:arg5[8 .. 0];
  [pre:RSP + 32]:* := pre:arg5[16 .. 8];
  TODO /* unsupported: movss xmm0,[rsp+10h] */;
  ;
  return pre:ZMM0[4 .. 0]
}
