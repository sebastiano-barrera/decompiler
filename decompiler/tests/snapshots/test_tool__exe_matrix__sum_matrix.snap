---
source: decompiler/tests/test_tool.rs
expression: out
---
sum_matrix 0x4011c9+115 (file 0x11c9)
          4011c9: 55                      push rbp
          4011ca: 48 89 e5                mov rbp,rsp
          4011cd: 48 89 f8                mov rax,rdi
          4011d0: 48 89 f1                mov rcx,rsi
          4011d3: 48 89 c0                mov rax,rax
          4011d6: ba 00 00 00 00          mov edx,0
          4011db: 48 89 ca                mov rdx,rcx
          4011de: 48 89 45 e0             mov [rbp-20h],rax
          4011e2: 48 89 55 e8             mov [rbp-18h],rdx
          4011e6: c7 45 fc 00 00 00 00    mov dword ptr [rbp-4],0
          4011ed: c7 45 f8 00 00 00 00    mov dword ptr [rbp-8],0
          4011f4: eb 39                   jmp short 000000000040122Fh
          4011f6: c7 45 f4 00 00 00 00    mov dword ptr [rbp-0Ch],0
          4011fd: eb 24                   jmp short 0000000000401223h
          4011ff: 48 8b 55 e0             mov rdx,[rbp-20h]
          401203: 8b 45 ec                mov eax,[rbp-14h]
          401206: 0f af 45 f8             imul eax,[rbp-8]
          40120a: 89 c1                   mov ecx,eax
          40120c: 8b 45 f4                mov eax,[rbp-0Ch]
          40120f: 01 c8                   add eax,ecx
          401211: 48 98                   cdqe
          401213: 48 c1 e0 02             shl rax,2
          401217: 48 01 d0                add rax,rdx
          40121a: 8b 00                   mov eax,[rax]
          40121c: 01 45 fc                add [rbp-4],eax
          40121f: 83 45 f4 01             add dword ptr [rbp-0Ch],1
          401223: 8b 45 ec                mov eax,[rbp-14h]
          401226: 39 45 f4                cmp [rbp-0Ch],eax
          401229: 7c d4                   jl short 00000000004011FFh
          40122b: 83 45 f8 01             add dword ptr [rbp-8],1
          40122f: 8b 45 e8                mov eax,[rbp-18h]
          401232: 39 45 f8                cmp [rbp-8],eax
          401235: 7c bf                   jl short 00000000004011F6h
          401237: 8b 45 fc                mov eax,[rbp-4]
          40123a: 5d                      pop rbp
          40123b: c3                      ret

function type: "sum_matrix" func (mat mat <TypeID(15v1)>) int <TypeID(9v1)>
0 warnings.


mil program = 
program  259 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
                65 r45 <- Ancestral(AncestralName("arg0"))
                66 r46 <- Part { src: r45, offset: 0, size: 8 }
                67 r14 <- Get(r46)
                68 r47 <- Part { src: r45, offset: 8, size: 8 }
                69 r15 <- Get(r47)
0x4011c9:
                70 r12 <- ArithK(Add, r12, -8)
                71 r44 <- StoreMem { mem: r44, addr: r12, value: r11 }
0x4011ca:
                72 r11 <- Get(r12)
0x4011cd:
                73 r16 <- Get(r14)
0x4011d0:
                74 r18 <- Get(r15)
0x4011d3:
                75 r16 <- Get(r16)
0x4011d6:
                76 r45 <- Const { value: 0, size: 4 }
                77 r46 <- Part { src: r19, offset: 4, size: 4 }
                78 r19 <- Concat { lo: r45, hi: r46 }
0x4011db:
                79 r19 <- Get(r18)
0x4011de:
                80 r46 <- Const { value: -32, size: 8 }
                81 r46 <- Arith(Add, r46, r11)
                82 r44 <- StoreMem { mem: r44, addr: r46, value: r16 }
0x4011e2:
                83 r46 <- Const { value: -24, size: 8 }
                84 r46 <- Arith(Add, r46, r11)
                85 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x4011e6:
                86 r45 <- Const { value: 0, size: 4 }
                87 r46 <- Const { value: -4, size: 8 }
                88 r46 <- Arith(Add, r46, r11)
                89 r44 <- StoreMem { mem: r44, addr: r46, value: r45 }
0x4011ed:
                90 r45 <- Const { value: 0, size: 4 }
                91 r46 <- Const { value: -8, size: 8 }
                92 r46 <- Arith(Add, r46, r11)
                93 r44 <- StoreMem { mem: r44, addr: r46, value: r45 }
0x4011f4:
                94 r45 <- Control(Jmp(226))
0x4011f6:
                95 r45 <- Const { value: 0, size: 4 }
                96 r46 <- Const { value: -12, size: 8 }
                97 r46 <- Arith(Add, r46, r11)
                98 r44 <- StoreMem { mem: r44, addr: r46, value: r45 }
0x4011fd:
                99 r45 <- Control(Jmp(192))
0x4011ff:
               100 r46 <- Const { value: -32, size: 8 }
               101 r46 <- Arith(Add, r46, r11)
               102 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               103 r19 <- Get(r45)
0x401203:
               104 r46 <- Const { value: -20, size: 8 }
               105 r46 <- Arith(Add, r46, r11)
               106 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               107 r47 <- Part { src: r16, offset: 4, size: 4 }
               108 r16 <- Concat { lo: r45, hi: r47 }
0x401206:
               109 r46 <- Part { src: r16, offset: 0, size: 4 }
               110 r48 <- Const { value: -8, size: 8 }
               111 r48 <- Arith(Add, r48, r11)
               112 r47 <- LoadMem { mem: r44, addr: r48, size: 4 }
               113 r49 <- Arith(Mul, r46, r47)
               114 r50 <- Part { src: r16, offset: 4, size: 4 }
               115 r16 <- Concat { lo: r49, hi: r50 }
               116 r10 <- OverflowOf(r49)
               117 r2 <- Get(r10)
               118 r6 <- Undefined
               119 r5 <- Undefined
               120 r4 <- Undefined
               121 r3 <- Undefined
0x40120a:
               122 r46 <- Part { src: r16, offset: 0, size: 4 }
               123 r47 <- Part { src: r18, offset: 4, size: 4 }
               124 r18 <- Concat { lo: r46, hi: r47 }
0x40120c:
               125 r46 <- Const { value: -12, size: 8 }
               126 r46 <- Arith(Add, r46, r11)
               127 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               128 r47 <- Part { src: r16, offset: 4, size: 4 }
               129 r16 <- Concat { lo: r45, hi: r47 }
0x40120f:
               130 r46 <- Part { src: r16, offset: 0, size: 4 }
               131 r48 <- Part { src: r18, offset: 0, size: 4 }
               132 r46 <- Arith(Add, r46, r48)
               133 r49 <- Part { src: r16, offset: 4, size: 4 }
               134 r16 <- Concat { lo: r46, hi: r49 }
               135 r10 <- OverflowOf(r46)
               136 r2 <- CarryOf(r46)
               137 r6 <- SignOf(r46)
               138 r5 <- IsZero(r46)
               139 r50 <- Part { src: r46, offset: 0, size: 1 }
               140 r3 <- Parity(r50)
0x401211:
               141 r45 <- Part { src: r16, offset: 0, size: 4 }
               142 r16 <- Widen { reg: r45, target_size: 8, sign: true }
0x401213:
               143 r46 <- Const { value: 2, size: 1 }
               144 r46 <- Widen { reg: r46, target_size: 8, sign: false }
               145 r16 <- Arith(Shl, r16, r46)
               146 r16 <- Get(r16)
               147 r6 <- SignOf(r16)
               148 r5 <- IsZero(r16)
               149 r47 <- Part { src: r16, offset: 0, size: 1 }
               150 r3 <- Parity(r47)
0x401217:
               151 r16 <- Arith(Add, r16, r19)
               152 r16 <- Get(r16)
               153 r10 <- OverflowOf(r16)
               154 r2 <- CarryOf(r16)
               155 r6 <- SignOf(r16)
               156 r5 <- IsZero(r16)
               157 r47 <- Part { src: r16, offset: 0, size: 1 }
               158 r3 <- Parity(r47)
0x40121a:
               159 r46 <- Const { value: 0, size: 8 }
               160 r46 <- Arith(Add, r46, r16)
               161 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               162 r47 <- Part { src: r16, offset: 4, size: 4 }
               163 r16 <- Concat { lo: r45, hi: r47 }
0x40121c:
               164 r46 <- Const { value: -4, size: 8 }
               165 r46 <- Arith(Add, r46, r11)
               166 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               167 r48 <- Part { src: r16, offset: 0, size: 4 }
               168 r45 <- Arith(Add, r45, r48)
               169 r49 <- Const { value: -4, size: 8 }
               170 r49 <- Arith(Add, r49, r11)
               171 r44 <- StoreMem { mem: r44, addr: r49, value: r45 }
               172 r10 <- OverflowOf(r45)
               173 r2 <- CarryOf(r45)
               174 r6 <- SignOf(r45)
               175 r5 <- IsZero(r45)
               176 r50 <- Part { src: r45, offset: 0, size: 1 }
               177 r3 <- Parity(r50)
0x40121f:
               178 r46 <- Const { value: -12, size: 8 }
               179 r46 <- Arith(Add, r46, r11)
               180 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               181 r47 <- Const { value: 1, size: 4 }
               182 r45 <- Arith(Add, r45, r47)
               183 r48 <- Const { value: -12, size: 8 }
               184 r48 <- Arith(Add, r48, r11)
               185 r44 <- StoreMem { mem: r44, addr: r48, value: r45 }
               186 r10 <- OverflowOf(r45)
               187 r2 <- CarryOf(r45)
               188 r6 <- SignOf(r45)
               189 r5 <- IsZero(r45)
               190 r49 <- Part { src: r45, offset: 0, size: 1 }
               191 r3 <- Parity(r49)
0x401223:
               192 r46 <- Const { value: -20, size: 8 }
               193 r46 <- Arith(Add, r46, r11)
               194 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               195 r47 <- Part { src: r16, offset: 4, size: 4 }
               196 r16 <- Concat { lo: r45, hi: r47 }
0x401226:
               197 r46 <- Const { value: -12, size: 8 }
               198 r46 <- Arith(Add, r46, r11)
               199 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               200 r48 <- Part { src: r16, offset: 0, size: 4 }
               201 r45 <- Arith(Sub, r45, r48)
               202 r10 <- OverflowOf(r45)
               203 r2 <- CarryOf(r45)
               204 r6 <- SignOf(r45)
               205 r5 <- IsZero(r45)
               206 r49 <- Part { src: r45, offset: 0, size: 1 }
               207 r3 <- Parity(r49)
0x401229:
               208 r45 <- Cmp(EQ, r6, r10)
               209 r45 <- Not(r45)
               210 r46 <- SetJumpCondition(r45)
               211 r46 <- Control(JmpIf(100))
0x40122b:
               212 r46 <- Const { value: -8, size: 8 }
               213 r46 <- Arith(Add, r46, r11)
               214 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               215 r47 <- Const { value: 1, size: 4 }
               216 r45 <- Arith(Add, r45, r47)
               217 r48 <- Const { value: -8, size: 8 }
               218 r48 <- Arith(Add, r48, r11)
               219 r44 <- StoreMem { mem: r44, addr: r48, value: r45 }
               220 r10 <- OverflowOf(r45)
               221 r2 <- CarryOf(r45)
               222 r6 <- SignOf(r45)
               223 r5 <- IsZero(r45)
               224 r49 <- Part { src: r45, offset: 0, size: 1 }
               225 r3 <- Parity(r49)
0x40122f:
               226 r46 <- Const { value: -24, size: 8 }
               227 r46 <- Arith(Add, r46, r11)
               228 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               229 r47 <- Part { src: r16, offset: 4, size: 4 }
               230 r16 <- Concat { lo: r45, hi: r47 }
0x401232:
               231 r46 <- Const { value: -8, size: 8 }
               232 r46 <- Arith(Add, r46, r11)
               233 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               234 r48 <- Part { src: r16, offset: 0, size: 4 }
               235 r45 <- Arith(Sub, r45, r48)
               236 r10 <- OverflowOf(r45)
               237 r2 <- CarryOf(r45)
               238 r6 <- SignOf(r45)
               239 r5 <- IsZero(r45)
               240 r49 <- Part { src: r45, offset: 0, size: 1 }
               241 r3 <- Parity(r49)
0x401235:
               242 r45 <- Cmp(EQ, r6, r10)
               243 r45 <- Not(r45)
               244 r46 <- SetJumpCondition(r45)
               245 r46 <- Control(JmpIf(95))
0x401237:
               246 r46 <- Const { value: -4, size: 8 }
               247 r46 <- Arith(Add, r46, r11)
               248 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               249 r47 <- Part { src: r16, offset: 4, size: 4 }
               250 r16 <- Concat { lo: r45, hi: r47 }
0x40123a:
               251 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               252 r11 <- Get(r45)
               253 r12 <- ArithK(Add, r12, 8)
0x40123b:
               254 r45 <- Void
               255 r45 <- Concat { lo: r45, hi: r16 }
               256 r45 <- Part { src: r45, offset: 0, size: 4 }
               257 r47 <- SetReturnValue(r45)
               258 r47 <- Control(Ret)


ssa pre-xform:
ssa program  271 instrs
.B0:    ;;  → Always(Block(BlockID(5))).
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r65 <- Ancestral(AncestralName("arg0"))
         r66 <- Part { src: r65, offset: 0, size: 8 }
  (  2)  r68 <- Part { src: r65, offset: 8, size: 8 }
  ( 21)  r70 <- ArithK(Add, r11, -8)
         r71 <- StoreMem { mem: r43, addr: r70, value: r10 }
         r80 <- Const { value: -32, size: 8 }
         r81 <- Arith(Add, r80, r70)
         r82 <- StoreMem { mem: r71, addr: r81, value: r66 }
         r83 <- Const { value: -24, size: 8 }
         r84 <- Arith(Add, r83, r70)
         r85 <- StoreMem { mem: r82, addr: r84, value: r68 }
         r86 <- Const { value: 0, size: 4 }
         r87 <- Const { value: -4, size: 8 }
         r88 <- Arith(Add, r87, r70)
         r89 <- StoreMem { mem: r85, addr: r88, value: r86 }
         r90 <- Const { value: 0, size: 4 }
         r91 <- Const { value: -8, size: 8 }
         r92 <- Arith(Add, r91, r70)
         r93 <- StoreMem { mem: r89, addr: r92, value: r90 }
.B5:    ;; preds:B0,B4  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) }.
  (  4)  r262 <- Phi
         r261 <- Phi
         r226 <- Const { value: -24, size: 8 }
         r227 <- Arith(Add, r226, r70)
         r228 <- LoadMem { mem: r262, addr: r227, size: 4 }
         r229 <- Part { src: r261, offset: 4, size: 4 }
  (  2)  r230 <- Concat { lo: r228, hi: r229 }
         r231 <- Const { value: -8, size: 8 }
         r232 <- Arith(Add, r231, r70)
         r233 <- LoadMem { mem: r262, addr: r232, size: 4 }
         r234 <- Part { src: r230, offset: 0, size: 4 }
  (  2)  r235 <- Arith(Sub, r233, r234)
         r236 <- OverflowOf(r235)
         r238 <- SignOf(r235)
         r242 <- Cmp(EQ, r238, r236)
         r243 <- Not(r242)
         r244 <- SetJumpCondition(r243)
.B6:    ;; preds:B5  → Always(Return).
         r246 <- Const { value: -4, size: 8 }
         r247 <- Arith(Add, r246, r70)
         r248 <- LoadMem { mem: r262, addr: r247, size: 4 }
         r249 <- Part { src: r230, offset: 4, size: 4 }
         r250 <- Concat { lo: r248, hi: r249 }
         r255 <- Concat { lo: r254, hi: r250 }
         r256 <- Part { src: r255, offset: 0, size: 4 }
         r257 <- SetReturnValue(r256)
.B1:    ;; preds:B5  → Always(Block(BlockID(3))).
         r95 <- Const { value: 0, size: 4 }
         r96 <- Const { value: -12, size: 8 }
         r97 <- Arith(Add, r96, r70)
         r98 <- StoreMem { mem: r262, addr: r97, value: r95 }
.B3:    ;; preds:B1,B2  → Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) }.
  ( 11)  r260 <- Phi
         r259 <- Phi
         r192 <- Const { value: -20, size: 8 }
         r193 <- Arith(Add, r192, r70)
         r194 <- LoadMem { mem: r260, addr: r193, size: 4 }
         r195 <- Part { src: r259, offset: 4, size: 4 }
  (  2)  r196 <- Concat { lo: r194, hi: r195 }
         r197 <- Const { value: -12, size: 8 }
         r198 <- Arith(Add, r197, r70)
         r199 <- LoadMem { mem: r260, addr: r198, size: 4 }
         r200 <- Part { src: r196, offset: 0, size: 4 }
  (  2)  r201 <- Arith(Sub, r199, r200)
         r202 <- OverflowOf(r201)
         r204 <- SignOf(r201)
         r208 <- Cmp(EQ, r204, r202)
         r209 <- Not(r208)
         r210 <- SetJumpCondition(r209)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r212 <- Const { value: -8, size: 8 }
         r213 <- Arith(Add, r212, r70)
         r214 <- LoadMem { mem: r260, addr: r213, size: 4 }
         r215 <- Const { value: 1, size: 4 }
         r216 <- Arith(Add, r214, r215)
         r217 <- Const { value: -8, size: 8 }
         r218 <- Arith(Add, r217, r70)
         r219 <- StoreMem { mem: r260, addr: r218, value: r216 }
.B2:    ;; preds:B3  → Always(Block(BlockID(3))).
         r100 <- Const { value: -32, size: 8 }
         r101 <- Arith(Add, r100, r70)
         r102 <- LoadMem { mem: r260, addr: r101, size: 8 }
         r104 <- Const { value: -20, size: 8 }
         r105 <- Arith(Add, r104, r70)
         r106 <- LoadMem { mem: r260, addr: r105, size: 4 }
         r107 <- Part { src: r196, offset: 4, size: 4 }
  (  2)  r108 <- Concat { lo: r106, hi: r107 }
         r109 <- Part { src: r108, offset: 0, size: 4 }
         r110 <- Const { value: -8, size: 8 }
         r111 <- Arith(Add, r110, r70)
         r112 <- LoadMem { mem: r260, addr: r111, size: 4 }
         r113 <- Arith(Mul, r109, r112)
         r114 <- Part { src: r108, offset: 4, size: 4 }
  (  2)  r115 <- Concat { lo: r113, hi: r114 }
         r122 <- Part { src: r115, offset: 0, size: 4 }
         r123 <- Part { src: r68, offset: 4, size: 4 }
         r124 <- Concat { lo: r122, hi: r123 }
         r125 <- Const { value: -12, size: 8 }
         r126 <- Arith(Add, r125, r70)
         r127 <- LoadMem { mem: r260, addr: r126, size: 4 }
         r128 <- Part { src: r115, offset: 4, size: 4 }
  (  2)  r129 <- Concat { lo: r127, hi: r128 }
         r130 <- Part { src: r129, offset: 0, size: 4 }
         r131 <- Part { src: r124, offset: 0, size: 4 }
         r132 <- Arith(Add, r130, r131)
         r133 <- Part { src: r129, offset: 4, size: 4 }
         r134 <- Concat { lo: r132, hi: r133 }
         r141 <- Part { src: r134, offset: 0, size: 4 }
         r142 <- Widen { reg: r141, target_size: 8, sign: true }
         r143 <- Const { value: 2, size: 1 }
         r144 <- Widen { reg: r143, target_size: 8, sign: false }
         r145 <- Arith(Shl, r142, r144)
  (  2)  r151 <- Arith(Add, r145, r102)
         r159 <- Const { value: 0, size: 8 }
         r160 <- Arith(Add, r159, r151)
         r161 <- LoadMem { mem: r260, addr: r160, size: 4 }
         r162 <- Part { src: r151, offset: 4, size: 4 }
         r163 <- Concat { lo: r161, hi: r162 }
         r164 <- Const { value: -4, size: 8 }
         r165 <- Arith(Add, r164, r70)
         r166 <- LoadMem { mem: r260, addr: r165, size: 4 }
         r167 <- Part { src: r163, offset: 0, size: 4 }
         r168 <- Arith(Add, r166, r167)
         r169 <- Const { value: -4, size: 8 }
         r170 <- Arith(Add, r169, r70)
  (  2)  r171 <- StoreMem { mem: r260, addr: r170, value: r168 }
         r178 <- Const { value: -12, size: 8 }
         r179 <- Arith(Add, r178, r70)
         r180 <- LoadMem { mem: r171, addr: r179, size: 4 }
         r181 <- Const { value: 1, size: 4 }
         r182 <- Arith(Add, r180, r181)
         r183 <- Const { value: -12, size: 8 }
         r184 <- Arith(Add, r183, r70)
         r185 <- StoreMem { mem: r171, addr: r184, value: r182 }


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Block(BlockID(5))) [r10, r11, r43, r65, r66, r68, r70, r71, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93]
  BlockID(1) -> Always(Block(BlockID(3))) [r95, r96, r97, r98]
  BlockID(2) -> Always(Block(BlockID(3))) [r100, r101, r102, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r141, r142, r143, r144, r145, r151, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r178, r179, r180, r181, r182, r183, r184, r185]
  BlockID(3) -> Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) } [r260, r259, r192, r193, r194, r195, r196, r197, r198, r199, r200, r201, r202, r204, r208, r209, r210]
  BlockID(4) -> Always(Block(BlockID(5))) [r212, r213, r214, r215, r216, r217, r218, r219]
  BlockID(5) -> Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) } [r262, r261, r226, r227, r228, r229, r230, r231, r232, r233, r234, r235, r236, r238, r242, r243, r244]
  BlockID(6) -> Always(Return) [r246, r247, r248, r249, r250, r254, r255, r256, r257]
  domtree:
    BlockID(0)
    |  BlockID(5)
    |  |  BlockID(1)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(2)
    |  |  |  |  BlockID(4)
    |  |  BlockID(6)

ssa post-xform:
ssa program  271 instrs
.B0:    ;;  → Always(Block(BlockID(5))).
         r10 <- Ancestral(AncestralName("RBP"))
  ( 21)  r11 <- Ancestral(AncestralName("RSP"))
         r43 <- Ancestral(AncestralName("memory"))
  (  3)  r65 <- Ancestral(AncestralName("arg0"))
         r66 <- Part { src: r65, offset: 0, size: 8 }
         r68 <- Part { src: r65, offset: 8, size: 8 }
         r70 <- ArithK(Add, r11, -8)
         r71 <- StoreMem { mem: r43, addr: r70, value: r10 }
         r80 <- Const { value: -32, size: 8 }
         r81 <- ArithK(Add, r11, -40)
         r82 <- StoreMem { mem: r71, addr: r81, value: r66 }
         r83 <- Const { value: -24, size: 8 }
         r84 <- ArithK(Add, r11, -32)
         r85 <- StoreMem { mem: r82, addr: r84, value: r68 }
         r86 <- Const { value: 0, size: 4 }
         r87 <- Const { value: -4, size: 8 }
         r88 <- ArithK(Add, r11, -12)
         r89 <- StoreMem { mem: r85, addr: r88, value: r86 }
         r90 <- Const { value: 0, size: 4 }
         r91 <- Const { value: -8, size: 8 }
         r92 <- ArithK(Add, r11, -16)
         r93 <- StoreMem { mem: r89, addr: r92, value: r90 }
.B5:    ;; preds:B0,B4  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) }.
  (  4)  r262 <- Phi
  (  2)  r261 <- Phi
         r226 <- Const { value: -24, size: 8 }
         r227 <- ArithK(Add, r11, -32)
  (  3)  r228 <- LoadMem { mem: r262, addr: r227, size: 4 }
         r229 <- Part { src: r261, offset: 4, size: 4 }
         r230 <- Concat { lo: r228, hi: r229 }
         r231 <- Const { value: -8, size: 8 }
         r232 <- ArithK(Add, r11, -16)
         r233 <- LoadMem { mem: r262, addr: r232, size: 4 }
         r234 <- Get(r228)
  (  2)  r235 <- Arith(Sub, r233, r228)
         r236 <- OverflowOf(r235)
         r238 <- SignOf(r235)
         r242 <- Cmp(EQ, r238, r236)
         r243 <- Not(r242)
         r244 <- SetJumpCondition(r243)
.B6:    ;; preds:B5  → Always(Return).
         r246 <- Const { value: -4, size: 8 }
         r247 <- ArithK(Add, r11, -12)
  (  3)  r248 <- LoadMem { mem: r262, addr: r247, size: 4 }
         r249 <- Part { src: r261, offset: 4, size: 4 }
         r250 <- Concat { lo: r248, hi: r249 }
         r255 <- Get(r250)
         r256 <- Get(r248)
         r257 <- SetReturnValue(r248)
.B1:    ;; preds:B5  → Always(Block(BlockID(3))).
         r95 <- Const { value: 0, size: 4 }
         r96 <- Const { value: -12, size: 8 }
         r97 <- ArithK(Add, r11, -20)
         r98 <- StoreMem { mem: r262, addr: r97, value: r95 }
.B3:    ;; preds:B1,B2  → Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) }.
  ( 11)  r260 <- Phi
  (  5)  r259 <- Phi
         r192 <- Const { value: -20, size: 8 }
         r193 <- ArithK(Add, r11, -28)
  (  3)  r194 <- LoadMem { mem: r260, addr: r193, size: 4 }
         r195 <- Part { src: r259, offset: 4, size: 4 }
         r196 <- Concat { lo: r194, hi: r195 }
         r197 <- Const { value: -12, size: 8 }
         r198 <- ArithK(Add, r11, -20)
         r199 <- LoadMem { mem: r260, addr: r198, size: 4 }
         r200 <- Get(r194)
  (  2)  r201 <- Arith(Sub, r199, r194)
         r202 <- OverflowOf(r201)
         r204 <- SignOf(r201)
         r208 <- Cmp(EQ, r204, r202)
         r209 <- Not(r208)
         r210 <- SetJumpCondition(r209)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r212 <- Const { value: -8, size: 8 }
         r213 <- ArithK(Add, r11, -16)
         r214 <- LoadMem { mem: r260, addr: r213, size: 4 }
         r215 <- Const { value: 1, size: 4 }
         r216 <- ArithK(Add, r214, 1)
         r217 <- Const { value: -8, size: 8 }
         r218 <- ArithK(Add, r11, -16)
         r219 <- StoreMem { mem: r260, addr: r218, value: r216 }
.B2:    ;; preds:B3  → Always(Block(BlockID(3))).
         r100 <- Const { value: -32, size: 8 }
         r101 <- ArithK(Add, r11, -40)
         r102 <- LoadMem { mem: r260, addr: r101, size: 8 }
         r104 <- Const { value: -20, size: 8 }
         r105 <- ArithK(Add, r11, -28)
  (  3)  r106 <- LoadMem { mem: r260, addr: r105, size: 4 }
         r107 <- Part { src: r259, offset: 4, size: 4 }
         r108 <- Concat { lo: r106, hi: r107 }
         r109 <- Get(r106)
         r110 <- Const { value: -8, size: 8 }
         r111 <- ArithK(Add, r11, -16)
         r112 <- LoadMem { mem: r260, addr: r111, size: 4 }
  (  5)  r113 <- Arith(Mul, r106, r112)
         r114 <- Part { src: r259, offset: 4, size: 4 }
         r115 <- Concat { lo: r113, hi: r114 }
         r122 <- Get(r113)
         r123 <- Part { src: r65, offset: 12, size: 4 }
         r124 <- Concat { lo: r113, hi: r123 }
         r125 <- Const { value: -12, size: 8 }
         r126 <- ArithK(Add, r11, -20)
  (  3)  r127 <- LoadMem { mem: r260, addr: r126, size: 4 }
         r128 <- Part { src: r259, offset: 4, size: 4 }
         r129 <- Concat { lo: r127, hi: r128 }
         r130 <- Get(r127)
         r131 <- Get(r113)
  (  3)  r132 <- Arith(Add, r127, r113)
         r133 <- Part { src: r259, offset: 4, size: 4 }
         r134 <- Concat { lo: r132, hi: r133 }
         r141 <- Get(r132)
         r142 <- Widen { reg: r132, target_size: 8, sign: true }
         r143 <- Const { value: 2, size: 1 }
         r144 <- Widen { reg: r143, target_size: 8, sign: false }
         r145 <- Arith(Shl, r142, r144)
  (  3)  r151 <- Arith(Add, r145, r102)
         r159 <- Const { value: 0, size: 8 }
         r160 <- Get(r151)
  (  3)  r161 <- LoadMem { mem: r260, addr: r151, size: 4 }
         r162 <- Part { src: r151, offset: 4, size: 4 }
         r163 <- Concat { lo: r161, hi: r162 }
         r164 <- Const { value: -4, size: 8 }
         r165 <- ArithK(Add, r11, -12)
         r166 <- LoadMem { mem: r260, addr: r165, size: 4 }
         r167 <- Get(r161)
         r168 <- Arith(Add, r166, r161)
         r169 <- Const { value: -4, size: 8 }
         r170 <- ArithK(Add, r11, -12)
  (  2)  r171 <- StoreMem { mem: r260, addr: r170, value: r168 }
         r178 <- Const { value: -12, size: 8 }
         r179 <- ArithK(Add, r11, -20)
         r180 <- LoadMem { mem: r171, addr: r179, size: 4 }
         r181 <- Const { value: 1, size: 4 }
         r182 <- ArithK(Add, r180, 1)
         r183 <- Const { value: -12, size: 8 }
         r184 <- ArithK(Add, r11, -20)
         r185 <- StoreMem { mem: r171, addr: r184, value: r182 }



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 40]:* := pre:arg0[8 .. 0];
  [pre:RSP - 32]:* := pre:arg0[16 .. 8];
  [pre:RSP - 12]:* := 0;
  [pre:RSP - 16]:* := 0;
  goto T5
  T5: {
    let mut r262: MemoryEffect;
    let mut r261: Bytes(8);
    let r228: Bytes(4) = [pre:RSP - 32]:4;
    let r235: Bytes(4) = [pre:RSP - 16]:4 - r228;
    ;
    if ! (SignOf (r235) EQ OverflowOf (r235)) {
      [pre:RSP - 20]:* := 0;
      goto T3
      T3: {
        let mut r260: MemoryEffect;
        let mut r259: Bytes(8);
        let r194: Bytes(4) = [pre:RSP - 28]:4;
        let r201: Bytes(4) = [pre:RSP - 20]:4 - r194;
        ;
        if ! (SignOf (r201) EQ OverflowOf (r201)) {
          let r106: Bytes(4) = [pre:RSP - 28]:4;
          let r113: Bytes(4) = r106 * [pre:RSP - 16]:4;
          let r127: Bytes(4) = [pre:RSP - 20]:4;
          let r132: Bytes(4) = r127 + r113;
          let r151: Bytes(8) = r132 as i64 << 2 as u64 + [pre:RSP - 40]:8;
          let r161: Bytes(4) = [r151]:4;
          [pre:RSP - 12]:* := [pre:RSP - 12]:4 + r161;
          [pre:RSP - 20]:* := [pre:RSP - 20]:4 + 1;
          loop T3
        }
        [pre:RSP - 16]:* := [pre:RSP - 16]:4 + 1;
        loop T5
      }
    
    }
    let r248: Bytes(4) = [pre:RSP - 12]:4;
    ;
    return r248
  }

}
