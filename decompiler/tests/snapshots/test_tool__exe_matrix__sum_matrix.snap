---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  236 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(16) }
   43 r46 <- Part { src: r45, offset: 0, size: 8 }
   44 r14 <- Get(r46)
   45 r47 <- Part { src: r45, offset: 8, size: 8 }
   46 r15 <- Get(r47)
0x4011c9:
   47 r12 <- ArithK(Add, r12, -8)
   48 r46 <- StoreMem { addr: r12, value: r11 }
0x4011ca:
   49 r11 <- Get(r12)
0x4011cd:
   50 r16 <- Get(r14)
0x4011d0:
   51 r18 <- Get(r15)
0x4011d3:
   52 r16 <- Get(r16)
0x4011d6:
   53 r45 <- Const { value: 0, size: 4 }
   54 r46 <- Part { src: r19, offset: 4, size: 4 }
   55 r19 <- Concat { lo: r45, hi: r46 }
0x4011db:
   56 r19 <- Get(r18)
0x4011de:
   57 r46 <- Const { value: -32, size: 8 }
   58 r46 <- Arith(Add, r46, r11)
   59 r46 <- StoreMem { addr: r46, value: r16 }
0x4011e2:
   60 r46 <- Const { value: -24, size: 8 }
   61 r46 <- Arith(Add, r46, r11)
   62 r46 <- StoreMem { addr: r46, value: r19 }
0x4011e6:
   63 r45 <- Const { value: 0, size: 4 }
   64 r46 <- Const { value: -4, size: 8 }
   65 r46 <- Arith(Add, r46, r11)
   66 r46 <- StoreMem { addr: r46, value: r45 }
0x4011ed:
   67 r45 <- Const { value: 0, size: 4 }
   68 r46 <- Const { value: -8, size: 8 }
   69 r46 <- Arith(Add, r46, r11)
   70 r46 <- StoreMem { addr: r46, value: r45 }
0x4011f4:
   71 r45 <- Control(JmpExt(4198959))
0x4011f6:
   72 r45 <- Const { value: 0, size: 4 }
   73 r46 <- Const { value: -12, size: 8 }
   74 r46 <- Arith(Add, r46, r11)
   75 r46 <- StoreMem { addr: r46, value: r45 }
0x4011fd:
   76 r45 <- Control(JmpExt(4198947))
0x4011ff:
   77 r46 <- Const { value: -32, size: 8 }
   78 r46 <- Arith(Add, r46, r11)
   79 r45 <- LoadMem { addr: r46, size: 8 }
   80 r19 <- Get(r45)
0x401203:
   81 r46 <- Const { value: -20, size: 8 }
   82 r46 <- Arith(Add, r46, r11)
   83 r45 <- LoadMem { addr: r46, size: 4 }
   84 r47 <- Part { src: r16, offset: 4, size: 4 }
   85 r16 <- Concat { lo: r45, hi: r47 }
0x401206:
   86 r46 <- Part { src: r16, offset: 0, size: 4 }
   87 r48 <- Const { value: -8, size: 8 }
   88 r48 <- Arith(Add, r48, r11)
   89 r47 <- LoadMem { addr: r48, size: 4 }
   90 r49 <- Arith(Mul, r46, r47)
   91 r50 <- Part { src: r16, offset: 4, size: 4 }
   92 r16 <- Concat { lo: r49, hi: r50 }
   93 r10 <- OverflowOf(r49)
   94 r2 <- Get(r10)
   95 r6 <- UndefinedBool
   96 r5 <- UndefinedBool
   97 r4 <- UndefinedBool
   98 r3 <- UndefinedBool
0x40120a:
   99 r46 <- Part { src: r16, offset: 0, size: 4 }
  100 r47 <- Part { src: r18, offset: 4, size: 4 }
  101 r18 <- Concat { lo: r46, hi: r47 }
0x40120c:
  102 r46 <- Const { value: -12, size: 8 }
  103 r46 <- Arith(Add, r46, r11)
  104 r45 <- LoadMem { addr: r46, size: 4 }
  105 r47 <- Part { src: r16, offset: 4, size: 4 }
  106 r16 <- Concat { lo: r45, hi: r47 }
0x40120f:
  107 r46 <- Part { src: r16, offset: 0, size: 4 }
  108 r48 <- Part { src: r18, offset: 0, size: 4 }
  109 r46 <- Arith(Add, r46, r48)
  110 r49 <- Part { src: r16, offset: 4, size: 4 }
  111 r16 <- Concat { lo: r46, hi: r49 }
  112 r10 <- OverflowOf(r46)
  113 r2 <- CarryOf(r46)
  114 r6 <- SignOf(r46)
  115 r5 <- IsZero(r46)
  116 r50 <- Part { src: r46, offset: 0, size: 1 }
  117 r3 <- Parity(r50)
0x401211:
  118 r45 <- Part { src: r16, offset: 0, size: 4 }
  119 r16 <- Widen { reg: r45, target_size: 8, sign: true }
0x401213:
  120 r46 <- Const { value: 2, size: 1 }
  121 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  122 r16 <- Arith(Shl, r16, r46)
  123 r16 <- Get(r16)
  124 r6 <- SignOf(r16)
  125 r5 <- IsZero(r16)
  126 r47 <- Part { src: r16, offset: 0, size: 1 }
  127 r3 <- Parity(r47)
0x401217:
  128 r16 <- Arith(Add, r16, r19)
  129 r16 <- Get(r16)
  130 r10 <- OverflowOf(r16)
  131 r2 <- CarryOf(r16)
  132 r6 <- SignOf(r16)
  133 r5 <- IsZero(r16)
  134 r47 <- Part { src: r16, offset: 0, size: 1 }
  135 r3 <- Parity(r47)
0x40121a:
  136 r46 <- Const { value: 0, size: 8 }
  137 r46 <- Arith(Add, r46, r16)
  138 r45 <- LoadMem { addr: r46, size: 4 }
  139 r47 <- Part { src: r16, offset: 4, size: 4 }
  140 r16 <- Concat { lo: r45, hi: r47 }
0x40121c:
  141 r46 <- Const { value: -4, size: 8 }
  142 r46 <- Arith(Add, r46, r11)
  143 r45 <- LoadMem { addr: r46, size: 4 }
  144 r48 <- Part { src: r16, offset: 0, size: 4 }
  145 r45 <- Arith(Add, r45, r48)
  146 r49 <- Const { value: -4, size: 8 }
  147 r49 <- Arith(Add, r49, r11)
  148 r49 <- StoreMem { addr: r49, value: r45 }
  149 r10 <- OverflowOf(r45)
  150 r2 <- CarryOf(r45)
  151 r6 <- SignOf(r45)
  152 r5 <- IsZero(r45)
  153 r50 <- Part { src: r45, offset: 0, size: 1 }
  154 r3 <- Parity(r50)
0x40121f:
  155 r46 <- Const { value: -12, size: 8 }
  156 r46 <- Arith(Add, r46, r11)
  157 r45 <- LoadMem { addr: r46, size: 4 }
  158 r47 <- Const { value: 1, size: 4 }
  159 r45 <- Arith(Add, r45, r47)
  160 r48 <- Const { value: -12, size: 8 }
  161 r48 <- Arith(Add, r48, r11)
  162 r48 <- StoreMem { addr: r48, value: r45 }
  163 r10 <- OverflowOf(r45)
  164 r2 <- CarryOf(r45)
  165 r6 <- SignOf(r45)
  166 r5 <- IsZero(r45)
  167 r49 <- Part { src: r45, offset: 0, size: 1 }
  168 r3 <- Parity(r49)
0x401223:
  169 r46 <- Const { value: -20, size: 8 }
  170 r46 <- Arith(Add, r46, r11)
  171 r45 <- LoadMem { addr: r46, size: 4 }
  172 r47 <- Part { src: r16, offset: 4, size: 4 }
  173 r16 <- Concat { lo: r45, hi: r47 }
0x401226:
  174 r46 <- Const { value: -12, size: 8 }
  175 r46 <- Arith(Add, r46, r11)
  176 r45 <- LoadMem { addr: r46, size: 4 }
  177 r48 <- Part { src: r16, offset: 0, size: 4 }
  178 r45 <- Arith(Sub, r45, r48)
  179 r10 <- OverflowOf(r45)
  180 r2 <- CarryOf(r45)
  181 r6 <- SignOf(r45)
  182 r5 <- IsZero(r45)
  183 r49 <- Part { src: r45, offset: 0, size: 1 }
  184 r3 <- Parity(r49)
0x401229:
  185 r45 <- Cmp(EQ, r6, r10)
  186 r45 <- Not(r45)
  187 r46 <- SetJumpCondition(r45)
  188 r46 <- Control(JmpExtIf(4198911))
0x40122b:
  189 r46 <- Const { value: -8, size: 8 }
  190 r46 <- Arith(Add, r46, r11)
  191 r45 <- LoadMem { addr: r46, size: 4 }
  192 r47 <- Const { value: 1, size: 4 }
  193 r45 <- Arith(Add, r45, r47)
  194 r48 <- Const { value: -8, size: 8 }
  195 r48 <- Arith(Add, r48, r11)
  196 r48 <- StoreMem { addr: r48, value: r45 }
  197 r10 <- OverflowOf(r45)
  198 r2 <- CarryOf(r45)
  199 r6 <- SignOf(r45)
  200 r5 <- IsZero(r45)
  201 r49 <- Part { src: r45, offset: 0, size: 1 }
  202 r3 <- Parity(r49)
0x40122f:
  203 r46 <- Const { value: -24, size: 8 }
  204 r46 <- Arith(Add, r46, r11)
  205 r45 <- LoadMem { addr: r46, size: 4 }
  206 r47 <- Part { src: r16, offset: 4, size: 4 }
  207 r16 <- Concat { lo: r45, hi: r47 }
0x401232:
  208 r46 <- Const { value: -8, size: 8 }
  209 r46 <- Arith(Add, r46, r11)
  210 r45 <- LoadMem { addr: r46, size: 4 }
  211 r48 <- Part { src: r16, offset: 0, size: 4 }
  212 r45 <- Arith(Sub, r45, r48)
  213 r10 <- OverflowOf(r45)
  214 r2 <- CarryOf(r45)
  215 r6 <- SignOf(r45)
  216 r5 <- IsZero(r45)
  217 r49 <- Part { src: r45, offset: 0, size: 1 }
  218 r3 <- Parity(r49)
0x401235:
  219 r45 <- Cmp(EQ, r6, r10)
  220 r45 <- Not(r45)
  221 r46 <- SetJumpCondition(r45)
  222 r46 <- Control(JmpExtIf(4198902))
0x401237:
  223 r46 <- Const { value: -4, size: 8 }
  224 r46 <- Arith(Add, r46, r11)
  225 r45 <- LoadMem { addr: r46, size: 4 }
  226 r47 <- Part { src: r16, offset: 4, size: 4 }
  227 r16 <- Concat { lo: r45, hi: r47 }
0x40123a:
  228 r45 <- LoadMem { addr: r12, size: 8 }
  229 r11 <- Get(r45)
  230 r12 <- ArithK(Add, r12, 8)
0x40123b:
  231 r45 <- Void
  232 r45 <- Concat { lo: r45, hi: r16 }
  233 r45 <- Part { src: r45, offset: 0, size: 4 }
  234 r47 <- SetReturnValue(r45)
  235 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  242 instrs
.B0:    ;;  → Always(Block(BlockID(5))).
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  2)  r42 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(16) }
  (  2)  r43 <- Part { src: r42, offset: 0, size: 8 }
  (  2)  r45 <- Part { src: r42, offset: 8, size: 8 }
  ( 21)  r47 <- ArithK(Add, r10, -8)
         r48 <- StoreMem { addr: r47, value: r9 }
         r57 <- Const { value: -32, size: 8 }
         r58 <- Arith(Add, r57, r47)
         r59 <- StoreMem { addr: r58, value: r43 }
         r60 <- Const { value: -24, size: 8 }
         r61 <- Arith(Add, r60, r47)
         r62 <- StoreMem { addr: r61, value: r45 }
         r63 <- Const { value: 0, size: 4 }
         r64 <- Const { value: -4, size: 8 }
         r65 <- Arith(Add, r64, r47)
         r66 <- StoreMem { addr: r65, value: r63 }
         r67 <- Const { value: 0, size: 4 }
         r68 <- Const { value: -8, size: 8 }
         r69 <- Arith(Add, r68, r47)
         r70 <- StoreMem { addr: r69, value: r67 }
         r238 <- Upsilon { value: r43, phi_ref: r237 }
.B5:    ;; preds:B0,B4  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) }.
         r237 <- Phi
         r203 <- Const { value: -24, size: 8 }
         r204 <- Arith(Add, r203, r47)
         r205 <- LoadMem { addr: r204, size: 4 }
         r206 <- Part { src: r237, offset: 4, size: 4 }
  (  3)  r207 <- Concat { lo: r205, hi: r206 }
         r208 <- Const { value: -8, size: 8 }
         r209 <- Arith(Add, r208, r47)
         r210 <- LoadMem { addr: r209, size: 4 }
         r211 <- Part { src: r207, offset: 0, size: 4 }
  (  2)  r212 <- Arith(Sub, r210, r211)
         r213 <- OverflowOf(r212)
         r215 <- SignOf(r212)
         r219 <- Cmp(EQ, r215, r213)
         r220 <- Not(r219)
         r221 <- SetJumpCondition(r220)
.B6:    ;; preds:B5  → Always(Return).
         r223 <- Const { value: -4, size: 8 }
         r224 <- Arith(Add, r223, r47)
         r225 <- LoadMem { addr: r224, size: 4 }
         r226 <- Part { src: r207, offset: 4, size: 4 }
         r227 <- Concat { lo: r225, hi: r226 }
         r232 <- Concat { lo: r231, hi: r227 }
         r233 <- Part { src: r232, offset: 0, size: 4 }
         r234 <- SetReturnValue(r233)
.B1:    ;; preds:B5  → Always(Block(BlockID(3))).
         r72 <- Const { value: 0, size: 4 }
         r73 <- Const { value: -12, size: 8 }
         r74 <- Arith(Add, r73, r47)
         r75 <- StoreMem { addr: r74, value: r72 }
         r239 <- Upsilon { value: r207, phi_ref: r236 }
.B3:    ;; preds:B1,B2  → Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) }.
         r236 <- Phi
         r169 <- Const { value: -20, size: 8 }
         r170 <- Arith(Add, r169, r47)
         r171 <- LoadMem { addr: r170, size: 4 }
         r172 <- Part { src: r236, offset: 4, size: 4 }
  (  3)  r173 <- Concat { lo: r171, hi: r172 }
         r174 <- Const { value: -12, size: 8 }
         r175 <- Arith(Add, r174, r47)
         r176 <- LoadMem { addr: r175, size: 4 }
         r177 <- Part { src: r173, offset: 0, size: 4 }
  (  2)  r178 <- Arith(Sub, r176, r177)
         r179 <- OverflowOf(r178)
         r181 <- SignOf(r178)
         r185 <- Cmp(EQ, r181, r179)
         r186 <- Not(r185)
         r187 <- SetJumpCondition(r186)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r189 <- Const { value: -8, size: 8 }
         r190 <- Arith(Add, r189, r47)
         r191 <- LoadMem { addr: r190, size: 4 }
         r192 <- Const { value: 1, size: 4 }
         r193 <- Arith(Add, r191, r192)
         r194 <- Const { value: -8, size: 8 }
         r195 <- Arith(Add, r194, r47)
         r196 <- StoreMem { addr: r195, value: r193 }
         r240 <- Upsilon { value: r173, phi_ref: r237 }
.B2:    ;; preds:B3  → Always(Block(BlockID(3))).
         r77 <- Const { value: -32, size: 8 }
         r78 <- Arith(Add, r77, r47)
         r79 <- LoadMem { addr: r78, size: 8 }
         r81 <- Const { value: -20, size: 8 }
         r82 <- Arith(Add, r81, r47)
         r83 <- LoadMem { addr: r82, size: 4 }
         r84 <- Part { src: r173, offset: 4, size: 4 }
  (  2)  r85 <- Concat { lo: r83, hi: r84 }
         r86 <- Part { src: r85, offset: 0, size: 4 }
         r87 <- Const { value: -8, size: 8 }
         r88 <- Arith(Add, r87, r47)
         r89 <- LoadMem { addr: r88, size: 4 }
         r90 <- Arith(Mul, r86, r89)
         r91 <- Part { src: r85, offset: 4, size: 4 }
  (  2)  r92 <- Concat { lo: r90, hi: r91 }
         r99 <- Part { src: r92, offset: 0, size: 4 }
         r100 <- Part { src: r45, offset: 4, size: 4 }
         r101 <- Concat { lo: r99, hi: r100 }
         r102 <- Const { value: -12, size: 8 }
         r103 <- Arith(Add, r102, r47)
         r104 <- LoadMem { addr: r103, size: 4 }
         r105 <- Part { src: r92, offset: 4, size: 4 }
  (  2)  r106 <- Concat { lo: r104, hi: r105 }
         r107 <- Part { src: r106, offset: 0, size: 4 }
         r108 <- Part { src: r101, offset: 0, size: 4 }
         r109 <- Arith(Add, r107, r108)
         r110 <- Part { src: r106, offset: 4, size: 4 }
         r111 <- Concat { lo: r109, hi: r110 }
         r118 <- Part { src: r111, offset: 0, size: 4 }
         r119 <- Widen { reg: r118, target_size: 8, sign: true }
         r120 <- Const { value: 2, size: 1 }
         r121 <- Widen { reg: r120, target_size: 8, sign: false }
         r122 <- Arith(Shl, r119, r121)
  (  2)  r128 <- Arith(Add, r122, r79)
         r136 <- Const { value: 0, size: 8 }
         r137 <- Arith(Add, r136, r128)
         r138 <- LoadMem { addr: r137, size: 4 }
         r139 <- Part { src: r128, offset: 4, size: 4 }
  (  2)  r140 <- Concat { lo: r138, hi: r139 }
         r141 <- Const { value: -4, size: 8 }
         r142 <- Arith(Add, r141, r47)
         r143 <- LoadMem { addr: r142, size: 4 }
         r144 <- Part { src: r140, offset: 0, size: 4 }
         r145 <- Arith(Add, r143, r144)
         r146 <- Const { value: -4, size: 8 }
         r147 <- Arith(Add, r146, r47)
         r148 <- StoreMem { addr: r147, value: r145 }
         r155 <- Const { value: -12, size: 8 }
         r156 <- Arith(Add, r155, r47)
         r157 <- LoadMem { addr: r156, size: 4 }
         r158 <- Const { value: 1, size: 4 }
         r159 <- Arith(Add, r157, r158)
         r160 <- Const { value: -12, size: 8 }
         r161 <- Arith(Add, r160, r47)
         r162 <- StoreMem { addr: r161, value: r159 }
         r241 <- Upsilon { value: r140, phi_ref: r236 }


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Block(BlockID(5))) [r9, r10, r42, r43, r45, r47, r48, r58, r59, r61, r62, r63, r65, r66, r67, r69, r70]
  BlockID(1) -> Always(Block(BlockID(3))) [r72, r74, r75]
  BlockID(2) -> Always(Block(BlockID(3))) [r273, r278, r90, r119, r120, r121, r122, r128, r138, r147, r148, r159, r161, r162]
  BlockID(3) -> Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) } [r258, r179, r181, r185, r186, r187]
  BlockID(4) -> Always(Block(BlockID(5))) [r193, r195, r196]
  BlockID(5) -> Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) } [r243, r213, r215, r219, r220, r221]
  BlockID(6) -> Always(Return) [r234]
  domtree:
    BlockID(0)
|  BlockID(5)
|  |  BlockID(1)
|  |  |  BlockID(3)
|  |  |  |  BlockID(2)
|  |  |  |  BlockID(4)
|  |  BlockID(6)

 --- ssa
ssa program  302 instrs
.B0:    ;;  → Always(Block(BlockID(5))).
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
  (  9)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  5)  r42 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(16) }
  (  2)  r43 <- StructGetMember { struct_value: r42, name: "numbers", size: 16 }
         r45 <- Part { src: r42, offset: 8, size: 8 }
         r47 <- ArithK(Add, r10, -8)
         r48 <- StoreMem { addr: r47, value: r9 }
         r58 <- ArithK(Add, r10, -40)
         r59 <- StoreMem { addr: r58, value: r43 }
         r61 <- ArithK(Add, r10, -32)
         r62 <- StoreMem { addr: r61, value: r45 }
  (  2)  r63 <- Const { value: 0, size: 4 }
         r65 <- ArithK(Add, r10, -12)
         r66 <- StoreMem { addr: r65, value: r63 }
         r67 <- Const { value: 0, size: 4 }
         r69 <- ArithK(Add, r10, -16)
         r70 <- StoreMem { addr: r69, value: r67 }
.B5:    ;; preds:B0,B4  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(6)) }.
  (  2)  r243 <- Part { src: r42, offset: 8, size: 4 }
         r213 <- OverflowOf(r243)
         r215 <- SignOf(r243)
         r219 <- Cmp(EQ, r215, r213)
         r220 <- Not(r219)
         r221 <- SetJumpCondition(r220)
.B6:    ;; preds:B5  → Always(Return).
         r234 <- SetReturnValue(r63)
.B1:    ;; preds:B5  → Always(Block(BlockID(3))).
         r72 <- Const { value: 0, size: 4 }
         r74 <- ArithK(Add, r10, -20)
         r75 <- StoreMem { addr: r74, value: r72 }
.B3:    ;; preds:B1,B2  → Conditional { pos: Block(BlockID(2)), neg: Block(BlockID(4)) }.
  (  2)  r258 <- Part { src: r42, offset: 12, size: 4 }
         r179 <- OverflowOf(r258)
         r181 <- SignOf(r258)
         r185 <- Cmp(EQ, r181, r179)
         r186 <- Not(r185)
         r187 <- SetJumpCondition(r186)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r193 <- Const { value: 1, size: 8 }
         r195 <- ArithK(Add, r10, -16)
         r196 <- StoreMem { addr: r195, value: r193 }
.B2:    ;; preds:B3  → Always(Block(BlockID(3))).
         r273 <- Part { src: r43, offset: 0, size: 8 }
         r278 <- Part { src: r42, offset: 12, size: 4 }
         r90 <- ArithK(Mul, r278, 0)
         r119 <- Widen { reg: r90, target_size: 8, sign: true }
         r120 <- Const { value: 2, size: 1 }
         r121 <- Widen { reg: r120, target_size: 8, sign: false }
         r122 <- Arith(Shl, r119, r121)
         r128 <- Arith(Add, r122, r273)
         r138 <- LoadMem { addr: r128, size: 4 }
         r147 <- ArithK(Add, r10, -12)
         r148 <- StoreMem { addr: r147, value: r138 }
         r159 <- Const { value: 1, size: 8 }
         r161 <- ArithK(Add, r10, -20)
         r162 <- StoreMem { addr: r161, value: r159 }


 --- ast

T0: {
  let r43: Bytes(16) = pre:arg0.numbers;
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 40]:* := r43;
  [pre:RSP - 32]:* := pre:arg0[16 .. 8];
  [pre:RSP - 12]:* := 0;
  [pre:RSP - 16]:* := 0;
  goto T5
  T5: {
    let r243: Bytes(4) = pre:arg0[12 .. 8];
    ;
    if ! (SignOf (r243) EQ OverflowOf (r243)) {
      [pre:RSP - 20]:* := 0;
      goto T3
      T3: {
        let r258: Bytes(4) = pre:arg0[16 .. 12];
        ;
        if ! (SignOf (r258) EQ OverflowOf (r258)) {
          [pre:RSP - 12]:* := [(pre:arg0[16 .. 12] * 0) as i64 << 2 as u64 + r43[8 .. 0]]:4;
          [pre:RSP - 20]:* := 1;
          loop T3
        }
        [pre:RSP - 16]:* := 1;
        loop T5
      }
    
    }
    ;
    return 0
  }

}
