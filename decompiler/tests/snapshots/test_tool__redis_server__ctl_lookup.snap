---
source: decompiler/tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

function type: 0x5ddf40: no type info
#call: to address 0x401280, returning to 0x5ddf74      -> resolved call to: TypeID(340442v1) = Type { name: "strchr", ty: Subroutine(Subroutine { return_tyid: TypeID(338770v1), param_names: [None, None], param_tyids: [TypeID(338833v1), TypeID(338762v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Int(
                     Int {
                         size: 4,
                         signed: Signed,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338770v1), param_names: [None, None], param_tyids: [TypeID(338833v1), TypeID(338762v1)] }); param_values=[r45, r46]
#call: to address 0x4012e0, returning to 0x5de00a      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de043      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de078      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de0e2      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de10c      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de136      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x4012e0, returning to 0x5de169      -> resolved call to: TypeID(340440v1) = Type { name: "strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338777v1), param_names: [None], param_tyids: [TypeID(338833v1)] }); param_values=[r45]
#call: to address 0x401340, returning to 0x5de181      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x401340, returning to 0x5de1ac      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x401280, returning to 0x5de206      -> resolved call to: TypeID(340442v1) = Type { name: "strchr", ty: Subroutine(Subroutine { return_tyid: TypeID(338770v1), param_names: [None, None], param_tyids: [TypeID(338833v1), TypeID(338762v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Int(
                     Int {
                         size: 4,
                         signed: Signed,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338770v1), param_names: [None, None], param_tyids: [TypeID(338833v1), TypeID(338762v1)] }); param_values=[r45, r46]
#call: to address 0x6270e0, returning to 0x5de254      -> resolved call to: TypeID(340432v1) = Type { name: "je_malloc_strtoumax", ty: Subroutine(Subroutine { return_tyid: TypeID(338844v1), param_names: [None, None, None], param_tyids: [TypeID(338835v1), TypeID(338832v1), TypeID(338762v1)] }) }
      param[0] = Unknown(
                     Unknown {
                         size: 0,
                     },
                 )
      pack_params: had to cut it short after 0 params: type has no alignment?
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338844v1), param_names: [None, None, None], param_tyids: [TypeID(338835v1), TypeID(338832v1), TypeID(338762v1)] }); param_values=[]
resolved call: subr_ty=None; param_values=[r14, r15, r19, r18]
#call: to address 0x401340, returning to 0x5de2fc      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x401340, returning to 0x5de31c      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x4012e0, returning to 0x5de358      -> resolved call to: TypeID(358627v1) = Type { name: "__builtin_strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [], param_tyids: [] }) }
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(1v1), param_names: [], param_tyids: [] }); param_values=[]
#call: to address 0x401340, returning to 0x5de399      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x401340, returning to 0x5de3c1      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x401340, returning to 0x5de3e9      -> resolved call to: TypeID(340436v1) = Type { name: "strncmp", ty: Subroutine(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }) }
      param[0] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[1] = Ptr(
                     TypeID(
                         338772v1,
                     ),
                 )
      param[2] = Int(
                     Int {
                         size: 8,
                         signed: Unsigned,
                     },
                 )
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(338762v1), param_names: [None, None, None], param_tyids: [TypeID(338833v1), TypeID(338833v1), TypeID(338755v1)] }); param_values=[r45, r46, r47]
#call: to address 0x4012e0, returning to 0x5de40c      -> resolved call to: TypeID(358627v1) = Type { name: "__builtin_strlen", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [], param_tyids: [] }) }
resolved call: subr_ty=Some(Subroutine { return_tyid: TypeID(1v1), param_names: [], param_tyids: [] }); param_values=[]
4 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: no type hints for this callsite
  #   2: no function type
  #   3: no function type


mil program = 
program  1434 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
0x5ddf40:
   43 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   44 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r27 }
0x5ddf42:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r26 }
0x5ddf44:
   47 r26: TypeID(2v1) <- Get(r15)
0x5ddf47:
   48 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
   49 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   50 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5ddf4c:
   51 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   52 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r25 }
0x5ddf4e:
   53 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   54 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x5ddf50:
   55 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   56 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x5ddf51:
   57 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   58 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x5ddf52:
   59 r17: TypeID(2v1) <- Get(r18)
0x5ddf55:
   60 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
   61 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   62 r12: TypeID(2v1) <- Get(r12)
   63 r10: TypeID(2v1) <- OverflowOf(r12)
   64 r2: TypeID(2v1) <- CarryOf(r12)
   65 r6: TypeID(2v1) <- SignOf(r12)
   66 r5: TypeID(2v1) <- IsZero(r12)
   67 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   68 r3: TypeID(2v1) <- Parity(r47)
0x5ddf59:
   69 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
   70 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   71 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5ddf5e:
   72 r14: TypeID(2v1) <- Get(r19)
0x5ddf61:
   73 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
   74 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   75 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddf66:
   76 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   77 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   78 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x5ddf6a:
   79 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
   80 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   81 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddf6f:
   82 r45: TypeID(2v1) <- Void
   83 r45: TypeID(2v1) <- Get(r14)
   84 r46: TypeID(2v1) <- Void
   85 r46: TypeID(2v1) <- Get(r15)
   86 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
   87 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
   88 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
   89 r48: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
   90 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
   91 r2: TypeID(2v1) <- Undefined
   92 r3: TypeID(2v1) <- Undefined
   93 r4: TypeID(2v1) <- Undefined
   94 r5: TypeID(2v1) <- Undefined
   95 r6: TypeID(2v1) <- Undefined
   96 r7: TypeID(2v1) <- Undefined
   97 r8: TypeID(2v1) <- Undefined
   98 r9: TypeID(2v1) <- Undefined
   99 r10: TypeID(2v1) <- Undefined
  100 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5ddf74:
  101 r20: TypeID(2v1) <- Get(r16)
0x5ddf77:
  102 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  103 r6: TypeID(2v1) <- SignOf(r16)
  104 r5: TypeID(2v1) <- IsZero(r16)
  105 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  106 r3: TypeID(2v1) <- Parity(r16)
  107 r2: TypeID(2v1) <- False
  108 r10: TypeID(2v1) <- False
0x5ddf7a:
  109 r45: TypeID(2v1) <- SetJumpCondition(r5)
  110 r45: TypeID(2v1) <- Control(JmpIf(1405))
0x5ddf80:
  111 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  112 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  113 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  114 r16: TypeID(2v1) <- Get(r45)
0x5ddf84:
  115 r11: TypeID(2v1) <- Get(r20)
0x5ddf87:
  116 r11: TypeID(2v1) <- Arith(Sub, r11, r16)
  117 r11: TypeID(2v1) <- Get(r11)
  118 r10: TypeID(2v1) <- OverflowOf(r11)
  119 r2: TypeID(2v1) <- CarryOf(r11)
  120 r6: TypeID(2v1) <- SignOf(r11)
  121 r5: TypeID(2v1) <- IsZero(r11)
  122 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  123 r3: TypeID(2v1) <- Parity(r47)
0x5ddf8a:
  124 r45: TypeID(2v1) <- SetJumpCondition(r5)
  125 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5ddf90:
  126 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  127 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  128 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  129 r19: TypeID(2v1) <- Get(r45)
0x5ddf95:
  130 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  131 r46: TypeID(2v1) <- Arith(Add, r46, r19)
  132 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  133 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  134 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  135 r10: TypeID(2v1) <- OverflowOf(r45)
  136 r2: TypeID(2v1) <- CarryOf(r45)
  137 r6: TypeID(2v1) <- SignOf(r45)
  138 r5: TypeID(2v1) <- IsZero(r45)
  139 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  140 r3: TypeID(2v1) <- Parity(r48)
0x5ddf99:
  141 r45: TypeID(2v1) <- SetJumpCondition(r5)
  142 r45: TypeID(2v1) <- Control(JmpIf(1432))
0x5ddf9f:
  143 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  144 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  145 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  146 r21: TypeID(2v1) <- Get(r45)
0x5ddfa3:
  147 r46: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  148 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  149 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  150 r49: TypeID(2v1) <- Part { src: r27, offset: 4, size: 4 }
  151 r27: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  152 r10: TypeID(2v1) <- False
  153 r2: TypeID(2v1) <- False
  154 r6: TypeID(2v1) <- SignOf(r46)
  155 r5: TypeID(2v1) <- IsZero(r46)
  156 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  157 r3: TypeID(2v1) <- Parity(r50)
0x5ddfa6:
  158 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
  159 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  160 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5ddfab:
  161 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  162 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  163 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  164 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  165 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  166 r10: TypeID(2v1) <- OverflowOf(r45)
  167 r2: TypeID(2v1) <- CarryOf(r45)
  168 r6: TypeID(2v1) <- SignOf(r45)
  169 r5: TypeID(2v1) <- IsZero(r45)
  170 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  171 r3: TypeID(2v1) <- Parity(r48)
0x5ddfaf:
  172 r45: TypeID(2v1) <- SetJumpCondition(r5)
  173 r45: TypeID(2v1) <- Control(JmpIf(863))
0x5ddfc0:
  174 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  175 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  176 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  177 r15: TypeID(2v1) <- Get(r45)
0x5ddfc4:
  178 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  179 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  180 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5ddfc9:
  181 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  182 r6: TypeID(2v1) <- SignOf(r15)
  183 r5: TypeID(2v1) <- IsZero(r15)
  184 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  185 r3: TypeID(2v1) <- Parity(r15)
  186 r2: TypeID(2v1) <- False
  187 r10: TypeID(2v1) <- False
0x5ddfcc:
  188 r45: TypeID(2v1) <- SetJumpCondition(r5)
  189 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5ddfd2:
  190 r24: TypeID(2v1) <- Get(r21)
0x5ddfd5:
  191 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  192 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  193 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  194 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  195 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  196 r10: TypeID(2v1) <- False
  197 r2: TypeID(2v1) <- False
  198 r6: TypeID(2v1) <- SignOf(r46)
  199 r5: TypeID(2v1) <- IsZero(r46)
  200 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  201 r3: TypeID(2v1) <- Parity(r50)
0x5ddfd7:
  202 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  203 r47: TypeID(2v1) <- Const { value: 3, size: 4 }
  204 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  205 r48: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  206 r15: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  207 r10: TypeID(2v1) <- False
  208 r2: TypeID(2v1) <- False
  209 r6: TypeID(2v1) <- SignOf(r46)
  210 r5: TypeID(2v1) <- IsZero(r46)
  211 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  212 r3: TypeID(2v1) <- Parity(r49)
0x5ddfda:
  213 r45: TypeID(2v1) <- SetJumpCondition(r5)
  214 r45: TypeID(2v1) <- Control(JmpIf(426))
0x5ddfe0:
  215 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  216 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  217 r10: TypeID(2v1) <- OverflowOf(r15)
  218 r2: TypeID(2v1) <- CarryOf(r15)
  219 r6: TypeID(2v1) <- SignOf(r15)
  220 r5: TypeID(2v1) <- IsZero(r15)
  221 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  222 r3: TypeID(2v1) <- Parity(r47)
0x5ddfe4:
  223 r45: TypeID(2v1) <- SetJumpCondition(r5)
  224 r45: TypeID(2v1) <- Control(JmpIf(351))
0x5ddfe6:
  225 r46: TypeID(2v1) <- Const { value: 2, size: 8 }
  226 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  227 r10: TypeID(2v1) <- OverflowOf(r15)
  228 r2: TypeID(2v1) <- CarryOf(r15)
  229 r6: TypeID(2v1) <- SignOf(r15)
  230 r5: TypeID(2v1) <- IsZero(r15)
  231 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  232 r3: TypeID(2v1) <- Parity(r47)
0x5ddfea:
  233 r45: TypeID(2v1) <- SetJumpCondition(r5)
  234 r45: TypeID(2v1) <- Control(JmpIf(289))
0x5ddfec:
  235 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  236 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  237 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  238 r22: TypeID(2v1) <- Get(r45)
0x5ddff0:
  239 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  240 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  241 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddff5:
  242 r25: TypeID(2v1) <- Get(r21)
0x5ddff8:
  243 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  244 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  245 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddffd:
  246 r14: TypeID(2v1) <- Get(r22)
0x5de000:
  247 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  248 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  249 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r22 }
0x5de005:
  250 r45: TypeID(2v1) <- Void
  251 r45: TypeID(2v1) <- Get(r14)
  252 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  253 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  254 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  255 r2: TypeID(2v1) <- Undefined
  256 r3: TypeID(2v1) <- Undefined
  257 r4: TypeID(2v1) <- Undefined
  258 r5: TypeID(2v1) <- Undefined
  259 r6: TypeID(2v1) <- Undefined
  260 r7: TypeID(2v1) <- Undefined
  261 r8: TypeID(2v1) <- Undefined
  262 r9: TypeID(2v1) <- Undefined
  263 r10: TypeID(2v1) <- Undefined
  264 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de00a:
  265 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  266 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  267 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  268 r15: TypeID(2v1) <- Get(r45)
0x5de00f:
  269 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  270 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  271 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  272 r20: TypeID(2v1) <- Get(r45)
0x5de014:
  273 r14: TypeID(2v1) <- Get(r24)
0x5de017:
  274 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  275 r10: TypeID(2v1) <- OverflowOf(r16)
  276 r2: TypeID(2v1) <- CarryOf(r16)
  277 r6: TypeID(2v1) <- SignOf(r16)
  278 r5: TypeID(2v1) <- IsZero(r16)
  279 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  280 r3: TypeID(2v1) <- Parity(r47)
0x5de01a:
  281 r45: TypeID(2v1) <- SetJumpCondition(r5)
  282 r45: TypeID(2v1) <- Control(JmpIf(1355))
0x5de020:
  283 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  284 r46: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  285 r17: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de025:
  286 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  287 r45: TypeID(2v1) <- Arith(Add, r45, r14)
  288 r24: TypeID(2v1) <- Get(r45)
0x5de029:
  289 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  290 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  291 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  292 r23: TypeID(2v1) <- Get(r45)
0x5de02e:
  293 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  294 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  295 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de033:
  296 r25: TypeID(2v1) <- Get(r24)
0x5de036:
  297 r14: TypeID(2v1) <- Get(r23)
0x5de039:
  298 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  299 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  300 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r23 }
0x5de03e:
  301 r45: TypeID(2v1) <- Void
  302 r45: TypeID(2v1) <- Get(r14)
  303 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  304 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  305 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  306 r2: TypeID(2v1) <- Undefined
  307 r3: TypeID(2v1) <- Undefined
  308 r4: TypeID(2v1) <- Undefined
  309 r5: TypeID(2v1) <- Undefined
  310 r6: TypeID(2v1) <- Undefined
  311 r7: TypeID(2v1) <- Undefined
  312 r8: TypeID(2v1) <- Undefined
  313 r9: TypeID(2v1) <- Undefined
  314 r10: TypeID(2v1) <- Undefined
  315 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de043:
  316 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  317 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  318 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  319 r15: TypeID(2v1) <- Get(r45)
0x5de048:
  320 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  321 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  322 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  323 r20: TypeID(2v1) <- Get(r45)
0x5de04d:
  324 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  325 r10: TypeID(2v1) <- OverflowOf(r16)
  326 r2: TypeID(2v1) <- CarryOf(r16)
  327 r6: TypeID(2v1) <- SignOf(r16)
  328 r5: TypeID(2v1) <- IsZero(r16)
  329 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  330 r3: TypeID(2v1) <- Parity(r47)
0x5de050:
  331 r45: TypeID(2v1) <- SetJumpCondition(r5)
  332 r45: TypeID(2v1) <- Control(JmpIf(1309))
0x5de056:
  333 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  334 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  335 r17: TypeID(2v1) <- Get(r17)
  336 r10: TypeID(2v1) <- OverflowOf(r17)
  337 r2: TypeID(2v1) <- CarryOf(r17)
  338 r6: TypeID(2v1) <- SignOf(r17)
  339 r5: TypeID(2v1) <- IsZero(r17)
  340 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  341 r3: TypeID(2v1) <- Parity(r47)
0x5de05a:
  342 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  343 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  344 r24: TypeID(2v1) <- Get(r24)
  345 r10: TypeID(2v1) <- OverflowOf(r24)
  346 r2: TypeID(2v1) <- CarryOf(r24)
  347 r6: TypeID(2v1) <- SignOf(r24)
  348 r5: TypeID(2v1) <- IsZero(r24)
  349 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  350 r3: TypeID(2v1) <- Parity(r47)
0x5de05e:
  351 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  352 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  353 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  354 r16: TypeID(2v1) <- Get(r45)
0x5de063:
  355 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  356 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  357 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de068:
  358 r25: TypeID(2v1) <- Get(r24)
0x5de06b:
  359 r14: TypeID(2v1) <- Get(r16)
0x5de06e:
  360 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  361 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  362 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5de073:
  363 r45: TypeID(2v1) <- Void
  364 r45: TypeID(2v1) <- Get(r14)
  365 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  366 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  367 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  368 r2: TypeID(2v1) <- Undefined
  369 r3: TypeID(2v1) <- Undefined
  370 r4: TypeID(2v1) <- Undefined
  371 r5: TypeID(2v1) <- Undefined
  372 r6: TypeID(2v1) <- Undefined
  373 r7: TypeID(2v1) <- Undefined
  374 r8: TypeID(2v1) <- Undefined
  375 r9: TypeID(2v1) <- Undefined
  376 r10: TypeID(2v1) <- Undefined
  377 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de078:
  378 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  379 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  380 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  381 r15: TypeID(2v1) <- Get(r45)
0x5de07d:
  382 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  383 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  384 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  385 r20: TypeID(2v1) <- Get(r45)
0x5de082:
  386 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  387 r10: TypeID(2v1) <- OverflowOf(r16)
  388 r2: TypeID(2v1) <- CarryOf(r16)
  389 r6: TypeID(2v1) <- SignOf(r16)
  390 r5: TypeID(2v1) <- IsZero(r16)
  391 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  392 r3: TypeID(2v1) <- Parity(r47)
0x5de085:
  393 r45: TypeID(2v1) <- SetJumpCondition(r5)
  394 r45: TypeID(2v1) <- Control(JmpIf(1263))
0x5de08b:
  395 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  396 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  397 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  398 r19: TypeID(2v1) <- Get(r45)
0x5de090:
  399 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  400 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  401 r17: TypeID(2v1) <- Get(r17)
  402 r10: TypeID(2v1) <- OverflowOf(r17)
  403 r2: TypeID(2v1) <- CarryOf(r17)
  404 r6: TypeID(2v1) <- SignOf(r17)
  405 r5: TypeID(2v1) <- IsZero(r17)
  406 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  407 r3: TypeID(2v1) <- Parity(r47)
0x5de094:
  408 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  409 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  410 r24: TypeID(2v1) <- Get(r24)
  411 r10: TypeID(2v1) <- OverflowOf(r24)
  412 r2: TypeID(2v1) <- CarryOf(r24)
  413 r6: TypeID(2v1) <- SignOf(r24)
  414 r5: TypeID(2v1) <- IsZero(r24)
  415 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  416 r3: TypeID(2v1) <- Parity(r47)
0x5de098:
  417 r17: TypeID(2v1) <- Arith(Sub, r17, r19)
  418 r10: TypeID(2v1) <- OverflowOf(r17)
  419 r2: TypeID(2v1) <- CarryOf(r17)
  420 r6: TypeID(2v1) <- SignOf(r17)
  421 r5: TypeID(2v1) <- IsZero(r17)
  422 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  423 r3: TypeID(2v1) <- Parity(r47)
0x5de09b:
  424 r45: TypeID(2v1) <- SetJumpCondition(r5)
  425 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5de0a1:
  426 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  427 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  428 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r26 }
0x5de0a6:
  429 r26: TypeID(2v1) <- Get(r24)
0x5de0a9:
  430 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  431 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  432 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r27 }
0x5de0ae:
  433 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  434 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  435 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de0b3:
  436 r45: TypeID(2v1) <- Control(Jmp(587))
0x5de0c0:
  437 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  438 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  439 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  440 r21: TypeID(2v1) <- Get(r45)
0x5de0c4:
  441 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  442 r45: TypeID(2v1) <- Arith(Add, r45, r26)
  443 r27: TypeID(2v1) <- Get(r45)
0x5de0c8:
  444 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  445 r45: TypeID(2v1) <- Arith(Add, r45, r17)
  446 r25: TypeID(2v1) <- Get(r45)
0x5de0cc:
  447 r17: TypeID(2v1) <- Get(r25)
0x5de0cf:
  448 r26: TypeID(2v1) <- Get(r27)
0x5de0d2:
  449 r24: TypeID(2v1) <- Get(r27)
0x5de0d5:
  450 r14: TypeID(2v1) <- Get(r21)
0x5de0d8:
  451 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  452 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  453 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5de0dd:
  454 r45: TypeID(2v1) <- Void
  455 r45: TypeID(2v1) <- Get(r14)
  456 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  457 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  458 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  459 r2: TypeID(2v1) <- Undefined
  460 r3: TypeID(2v1) <- Undefined
  461 r4: TypeID(2v1) <- Undefined
  462 r5: TypeID(2v1) <- Undefined
  463 r6: TypeID(2v1) <- Undefined
  464 r7: TypeID(2v1) <- Undefined
  465 r8: TypeID(2v1) <- Undefined
  466 r9: TypeID(2v1) <- Undefined
  467 r10: TypeID(2v1) <- Undefined
  468 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de0e2:
  469 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  470 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  471 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  472 r15: TypeID(2v1) <- Get(r45)
0x5de0e7:
  473 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  474 r10: TypeID(2v1) <- OverflowOf(r16)
  475 r2: TypeID(2v1) <- CarryOf(r16)
  476 r6: TypeID(2v1) <- SignOf(r16)
  477 r5: TypeID(2v1) <- IsZero(r16)
  478 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  479 r3: TypeID(2v1) <- Parity(r47)
0x5de0ea:
  480 r45: TypeID(2v1) <- SetJumpCondition(r5)
  481 r45: TypeID(2v1) <- Control(JmpIf(671))
0x5de0f0:
  482 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  483 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  484 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  485 r18: TypeID(2v1) <- Get(r45)
0x5de0f4:
  486 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  487 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  488 r26: TypeID(2v1) <- Get(r45)
0x5de0f8:
  489 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  490 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  491 r17: TypeID(2v1) <- Get(r45)
0x5de0fc:
  492 r24: TypeID(2v1) <- Get(r26)
0x5de0ff:
  493 r14: TypeID(2v1) <- Get(r18)
0x5de102:
  494 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  495 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  496 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r18 }
0x5de107:
  497 r45: TypeID(2v1) <- Void
  498 r45: TypeID(2v1) <- Get(r14)
  499 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  500 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  501 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  502 r2: TypeID(2v1) <- Undefined
  503 r3: TypeID(2v1) <- Undefined
  504 r4: TypeID(2v1) <- Undefined
  505 r5: TypeID(2v1) <- Undefined
  506 r6: TypeID(2v1) <- Undefined
  507 r7: TypeID(2v1) <- Undefined
  508 r8: TypeID(2v1) <- Undefined
  509 r9: TypeID(2v1) <- Undefined
  510 r10: TypeID(2v1) <- Undefined
  511 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de10c:
  512 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  513 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  514 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  515 r15: TypeID(2v1) <- Get(r45)
0x5de111:
  516 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  517 r10: TypeID(2v1) <- OverflowOf(r16)
  518 r2: TypeID(2v1) <- CarryOf(r16)
  519 r6: TypeID(2v1) <- SignOf(r16)
  520 r5: TypeID(2v1) <- IsZero(r16)
  521 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  522 r3: TypeID(2v1) <- Parity(r47)
0x5de114:
  523 r45: TypeID(2v1) <- SetJumpCondition(r5)
  524 r45: TypeID(2v1) <- Control(JmpIf(1078))
0x5de11a:
  525 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
  526 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  527 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  528 r15: TypeID(2v1) <- Get(r45)
0x5de11e:
  529 r45: TypeID(2v1) <- Const { value: 80, size: 8 }
  530 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  531 r26: TypeID(2v1) <- Get(r45)
0x5de122:
  532 r45: TypeID(2v1) <- Const { value: 2, size: 8 }
  533 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  534 r17: TypeID(2v1) <- Get(r45)
0x5de126:
  535 r24: TypeID(2v1) <- Get(r26)
0x5de129:
  536 r14: TypeID(2v1) <- Get(r15)
0x5de12c:
  537 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  538 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  539 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5de131:
  540 r45: TypeID(2v1) <- Void
  541 r45: TypeID(2v1) <- Get(r14)
  542 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  543 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  544 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  545 r2: TypeID(2v1) <- Undefined
  546 r3: TypeID(2v1) <- Undefined
  547 r4: TypeID(2v1) <- Undefined
  548 r5: TypeID(2v1) <- Undefined
  549 r6: TypeID(2v1) <- Undefined
  550 r7: TypeID(2v1) <- Undefined
  551 r8: TypeID(2v1) <- Undefined
  552 r9: TypeID(2v1) <- Undefined
  553 r10: TypeID(2v1) <- Undefined
  554 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de136:
  555 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  556 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  557 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  558 r15: TypeID(2v1) <- Get(r45)
0x5de13b:
  559 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  560 r10: TypeID(2v1) <- OverflowOf(r16)
  561 r2: TypeID(2v1) <- CarryOf(r16)
  562 r6: TypeID(2v1) <- SignOf(r16)
  563 r5: TypeID(2v1) <- IsZero(r16)
  564 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  565 r3: TypeID(2v1) <- Parity(r47)
0x5de13e:
  566 r45: TypeID(2v1) <- SetJumpCondition(r5)
  567 r45: TypeID(2v1) <- Control(JmpIf(1117))
0x5de144:
  568 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  569 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  570 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  571 r22: TypeID(2v1) <- Get(r45)
0x5de149:
  572 r45: TypeID(2v1) <- Const { value: 3, size: 8 }
  573 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  574 r17: TypeID(2v1) <- Get(r45)
0x5de14d:
  575 r45: TypeID(2v1) <- Const { value: 120, size: 8 }
  576 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  577 r26: TypeID(2v1) <- Get(r45)
0x5de151:
  578 r17: TypeID(2v1) <- Arith(Sub, r17, r22)
  579 r10: TypeID(2v1) <- OverflowOf(r17)
  580 r2: TypeID(2v1) <- CarryOf(r17)
  581 r6: TypeID(2v1) <- SignOf(r17)
  582 r5: TypeID(2v1) <- IsZero(r17)
  583 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  584 r3: TypeID(2v1) <- Parity(r47)
0x5de154:
  585 r45: TypeID(2v1) <- SetJumpCondition(r5)
  586 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5de15a:
  587 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  588 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  589 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  590 r27: TypeID(2v1) <- Get(r45)
0x5de15e:
  591 r24: TypeID(2v1) <- Get(r26)
0x5de161:
  592 r14: TypeID(2v1) <- Get(r27)
0x5de164:
  593 r45: TypeID(2v1) <- Void
  594 r45: TypeID(2v1) <- Get(r14)
  595 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  596 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  597 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  598 r2: TypeID(2v1) <- Undefined
  599 r3: TypeID(2v1) <- Undefined
  600 r4: TypeID(2v1) <- Undefined
  601 r5: TypeID(2v1) <- Undefined
  602 r6: TypeID(2v1) <- Undefined
  603 r7: TypeID(2v1) <- Undefined
  604 r8: TypeID(2v1) <- Undefined
  605 r9: TypeID(2v1) <- Undefined
  606 r10: TypeID(2v1) <- Undefined
  607 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de169:
  608 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  609 r10: TypeID(2v1) <- OverflowOf(r16)
  610 r2: TypeID(2v1) <- CarryOf(r16)
  611 r6: TypeID(2v1) <- SignOf(r16)
  612 r5: TypeID(2v1) <- IsZero(r16)
  613 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  614 r3: TypeID(2v1) <- Parity(r47)
0x5de16c:
  615 r45: TypeID(2v1) <- Not(r5)
  616 r46: TypeID(2v1) <- SetJumpCondition(r45)
  617 r46: TypeID(2v1) <- Control(JmpIf(437))
0x5de172:
  618 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  619 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  620 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  621 r14: TypeID(2v1) <- Get(r45)
0x5de176:
  622 r19: TypeID(2v1) <- Get(r11)
0x5de179:
  623 r15: TypeID(2v1) <- Get(r27)
0x5de17c:
  624 r45: TypeID(2v1) <- Void
  625 r45: TypeID(2v1) <- Get(r14)
  626 r46: TypeID(2v1) <- Void
  627 r46: TypeID(2v1) <- Get(r15)
  628 r47: TypeID(2v1) <- Void
  629 r47: TypeID(2v1) <- Get(r19)
  630 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  631 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  632 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  633 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  634 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  635 r2: TypeID(2v1) <- Undefined
  636 r3: TypeID(2v1) <- Undefined
  637 r4: TypeID(2v1) <- Undefined
  638 r5: TypeID(2v1) <- Undefined
  639 r6: TypeID(2v1) <- Undefined
  640 r7: TypeID(2v1) <- Undefined
  641 r8: TypeID(2v1) <- Undefined
  642 r9: TypeID(2v1) <- Undefined
  643 r10: TypeID(2v1) <- Undefined
  644 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de181:
  645 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  646 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  647 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  648 r6: TypeID(2v1) <- SignOf(r46)
  649 r5: TypeID(2v1) <- IsZero(r46)
  650 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  651 r3: TypeID(2v1) <- Parity(r46)
  652 r2: TypeID(2v1) <- False
  653 r10: TypeID(2v1) <- False
0x5de183:
  654 r45: TypeID(2v1) <- Not(r5)
  655 r46: TypeID(2v1) <- SetJumpCondition(r45)
  656 r46: TypeID(2v1) <- Control(JmpIf(437))
0x5de189:
  657 r25: TypeID(2v1) <- Get(r26)
0x5de18c:
  658 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  659 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  660 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  661 r27: TypeID(2v1) <- Get(r45)
0x5de191:
  662 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  663 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  664 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  665 r20: TypeID(2v1) <- Get(r45)
0x5de196:
  666 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  667 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  668 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  669 r26: TypeID(2v1) <- Get(r45)
0x5de19b:
  670 r45: TypeID(2v1) <- Control(Jmp(723))
0x5de1a0:
  671 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  672 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  673 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  674 r14: TypeID(2v1) <- Get(r45)
0x5de1a4:
  675 r19: TypeID(2v1) <- Get(r11)
0x5de1a7:
  676 r45: TypeID(2v1) <- Void
  677 r45: TypeID(2v1) <- Get(r14)
  678 r46: TypeID(2v1) <- Void
  679 r46: TypeID(2v1) <- Get(r15)
  680 r47: TypeID(2v1) <- Void
  681 r47: TypeID(2v1) <- Get(r19)
  682 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  683 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  684 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  685 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  686 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  687 r2: TypeID(2v1) <- Undefined
  688 r3: TypeID(2v1) <- Undefined
  689 r4: TypeID(2v1) <- Undefined
  690 r5: TypeID(2v1) <- Undefined
  691 r6: TypeID(2v1) <- Undefined
  692 r7: TypeID(2v1) <- Undefined
  693 r8: TypeID(2v1) <- Undefined
  694 r9: TypeID(2v1) <- Undefined
  695 r10: TypeID(2v1) <- Undefined
  696 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de1ac:
  697 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  698 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  699 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  700 r6: TypeID(2v1) <- SignOf(r46)
  701 r5: TypeID(2v1) <- IsZero(r46)
  702 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  703 r3: TypeID(2v1) <- Parity(r46)
  704 r2: TypeID(2v1) <- False
  705 r10: TypeID(2v1) <- False
0x5de1ae:
  706 r45: TypeID(2v1) <- Not(r5)
  707 r46: TypeID(2v1) <- SetJumpCondition(r45)
  708 r46: TypeID(2v1) <- Control(JmpIf(482))
0x5de1b4:
  709 r25: TypeID(2v1) <- Get(r24)
0x5de1b7:
  710 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  711 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  712 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  713 r27: TypeID(2v1) <- Get(r45)
0x5de1bc:
  714 r24: TypeID(2v1) <- Get(r26)
0x5de1bf:
  715 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  716 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  717 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  718 r20: TypeID(2v1) <- Get(r45)
0x5de1c4:
  719 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  720 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  721 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  722 r26: TypeID(2v1) <- Get(r45)
0x5de1c9:
  723 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  724 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  725 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  726 r11: TypeID(2v1) <- Get(r45)
0x5de1ce:
  727 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  728 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  729 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
  730 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  731 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de1d3:
  732 r24: TypeID(2v1) <- Arith(Sub, r24, r26)
  733 r10: TypeID(2v1) <- OverflowOf(r24)
  734 r2: TypeID(2v1) <- CarryOf(r24)
  735 r6: TypeID(2v1) <- SignOf(r24)
  736 r5: TypeID(2v1) <- IsZero(r24)
  737 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  738 r3: TypeID(2v1) <- Parity(r47)
0x5de1d6:
  739 r45: TypeID(2v1) <- SetJumpCondition(r5)
  740 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5de1dc:
  741 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  742 r46: TypeID(2v1) <- Arith(Add, r46, r25)
  743 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  744 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  745 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  746 r10: TypeID(2v1) <- OverflowOf(r45)
  747 r2: TypeID(2v1) <- CarryOf(r45)
  748 r6: TypeID(2v1) <- SignOf(r45)
  749 r5: TypeID(2v1) <- IsZero(r45)
  750 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  751 r3: TypeID(2v1) <- Parity(r48)
0x5de1e1:
  752 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
  753 r45: TypeID(2v1) <- Not(r5)
  754 r46: TypeID(2v1) <- SetJumpCondition(r45)
  755 r46: TypeID(2v1) <- Control(JmpIf(1002))
0x5de1eb:
  756 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  757 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  758 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  759 r6: TypeID(2v1) <- SignOf(r46)
  760 r5: TypeID(2v1) <- IsZero(r46)
  761 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  762 r3: TypeID(2v1) <- Parity(r46)
  763 r2: TypeID(2v1) <- False
  764 r10: TypeID(2v1) <- False
0x5de1ee:
  765 r45: TypeID(2v1) <- SetJumpCondition(r5)
  766 r45: TypeID(2v1) <- Control(JmpIf(1427))
0x5de1f4:
  767 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  768 r45: TypeID(2v1) <- Arith(Add, r45, r20)
  769 r14: TypeID(2v1) <- Get(r45)
0x5de1f8:
  770 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
  771 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  772 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de1fd:
  773 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  774 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  775 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5de201:
  776 r45: TypeID(2v1) <- Void
  777 r45: TypeID(2v1) <- Get(r14)
  778 r46: TypeID(2v1) <- Void
  779 r46: TypeID(2v1) <- Get(r15)
  780 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  781 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  782 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  783 r48: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
  784 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  785 r2: TypeID(2v1) <- Undefined
  786 r3: TypeID(2v1) <- Undefined
  787 r4: TypeID(2v1) <- Undefined
  788 r5: TypeID(2v1) <- Undefined
  789 r6: TypeID(2v1) <- Undefined
  790 r7: TypeID(2v1) <- Undefined
  791 r8: TypeID(2v1) <- Undefined
  792 r9: TypeID(2v1) <- Undefined
  793 r10: TypeID(2v1) <- Undefined
  794 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de206:
  795 r20: TypeID(2v1) <- Get(r16)
0x5de209:
  796 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  797 r6: TypeID(2v1) <- SignOf(r16)
  798 r5: TypeID(2v1) <- IsZero(r16)
  799 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  800 r3: TypeID(2v1) <- Parity(r16)
  801 r2: TypeID(2v1) <- False
  802 r10: TypeID(2v1) <- False
0x5de20c:
  803 r45: TypeID(2v1) <- SetJumpCondition(r5)
  804 r45: TypeID(2v1) <- Control(JmpIf(1188))
0x5de212:
  805 r11: TypeID(2v1) <- Get(r16)
0x5de215:
  806 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  807 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  808 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  809 r23: TypeID(2v1) <- Get(r45)
0x5de219:
  810 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  811 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  812 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  813 r16: TypeID(2v1) <- Get(r45)
0x5de21e:
  814 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  815 r27: TypeID(2v1) <- Arith(Add, r27, r46)
  816 r27: TypeID(2v1) <- Get(r27)
  817 r10: TypeID(2v1) <- OverflowOf(r27)
  818 r2: TypeID(2v1) <- CarryOf(r27)
  819 r6: TypeID(2v1) <- SignOf(r27)
  820 r5: TypeID(2v1) <- IsZero(r27)
  821 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  822 r3: TypeID(2v1) <- Parity(r47)
0x5de222:
  823 r11: TypeID(2v1) <- Arith(Sub, r11, r23)
  824 r11: TypeID(2v1) <- Get(r11)
  825 r10: TypeID(2v1) <- OverflowOf(r11)
  826 r2: TypeID(2v1) <- CarryOf(r11)
  827 r6: TypeID(2v1) <- SignOf(r11)
  828 r5: TypeID(2v1) <- IsZero(r11)
  829 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  830 r3: TypeID(2v1) <- Parity(r47)
0x5de225:
  831 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  832 r47: TypeID(2v1) <- Arith(Add, r47, r16)
  833 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  834 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
  835 r10: TypeID(2v1) <- OverflowOf(r27)
  836 r2: TypeID(2v1) <- CarryOf(r27)
  837 r6: TypeID(2v1) <- SignOf(r27)
  838 r5: TypeID(2v1) <- IsZero(r27)
  839 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  840 r3: TypeID(2v1) <- Parity(r48)
0x5de228:
  841 r45: TypeID(2v1) <- Not(r2)
  842 r46: TypeID(2v1) <- SetJumpCondition(r45)
  843 r46: TypeID(2v1) <- Control(JmpIf(1235))
0x5de22e:
  844 r26: TypeID(2v1) <- Get(r25)
0x5de231:
  845 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  846 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  847 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  848 r21: TypeID(2v1) <- Get(r45)
0x5de235:
  849 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  850 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  851 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  852 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  853 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  854 r10: TypeID(2v1) <- OverflowOf(r45)
  855 r2: TypeID(2v1) <- CarryOf(r45)
  856 r6: TypeID(2v1) <- SignOf(r45)
  857 r5: TypeID(2v1) <- IsZero(r45)
  858 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  859 r3: TypeID(2v1) <- Parity(r48)
0x5de239:
  860 r45: TypeID(2v1) <- Not(r5)
  861 r46: TypeID(2v1) <- SetJumpCondition(r45)
  862 r46: TypeID(2v1) <- Control(JmpIf(174))
0x5de23f:
  863 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  864 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  865 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  866 r14: TypeID(2v1) <- Get(r45)
0x5de243:
  867 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  868 r48: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  869 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  870 r49: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  871 r15: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  872 r10: TypeID(2v1) <- False
  873 r2: TypeID(2v1) <- False
  874 r6: TypeID(2v1) <- SignOf(r46)
  875 r5: TypeID(2v1) <- IsZero(r46)
  876 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  877 r3: TypeID(2v1) <- Parity(r50)
0x5de245:
  878 r45: TypeID(2v1) <- Const { value: 10, size: 4 }
  879 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  880 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de24a:
  881 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  882 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  883 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de24f:
  884 r46: TypeID(340432v1) <- Const { value: 6451424, size: 8 }
  885 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  886 r2: TypeID(2v1) <- Undefined
  887 r3: TypeID(2v1) <- Undefined
  888 r4: TypeID(2v1) <- Undefined
  889 r5: TypeID(2v1) <- Undefined
  890 r6: TypeID(2v1) <- Undefined
  891 r7: TypeID(2v1) <- Undefined
  892 r8: TypeID(2v1) <- Undefined
  893 r9: TypeID(2v1) <- Undefined
  894 r10: TypeID(2v1) <- Undefined
  895 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5de254:
  896 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  897 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  898 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  899 r20: TypeID(2v1) <- Get(r45)
0x5de259:
  900 r46: TypeID(2v1) <- Const { value: -1, size: 8 }
  901 r16: TypeID(2v1) <- Arith(Sub, r16, r46)
  902 r10: TypeID(2v1) <- OverflowOf(r16)
  903 r2: TypeID(2v1) <- CarryOf(r16)
  904 r6: TypeID(2v1) <- SignOf(r16)
  905 r5: TypeID(2v1) <- IsZero(r16)
  906 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  907 r3: TypeID(2v1) <- Parity(r47)
0x5de25d:
  908 r17: TypeID(2v1) <- Get(r16)
0x5de260:
  909 r45: TypeID(2v1) <- SetJumpCondition(r5)
  910 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5de266:
  911 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  912 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  913 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  914 r11: TypeID(2v1) <- Get(r45)
0x5de26a:
  915 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  916 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  917 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de26e:
  918 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  919 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  920 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  921 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  922 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  923 r10: TypeID(2v1) <- OverflowOf(r45)
  924 r2: TypeID(2v1) <- CarryOf(r45)
  925 r6: TypeID(2v1) <- SignOf(r45)
  926 r5: TypeID(2v1) <- IsZero(r45)
  927 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  928 r3: TypeID(2v1) <- Parity(r48)
0x5de272:
  929 r45: TypeID(2v1) <- Not(r5)
  930 r46: TypeID(2v1) <- SetJumpCondition(r45)
  931 r46: TypeID(2v1) <- Control(JmpExtIf(4206915))
0x5de278:
  932 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  933 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  934 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  935 r18: TypeID(2v1) <- Get(r45)
0x5de27d:
  936 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  937 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  938 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  939 r26: TypeID(2v1) <- Get(r45)
0x5de282:
  940 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
  941 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  942 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  943 r14: TypeID(2v1) <- Get(r45)
0x5de287:
  944 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  945 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  946 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  947 r19: TypeID(2v1) <- Get(r45)
0x5de28a:
  948 r15: TypeID(2v1) <- Get(r26)
0x5de28d:
  949 r18: TypeID(2v1) <- Get(r16)
0x5de290:
  950 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  951 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  952 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  953 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  954 r47: TypeID(2v1) <- Const { value: 8, size: 8 }
  955 r47: TypeID(2v1) <- Arith(Add, r47, r11)
  956 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  957 r46: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  958 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
  959 r2: TypeID(2v1) <- Undefined
  960 r3: TypeID(2v1) <- Undefined
  961 r4: TypeID(2v1) <- Undefined
  962 r5: TypeID(2v1) <- Undefined
  963 r6: TypeID(2v1) <- Undefined
  964 r7: TypeID(2v1) <- Undefined
  965 r8: TypeID(2v1) <- Undefined
  966 r9: TypeID(2v1) <- Undefined
  967 r10: TypeID(2v1) <- Undefined
  968 r45: TypeID(2v1) <- Get(r16)
0x5de293:
  969 r25: TypeID(2v1) <- Get(r16)
0x5de296:
  970 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  971 r6: TypeID(2v1) <- SignOf(r16)
  972 r5: TypeID(2v1) <- IsZero(r16)
  973 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  974 r3: TypeID(2v1) <- Parity(r16)
  975 r2: TypeID(2v1) <- False
  976 r10: TypeID(2v1) <- False
0x5de299:
  977 r45: TypeID(2v1) <- SetJumpCondition(r5)
  978 r45: TypeID(2v1) <- Control(JmpIf(1156))
0x5de29f:
  979 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  980 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  981 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  982 r20: TypeID(2v1) <- Get(r45)
0x5de2a3:
  983 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  984 r46: TypeID(2v1) <- Arith(Add, r46, r25)
  985 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  986 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  987 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  988 r10: TypeID(2v1) <- OverflowOf(r45)
  989 r2: TypeID(2v1) <- CarryOf(r45)
  990 r6: TypeID(2v1) <- SignOf(r45)
  991 r5: TypeID(2v1) <- IsZero(r45)
  992 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  993 r3: TypeID(2v1) <- Parity(r48)
0x5de2a8:
  994 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  995 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  996 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
  997 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  998 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de2ac:
  999 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
 1000 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1001 r45: TypeID(2v1) <- Control(JmpIf(756))
0x5de2b6:
 1002 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1003 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1004 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1005 r17: TypeID(2v1) <- Get(r45)
0x5de2bb:
 1006 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1007 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1008 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1009 r6: TypeID(2v1) <- SignOf(r46)
 1010 r5: TypeID(2v1) <- IsZero(r46)
 1011 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1012 r3: TypeID(2v1) <- Parity(r46)
 1013 r2: TypeID(2v1) <- False
 1014 r10: TypeID(2v1) <- False
0x5de2be:
 1015 r45: TypeID(2v1) <- Not(r5)
 1016 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1017 r46: TypeID(2v1) <- Control(JmpIf(1156))
0x5de2c0:
 1018 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
 1019 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1020 r20: TypeID(2v1) <- Get(r45)
0x5de2c4:
 1021 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1022 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1023 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1024 r27: TypeID(2v1) <- Get(r45)
0x5de2c9:
 1025 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1026 r46: TypeID(2v1) <- Arith(Add, r46, r27)
 1027 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de2cc:
 1028 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1029 r6: TypeID(2v1) <- SignOf(r17)
 1030 r5: TypeID(2v1) <- IsZero(r17)
 1031 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1032 r3: TypeID(2v1) <- Parity(r17)
 1033 r2: TypeID(2v1) <- False
 1034 r10: TypeID(2v1) <- False
0x5de2cf:
 1035 r45: TypeID(2v1) <- Not(r5)
 1036 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1037 r46: TypeID(2v1) <- Control(JmpIf(1248))
0x5de2d5:
 1038 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1039 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1040 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1041 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1042 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1043 r10: TypeID(2v1) <- False
 1044 r2: TypeID(2v1) <- False
 1045 r6: TypeID(2v1) <- SignOf(r46)
 1046 r5: TypeID(2v1) <- IsZero(r46)
 1047 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1048 r3: TypeID(2v1) <- Parity(r50)
0x5de2d7:
 1049 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1050 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1051 r12: TypeID(2v1) <- Get(r12)
 1052 r10: TypeID(2v1) <- OverflowOf(r12)
 1053 r2: TypeID(2v1) <- CarryOf(r12)
 1054 r6: TypeID(2v1) <- SignOf(r12)
 1055 r5: TypeID(2v1) <- IsZero(r12)
 1056 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1057 r3: TypeID(2v1) <- Parity(r47)
0x5de2db:
 1058 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1059 r17: TypeID(2v1) <- Get(r45)
 1060 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dc:
 1061 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1062 r11: TypeID(2v1) <- Get(r45)
 1063 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dd:
 1064 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1065 r24: TypeID(2v1) <- Get(r45)
 1066 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2df:
 1067 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1068 r25: TypeID(2v1) <- Get(r45)
 1069 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e1:
 1070 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1071 r26: TypeID(2v1) <- Get(r45)
 1072 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e3:
 1073 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1074 r27: TypeID(2v1) <- Get(r45)
 1075 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e5:
 1076 r45: TypeID(2v1) <- SetReturnValue(r16)
 1077 r45: TypeID(2v1) <- Control(Ret)
0x5de2f0:
 1078 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1079 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1080 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1081 r14: TypeID(2v1) <- Get(r45)
0x5de2f4:
 1082 r19: TypeID(2v1) <- Get(r11)
0x5de2f7:
 1083 r45: TypeID(2v1) <- Void
 1084 r45: TypeID(2v1) <- Get(r14)
 1085 r46: TypeID(2v1) <- Void
 1086 r46: TypeID(2v1) <- Get(r15)
 1087 r47: TypeID(2v1) <- Void
 1088 r47: TypeID(2v1) <- Get(r19)
 1089 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1090 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1091 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1092 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1093 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1094 r2: TypeID(2v1) <- Undefined
 1095 r3: TypeID(2v1) <- Undefined
 1096 r4: TypeID(2v1) <- Undefined
 1097 r5: TypeID(2v1) <- Undefined
 1098 r6: TypeID(2v1) <- Undefined
 1099 r7: TypeID(2v1) <- Undefined
 1100 r8: TypeID(2v1) <- Undefined
 1101 r9: TypeID(2v1) <- Undefined
 1102 r10: TypeID(2v1) <- Undefined
 1103 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de2fc:
 1104 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1105 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1106 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1107 r6: TypeID(2v1) <- SignOf(r46)
 1108 r5: TypeID(2v1) <- IsZero(r46)
 1109 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1110 r3: TypeID(2v1) <- Parity(r46)
 1111 r2: TypeID(2v1) <- False
 1112 r10: TypeID(2v1) <- False
0x5de2fe:
 1113 r45: TypeID(2v1) <- Not(r5)
 1114 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1115 r46: TypeID(2v1) <- Control(JmpIf(525))
0x5de304:
 1116 r45: TypeID(2v1) <- Control(Jmp(709))
0x5de310:
 1117 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1118 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1119 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1120 r14: TypeID(2v1) <- Get(r45)
0x5de314:
 1121 r19: TypeID(2v1) <- Get(r11)
0x5de317:
 1122 r45: TypeID(2v1) <- Void
 1123 r45: TypeID(2v1) <- Get(r14)
 1124 r46: TypeID(2v1) <- Void
 1125 r46: TypeID(2v1) <- Get(r15)
 1126 r47: TypeID(2v1) <- Void
 1127 r47: TypeID(2v1) <- Get(r19)
 1128 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1129 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1130 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1131 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1132 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1133 r2: TypeID(2v1) <- Undefined
 1134 r3: TypeID(2v1) <- Undefined
 1135 r4: TypeID(2v1) <- Undefined
 1136 r5: TypeID(2v1) <- Undefined
 1137 r6: TypeID(2v1) <- Undefined
 1138 r7: TypeID(2v1) <- Undefined
 1139 r8: TypeID(2v1) <- Undefined
 1140 r9: TypeID(2v1) <- Undefined
 1141 r10: TypeID(2v1) <- Undefined
 1142 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de31c:
 1143 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1144 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1145 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1146 r6: TypeID(2v1) <- SignOf(r46)
 1147 r5: TypeID(2v1) <- IsZero(r46)
 1148 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1149 r3: TypeID(2v1) <- Parity(r46)
 1150 r2: TypeID(2v1) <- False
 1151 r10: TypeID(2v1) <- False
0x5de31e:
 1152 r45: TypeID(2v1) <- Not(r5)
 1153 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1154 r46: TypeID(2v1) <- Control(JmpIf(568))
0x5de324:
 1155 r45: TypeID(2v1) <- Control(Jmp(709))
0x5de330:
 1156 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1157 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1158 r12: TypeID(2v1) <- Get(r12)
 1159 r10: TypeID(2v1) <- OverflowOf(r12)
 1160 r2: TypeID(2v1) <- CarryOf(r12)
 1161 r6: TypeID(2v1) <- SignOf(r12)
 1162 r5: TypeID(2v1) <- IsZero(r12)
 1163 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1164 r3: TypeID(2v1) <- Parity(r47)
0x5de334:
 1165 r45: TypeID(2v1) <- Const { value: 2, size: 4 }
 1166 r46: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1167 r16: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de339:
 1168 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1169 r17: TypeID(2v1) <- Get(r45)
 1170 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33a:
 1171 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1172 r11: TypeID(2v1) <- Get(r45)
 1173 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33b:
 1174 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1175 r24: TypeID(2v1) <- Get(r45)
 1176 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33d:
 1177 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1178 r25: TypeID(2v1) <- Get(r45)
 1179 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33f:
 1180 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1181 r26: TypeID(2v1) <- Get(r45)
 1182 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de341:
 1183 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1184 r27: TypeID(2v1) <- Get(r45)
 1185 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de343:
 1186 r45: TypeID(2v1) <- SetReturnValue(r16)
 1187 r45: TypeID(2v1) <- Control(Ret)
0x5de348:
 1188 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1189 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1190 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1191 r24: TypeID(2v1) <- Get(r45)
0x5de34c:
 1192 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
 1193 r27: TypeID(2v1) <- Arith(Add, r27, r46)
 1194 r27: TypeID(2v1) <- Get(r27)
 1195 r10: TypeID(2v1) <- OverflowOf(r27)
 1196 r2: TypeID(2v1) <- CarryOf(r27)
 1197 r6: TypeID(2v1) <- SignOf(r27)
 1198 r5: TypeID(2v1) <- IsZero(r27)
 1199 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1200 r3: TypeID(2v1) <- Parity(r47)
0x5de350:
 1201 r14: TypeID(2v1) <- Get(r24)
0x5de353:
 1202 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1203 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1204 r2: TypeID(2v1) <- Undefined
 1205 r3: TypeID(2v1) <- Undefined
 1206 r4: TypeID(2v1) <- Undefined
 1207 r5: TypeID(2v1) <- Undefined
 1208 r6: TypeID(2v1) <- Undefined
 1209 r7: TypeID(2v1) <- Undefined
 1210 r8: TypeID(2v1) <- Undefined
 1211 r9: TypeID(2v1) <- Undefined
 1212 r10: TypeID(2v1) <- Undefined
0x5de358:
 1213 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1214 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1215 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1216 r19: TypeID(2v1) <- Get(r45)
0x5de35d:
 1217 r11: TypeID(2v1) <- Get(r16)
0x5de360:
 1218 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1219 r45: TypeID(2v1) <- Arith(Add, r45, r24)
 1220 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1221 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1222 r20: TypeID(2v1) <- Get(r45)
0x5de364:
 1223 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
 1224 r47: TypeID(2v1) <- Arith(Add, r47, r19)
 1225 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
 1226 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
 1227 r10: TypeID(2v1) <- OverflowOf(r27)
 1228 r2: TypeID(2v1) <- CarryOf(r27)
 1229 r6: TypeID(2v1) <- SignOf(r27)
 1230 r5: TypeID(2v1) <- IsZero(r27)
 1231 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1232 r3: TypeID(2v1) <- Parity(r48)
0x5de367:
 1233 r45: TypeID(2v1) <- SetJumpCondition(r2)
 1234 r45: TypeID(2v1) <- Control(JmpIf(844))
0x5de36d:
 1235 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1236 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1237 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1238 r17: TypeID(2v1) <- Get(r45)
0x5de372:
 1239 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1240 r6: TypeID(2v1) <- SignOf(r17)
 1241 r5: TypeID(2v1) <- IsZero(r17)
 1242 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1243 r3: TypeID(2v1) <- Parity(r17)
 1244 r2: TypeID(2v1) <- False
 1245 r10: TypeID(2v1) <- False
0x5de375:
 1246 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1247 r45: TypeID(2v1) <- Control(JmpIf(1038))
0x5de37b:
 1248 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1249 r46: TypeID(2v1) <- Arith(Add, r46, r17)
 1250 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r25 }
0x5de37e:
 1251 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1252 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1253 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1254 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1255 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1256 r10: TypeID(2v1) <- False
 1257 r2: TypeID(2v1) <- False
 1258 r6: TypeID(2v1) <- SignOf(r46)
 1259 r5: TypeID(2v1) <- IsZero(r46)
 1260 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1261 r3: TypeID(2v1) <- Parity(r50)
0x5de380:
 1262 r45: TypeID(2v1) <- Control(Jmp(1049))
0x5de388:
 1263 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1264 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1265 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1266 r14: TypeID(2v1) <- Get(r45)
0x5de38c:
 1267 r19: TypeID(2v1) <- Get(r11)
0x5de38f:
 1268 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1269 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1270 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de394:
 1271 r45: TypeID(2v1) <- Void
 1272 r45: TypeID(2v1) <- Get(r14)
 1273 r46: TypeID(2v1) <- Void
 1274 r46: TypeID(2v1) <- Get(r15)
 1275 r47: TypeID(2v1) <- Void
 1276 r47: TypeID(2v1) <- Get(r19)
 1277 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1278 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1279 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1280 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1281 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1282 r2: TypeID(2v1) <- Undefined
 1283 r3: TypeID(2v1) <- Undefined
 1284 r4: TypeID(2v1) <- Undefined
 1285 r5: TypeID(2v1) <- Undefined
 1286 r6: TypeID(2v1) <- Undefined
 1287 r7: TypeID(2v1) <- Undefined
 1288 r8: TypeID(2v1) <- Undefined
 1289 r9: TypeID(2v1) <- Undefined
 1290 r10: TypeID(2v1) <- Undefined
 1291 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de399:
 1292 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1293 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1294 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1295 r20: TypeID(2v1) <- Get(r45)
0x5de39e:
 1296 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1297 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1298 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1299 r6: TypeID(2v1) <- SignOf(r46)
 1300 r5: TypeID(2v1) <- IsZero(r46)
 1301 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1302 r3: TypeID(2v1) <- Parity(r46)
 1303 r2: TypeID(2v1) <- False
 1304 r10: TypeID(2v1) <- False
0x5de3a0:
 1305 r45: TypeID(2v1) <- Not(r5)
 1306 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1307 r46: TypeID(2v1) <- Control(JmpIf(395))
0x5de3a6:
 1308 r45: TypeID(2v1) <- Control(Jmp(723))
0x5de3b0:
 1309 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1310 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1311 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1312 r14: TypeID(2v1) <- Get(r45)
0x5de3b4:
 1313 r19: TypeID(2v1) <- Get(r11)
0x5de3b7:
 1314 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1315 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1316 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3bc:
 1317 r45: TypeID(2v1) <- Void
 1318 r45: TypeID(2v1) <- Get(r14)
 1319 r46: TypeID(2v1) <- Void
 1320 r46: TypeID(2v1) <- Get(r15)
 1321 r47: TypeID(2v1) <- Void
 1322 r47: TypeID(2v1) <- Get(r19)
 1323 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1324 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1325 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1326 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1327 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1328 r2: TypeID(2v1) <- Undefined
 1329 r3: TypeID(2v1) <- Undefined
 1330 r4: TypeID(2v1) <- Undefined
 1331 r5: TypeID(2v1) <- Undefined
 1332 r6: TypeID(2v1) <- Undefined
 1333 r7: TypeID(2v1) <- Undefined
 1334 r8: TypeID(2v1) <- Undefined
 1335 r9: TypeID(2v1) <- Undefined
 1336 r10: TypeID(2v1) <- Undefined
 1337 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de3c1:
 1338 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1339 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1340 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1341 r20: TypeID(2v1) <- Get(r45)
0x5de3c6:
 1342 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1343 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1344 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1345 r6: TypeID(2v1) <- SignOf(r46)
 1346 r5: TypeID(2v1) <- IsZero(r46)
 1347 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1348 r3: TypeID(2v1) <- Parity(r46)
 1349 r2: TypeID(2v1) <- False
 1350 r10: TypeID(2v1) <- False
0x5de3c8:
 1351 r45: TypeID(2v1) <- Not(r5)
 1352 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1353 r46: TypeID(2v1) <- Control(JmpIf(333))
0x5de3ce:
 1354 r45: TypeID(2v1) <- Control(Jmp(723))
0x5de3d3:
 1355 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1356 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1357 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1358 r14: TypeID(2v1) <- Get(r45)
0x5de3d7:
 1359 r19: TypeID(2v1) <- Get(r11)
0x5de3da:
 1360 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1361 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1362 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3df:
 1363 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1364 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1365 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r24 }
0x5de3e4:
 1366 r45: TypeID(2v1) <- Void
 1367 r45: TypeID(2v1) <- Get(r14)
 1368 r46: TypeID(2v1) <- Void
 1369 r46: TypeID(2v1) <- Get(r15)
 1370 r47: TypeID(2v1) <- Void
 1371 r47: TypeID(2v1) <- Get(r19)
 1372 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1373 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1374 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1375 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1376 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1377 r2: TypeID(2v1) <- Undefined
 1378 r3: TypeID(2v1) <- Undefined
 1379 r4: TypeID(2v1) <- Undefined
 1380 r5: TypeID(2v1) <- Undefined
 1381 r6: TypeID(2v1) <- Undefined
 1382 r7: TypeID(2v1) <- Undefined
 1383 r8: TypeID(2v1) <- Undefined
 1384 r9: TypeID(2v1) <- Undefined
 1385 r10: TypeID(2v1) <- Undefined
 1386 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de3e9:
 1387 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1388 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1389 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1390 r20: TypeID(2v1) <- Get(r45)
0x5de3ee:
 1391 r14: TypeID(2v1) <- Get(r24)
0x5de3f1:
 1392 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1393 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1394 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1395 r6: TypeID(2v1) <- SignOf(r46)
 1396 r5: TypeID(2v1) <- IsZero(r46)
 1397 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1398 r3: TypeID(2v1) <- Parity(r46)
 1399 r2: TypeID(2v1) <- False
 1400 r10: TypeID(2v1) <- False
0x5de3f3:
 1401 r45: TypeID(2v1) <- Not(r5)
 1402 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1403 r46: TypeID(2v1) <- Control(JmpIf(283))
0x5de3f9:
 1404 r45: TypeID(2v1) <- Control(Jmp(723))
0x5de400:
 1405 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1406 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1407 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1408 r27: TypeID(2v1) <- Get(r45)
0x5de404:
 1409 r14: TypeID(2v1) <- Get(r27)
0x5de407:
 1410 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1411 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1412 r2: TypeID(2v1) <- Undefined
 1413 r3: TypeID(2v1) <- Undefined
 1414 r4: TypeID(2v1) <- Undefined
 1415 r5: TypeID(2v1) <- Undefined
 1416 r6: TypeID(2v1) <- Undefined
 1417 r7: TypeID(2v1) <- Undefined
 1418 r8: TypeID(2v1) <- Undefined
 1419 r9: TypeID(2v1) <- Undefined
 1420 r10: TypeID(2v1) <- Undefined
0x5de40c:
 1421 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1422 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1423 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1424 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1425 r20: TypeID(2v1) <- Get(r45)
0x5de410:
 1426 r45: TypeID(2v1) <- Control(Jmp(111))
0x5de415:
 1427 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1428 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1429 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1430 r17: TypeID(2v1) <- Get(r45)
0x5de41a:
 1431 r45: TypeID(2v1) <- Control(Jmp(1018))
0x5de41f:
 1432 r25: TypeID(2v1) <- Get(r26)
0x5de422:
 1433 r45: TypeID(2v1) <- Control(Jmp(1239))


ssa pre-xform:
ssa program  1529 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
  (  4)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  5)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  4)  r18: ? <- Ancestral(AncestralName("RDX"))
         r19: ? <- Ancestral(AncestralName("R8"))
         r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
  (  2)  r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r26 }
  (  2)  r45: ? <- ArithK(Add, r43, -8)
         r46: ? <- StoreMem { addr: r45, value: r25 }
         r48: ? <- Const { value: 46, size: 4 }
         r49: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r50: ? <- Concat { lo: r48, hi: r49 }
  (  2)  r51: ? <- ArithK(Add, r45, -8)
         r52: ? <- StoreMem { addr: r51, value: r24 }
  (  2)  r53: ? <- ArithK(Add, r51, -8)
         r54: ? <- StoreMem { addr: r53, value: r23 }
  (  2)  r55: ? <- ArithK(Add, r53, -8)
         r56: ? <- StoreMem { addr: r55, value: r10 }
  (  2)  r57: ? <- ArithK(Add, r55, -8)
         r58: ? <- StoreMem { addr: r57, value: r16 }
         r60: ? <- Const { value: 88, size: 8 }
  ( 62)  r61: ? <- Arith(Sub, r57, r60)
         r69: ? <- Const { value: 64, size: 8 }
         r70: ? <- Arith(Add, r69, r61)
         r71: ? <- StoreMem { addr: r70, value: r13 }
         r73: ? <- Const { value: 32, size: 8 }
         r74: ? <- Arith(Add, r73, r61)
         r75: ? <- StoreMem { addr: r74, value: r19 }
         r76: ? <- Const { value: 0, size: 8 }
         r77: ? <- Arith(Add, r76, r61)
         r78: ? <- StoreMem { addr: r77, value: r18 }
         r79: ? <- Const { value: 24, size: 8 }
         r80: ? <- Arith(Add, r79, r61)
         r81: ? <- StoreMem { addr: r80, value: r20 }
         r86: ? <- Part { src: r50, offset: 0, size: 4 }
         r87: ? <- CArg { value: r86, next_arg: None }
         r88: ? <- CArg { value: r18, next_arg: Some(r87) }
         r89: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r90: ? <- Call { callee: r89, first_arg: Some(r88) }
  (  3)  r100: ? <- Part { src: r90, offset: 0, size: 8 }
  (  2)  r102: ? <- Arith(BitAnd, r100, r100)
         r104: ? <- IsZero(r102)
         r109: ? <- SetJumpCondition(r104)
         r1459: ? <- Upsilon { value: r100, phi_ref: r1434 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1405: ? <- Const { value: 0, size: 8 }
         r1406: ? <- Arith(Add, r1405, r61)
         r1407: ? <- LoadMem { addr: r1406, size: 8 }
         r1410: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1411: ? <- Call { callee: r1410, first_arg: None }
         r1421: ? <- Const { value: 0, size: 8 }
         r1422: ? <- Arith(Add, r1421, r1407)
         r1423: ? <- ArithK(Mul, r102, 1)
         r1424: ? <- Arith(Add, r1422, r1423)
         r1460: ? <- Upsilon { value: r1424, phi_ref: r1434 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  7)  r1434: ? <- Phi
         r111: ? <- Const { value: 0, size: 8 }
         r112: ? <- Arith(Add, r111, r61)
  ( 11)  r113: ? <- LoadMem { addr: r112, size: 8 }
  ( 15)  r116: ? <- Arith(Sub, r1434, r113)
         r121: ? <- IsZero(r116)
         r124: ? <- SetJumpCondition(r121)
         r1461: ? <- Upsilon { value: r113, phi_ref: r1456 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r126: ? <- Const { value: 24, size: 8 }
         r127: ? <- Arith(Add, r126, r61)
         r128: ? <- LoadMem { addr: r127, size: 8 }
         r130: ? <- Const { value: 0, size: 8 }
         r131: ? <- Arith(Add, r130, r128)
         r132: ? <- LoadMem { addr: r131, size: 8 }
         r133: ? <- Const { value: 0, size: 8 }
         r134: ? <- Arith(Sub, r132, r133)
         r138: ? <- IsZero(r134)
         r141: ? <- SetJumpCondition(r138)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r143: ? <- Const { value: 24, size: 8 }
         r144: ? <- Arith(Add, r143, r14)
  ( 10)  r145: ? <- LoadMem { addr: r144, size: 8 }
         r147: ? <- Part { src: r26, offset: 0, size: 4 }
         r148: ? <- Part { src: r26, offset: 0, size: 4 }
         r149: ? <- Arith(BitXor, r147, r148)
         r150: ? <- Part { src: r26, offset: 4, size: 4 }
  (  8)  r151: ? <- Concat { lo: r149, hi: r150 }
         r158: ? <- Const { value: 72, size: 8 }
         r159: ? <- Arith(Add, r158, r61)
         r160: ? <- StoreMem { addr: r159, value: r17 }
         r161: ? <- Const { value: 0, size: 8 }
         r162: ? <- Arith(Add, r161, r145)
         r163: ? <- LoadMem { addr: r162, size: 1 }
         r164: ? <- Const { value: 0, size: 1 }
         r165: ? <- Arith(Sub, r163, r164)
         r169: ? <- IsZero(r165)
         r172: ? <- SetJumpCondition(r169)
         r1467: ? <- Upsilon { value: r1434, phi_ref: r1452 }
         r1468: ? <- Upsilon { value: r14, phi_ref: r1435 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  5)  r1435: ? <- Phi
         r174: ? <- Const { value: 16, size: 8 }
         r175: ? <- Arith(Add, r174, r1435)
  (  3)  r176: ? <- LoadMem { addr: r175, size: 8 }
         r178: ? <- Const { value: 16, size: 8 }
         r179: ? <- Arith(Add, r178, r61)
         r180: ? <- StoreMem { addr: r179, value: r176 }
  (  3)  r181: ? <- Arith(BitAnd, r176, r176)
         r183: ? <- IsZero(r181)
         r188: ? <- SetJumpCondition(r183)
         r1481: ? <- Upsilon { value: r113, phi_ref: r1456 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r191: ? <- Part { src: r17, offset: 0, size: 4 }
         r192: ? <- Part { src: r17, offset: 0, size: 4 }
         r193: ? <- Arith(BitXor, r191, r192)
         r194: ? <- Part { src: r17, offset: 4, size: 4 }
  (  6)  r195: ? <- Concat { lo: r193, hi: r194 }
         r202: ? <- Part { src: r181, offset: 0, size: 4 }
         r203: ? <- Const { value: 3, size: 4 }
  (  2)  r204: ? <- Arith(BitAnd, r202, r203)
         r205: ? <- Part { src: r181, offset: 4, size: 4 }
         r206: ? <- Concat { lo: r204, hi: r205 }
         r210: ? <- IsZero(r204)
         r213: ? <- SetJumpCondition(r210)
         r1482: ? <- Upsilon { value: r1434, phi_ref: r1441 }
         r1483: ? <- Upsilon { value: r145, phi_ref: r1442 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r215: ? <- Const { value: 1, size: 8 }
  (  2)  r216: ? <- Arith(Sub, r206, r215)
         r220: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r220)
         r1504: ? <- Upsilon { value: r1434, phi_ref: r1439 }
         r1505: ? <- Upsilon { value: r145, phi_ref: r1440 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r225: ? <- Const { value: 2, size: 8 }
         r226: ? <- Arith(Sub, r216, r225)
         r230: ? <- IsZero(r226)
         r233: ? <- SetJumpCondition(r230)
         r1513: ? <- Upsilon { value: r1434, phi_ref: r1437 }
         r1514: ? <- Upsilon { value: r145, phi_ref: r1438 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r235: ? <- Const { value: 8, size: 8 }
         r236: ? <- Arith(Add, r235, r145)
  (  2)  r237: ? <- LoadMem { addr: r236, size: 8 }
         r239: ? <- Const { value: 48, size: 8 }
         r240: ? <- Arith(Add, r239, r61)
         r241: ? <- StoreMem { addr: r240, value: r1434 }
         r243: ? <- Const { value: 40, size: 8 }
         r244: ? <- Arith(Add, r243, r61)
         r245: ? <- StoreMem { addr: r244, value: r145 }
         r247: ? <- Const { value: 8, size: 8 }
         r248: ? <- Arith(Add, r247, r61)
         r249: ? <- StoreMem { addr: r248, value: r237 }
         r252: ? <- CArg { value: r237, next_arg: None }
         r253: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r254: ? <- Call { callee: r253, first_arg: Some(r252) }
         r264: ? <- Part { src: r254, offset: 0, size: 8 }
         r265: ? <- Const { value: 8, size: 8 }
         r266: ? <- Arith(Add, r265, r61)
         r267: ? <- LoadMem { addr: r266, size: 8 }
         r269: ? <- Const { value: 48, size: 8 }
         r270: ? <- Arith(Add, r269, r61)
  (  2)  r271: ? <- LoadMem { addr: r270, size: 8 }
         r274: ? <- Arith(Sub, r264, r116)
         r278: ? <- IsZero(r274)
         r281: ? <- SetJumpCondition(r278)
         r1521: ? <- Upsilon { value: r145, phi_ref: r1436 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1355: ? <- Const { value: 0, size: 8 }
         r1356: ? <- Arith(Add, r1355, r61)
         r1357: ? <- LoadMem { addr: r1356, size: 8 }
         r1360: ? <- Const { value: 40, size: 8 }
         r1361: ? <- Arith(Add, r1360, r61)
         r1362: ? <- StoreMem { addr: r1361, value: r271 }
         r1363: ? <- Const { value: 8, size: 8 }
         r1364: ? <- Arith(Add, r1363, r61)
         r1365: ? <- StoreMem { addr: r1364, value: r145 }
         r1372: ? <- CArg { value: r116, next_arg: None }
         r1373: ? <- CArg { value: r267, next_arg: Some(r1372) }
         r1374: ? <- CArg { value: r1357, next_arg: Some(r1373) }
         r1375: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1376: ? <- Call { callee: r1375, first_arg: Some(r1374) }
  (  2)  r1386: ? <- Part { src: r1376, offset: 0, size: 8 }
         r1392: ? <- Part { src: r1386, offset: 0, size: 4 }
         r1393: ? <- Part { src: r1386, offset: 0, size: 4 }
         r1394: ? <- Arith(BitAnd, r1392, r1393)
         r1396: ? <- IsZero(r1394)
         r1401: ? <- Not(r1396)
         r1402: ? <- SetJumpCondition(r1401)
         r1522: ? <- Upsilon { value: r145, phi_ref: r1436 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1523: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1524: ? <- Upsilon { value: r145, phi_ref: r1447 }
         r1525: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1526: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1436: ? <- Phi
         r286: ? <- Const { value: 40, size: 8 }
         r287: ? <- Arith(Add, r286, r1436)
         r1527: ? <- Upsilon { value: r271, phi_ref: r1437 }
         r1528: ? <- Upsilon { value: r287, phi_ref: r1438 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1438: ? <- Phi
         r1437: ? <- Phi
         r289: ? <- Const { value: 8, size: 8 }
         r290: ? <- Arith(Add, r289, r1438)
  (  2)  r291: ? <- LoadMem { addr: r290, size: 8 }
         r293: ? <- Const { value: 40, size: 8 }
         r294: ? <- Arith(Add, r293, r61)
         r295: ? <- StoreMem { addr: r294, value: r1437 }
         r298: ? <- Const { value: 8, size: 8 }
         r299: ? <- Arith(Add, r298, r61)
         r300: ? <- StoreMem { addr: r299, value: r291 }
         r303: ? <- CArg { value: r291, next_arg: None }
         r304: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r305: ? <- Call { callee: r304, first_arg: Some(r303) }
         r315: ? <- Part { src: r305, offset: 0, size: 8 }
         r316: ? <- Const { value: 8, size: 8 }
         r317: ? <- Arith(Add, r316, r61)
         r318: ? <- LoadMem { addr: r317, size: 8 }
         r320: ? <- Const { value: 40, size: 8 }
         r321: ? <- Arith(Add, r320, r61)
  (  2)  r322: ? <- LoadMem { addr: r321, size: 8 }
         r324: ? <- Arith(Sub, r315, r116)
         r328: ? <- IsZero(r324)
         r331: ? <- SetJumpCondition(r328)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1309: ? <- Const { value: 0, size: 8 }
         r1310: ? <- Arith(Add, r1309, r61)
         r1311: ? <- LoadMem { addr: r1310, size: 8 }
         r1314: ? <- Const { value: 8, size: 8 }
         r1315: ? <- Arith(Add, r1314, r61)
         r1316: ? <- StoreMem { addr: r1315, value: r322 }
         r1323: ? <- CArg { value: r116, next_arg: None }
         r1324: ? <- CArg { value: r318, next_arg: Some(r1323) }
         r1325: ? <- CArg { value: r1311, next_arg: Some(r1324) }
         r1326: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1327: ? <- Call { callee: r1326, first_arg: Some(r1325) }
  (  2)  r1337: ? <- Part { src: r1327, offset: 0, size: 8 }
         r1342: ? <- Part { src: r1337, offset: 0, size: 4 }
         r1343: ? <- Part { src: r1337, offset: 0, size: 4 }
         r1344: ? <- Arith(BitAnd, r1342, r1343)
         r1346: ? <- IsZero(r1344)
         r1351: ? <- Not(r1346)
         r1352: ? <- SetJumpCondition(r1351)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1515: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1516: ? <- Upsilon { value: r1438, phi_ref: r1447 }
         r1517: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1518: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r342: ? <- Const { value: 40, size: 8 }
         r343: ? <- Arith(Add, r1438, r342)
         r1519: ? <- Upsilon { value: r322, phi_ref: r1439 }
         r1520: ? <- Upsilon { value: r343, phi_ref: r1440 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1440: ? <- Phi
         r1439: ? <- Phi
         r351: ? <- Const { value: 8, size: 8 }
         r352: ? <- Arith(Add, r351, r1440)
  (  2)  r353: ? <- LoadMem { addr: r352, size: 8 }
         r355: ? <- Const { value: 40, size: 8 }
         r356: ? <- Arith(Add, r355, r61)
         r357: ? <- StoreMem { addr: r356, value: r1439 }
         r360: ? <- Const { value: 8, size: 8 }
         r361: ? <- Arith(Add, r360, r61)
         r362: ? <- StoreMem { addr: r361, value: r353 }
         r365: ? <- CArg { value: r353, next_arg: None }
         r366: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r367: ? <- Call { callee: r366, first_arg: Some(r365) }
         r377: ? <- Part { src: r367, offset: 0, size: 8 }
         r378: ? <- Const { value: 8, size: 8 }
         r379: ? <- Arith(Add, r378, r61)
         r380: ? <- LoadMem { addr: r379, size: 8 }
         r382: ? <- Const { value: 40, size: 8 }
         r383: ? <- Arith(Add, r382, r61)
  (  2)  r384: ? <- LoadMem { addr: r383, size: 8 }
  (  2)  r386: ? <- Arith(Sub, r377, r116)
         r390: ? <- IsZero(r386)
         r393: ? <- SetJumpCondition(r390)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1263: ? <- Const { value: 0, size: 8 }
         r1264: ? <- Arith(Add, r1263, r61)
         r1265: ? <- LoadMem { addr: r1264, size: 8 }
         r1268: ? <- Const { value: 8, size: 8 }
         r1269: ? <- Arith(Add, r1268, r61)
         r1270: ? <- StoreMem { addr: r1269, value: r384 }
         r1277: ? <- CArg { value: r116, next_arg: None }
         r1278: ? <- CArg { value: r380, next_arg: Some(r1277) }
         r1279: ? <- CArg { value: r1265, next_arg: Some(r1278) }
         r1280: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1281: ? <- Call { callee: r1280, first_arg: Some(r1279) }
  (  2)  r1291: ? <- Part { src: r1281, offset: 0, size: 8 }
         r1296: ? <- Part { src: r1291, offset: 0, size: 4 }
         r1297: ? <- Part { src: r1291, offset: 0, size: 4 }
         r1298: ? <- Arith(BitAnd, r1296, r1297)
         r1300: ? <- IsZero(r1298)
         r1305: ? <- Not(r1300)
         r1306: ? <- SetJumpCondition(r1305)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1506: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1507: ? <- Upsilon { value: r1440, phi_ref: r1447 }
         r1508: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1509: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r395: ? <- Const { value: 16, size: 8 }
         r396: ? <- Arith(Add, r395, r61)
         r397: ? <- LoadMem { addr: r396, size: 8 }
         r399: ? <- Const { value: 1, size: 8 }
         r400: ? <- Arith(Add, r195, r399)
         r408: ? <- Const { value: 40, size: 8 }
         r409: ? <- Arith(Add, r1440, r408)
         r417: ? <- Arith(Sub, r400, r397)
         r421: ? <- IsZero(r417)
         r424: ? <- SetJumpCondition(r421)
         r1510: ? <- Upsilon { value: r386, phi_ref: r1456 }
         r1511: ? <- Upsilon { value: r384, phi_ref: r1441 }
         r1512: ? <- Upsilon { value: r409, phi_ref: r1442 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1442: ? <- Phi
         r1441: ? <- Phi
         r426: ? <- Const { value: 56, size: 8 }
         r427: ? <- Arith(Add, r426, r61)
         r428: ? <- StoreMem { addr: r427, value: r1435 }
         r430: ? <- Const { value: 40, size: 8 }
         r431: ? <- Arith(Add, r430, r61)
         r432: ? <- StoreMem { addr: r431, value: r151 }
         r433: ? <- Const { value: 48, size: 8 }
         r434: ? <- Arith(Add, r433, r61)
         r435: ? <- StoreMem { addr: r434, value: r1441 }
         r1487: ? <- Upsilon { value: r1442, phi_ref: r1443 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  4)  r1443: ? <- Phi
         r587: ? <- Const { value: 8, size: 8 }
         r588: ? <- Arith(Add, r587, r1443)
  (  2)  r589: ? <- LoadMem { addr: r588, size: 8 }
         r595: ? <- CArg { value: r589, next_arg: None }
         r596: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r597: ? <- Call { callee: r596, first_arg: Some(r595) }
         r607: ? <- Part { src: r597, offset: 0, size: 8 }
         r608: ? <- Arith(Sub, r607, r116)
         r612: ? <- IsZero(r608)
         r615: ? <- Not(r612)
         r616: ? <- SetJumpCondition(r615)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r618: ? <- Const { value: 0, size: 8 }
         r619: ? <- Arith(Add, r618, r61)
         r620: ? <- LoadMem { addr: r619, size: 8 }
         r630: ? <- CArg { value: r116, next_arg: None }
         r631: ? <- CArg { value: r589, next_arg: Some(r630) }
         r632: ? <- CArg { value: r620, next_arg: Some(r631) }
         r633: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r634: ? <- Call { callee: r633, first_arg: Some(r632) }
  (  2)  r644: ? <- Part { src: r634, offset: 0, size: 8 }
         r645: ? <- Part { src: r644, offset: 0, size: 4 }
         r646: ? <- Part { src: r644, offset: 0, size: 4 }
         r647: ? <- Arith(BitAnd, r645, r646)
         r649: ? <- IsZero(r647)
         r654: ? <- Not(r649)
         r655: ? <- SetJumpCondition(r654)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r658: ? <- Const { value: 40, size: 8 }
         r659: ? <- Arith(Add, r658, r61)
         r660: ? <- LoadMem { addr: r659, size: 8 }
         r666: ? <- Const { value: 56, size: 8 }
         r667: ? <- Arith(Add, r666, r61)
         r668: ? <- LoadMem { addr: r667, size: 8 }
         r1488: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1489: ? <- Upsilon { value: r1443, phi_ref: r1447 }
         r1490: ? <- Upsilon { value: r668, phi_ref: r1448 }
         r1491: ? <- Upsilon { value: r660, phi_ref: r1449 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r437: ? <- Const { value: 48, size: 8 }
         r438: ? <- Arith(Add, r437, r1443)
  (  2)  r439: ? <- LoadMem { addr: r438, size: 8 }
         r441: ? <- Const { value: 40, size: 8 }
  (  6)  r442: ? <- Arith(Add, r441, r1443)
         r444: ? <- Const { value: 1, size: 8 }
  (  2)  r445: ? <- Arith(Add, r444, r195)
         r451: ? <- Const { value: 8, size: 8 }
         r452: ? <- Arith(Add, r451, r61)
         r453: ? <- StoreMem { addr: r452, value: r439 }
         r456: ? <- CArg { value: r439, next_arg: None }
         r457: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r458: ? <- Call { callee: r457, first_arg: Some(r456) }
         r468: ? <- Part { src: r458, offset: 0, size: 8 }
         r469: ? <- Const { value: 8, size: 8 }
         r470: ? <- Arith(Add, r469, r61)
         r471: ? <- LoadMem { addr: r470, size: 8 }
         r473: ? <- Arith(Sub, r468, r116)
         r477: ? <- IsZero(r473)
         r480: ? <- SetJumpCondition(r477)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r671: ? <- Const { value: 0, size: 8 }
         r672: ? <- Arith(Add, r671, r61)
         r673: ? <- LoadMem { addr: r672, size: 8 }
         r682: ? <- CArg { value: r116, next_arg: None }
         r683: ? <- CArg { value: r471, next_arg: Some(r682) }
         r684: ? <- CArg { value: r673, next_arg: Some(r683) }
         r685: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r686: ? <- Call { callee: r685, first_arg: Some(r684) }
  (  2)  r696: ? <- Part { src: r686, offset: 0, size: 8 }
         r697: ? <- Part { src: r696, offset: 0, size: 4 }
         r698: ? <- Part { src: r696, offset: 0, size: 4 }
         r699: ? <- Arith(BitAnd, r697, r698)
         r701: ? <- IsZero(r699)
         r706: ? <- Not(r701)
         r707: ? <- SetJumpCondition(r706)
         r1497: ? <- Upsilon { value: r442, phi_ref: r1445 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r482: ? <- Const { value: 48, size: 8 }
         r483: ? <- Arith(Add, r482, r442)
  (  2)  r484: ? <- LoadMem { addr: r483, size: 8 }
         r486: ? <- Const { value: 40, size: 8 }
         r487: ? <- Arith(Add, r486, r442)
         r494: ? <- Const { value: 8, size: 8 }
         r495: ? <- Arith(Add, r494, r61)
         r496: ? <- StoreMem { addr: r495, value: r484 }
         r499: ? <- CArg { value: r484, next_arg: None }
         r500: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r501: ? <- Call { callee: r500, first_arg: Some(r499) }
         r511: ? <- Part { src: r501, offset: 0, size: 8 }
         r512: ? <- Const { value: 8, size: 8 }
         r513: ? <- Arith(Add, r512, r61)
         r514: ? <- LoadMem { addr: r513, size: 8 }
         r516: ? <- Arith(Sub, r511, r116)
         r520: ? <- IsZero(r516)
         r523: ? <- SetJumpCondition(r520)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1078: ? <- Const { value: 0, size: 8 }
         r1079: ? <- Arith(Add, r1078, r61)
         r1080: ? <- LoadMem { addr: r1079, size: 8 }
         r1089: ? <- CArg { value: r116, next_arg: None }
         r1090: ? <- CArg { value: r514, next_arg: Some(r1089) }
         r1091: ? <- CArg { value: r1080, next_arg: Some(r1090) }
         r1092: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1093: ? <- Call { callee: r1092, first_arg: Some(r1091) }
  (  2)  r1103: ? <- Part { src: r1093, offset: 0, size: 8 }
         r1104: ? <- Part { src: r1103, offset: 0, size: 4 }
         r1105: ? <- Part { src: r1103, offset: 0, size: 4 }
         r1106: ? <- Arith(BitAnd, r1104, r1105)
         r1108: ? <- IsZero(r1106)
         r1113: ? <- Not(r1108)
         r1114: ? <- SetJumpCondition(r1113)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1499: ? <- Upsilon { value: r487, phi_ref: r1445 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r525: ? <- Const { value: 88, size: 8 }
         r526: ? <- Arith(Add, r525, r442)
  (  2)  r527: ? <- LoadMem { addr: r526, size: 8 }
         r529: ? <- Const { value: 80, size: 8 }
         r530: ? <- Arith(Add, r529, r442)
         r537: ? <- Const { value: 8, size: 8 }
         r538: ? <- Arith(Add, r537, r61)
         r539: ? <- StoreMem { addr: r538, value: r527 }
         r542: ? <- CArg { value: r527, next_arg: None }
         r543: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r544: ? <- Call { callee: r543, first_arg: Some(r542) }
         r554: ? <- Part { src: r544, offset: 0, size: 8 }
         r555: ? <- Const { value: 8, size: 8 }
         r556: ? <- Arith(Add, r555, r61)
         r557: ? <- LoadMem { addr: r556, size: 8 }
  (  2)  r559: ? <- Arith(Sub, r554, r116)
         r563: ? <- IsZero(r559)
         r566: ? <- SetJumpCondition(r563)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1117: ? <- Const { value: 0, size: 8 }
         r1118: ? <- Arith(Add, r1117, r61)
         r1119: ? <- LoadMem { addr: r1118, size: 8 }
         r1128: ? <- CArg { value: r116, next_arg: None }
         r1129: ? <- CArg { value: r557, next_arg: Some(r1128) }
         r1130: ? <- CArg { value: r1119, next_arg: Some(r1129) }
         r1131: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1132: ? <- Call { callee: r1131, first_arg: Some(r1130) }
  (  2)  r1142: ? <- Part { src: r1132, offset: 0, size: 8 }
         r1143: ? <- Part { src: r1142, offset: 0, size: 4 }
         r1144: ? <- Part { src: r1142, offset: 0, size: 4 }
         r1145: ? <- Arith(BitAnd, r1143, r1144)
         r1147: ? <- IsZero(r1145)
         r1152: ? <- Not(r1147)
         r1153: ? <- SetJumpCondition(r1152)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1501: ? <- Upsilon { value: r530, phi_ref: r1445 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1445: ? <- Phi
         r710: ? <- Const { value: 40, size: 8 }
         r711: ? <- Arith(Add, r710, r61)
         r712: ? <- LoadMem { addr: r711, size: 8 }
         r719: ? <- Const { value: 56, size: 8 }
         r720: ? <- Arith(Add, r719, r61)
         r721: ? <- LoadMem { addr: r720, size: 8 }
         r1492: ? <- Upsilon { value: r445, phi_ref: r1446 }
         r1493: ? <- Upsilon { value: r1445, phi_ref: r1447 }
         r1494: ? <- Upsilon { value: r721, phi_ref: r1448 }
         r1495: ? <- Upsilon { value: r712, phi_ref: r1449 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1449: ? <- Phi
         r1448: ? <- Phi
         r1447: ? <- Phi
         r1446: ? <- Phi
         r723: ? <- Const { value: 32, size: 8 }
         r724: ? <- Arith(Add, r723, r61)
         r725: ? <- LoadMem { addr: r724, size: 8 }
         r727: ? <- Const { value: 0, size: 8 }
         r728: ? <- Arith(Add, r727, r725)
         r729: ? <- ArithK(Mul, r1449, 8)
         r730: ? <- Arith(Add, r728, r729)
         r731: ? <- StoreMem { addr: r730, value: r1446 }
         r732: ? <- Arith(Sub, r1447, r1448)
         r736: ? <- IsZero(r732)
         r739: ? <- SetJumpCondition(r736)
         r1484: ? <- Upsilon { value: r113, phi_ref: r1456 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r741: ? <- Const { value: 32, size: 8 }
         r742: ? <- Arith(Add, r741, r24)
         r743: ? <- LoadMem { addr: r742, size: 8 }
         r744: ? <- Const { value: 0, size: 8 }
         r745: ? <- Arith(Sub, r743, r744)
         r749: ? <- IsZero(r745)
         r752: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r753: ? <- Not(r749)
         r754: ? <- SetJumpCondition(r753)
         r1485: ? <- Upsilon { value: r18, phi_ref: r1453 }
         r1486: ? <- Upsilon { value: r18, phi_ref: r1450 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1450: ? <- Phi
         r756: ? <- Part { src: r1450, offset: 0, size: 1 }
         r757: ? <- Part { src: r1450, offset: 0, size: 1 }
         r758: ? <- Arith(BitAnd, r756, r757)
         r760: ? <- IsZero(r758)
         r765: ? <- SetJumpCondition(r760)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r767: ? <- Const { value: 1, size: 8 }
  (  2)  r768: ? <- Arith(Add, r767, r1434)
         r770: ? <- Const { value: 46, size: 4 }
         r771: ? <- Part { src: r50, offset: 4, size: 4 }
         r772: ? <- Concat { lo: r770, hi: r771 }
         r773: ? <- Const { value: 0, size: 8 }
         r774: ? <- Arith(Add, r773, r61)
         r775: ? <- StoreMem { addr: r774, value: r768 }
         r780: ? <- Part { src: r772, offset: 0, size: 4 }
         r781: ? <- CArg { value: r780, next_arg: None }
         r782: ? <- CArg { value: r768, next_arg: Some(r781) }
         r783: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r784: ? <- Call { callee: r783, first_arg: Some(r782) }
  (  3)  r794: ? <- Part { src: r784, offset: 0, size: 8 }
         r796: ? <- Arith(BitAnd, r794, r794)
         r798: ? <- IsZero(r796)
         r803: ? <- SetJumpCondition(r798)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r810: ? <- Const { value: 24, size: 8 }
         r811: ? <- Arith(Add, r810, r61)
         r812: ? <- LoadMem { addr: r811, size: 8 }
         r814: ? <- Const { value: 1, size: 8 }
         r815: ? <- Arith(Add, r151, r814)
         r831: ? <- Const { value: 0, size: 8 }
         r832: ? <- Arith(Add, r831, r812)
         r833: ? <- LoadMem { addr: r832, size: 8 }
         r834: ? <- Arith(Sub, r815, r833)
         r836: ? <- CarryOf(r834)
         r841: ? <- Not(r836)
         r842: ? <- SetJumpCondition(r841)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1192: ? <- Const { value: 1, size: 8 }
         r1193: ? <- Arith(Add, r151, r1192)
         r1202: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1203: ? <- Call { callee: r1202, first_arg: None }
         r1213: ? <- Const { value: 24, size: 8 }
         r1214: ? <- Arith(Add, r1213, r61)
         r1215: ? <- LoadMem { addr: r1214, size: 8 }
         r1223: ? <- Const { value: 0, size: 8 }
         r1224: ? <- Arith(Add, r1223, r1215)
         r1225: ? <- LoadMem { addr: r1224, size: 8 }
         r1226: ? <- Arith(Sub, r1193, r1225)
         r1228: ? <- CarryOf(r1226)
         r1233: ? <- SetJumpCondition(r1228)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1235: ? <- Const { value: 72, size: 8 }
         r1236: ? <- Arith(Add, r1235, r61)
         r1237: ? <- LoadMem { addr: r1236, size: 8 }
         r1477: ? <- Upsilon { value: r1237, phi_ref: r1457 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r845: ? <- Const { value: 24, size: 8 }
         r846: ? <- Arith(Add, r845, r24)
         r847: ? <- LoadMem { addr: r846, size: 8 }
         r849: ? <- Const { value: 0, size: 8 }
         r850: ? <- Arith(Add, r849, r847)
         r851: ? <- LoadMem { addr: r850, size: 1 }
         r852: ? <- Const { value: 0, size: 1 }
         r853: ? <- Arith(Sub, r851, r852)
         r857: ? <- IsZero(r853)
         r860: ? <- Not(r857)
         r861: ? <- SetJumpCondition(r860)
         r1478: ? <- Upsilon { value: r24, phi_ref: r1435 }
         r1480: ? <- Upsilon { value: r794, phi_ref: r1452 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1427: ? <- Const { value: 72, size: 8 }
         r1428: ? <- Arith(Add, r1427, r61)
         r1429: ? <- LoadMem { addr: r1428, size: 8 }
         r1476: ? <- Upsilon { value: r1429, phi_ref: r1454 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r568: ? <- Const { value: 16, size: 8 }
         r569: ? <- Arith(Add, r568, r61)
         r570: ? <- LoadMem { addr: r569, size: 8 }
         r572: ? <- Const { value: 3, size: 8 }
         r573: ? <- Arith(Add, r572, r445)
         r575: ? <- Const { value: 120, size: 8 }
         r576: ? <- Arith(Add, r575, r442)
         r578: ? <- Arith(Sub, r573, r570)
         r582: ? <- IsZero(r578)
         r585: ? <- SetJumpCondition(r582)
         r1502: ? <- Upsilon { value: r559, phi_ref: r1456 }
         r1503: ? <- Upsilon { value: r576, phi_ref: r1443 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1452: ? <- Phi
         r881: ? <- Const { value: 8, size: 8 }
         r882: ? <- Arith(Add, r881, r61)
         r883: ? <- StoreMem { addr: r882, value: r1452 }
         r884: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
         r885: ? <- Call { callee: r884, first_arg: None }
         r895: ? <- Part { src: r885, offset: 0, size: 8 }
         r896: ? <- Const { value: 8, size: 8 }
         r897: ? <- Arith(Add, r896, r61)
         r898: ? <- LoadMem { addr: r897, size: 8 }
         r900: ? <- Const { value: -1, size: 8 }
  (  7)  r901: ? <- Arith(Sub, r895, r900)
         r905: ? <- IsZero(r901)
         r909: ? <- SetJumpCondition(r905)
         r1472: ? <- Upsilon { value: r901, phi_ref: r1456 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r911: ? <- Const { value: 24, size: 8 }
         r912: ? <- Arith(Add, r911, r14)
  (  2)  r913: ? <- LoadMem { addr: r912, size: 8 }
         r915: ? <- Const { value: 0, size: 8 }
         r916: ? <- Arith(Add, r915, r61)
         r917: ? <- StoreMem { addr: r916, value: r898 }
         r918: ? <- Const { value: 0, size: 8 }
         r919: ? <- Arith(Add, r918, r913)
         r920: ? <- LoadMem { addr: r919, size: 1 }
         r921: ? <- Const { value: 0, size: 1 }
         r922: ? <- Arith(Sub, r920, r921)
         r926: ? <- IsZero(r922)
         r929: ? <- Not(r926)
         r930: ? <- SetJumpCondition(r929)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r932: ? <- Const { value: 24, size: 8 }
         r933: ? <- Arith(Add, r932, r61)
         r934: ? <- LoadMem { addr: r933, size: 8 }
         r936: ? <- Const { value: 32, size: 8 }
         r937: ? <- Arith(Add, r936, r61)
  (  2)  r938: ? <- LoadMem { addr: r937, size: 8 }
         r940: ? <- Const { value: 64, size: 8 }
         r941: ? <- Arith(Add, r940, r61)
  (  3)  r942: ? <- LoadMem { addr: r941, size: 8 }
         r944: ? <- Const { value: 0, size: 8 }
         r945: ? <- Arith(Add, r944, r934)
         r946: ? <- LoadMem { addr: r945, size: 8 }
         r950: ? <- CArg { value: r901, next_arg: None }
         r951: ? <- CArg { value: r946, next_arg: Some(r950) }
         r952: ? <- CArg { value: r938, next_arg: Some(r951) }
         r953: ? <- CArg { value: r942, next_arg: Some(r952) }
         r954: ? <- Const { value: 8, size: 8 }
         r955: ? <- Arith(Add, r954, r913)
         r956: ? <- LoadMem { addr: r955, size: 8 }
         r957: ? <- LoadMem { addr: r956, size: 8 }
         r958: ? <- Call { callee: r957, first_arg: Some(r953) }
  (  2)  r970: ? <- Arith(BitAnd, r901, r901)
         r972: ? <- IsZero(r970)
         r977: ? <- SetJumpCondition(r972)
         r1473: ? <- Upsilon { value: r970, phi_ref: r1456 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r983: ? <- Const { value: 32, size: 8 }
         r984: ? <- Arith(Add, r983, r901)
         r985: ? <- LoadMem { addr: r984, size: 8 }
         r986: ? <- Const { value: 0, size: 8 }
         r987: ? <- Arith(Sub, r985, r986)
         r991: ? <- IsZero(r987)
         r994: ? <- Const { value: 0, size: 8 }
         r995: ? <- Arith(Add, r994, r938)
         r996: ? <- ArithK(Mul, r151, 8)
         r997: ? <- Arith(Add, r995, r996)
         r998: ? <- StoreMem { addr: r997, value: r901 }
         r999: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1000: ? <- SetJumpCondition(r991)
         r1474: ? <- Upsilon { value: r942, phi_ref: r1450 }
         r1475: ? <- Upsilon { value: r942, phi_ref: r1453 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1453: ? <- Phi
         r1002: ? <- Const { value: 72, size: 8 }
         r1003: ? <- Arith(Add, r1002, r61)
         r1004: ? <- LoadMem { addr: r1003, size: 8 }
         r1006: ? <- Part { src: r1453, offset: 0, size: 1 }
         r1007: ? <- Part { src: r1453, offset: 0, size: 1 }
         r1008: ? <- Arith(BitAnd, r1006, r1007)
         r1010: ? <- IsZero(r1008)
         r1015: ? <- Not(r1010)
         r1016: ? <- SetJumpCondition(r1015)
         r1470: ? <- Upsilon { value: r113, phi_ref: r1456 }
         r1471: ? <- Upsilon { value: r1004, phi_ref: r1454 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1454: ? <- Phi
         r1018: ? <- Const { value: 1, size: 8 }
         r1019: ? <- Arith(Add, r1018, r151)
         r1021: ? <- Const { value: 24, size: 8 }
         r1022: ? <- Arith(Add, r1021, r61)
         r1023: ? <- LoadMem { addr: r1022, size: 8 }
         r1025: ? <- Const { value: 0, size: 8 }
         r1026: ? <- Arith(Add, r1025, r1023)
         r1027: ? <- StoreMem { addr: r1026, value: r1019 }
  (  2)  r1028: ? <- Arith(BitAnd, r1454, r1454)
         r1030: ? <- IsZero(r1028)
         r1035: ? <- Not(r1030)
         r1036: ? <- SetJumpCondition(r1035)
         r1469: ? <- Upsilon { value: r1028, phi_ref: r1458 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1462: ? <- Upsilon { value: r17, phi_ref: r1457 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1457: ? <- Phi
  (  2)  r1239: ? <- Arith(BitAnd, r1457, r1457)
         r1241: ? <- IsZero(r1239)
         r1246: ? <- SetJumpCondition(r1241)
         r1464: ? <- Upsilon { value: r1239, phi_ref: r1458 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1458: ? <- Phi
         r1248: ? <- Const { value: 0, size: 8 }
         r1249: ? <- Arith(Add, r1248, r1458)
         r1250: ? <- StoreMem { addr: r1249, value: r24 }
         r1251: ? <- Part { src: r113, offset: 0, size: 4 }
         r1252: ? <- Part { src: r113, offset: 0, size: 4 }
         r1253: ? <- Arith(BitXor, r1251, r1252)
         r1254: ? <- Part { src: r113, offset: 4, size: 4 }
         r1255: ? <- Concat { lo: r1253, hi: r1254 }
         r1463: ? <- Upsilon { value: r1255, phi_ref: r1455 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1038: ? <- Part { src: r113, offset: 0, size: 4 }
         r1039: ? <- Part { src: r113, offset: 0, size: 4 }
         r1040: ? <- Arith(BitXor, r1038, r1039)
         r1041: ? <- Part { src: r113, offset: 4, size: 4 }
         r1042: ? <- Concat { lo: r1040, hi: r1041 }
         r1465: ? <- Upsilon { value: r1042, phi_ref: r1455 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1455: ? <- Phi
         r1076: ? <- SetReturnValue(r1455)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1456: ? <- Phi
         r1165: ? <- Const { value: 2, size: 4 }
         r1166: ? <- Part { src: r1456, offset: 4, size: 4 }
         r1167: ? <- Concat { lo: r1165, hi: r1166 }
         r1186: ? <- SetReturnValue(r1167)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r16, r17, r18, r19, r20, r23, r24, r25, r26, r43, r44, r45, r46, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r60, r61, r69, r70, r71, r73, r74, r75, r76, r77, r78, r79, r80, r81, r86, r87, r88, r89, r90, r100, r102, r104, r109, r1459]
  BlockID(1) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) } [r1434, r111, r112, r113, r116, r121, r124, r1461]
  BlockID(2) -> Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) } [r126, r127, r128, r130, r131, r132, r133, r134, r138, r141]
  BlockID(3) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) } [r143, r144, r145, r147, r148, r149, r150, r151, r158, r159, r160, r161, r162, r163, r164, r165, r169, r172, r1467, r1468]
  BlockID(4) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) } [r1435, r174, r175, r176, r178, r179, r180, r181, r183, r188, r1481]
  BlockID(5) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) } [r191, r192, r193, r194, r195, r202, r203, r204, r205, r206, r210, r213, r1482, r1483]
  BlockID(6) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) } [r215, r216, r220, r223, r1504, r1505]
  BlockID(7) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) } [r225, r226, r230, r233, r1513, r1514]
  BlockID(8) -> Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) } [r235, r236, r237, r239, r240, r241, r243, r244, r245, r247, r248, r249, r252, r253, r254, r264, r265, r266, r267, r269, r270, r271, r274, r278, r281, r1521]
  BlockID(9) -> Always(Block(BlockID(10))) [r1436, r286, r287, r1527, r1528]
  BlockID(10) -> Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) } [r1438, r1437, r289, r290, r291, r293, r294, r295, r298, r299, r300, r303, r304, r305, r315, r316, r317, r318, r320, r321, r322, r324, r328, r331]
  BlockID(11) -> Always(Block(BlockID(12))) [r342, r343, r1519, r1520]
  BlockID(12) -> Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) } [r1440, r1439, r351, r352, r353, r355, r356, r357, r360, r361, r362, r365, r366, r367, r377, r378, r379, r380, r382, r383, r384, r386, r390, r393]
  BlockID(13) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) } [r395, r396, r397, r399, r400, r408, r409, r417, r421, r424, r1510, r1511, r1512]
  BlockID(14) -> Always(Block(BlockID(19))) [r1442, r1441, r426, r427, r428, r430, r431, r432, r433, r434, r435, r1487]
  BlockID(15) -> Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) } [r437, r438, r439, r441, r442, r444, r445, r451, r452, r453, r456, r457, r458, r468, r469, r470, r471, r473, r477, r480]
  BlockID(16) -> Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) } [r482, r483, r484, r486, r487, r494, r495, r496, r499, r500, r501, r511, r512, r513, r514, r516, r520, r523]
  BlockID(17) -> Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) } [r525, r526, r527, r529, r530, r537, r538, r539, r542, r543, r544, r554, r555, r556, r557, r559, r563, r566]
  BlockID(18) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) } [r568, r569, r570, r572, r573, r575, r576, r578, r582, r585, r1502, r1503]
  BlockID(19) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) } [r1443, r587, r588, r589, r595, r596, r597, r607, r608, r612, r615, r616]
  BlockID(20) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) } [r618, r619, r620, r630, r631, r632, r633, r634, r644, r645, r646, r647, r649, r654, r655]
  BlockID(21) -> Always(Block(BlockID(24))) [r658, r659, r660, r666, r667, r668, r1488, r1489, r1490, r1491]
  BlockID(22) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) } [r671, r672, r673, r682, r683, r684, r685, r686, r696, r697, r698, r699, r701, r706, r707, r1497]
  BlockID(23) -> Always(Block(BlockID(24))) [r1445, r710, r711, r712, r719, r720, r721, r1492, r1493, r1494, r1495]
  BlockID(24) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) } [r1449, r1448, r1447, r1446, r723, r724, r725, r727, r728, r729, r730, r731, r732, r736, r739, r1484]
  BlockID(25) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) } [r741, r742, r743, r744, r745, r749, r752, r753, r754, r1485, r1486]
  BlockID(26) -> Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) } [r1450, r756, r757, r758, r760, r765]
  BlockID(27) -> Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) } [r767, r768, r770, r771, r772, r773, r774, r775, r780, r781, r782, r783, r784, r794, r796, r798, r803]
  BlockID(28) -> Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) } [r810, r811, r812, r814, r815, r831, r832, r833, r834, r836, r841, r842]
  BlockID(29) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) } [r845, r846, r847, r849, r850, r851, r852, r853, r857, r860, r861, r1478, r1480]
  BlockID(30) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) } [r1452, r881, r882, r883, r884, r885, r895, r896, r897, r898, r900, r901, r905, r909, r1472]
  BlockID(31) -> Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) } [r911, r912, r913, r915, r916, r917, r918, r919, r920, r921, r922, r926, r929, r930]
  BlockID(32) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) } [r932, r933, r934, r936, r937, r938, r940, r941, r942, r944, r945, r946, r950, r951, r952, r953, r954, r955, r956, r957, r958, r970, r972, r977, r1473]
  BlockID(33) -> Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) } [r983, r984, r985, r986, r987, r991, r994, r995, r996, r997, r998, r999, r1000, r1474, r1475]
  BlockID(34) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) } [r1453, r1002, r1003, r1004, r1006, r1007, r1008, r1010, r1015, r1016, r1470, r1471]
  BlockID(35) -> Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) } [r1454, r1018, r1019, r1021, r1022, r1023, r1025, r1026, r1027, r1028, r1030, r1035, r1036, r1469]
  BlockID(36) -> Always(Block(BlockID(37))) [r1038, r1039, r1040, r1041, r1042, r1465]
  BlockID(37) -> Always(Return) [r1455, r1076]
  BlockID(38) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) } [r1078, r1079, r1080, r1089, r1090, r1091, r1092, r1093, r1103, r1104, r1105, r1106, r1108, r1113, r1114]
  BlockID(39) -> Always(Block(BlockID(23))) [r1499]
  BlockID(40) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) } [r1117, r1118, r1119, r1128, r1129, r1130, r1131, r1132, r1142, r1143, r1144, r1145, r1147, r1152, r1153]
  BlockID(41) -> Always(Block(BlockID(23))) [r1501]
  BlockID(42) -> Always(Return) [r1456, r1165, r1166, r1167, r1186]
  BlockID(43) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) } [r1192, r1193, r1202, r1203, r1213, r1214, r1215, r1223, r1224, r1225, r1226, r1228, r1233]
  BlockID(44) -> Always(Block(BlockID(45))) [r1235, r1236, r1237, r1477]
  BlockID(45) -> Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) } [r1457, r1239, r1241, r1246, r1464]
  BlockID(46) -> Always(Block(BlockID(37))) [r1458, r1248, r1249, r1250, r1251, r1252, r1253, r1254, r1255, r1463]
  BlockID(47) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) } [r1263, r1264, r1265, r1268, r1269, r1270, r1277, r1278, r1279, r1280, r1281, r1291, r1296, r1297, r1298, r1300, r1305, r1306]
  BlockID(48) -> Always(Block(BlockID(24))) [r1506, r1507, r1508, r1509]
  BlockID(49) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) } [r1309, r1310, r1311, r1314, r1315, r1316, r1323, r1324, r1325, r1326, r1327, r1337, r1342, r1343, r1344, r1346, r1351, r1352]
  BlockID(50) -> Always(Block(BlockID(24))) [r1515, r1516, r1517, r1518]
  BlockID(51) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) } [r1355, r1356, r1357, r1360, r1361, r1362, r1363, r1364, r1365, r1372, r1373, r1374, r1375, r1376, r1386, r1392, r1393, r1394, r1396, r1401, r1402, r1522]
  BlockID(52) -> Always(Block(BlockID(24))) [r1523, r1524, r1525, r1526]
  BlockID(53) -> Always(Block(BlockID(1))) [r1405, r1406, r1407, r1410, r1411, r1421, r1422, r1423, r1424, r1460]
  BlockID(54) -> Always(Block(BlockID(35))) [r1427, r1428, r1429, r1476]
  BlockID(55) -> Always(Block(BlockID(45))) [r1462]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(51)
    |  |  |  |  |  |  |  |  |  |  BlockID(52)
    |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  |  BlockID(49)
    |  |  |  |  |  |  |  |  |  |  BlockID(50)
    |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  BlockID(47)
    |  |  |  |  |  |  |  |  |  BlockID(48)
    |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(40)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(41)
    |  |  |  |  |  |  |  |  |  |  BlockID(38)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(39)
    |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  BlockID(26)
    |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  BlockID(43)
    |  |  |  |  |  |  BlockID(44)
    |  |  |  |  |  BlockID(54)
    |  |  |  |  BlockID(30)
    |  |  |  |  |  BlockID(31)
    |  |  |  |  |  |  BlockID(32)
    |  |  |  |  |  |  |  BlockID(33)
    |  |  |  |  BlockID(34)
    |  |  |  |  BlockID(35)
    |  |  |  BlockID(36)
    |  |  |  BlockID(37)
    |  |  |  BlockID(45)
    |  |  |  BlockID(46)
    |  |  |  BlockID(55)
    |  |  BlockID(42)
    |  BlockID(53)

ssa post-xform:
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r50, offset: 0, size: 4 }
fold_subregs: Part { src: r90, offset: 0, size: 8 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 4, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 4, size: 4 }
fold_subregs: Part { src: r176, offset: 0, size: 4 }
fold_subregs: Part { src: r176, offset: 4, size: 4 }
fold_subregs: Part { src: r254, offset: 0, size: 8 }
fold_subregs: Part { src: r1376, offset: 0, size: 8 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r305, offset: 0, size: 8 }
fold_subregs: Part { src: r1327, offset: 0, size: 8 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r367, offset: 0, size: 8 }
fold_subregs: Part { src: r1281, offset: 0, size: 8 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r597, offset: 0, size: 8 }
fold_subregs: Part { src: r634, offset: 0, size: 8 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r458, offset: 0, size: 8 }
fold_subregs: Part { src: r686, offset: 0, size: 8 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r501, offset: 0, size: 8 }
fold_subregs: Part { src: r1093, offset: 0, size: 8 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r544, offset: 0, size: 8 }
fold_subregs: Part { src: r1132, offset: 0, size: 8 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r50, offset: 4, size: 4 }
fold_subregs: Part { src: r772, offset: 0, size: 4 }
fold_subregs: Part { src: r784, offset: 0, size: 8 }
fold_subregs: Part { src: r885, offset: 0, size: 8 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r113, offset: 0, size: 4 }
fold_subregs: Part { src: r113, offset: 0, size: 4 }
fold_subregs: Part { src: r113, offset: 4, size: 4 }
fold_subregs: Part { src: r113, offset: 0, size: 4 }
fold_subregs: Part { src: r113, offset: 0, size: 4 }
fold_subregs: Part { src: r113, offset: 4, size: 4 }
fold_subregs: Part { src: r1456, offset: 4, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r20, offset: 0, size: 8 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 4, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 4, size: 4 }
fold_subregs: Part { src: r176, offset: 0, size: 4 }
fold_subregs: Part { src: r176, offset: 4, size: 4 }
fold_subregs: Part { src: r237, offset: 0, size: 8 }
fold_subregs: Part { src: r1434, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r291, offset: 0, size: 8 }
fold_subregs: Part { src: r1437, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r353, offset: 0, size: 8 }
fold_subregs: Part { src: r1439, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r176, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r151, offset: 0, size: 8 }
fold_subregs: Part { src: r1435, offset: 0, size: 8 }
fold_subregs: Part { src: r439, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r484, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r527, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 8 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r151, offset: 0, size: 8 }
fold_subregs: Part { src: r1435, offset: 0, size: 8 }
fold_subregs: Part { src: r19, offset: 0, size: 8 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r20, offset: 0, size: 8 }
fold_subregs: Part { src: r20, offset: 0, size: 8 }
fold_subregs: Part { src: r17, offset: 0, size: 8 }
fold_subregs: Part { src: r17, offset: 0, size: 8 }
fold_subregs: Part { src: r176, offset: 0, size: 8 }
fold_subregs: Part { src: r1452, offset: 0, size: 8 }
fold_subregs: Part { src: r20, offset: 0, size: 8 }
fold_subregs: Part { src: r19, offset: 0, size: 8 }
fold_subregs: Part { src: r13, offset: 0, size: 8 }
fold_subregs: Part { src: r17, offset: 0, size: 8 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r20, offset: 0, size: 8 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 4, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 4, size: 4 }
fold_subregs: Part { src: r1456, offset: 4, size: 4 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 0, size: 4 }
fold_subregs: Part { src: r26, offset: 4, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 0, size: 4 }
fold_subregs: Part { src: r17, offset: 4, size: 4 }
fold_subregs: Part { src: r176, offset: 0, size: 4 }
fold_subregs: Part { src: r176, offset: 4, size: 4 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r1376, offset: 0, size: 4 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r1327, offset: 0, size: 4 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r1281, offset: 0, size: 4 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r634, offset: 0, size: 4 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r686, offset: 0, size: 4 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r1093, offset: 0, size: 4 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r1132, offset: 0, size: 4 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r1450, offset: 0, size: 1 }
fold_subregs: Part { src: r14, offset: 4, size: 4 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r1453, offset: 0, size: 1 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 4, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 0, size: 4 }
fold_subregs: Part { src: r18, offset: 4, size: 4 }
fold_subregs: Part { src: r1456, offset: 4, size: 4 }
ssa program  1709 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  ( 32)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  4)  r13: ? <- Ancestral(AncestralName("RDI"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  8)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 23)  r18: ? <- Ancestral(AncestralName("RDX"))
  (  4)  r19: ? <- Ancestral(AncestralName("R8"))
  (  6)  r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
         r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r26 }
         r45: ? <- ArithK(Add, r11, -16)
         r46: ? <- StoreMem { addr: r45, value: r25 }
         r48: ? <- Const { value: 46, size: 4 }
         r51: ? <- ArithK(Add, r11, -24)
         r52: ? <- StoreMem { addr: r51, value: r24 }
         r53: ? <- ArithK(Add, r11, -32)
         r54: ? <- StoreMem { addr: r53, value: r23 }
         r55: ? <- ArithK(Add, r11, -40)
         r56: ? <- StoreMem { addr: r55, value: r10 }
         r57: ? <- ArithK(Add, r11, -48)
         r58: ? <- StoreMem { addr: r57, value: r16 }
         r70: ? <- ArithK(Add, r11, -72)
         r71: ? <- StoreMem { addr: r70, value: r13 }
         r74: ? <- ArithK(Add, r11, -104)
         r75: ? <- StoreMem { addr: r74, value: r19 }
         r77: ? <- ArithK(Add, r11, -136)
         r78: ? <- StoreMem { addr: r77, value: r18 }
         r80: ? <- ArithK(Add, r11, -112)
         r81: ? <- StoreMem { addr: r80, value: r20 }
         r87: ? <- CArg { value: r48, next_arg: None }
         r88: ? <- CArg { value: r18, next_arg: Some(r87) }
         r89: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  3)  r90: ? <- Call { callee: r89, first_arg: Some(r88) }
         r104: ? <- IsZero(r90)
         r109: ? <- SetJumpCondition(r104)
         r1459: ? <- Upsilon { value: r90, phi_ref: r1434 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1410: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1411: ? <- Call { callee: r1410, first_arg: None }
         r1424: ? <- Arith(Add, r18, r90)
         r1460: ? <- Upsilon { value: r1424, phi_ref: r1434 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  9)  r1434: ? <- Phi
  ( 15)  r116: ? <- Arith(Sub, r1434, r18)
         r121: ? <- IsZero(r116)
         r124: ? <- SetJumpCondition(r121)
         r1461: ? <- Upsilon { value: r18, phi_ref: r1456 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r132: ? <- LoadMem { addr: r20, size: 8 }
         r138: ? <- IsZero(r132)
         r141: ? <- SetJumpCondition(r138)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r144: ? <- ArithK(Add, r14, 24)
  ( 10)  r145: ? <- LoadMem { addr: r144, size: 8 }
         r147: ? <- Part { src: r26, offset: 0, size: 4 }
         r148: ? <- Part { src: r26, offset: 0, size: 4 }
         r149: ? <- Arith(BitXor, r147, r148)
         r150: ? <- Part { src: r26, offset: 4, size: 4 }
  ( 10)  r151: ? <- Concat { lo: r149, hi: r150 }
         r159: ? <- ArithK(Add, r11, -64)
         r160: ? <- StoreMem { addr: r159, value: r17 }
         r163: ? <- LoadMem { addr: r145, size: 1 }
         r169: ? <- IsZero(r163)
         r172: ? <- SetJumpCondition(r169)
         r1467: ? <- Upsilon { value: r1434, phi_ref: r1452 }
         r1468: ? <- Upsilon { value: r14, phi_ref: r1435 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  7)  r1435: ? <- Phi
         r175: ? <- ArithK(Add, r1435, 16)
  (  6)  r176: ? <- LoadMem { addr: r175, size: 8 }
         r179: ? <- ArithK(Add, r11, -120)
         r180: ? <- StoreMem { addr: r179, value: r176 }
         r183: ? <- IsZero(r176)
         r188: ? <- SetJumpCondition(r183)
         r1481: ? <- Upsilon { value: r18, phi_ref: r1456 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r191: ? <- Part { src: r17, offset: 0, size: 4 }
         r192: ? <- Part { src: r17, offset: 0, size: 4 }
         r193: ? <- Arith(BitXor, r191, r192)
         r194: ? <- Part { src: r17, offset: 4, size: 4 }
  (  7)  r195: ? <- Concat { lo: r193, hi: r194 }
         r202: ? <- Part { src: r176, offset: 0, size: 4 }
  (  2)  r204: ? <- ArithK(BitAnd, r202, 3)
         r205: ? <- Part { src: r176, offset: 4, size: 4 }
  (  2)  r206: ? <- Concat { lo: r204, hi: r205 }
         r210: ? <- IsZero(r204)
         r213: ? <- SetJumpCondition(r210)
         r1482: ? <- Upsilon { value: r1434, phi_ref: r1441 }
         r1483: ? <- Upsilon { value: r145, phi_ref: r1442 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r216: ? <- ArithK(Add, r206, -1)
         r220: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r220)
         r1504: ? <- Upsilon { value: r1434, phi_ref: r1439 }
         r1505: ? <- Upsilon { value: r145, phi_ref: r1440 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r226: ? <- ArithK(Add, r206, -3)
         r230: ? <- IsZero(r226)
         r233: ? <- SetJumpCondition(r230)
         r1513: ? <- Upsilon { value: r1434, phi_ref: r1437 }
         r1514: ? <- Upsilon { value: r145, phi_ref: r1438 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r236: ? <- ArithK(Add, r145, 8)
  (  3)  r237: ? <- LoadMem { addr: r236, size: 8 }
         r240: ? <- ArithK(Add, r11, -88)
         r241: ? <- StoreMem { addr: r240, value: r1434 }
         r244: ? <- ArithK(Add, r11, -96)
         r245: ? <- StoreMem { addr: r244, value: r145 }
         r248: ? <- ArithK(Add, r11, -128)
         r249: ? <- StoreMem { addr: r248, value: r237 }
         r252: ? <- CArg { value: r237, next_arg: None }
         r253: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r254: ? <- Call { callee: r253, first_arg: Some(r252) }
         r274: ? <- Arith(Sub, r254, r116)
         r278: ? <- IsZero(r274)
         r281: ? <- SetJumpCondition(r278)
         r1521: ? <- Upsilon { value: r145, phi_ref: r1436 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1361: ? <- ArithK(Add, r11, -96)
         r1362: ? <- StoreMem { addr: r1361, value: r1434 }
         r1364: ? <- ArithK(Add, r11, -128)
         r1365: ? <- StoreMem { addr: r1364, value: r145 }
         r1372: ? <- CArg { value: r116, next_arg: None }
         r1373: ? <- CArg { value: r237, next_arg: Some(r1372) }
         r1374: ? <- CArg { value: r18, next_arg: Some(r1373) }
         r1375: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1376: ? <- Call { callee: r1375, first_arg: Some(r1374) }
         r1392: ? <- Part { src: r1376, offset: 0, size: 4 }
         r1393: ? <- Part { src: r1376, offset: 0, size: 4 }
         r1394: ? <- Arith(BitAnd, r1392, r1393)
         r1396: ? <- IsZero(r1394)
         r1401: ? <- Not(r1396)
         r1402: ? <- SetJumpCondition(r1401)
         r1522: ? <- Upsilon { value: r145, phi_ref: r1436 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1523: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1524: ? <- Upsilon { value: r145, phi_ref: r1447 }
         r1525: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1526: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1436: ? <- Phi
         r287: ? <- ArithK(Add, r1436, 40)
         r1527: ? <- Upsilon { value: r1434, phi_ref: r1437 }
         r1528: ? <- Upsilon { value: r287, phi_ref: r1438 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1438: ? <- Phi
  (  3)  r1437: ? <- Phi
         r290: ? <- ArithK(Add, r1438, 8)
  (  3)  r291: ? <- LoadMem { addr: r290, size: 8 }
         r294: ? <- ArithK(Add, r11, -96)
         r295: ? <- StoreMem { addr: r294, value: r1437 }
         r299: ? <- ArithK(Add, r11, -128)
         r300: ? <- StoreMem { addr: r299, value: r291 }
         r303: ? <- CArg { value: r291, next_arg: None }
         r304: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r305: ? <- Call { callee: r304, first_arg: Some(r303) }
         r324: ? <- Arith(Sub, r305, r116)
         r328: ? <- IsZero(r324)
         r331: ? <- SetJumpCondition(r328)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1315: ? <- ArithK(Add, r11, -128)
         r1316: ? <- StoreMem { addr: r1315, value: r1437 }
         r1323: ? <- CArg { value: r116, next_arg: None }
         r1324: ? <- CArg { value: r291, next_arg: Some(r1323) }
         r1325: ? <- CArg { value: r18, next_arg: Some(r1324) }
         r1326: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1327: ? <- Call { callee: r1326, first_arg: Some(r1325) }
         r1342: ? <- Part { src: r1327, offset: 0, size: 4 }
         r1343: ? <- Part { src: r1327, offset: 0, size: 4 }
         r1344: ? <- Arith(BitAnd, r1342, r1343)
         r1346: ? <- IsZero(r1344)
         r1351: ? <- Not(r1346)
         r1352: ? <- SetJumpCondition(r1351)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1515: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1516: ? <- Upsilon { value: r1438, phi_ref: r1447 }
         r1517: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1518: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r343: ? <- ArithK(Add, r1438, 40)
         r1519: ? <- Upsilon { value: r1437, phi_ref: r1439 }
         r1520: ? <- Upsilon { value: r343, phi_ref: r1440 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1440: ? <- Phi
  (  3)  r1439: ? <- Phi
         r352: ? <- ArithK(Add, r1440, 8)
  (  3)  r353: ? <- LoadMem { addr: r352, size: 8 }
         r356: ? <- ArithK(Add, r11, -96)
         r357: ? <- StoreMem { addr: r356, value: r1439 }
         r361: ? <- ArithK(Add, r11, -128)
         r362: ? <- StoreMem { addr: r361, value: r353 }
         r365: ? <- CArg { value: r353, next_arg: None }
         r366: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r367: ? <- Call { callee: r366, first_arg: Some(r365) }
  (  2)  r386: ? <- Arith(Sub, r367, r116)
         r390: ? <- IsZero(r386)
         r393: ? <- SetJumpCondition(r390)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1269: ? <- ArithK(Add, r11, -128)
         r1270: ? <- StoreMem { addr: r1269, value: r1439 }
         r1277: ? <- CArg { value: r116, next_arg: None }
         r1278: ? <- CArg { value: r353, next_arg: Some(r1277) }
         r1279: ? <- CArg { value: r18, next_arg: Some(r1278) }
         r1280: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1281: ? <- Call { callee: r1280, first_arg: Some(r1279) }
         r1296: ? <- Part { src: r1281, offset: 0, size: 4 }
         r1297: ? <- Part { src: r1281, offset: 0, size: 4 }
         r1298: ? <- Arith(BitAnd, r1296, r1297)
         r1300: ? <- IsZero(r1298)
         r1305: ? <- Not(r1300)
         r1306: ? <- SetJumpCondition(r1305)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1506: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1507: ? <- Upsilon { value: r1440, phi_ref: r1447 }
         r1508: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1509: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r400: ? <- ArithK(Add, r195, 1)
         r409: ? <- ArithK(Add, r1440, 40)
         r417: ? <- Arith(Sub, r400, r176)
         r421: ? <- IsZero(r417)
         r424: ? <- SetJumpCondition(r421)
         r1510: ? <- Upsilon { value: r386, phi_ref: r1456 }
         r1511: ? <- Upsilon { value: r1439, phi_ref: r1441 }
         r1512: ? <- Upsilon { value: r409, phi_ref: r1442 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1442: ? <- Phi
         r1441: ? <- Phi
         r427: ? <- ArithK(Add, r11, -80)
         r428: ? <- StoreMem { addr: r427, value: r1435 }
         r431: ? <- ArithK(Add, r11, -96)
         r432: ? <- StoreMem { addr: r431, value: r151 }
         r434: ? <- ArithK(Add, r11, -88)
         r435: ? <- StoreMem { addr: r434, value: r1441 }
         r1487: ? <- Upsilon { value: r1442, phi_ref: r1443 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  9)  r1443: ? <- Phi
         r588: ? <- ArithK(Add, r1443, 8)
  (  2)  r589: ? <- LoadMem { addr: r588, size: 8 }
         r595: ? <- CArg { value: r589, next_arg: None }
         r596: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r597: ? <- Call { callee: r596, first_arg: Some(r595) }
         r608: ? <- Arith(Sub, r597, r116)
         r612: ? <- IsZero(r608)
         r615: ? <- Not(r612)
         r616: ? <- SetJumpCondition(r615)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r630: ? <- CArg { value: r116, next_arg: None }
         r631: ? <- CArg { value: r589, next_arg: Some(r630) }
         r632: ? <- CArg { value: r18, next_arg: Some(r631) }
         r633: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r634: ? <- Call { callee: r633, first_arg: Some(r632) }
         r645: ? <- Part { src: r634, offset: 0, size: 4 }
         r646: ? <- Part { src: r634, offset: 0, size: 4 }
         r647: ? <- Arith(BitAnd, r645, r646)
         r649: ? <- IsZero(r647)
         r654: ? <- Not(r649)
         r655: ? <- SetJumpCondition(r654)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r1488: ? <- Upsilon { value: r195, phi_ref: r1446 }
         r1489: ? <- Upsilon { value: r1443, phi_ref: r1447 }
         r1490: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1491: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r438: ? <- ArithK(Add, r1443, 48)
  (  3)  r439: ? <- LoadMem { addr: r438, size: 8 }
         r442: ? <- ArithK(Add, r1443, 40)
         r445: ? <- ArithK(Add, r195, 1)
         r452: ? <- ArithK(Add, r11, -128)
         r453: ? <- StoreMem { addr: r452, value: r439 }
         r456: ? <- CArg { value: r439, next_arg: None }
         r457: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r458: ? <- Call { callee: r457, first_arg: Some(r456) }
         r473: ? <- Arith(Sub, r458, r116)
         r477: ? <- IsZero(r473)
         r480: ? <- SetJumpCondition(r477)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r682: ? <- CArg { value: r116, next_arg: None }
         r683: ? <- CArg { value: r439, next_arg: Some(r682) }
         r684: ? <- CArg { value: r18, next_arg: Some(r683) }
         r685: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r686: ? <- Call { callee: r685, first_arg: Some(r684) }
         r697: ? <- Part { src: r686, offset: 0, size: 4 }
         r698: ? <- Part { src: r686, offset: 0, size: 4 }
         r699: ? <- Arith(BitAnd, r697, r698)
         r701: ? <- IsZero(r699)
         r706: ? <- Not(r701)
         r707: ? <- SetJumpCondition(r706)
         r1497: ? <- Upsilon { value: r442, phi_ref: r1445 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r483: ? <- ArithK(Add, r1443, 88)
  (  3)  r484: ? <- LoadMem { addr: r483, size: 8 }
         r487: ? <- ArithK(Add, r1443, 80)
         r495: ? <- ArithK(Add, r11, -128)
         r496: ? <- StoreMem { addr: r495, value: r484 }
         r499: ? <- CArg { value: r484, next_arg: None }
         r500: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r501: ? <- Call { callee: r500, first_arg: Some(r499) }
         r516: ? <- Arith(Sub, r501, r116)
         r520: ? <- IsZero(r516)
         r523: ? <- SetJumpCondition(r520)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1089: ? <- CArg { value: r116, next_arg: None }
         r1090: ? <- CArg { value: r484, next_arg: Some(r1089) }
         r1091: ? <- CArg { value: r18, next_arg: Some(r1090) }
         r1092: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1093: ? <- Call { callee: r1092, first_arg: Some(r1091) }
         r1104: ? <- Part { src: r1093, offset: 0, size: 4 }
         r1105: ? <- Part { src: r1093, offset: 0, size: 4 }
         r1106: ? <- Arith(BitAnd, r1104, r1105)
         r1108: ? <- IsZero(r1106)
         r1113: ? <- Not(r1108)
         r1114: ? <- SetJumpCondition(r1113)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1499: ? <- Upsilon { value: r487, phi_ref: r1445 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r526: ? <- ArithK(Add, r1443, 128)
  (  3)  r527: ? <- LoadMem { addr: r526, size: 8 }
         r530: ? <- ArithK(Add, r1443, 120)
         r538: ? <- ArithK(Add, r11, -128)
         r539: ? <- StoreMem { addr: r538, value: r527 }
         r542: ? <- CArg { value: r527, next_arg: None }
         r543: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r544: ? <- Call { callee: r543, first_arg: Some(r542) }
  (  2)  r559: ? <- Arith(Sub, r544, r116)
         r563: ? <- IsZero(r559)
         r566: ? <- SetJumpCondition(r563)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1128: ? <- CArg { value: r116, next_arg: None }
         r1129: ? <- CArg { value: r527, next_arg: Some(r1128) }
         r1130: ? <- CArg { value: r18, next_arg: Some(r1129) }
         r1131: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1132: ? <- Call { callee: r1131, first_arg: Some(r1130) }
         r1143: ? <- Part { src: r1132, offset: 0, size: 4 }
         r1144: ? <- Part { src: r1132, offset: 0, size: 4 }
         r1145: ? <- Arith(BitAnd, r1143, r1144)
         r1147: ? <- IsZero(r1145)
         r1152: ? <- Not(r1147)
         r1153: ? <- SetJumpCondition(r1152)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1501: ? <- Upsilon { value: r530, phi_ref: r1445 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1445: ? <- Phi
         r1492: ? <- Upsilon { value: r445, phi_ref: r1446 }
         r1493: ? <- Upsilon { value: r1445, phi_ref: r1447 }
         r1494: ? <- Upsilon { value: r1435, phi_ref: r1448 }
         r1495: ? <- Upsilon { value: r151, phi_ref: r1449 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1449: ? <- Phi
         r1448: ? <- Phi
         r1447: ? <- Phi
         r1446: ? <- Phi
         r729: ? <- ArithK(Mul, r1449, 8)
         r730: ? <- Arith(Add, r19, r729)
         r731: ? <- StoreMem { addr: r730, value: r1446 }
         r732: ? <- Arith(Sub, r1447, r1448)
         r736: ? <- IsZero(r732)
         r739: ? <- SetJumpCondition(r736)
         r1484: ? <- Upsilon { value: r18, phi_ref: r1456 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r742: ? <- ArithK(Add, r24, 32)
         r743: ? <- LoadMem { addr: r742, size: 8 }
         r749: ? <- IsZero(r743)
         r752: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r753: ? <- Not(r749)
         r754: ? <- SetJumpCondition(r753)
         r1485: ? <- Upsilon { value: r18, phi_ref: r1453 }
         r1486: ? <- Upsilon { value: r18, phi_ref: r1450 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1450: ? <- Phi
         r756: ? <- Part { src: r1450, offset: 0, size: 1 }
         r757: ? <- Part { src: r1450, offset: 0, size: 1 }
         r758: ? <- Arith(BitAnd, r756, r757)
         r760: ? <- IsZero(r758)
         r765: ? <- SetJumpCondition(r760)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
  (  2)  r768: ? <- ArithK(Add, r1434, 1)
         r770: ? <- Const { value: 46, size: 4 }
         r774: ? <- ArithK(Add, r11, -136)
         r775: ? <- StoreMem { addr: r774, value: r768 }
         r781: ? <- CArg { value: r770, next_arg: None }
         r782: ? <- CArg { value: r768, next_arg: Some(r781) }
         r783: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  2)  r784: ? <- Call { callee: r783, first_arg: Some(r782) }
         r798: ? <- IsZero(r784)
         r803: ? <- SetJumpCondition(r798)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r815: ? <- ArithK(Add, r151, 1)
         r833: ? <- LoadMem { addr: r20, size: 8 }
         r834: ? <- Arith(Sub, r815, r833)
         r836: ? <- CarryOf(r834)
         r841: ? <- Not(r836)
         r842: ? <- SetJumpCondition(r841)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1193: ? <- ArithK(Add, r151, 1)
         r1202: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1203: ? <- Call { callee: r1202, first_arg: None }
         r1225: ? <- LoadMem { addr: r20, size: 8 }
         r1226: ? <- Arith(Sub, r1193, r1225)
         r1228: ? <- CarryOf(r1226)
         r1233: ? <- SetJumpCondition(r1228)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1477: ? <- Upsilon { value: r17, phi_ref: r1457 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r846: ? <- ArithK(Add, r24, 24)
         r847: ? <- LoadMem { addr: r846, size: 8 }
         r851: ? <- LoadMem { addr: r847, size: 1 }
         r857: ? <- IsZero(r851)
         r860: ? <- Not(r857)
         r861: ? <- SetJumpCondition(r860)
         r1478: ? <- Upsilon { value: r24, phi_ref: r1435 }
         r1480: ? <- Upsilon { value: r784, phi_ref: r1452 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1476: ? <- Upsilon { value: r17, phi_ref: r1454 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r573: ? <- ArithK(Add, r195, 4)
         r576: ? <- ArithK(Add, r1443, 160)
         r578: ? <- Arith(Sub, r573, r176)
         r582: ? <- IsZero(r578)
         r585: ? <- SetJumpCondition(r582)
         r1502: ? <- Upsilon { value: r559, phi_ref: r1456 }
         r1503: ? <- Upsilon { value: r576, phi_ref: r1443 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
  (  2)  r1452: ? <- Phi
         r882: ? <- ArithK(Add, r11, -128)
         r883: ? <- StoreMem { addr: r882, value: r1452 }
         r884: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
  (  2)  r885: ? <- Call { callee: r884, first_arg: None }
  (  6)  r901: ? <- ArithK(Add, r885, 1)
         r905: ? <- IsZero(r901)
         r909: ? <- SetJumpCondition(r905)
         r1472: ? <- Upsilon { value: r901, phi_ref: r1456 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r912: ? <- ArithK(Add, r14, 24)
  (  2)  r913: ? <- LoadMem { addr: r912, size: 8 }
         r916: ? <- ArithK(Add, r11, -136)
         r917: ? <- StoreMem { addr: r916, value: r1452 }
         r920: ? <- LoadMem { addr: r913, size: 1 }
         r926: ? <- IsZero(r920)
         r929: ? <- Not(r926)
         r930: ? <- SetJumpCondition(r929)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r946: ? <- LoadMem { addr: r20, size: 8 }
         r950: ? <- CArg { value: r901, next_arg: None }
         r951: ? <- CArg { value: r946, next_arg: Some(r950) }
         r952: ? <- CArg { value: r19, next_arg: Some(r951) }
         r953: ? <- CArg { value: r13, next_arg: Some(r952) }
         r955: ? <- ArithK(Add, r913, 8)
         r956: ? <- LoadMem { addr: r955, size: 8 }
         r957: ? <- LoadMem { addr: r956, size: 8 }
         r958: ? <- Call { callee: r957, first_arg: Some(r953) }
         r972: ? <- IsZero(r901)
         r977: ? <- SetJumpCondition(r972)
         r1473: ? <- Upsilon { value: r901, phi_ref: r1456 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r984: ? <- ArithK(Add, r885, 33)
         r985: ? <- LoadMem { addr: r984, size: 8 }
         r991: ? <- IsZero(r985)
         r996: ? <- ArithK(Mul, r151, 8)
         r997: ? <- Arith(Add, r19, r996)
         r998: ? <- StoreMem { addr: r997, value: r901 }
         r999: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1000: ? <- SetJumpCondition(r991)
         r1474: ? <- Upsilon { value: r13, phi_ref: r1450 }
         r1475: ? <- Upsilon { value: r13, phi_ref: r1453 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1453: ? <- Phi
         r1006: ? <- Part { src: r1453, offset: 0, size: 1 }
         r1007: ? <- Part { src: r1453, offset: 0, size: 1 }
         r1008: ? <- Arith(BitAnd, r1006, r1007)
         r1010: ? <- IsZero(r1008)
         r1015: ? <- Not(r1010)
         r1016: ? <- SetJumpCondition(r1015)
         r1470: ? <- Upsilon { value: r18, phi_ref: r1456 }
         r1471: ? <- Upsilon { value: r17, phi_ref: r1454 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1454: ? <- Phi
         r1019: ? <- ArithK(Add, r151, 1)
         r1027: ? <- StoreMem { addr: r20, value: r1019 }
         r1030: ? <- IsZero(r1454)
         r1035: ? <- Not(r1030)
         r1036: ? <- SetJumpCondition(r1035)
         r1469: ? <- Upsilon { value: r1454, phi_ref: r1458 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1462: ? <- Upsilon { value: r17, phi_ref: r1457 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1457: ? <- Phi
         r1241: ? <- IsZero(r1457)
         r1246: ? <- SetJumpCondition(r1241)
         r1464: ? <- Upsilon { value: r1457, phi_ref: r1458 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1458: ? <- Phi
         r1250: ? <- StoreMem { addr: r1458, value: r24 }
         r1251: ? <- Part { src: r18, offset: 0, size: 4 }
         r1252: ? <- Part { src: r18, offset: 0, size: 4 }
         r1253: ? <- Arith(BitXor, r1251, r1252)
         r1254: ? <- Part { src: r18, offset: 4, size: 4 }
         r1255: ? <- Concat { lo: r1253, hi: r1254 }
         r1463: ? <- Upsilon { value: r1255, phi_ref: r1455 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1038: ? <- Part { src: r18, offset: 0, size: 4 }
         r1039: ? <- Part { src: r18, offset: 0, size: 4 }
         r1040: ? <- Arith(BitXor, r1038, r1039)
         r1041: ? <- Part { src: r18, offset: 4, size: 4 }
         r1042: ? <- Concat { lo: r1040, hi: r1041 }
         r1465: ? <- Upsilon { value: r1042, phi_ref: r1455 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1455: ? <- Phi
         r1076: ? <- SetReturnValue(r1455)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1456: ? <- Phi
         r1165: ? <- Const { value: 2, size: 4 }
         r1166: ? <- Part { src: r1456, offset: 4, size: 4 }
         r1167: ? <- Concat { lo: r1165, hi: r1166 }
         r1186: ? <- SetReturnValue(r1167)



T0: {
  [pre:RSP - 8]:* := pre:R15;
  [pre:RSP - 16]:* := pre:R14;
  [pre:RSP - 24]:* := pre:R13;
  [pre:RSP - 32]:* := pre:R12;
  [pre:RSP - 40]:* := pre:RBP;
  [pre:RSP - 48]:* := pre:RBX;
  [pre:RSP - 72]:* := pre:RDI;
  [pre:RSP - 104]:* := pre:R8;
  [pre:RSP - 136]:* := pre:RDX;
  [pre:RSP - 112]:* := pre:R9;
  let r90: Bytes(8) = strchr(pre:RDX,
                             46);
  ;
  r1434 := strchr(pre:RDX,
                  46);
  if IsZero (r90) {
    __builtin_strlen();
    r1434 := pre:RDX + r90;
    goto T1
  }
  goto T1
  T1: {
    let mut r1434: Bytes(8);
    let r116: Bytes(8) = r1434 - pre:RDX;
    ;
    r1456 := pre:RDX;
    if IsZero (r116) {
      goto T42
    }
    ;
    if IsZero ([pre:R9]:8) {
      r1457 := pre:RCX;
      goto T45
    }
    let r145: Bytes(8) = [pre:RSI + 24]:8;
    let r151: Bytes(8) = pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
    [pre:RSP - 64]:* := pre:RCX;
    ;
    r1452 := phi ();
    r1435 := pre:RSI;
    if IsZero ([r145]:1) {
      goto T30
    }
    goto T4
    T4: {
      let mut r1435: Bytes(8);
      let r176: Bytes(8) = [r1435 + 16]:8;
      [pre:RSP - 120]:* := r176;
      ;
      r1456 := pre:RDX;
      if IsZero (r176) {
        goto T42
      }
      let r195: Bytes(8) = pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
      let r204: Bytes(4) = r176[4 .. 0] & 3;
      let r206: Bytes(8) = r176[8 .. 4] ++ r204;
      ;
      r1441 := phi ();
      r1442 := [pre:RSI + 24]:8;
      if IsZero (r204) {
        goto T14
      }
      ;
      r1439 := phi ();
      r1440 := [pre:RSI + 24]:8;
      if IsZero (r206 - 1) {
        goto T12
      }
      ;
      r1437 := phi ();
      r1438 := [pre:RSI + 24]:8;
      if IsZero (r206 - 3) {
        goto T10
      }
      let r237: Bytes(8) = [r145 + 8]:8;
      [pre:RSP - 88]:* := r1434;
      [pre:RSP - 96]:* := r145;
      [pre:RSP - 128]:* := r237;
      strlen(r237);
      ;
      r1436 := [pre:RSI + 24]:8;
      if IsZero (strlen(r237) - r116) {
        [pre:RSP - 96]:* := r1434;
        [pre:RSP - 128]:* := r145;
        let r1376: Bytes(8) = strncmp(pre:RDX,
                                      r237,
                                      r116);
        ;
        r1436 := [pre:RSI + 24]:8;
        if ! IsZero (r1376[4 .. 0] & r1376[4 .. 0]) {
          goto T9
        }
        r1446 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1447 := [pre:RSI + 24]:8;
        r1448 := phi ();
        r1449 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        goto T24
      }
      goto T9
      T9: {
        let mut r1436: Bytes(8);
        r1437 := phi ();
        r1438 := r1436 + 40;
        goto T10
      }
      
      T10: {
        let mut r1438: Bytes(8);
        let mut r1437: Bytes(8);
        let r291: Bytes(8) = [r1438 + 8]:8;
        [pre:RSP - 96]:* := r1437;
        [pre:RSP - 128]:* := r291;
        strlen(r291);
        ;
        if IsZero (strlen(r291) - r116) {
          [pre:RSP - 128]:* := r1437;
          let r1327: Bytes(8) = strncmp(pre:RDX,
                                        r291,
                                        r116);
          ;
          if ! IsZero (r1327[4 .. 0] & r1327[4 .. 0]) {
            goto T11
          }
          r1446 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1447 := phi ();
          r1448 := phi ();
          r1449 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T11
        T11: {
          r1439 := phi ();
          r1440 := r1438 + 40;
          goto T12
        }
      
      }
      
      T12: {
        let mut r1440: Bytes(8);
        let mut r1439: Bytes(8);
        let r353: Bytes(8) = [r1440 + 8]:8;
        [pre:RSP - 96]:* := r1439;
        [pre:RSP - 128]:* := r353;
        strlen(r353);
        let r386: Bytes(8) = strlen(r353) - r116;
        ;
        if IsZero (r386) {
          [pre:RSP - 128]:* := r1439;
          let r1281: Bytes(8) = strncmp(pre:RDX,
                                        r353,
                                        r116);
          ;
          if ! IsZero (r1281[4 .. 0] & r1281[4 .. 0]) {
            goto T13
          }
          r1446 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1447 := phi ();
          r1448 := phi ();
          r1449 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T13
        T13: {
          ;
          r1456 := strlen(r353) - r116;
          r1441 := phi ();
          r1442 := r1440 + 40;
          if IsZero (r195 + 1 - r176) {
            goto T42
          }
          goto T14
        }
      
      }
      
      T14: {
        let mut r1442: Bytes(8);
        let mut r1441: Bytes(8);
        [pre:RSP - 80]:* := r1435;
        [pre:RSP - 96]:* := r151;
        [pre:RSP - 88]:* := r1441;
        r1443 := phi ();
        goto T19
        T19: {
          let mut r1443: Bytes(8);
          let r589: Bytes(8) = [r1443 + 8]:8;
          strlen(r589);
          ;
          if ! IsZero (strlen(r589) - r116) {
            goto T15
          }
          let r634: Bytes(8) = strncmp(pre:RDX,
                                       r589,
                                       r116);
          ;
          if ! IsZero (r634[4 .. 0] & r634[4 .. 0]) {
            goto T15
          }
          r1446 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1447 := phi ();
          r1448 := phi ();
          r1449 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
          T15: {
            let r439: Bytes(8) = [r1443 + 48]:8;
            [pre:RSP - 128]:* := r439;
            strlen(r439);
            ;
            if IsZero (strlen(r439) - r116) {
              let r686: Bytes(8) = strncmp(pre:RDX,
                                           r439,
                                           r116);
              ;
              r1445 := r1443 + 40;
              if ! IsZero (r686[4 .. 0] & r686[4 .. 0]) {
                goto T16
              }
              goto T23
            }
            goto T16
            T16: {
              let r484: Bytes(8) = [r1443 + 88]:8;
              [pre:RSP - 128]:* := r484;
              strlen(r484);
              ;
              if IsZero (strlen(r484) - r116) {
                let r1093: Bytes(8) = strncmp(pre:RDX,
                                              r484,
                                              r116);
                ;
                if ! IsZero (r1093[4 .. 0] & r1093[4 .. 0]) {
                  goto T17
                }
                r1445 := r1443 + 80;
                goto T23
              }
              goto T17
              T17: {
                let r527: Bytes(8) = [r1443 + 128]:8;
                [pre:RSP - 128]:* := r527;
                strlen(r527);
                let r559: Bytes(8) = strlen(r527) - r116;
                ;
                if IsZero (r559) {
                  let r1132: Bytes(8) = strncmp(pre:RDX,
                                                r527,
                                                r116);
                  ;
                  if ! IsZero (r1132[4 .. 0] & r1132[4 .. 0]) {
                    goto T18
                  }
                  r1445 := r1443 + 120;
                  goto T23
                }
                goto T18
                T18: {
                  ;
                  r1456 := strlen(r527) - r116;
                  r1443 := r1443 + 160;
                  if IsZero (r195 + 4 - r176) {
                    goto T42
                  }
                  loop T19
                }
              
              }
            
            }
            
            T23: {
              let mut r1445: Bytes(8);
              r1446 := r195 + 1;
              r1447 := phi ();
              r1448 := phi ();
              r1449 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
              goto T24
            }
          
          }
        
        }
      
      }
      
      T24: {
        let mut r1449: Bytes(8);
        let mut r1448: Bytes(8);
        let mut r1447: Bytes(8);
        let mut r1446: Bytes(8);
        [pre:R8 + r1449 * 8]:* := r1446;
        ;
        r1456 := pre:RDX;
        if IsZero (r1447 - r1448) {
          goto T42
        }
        TODO /* unsupported: movzx edi,byte ptr [r8] */;
        ;
        r1453 := pre:RDX;
        r1450 := pre:RDX;
        if ! IsZero ([pre:R13 + 32]:8) {
          goto T34
        }
        goto T26
      }
    
    }
    
    T26: {
      let mut r1450: Bytes(8);
      ;
      if IsZero (r1450[1 .. 0] & r1450[1 .. 0]) {
        r1454 := pre:RCX;
        goto T35
      }
      let r768: Bytes(8) = r1434 + 1;
      [pre:RSP - 136]:* := r768;
      let r784: Bytes(8) = strchr(r768,
                                  46);
      ;
      if IsZero (r784) {
        __builtin_strlen();
        ;
        if CarryOf (r151 + 1 - [pre:R9]:8) {
          goto T29
        }
        goto T44
      }
      ;
      if ! CarryOf (r151 + 1 - [pre:R9]:8) {
        goto T44
      }
      goto T29
      T29: {
        ;
        r1435 := pre:R13;
        r1452 := strchr(r768,
                        46);
        if ! IsZero ([[pre:R13 + 24]:8]:1) {
          goto T4
        }
        goto T30
      }
      
      T44: {
        r1457 := pre:RCX;
        goto T45
      }
    
    }
    
    T30: {
      let mut r1452: Bytes(8);
      [pre:RSP - 128]:* := r1452;
      let r885: Bytes(8) = je_malloc_strtoumax();
      let r901: Bytes(8) = r885 + 1;
      ;
      r1456 := r885 + 1;
      if IsZero (r901) {
        goto T42
      }
      let r913: Bytes(8) = [pre:RSI + 24]:8;
      [pre:RSP - 136]:* := r1452;
      ;
      if ! IsZero ([r913]:1) {
        goto ext 0x403143
      }
      [[r913 + 8]:8]:8(pre:RDI,
                       pre:R8,
                       [pre:R9]:8,
                       r901);
      ;
      r1456 := r885 + 1;
      if IsZero (r901) {
        goto T42
      }
      [pre:R8 + r151 * 8]:* := r901;
      TODO /* unsupported: movzx edi,byte ptr [r8] */;
      ;
      r1450 := pre:RDI;
      r1453 := pre:RDI;
      if IsZero ([r885 + 33]:8) {
        goto T26
      }
      goto T34
    }
    
    T34: {
      let mut r1453: Bytes(8);
      ;
      r1456 := pre:RDX;
      r1454 := pre:RCX;
      if ! IsZero (r1453[1 .. 0] & r1453[1 .. 0]) {
        goto T42
      }
      goto T35
    }
    
    T35: {
      let mut r1454: Bytes(8);
      [pre:R9]:* := r151 + 1;
      ;
      r1458 := phi ();
      if ! IsZero (r1454) {
        goto T46
      }
      goto T36
    }
    
    T36: {
      r1455 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T37: {
      let mut r1455: Bytes(8);
      ;
      return r1455
    }
    
    T45: {
      let mut r1457: Bytes(8);
      ;
      r1458 := phi ();
      if IsZero (r1457) {
        goto T36
      }
      goto T46
    }
    
    T46: {
      let mut r1458: Bytes(8);
      [r1458]:* := pre:R13;
      r1455 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T42: {
      let mut r1456: Bytes(8);
      ;
      return r1456[8 .. 4] ++ 2
    }
  
  }

}
