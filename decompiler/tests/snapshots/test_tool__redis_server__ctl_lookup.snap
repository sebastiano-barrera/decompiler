---
source: decompiler/tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

function type: 0x5ddf40: no type info
4 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: no type hints for this callsite
  #   2: no function type
  #   3: no function type


mil program = 
program  1491 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
0x5ddf40:
                65 r12 <- ArithK(Add, r12, -8)
                66 r44 <- StoreMem { mem: r44, addr: r12, value: r27 }
0x5ddf42:
                67 r12 <- ArithK(Add, r12, -8)
                68 r44 <- StoreMem { mem: r44, addr: r12, value: r26 }
0x5ddf44:
                69 r26 <- Get(r15)
0x5ddf47:
                70 r45 <- Const { value: 46, size: 4 }
                71 r46 <- Part { src: r15, offset: 4, size: 4 }
                72 r15 <- Concat { lo: r45, hi: r46 }
0x5ddf4c:
                73 r12 <- ArithK(Add, r12, -8)
                74 r44 <- StoreMem { mem: r44, addr: r12, value: r25 }
0x5ddf4e:
                75 r12 <- ArithK(Add, r12, -8)
                76 r44 <- StoreMem { mem: r44, addr: r12, value: r24 }
0x5ddf50:
                77 r12 <- ArithK(Add, r12, -8)
                78 r44 <- StoreMem { mem: r44, addr: r12, value: r11 }
0x5ddf51:
                79 r12 <- ArithK(Add, r12, -8)
                80 r44 <- StoreMem { mem: r44, addr: r12, value: r17 }
0x5ddf52:
                81 r17 <- Get(r18)
0x5ddf55:
                82 r46 <- Const { value: 88, size: 8 }
                83 r12 <- Arith(Sub, r12, r46)
                84 r12 <- Get(r12)
                85 r10 <- OverflowOf(r12)
                86 r2 <- CarryOf(r12)
                87 r6 <- SignOf(r12)
                88 r5 <- IsZero(r12)
                89 r47 <- Part { src: r12, offset: 0, size: 1 }
                90 r3 <- Parity(r47)
0x5ddf59:
                91 r46 <- Const { value: 64, size: 8 }
                92 r46 <- Arith(Add, r46, r12)
                93 r44 <- StoreMem { mem: r44, addr: r46, value: r14 }
0x5ddf5e:
                94 r14 <- Get(r19)
0x5ddf61:
                95 r46 <- Const { value: 32, size: 8 }
                96 r46 <- Arith(Add, r46, r12)
                97 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5ddf66:
                98 r46 <- Const { value: 0, size: 8 }
                99 r46 <- Arith(Add, r46, r12)
               100 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x5ddf6a:
               101 r46 <- Const { value: 24, size: 8 }
               102 r46 <- Arith(Add, r46, r12)
               103 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5ddf6f:
               104 r47 <- Ancestral(AncestralName("arg0"))
               105 r47 <- Void
               106 r47 <- Get(r14)
               107 r48 <- Ancestral(AncestralName("arg1"))
               108 r48 <- Void
               109 r48 <- Get(r15)
               110 r48 <- Part { src: r48, offset: 0, size: 4 }
               111 r49 <- CArg { value: r46, next_arg: None }
               112 r49 <- CArg { value: r45, next_arg: Some(r49) }
               113 r50: TypeID(340441v1) <- Const { value: 4199040, size: 8 }
               114 r49 <- Call { callee: r50, first_arg: Some(r49) }
               115 r2 <- Undefined
               116 r3 <- Undefined
               117 r4 <- Undefined
               118 r5 <- Undefined
               119 r6 <- Undefined
               120 r7 <- Undefined
               121 r8 <- Undefined
               122 r9 <- Undefined
               123 r10 <- Undefined
               124 r16 <- Part { src: r49, offset: 0, size: 8 }
0x5ddf74:
               125 r20 <- Get(r16)
0x5ddf77:
               126 r16 <- Arith(BitAnd, r16, r16)
               127 r6 <- SignOf(r16)
               128 r5 <- IsZero(r16)
               129 r47 <- Part { src: r16, offset: 0, size: 1 }
               130 r3 <- Parity(r16)
               131 r2 <- False
               132 r10 <- False
0x5ddf7a:
               133 r45 <- SetJumpCondition(r5)
               134 r45 <- Control(JmpIf(1462))
0x5ddf80:
               135 r46 <- Const { value: 0, size: 8 }
               136 r46 <- Arith(Add, r46, r12)
               137 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               138 r16 <- Get(r45)
0x5ddf84:
               139 r11 <- Get(r20)
0x5ddf87:
               140 r11 <- Arith(Sub, r11, r16)
               141 r11 <- Get(r11)
               142 r10 <- OverflowOf(r11)
               143 r2 <- CarryOf(r11)
               144 r6 <- SignOf(r11)
               145 r5 <- IsZero(r11)
               146 r47 <- Part { src: r11, offset: 0, size: 1 }
               147 r3 <- Parity(r47)
0x5ddf8a:
               148 r45 <- SetJumpCondition(r5)
               149 r45 <- Control(JmpIf(1204))
0x5ddf90:
               150 r46 <- Const { value: 24, size: 8 }
               151 r46 <- Arith(Add, r46, r12)
               152 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               153 r19 <- Get(r45)
0x5ddf95:
               154 r46 <- Const { value: 0, size: 8 }
               155 r46 <- Arith(Add, r46, r19)
               156 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               157 r47 <- Const { value: 0, size: 8 }
               158 r45 <- Arith(Sub, r45, r47)
               159 r10 <- OverflowOf(r45)
               160 r2 <- CarryOf(r45)
               161 r6 <- SignOf(r45)
               162 r5 <- IsZero(r45)
               163 r48 <- Part { src: r45, offset: 0, size: 1 }
               164 r3 <- Parity(r48)
0x5ddf99:
               165 r45 <- SetJumpCondition(r5)
               166 r45 <- Control(JmpIf(1489))
0x5ddf9f:
               167 r46 <- Const { value: 24, size: 8 }
               168 r46 <- Arith(Add, r46, r26)
               169 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               170 r21 <- Get(r45)
0x5ddfa3:
               171 r46 <- Part { src: r27, offset: 0, size: 4 }
               172 r48 <- Part { src: r27, offset: 0, size: 4 }
               173 r46 <- Arith(BitXor, r46, r48)
               174 r49 <- Part { src: r27, offset: 4, size: 4 }
               175 r27 <- Concat { lo: r46, hi: r49 }
               176 r10 <- False
               177 r2 <- False
               178 r6 <- SignOf(r46)
               179 r5 <- IsZero(r46)
               180 r50 <- Part { src: r46, offset: 0, size: 1 }
               181 r3 <- Parity(r50)
0x5ddfa6:
               182 r46 <- Const { value: 72, size: 8 }
               183 r46 <- Arith(Add, r46, r12)
               184 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5ddfab:
               185 r46 <- Const { value: 0, size: 8 }
               186 r46 <- Arith(Add, r46, r21)
               187 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
               188 r47 <- Const { value: 0, size: 1 }
               189 r45 <- Arith(Sub, r45, r47)
               190 r10 <- OverflowOf(r45)
               191 r2 <- CarryOf(r45)
               192 r6 <- SignOf(r45)
               193 r5 <- IsZero(r45)
               194 r48 <- Part { src: r45, offset: 0, size: 1 }
               195 r3 <- Parity(r48)
0x5ddfaf:
               196 r45 <- SetJumpCondition(r5)
               197 r45 <- Control(JmpIf(902))
0x5ddfc0:
               198 r46 <- Const { value: 16, size: 8 }
               199 r46 <- Arith(Add, r46, r26)
               200 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               201 r15 <- Get(r45)
0x5ddfc4:
               202 r46 <- Const { value: 16, size: 8 }
               203 r46 <- Arith(Add, r46, r12)
               204 r44 <- StoreMem { mem: r44, addr: r46, value: r15 }
0x5ddfc9:
               205 r15 <- Arith(BitAnd, r15, r15)
               206 r6 <- SignOf(r15)
               207 r5 <- IsZero(r15)
               208 r47 <- Part { src: r15, offset: 0, size: 1 }
               209 r3 <- Parity(r15)
               210 r2 <- False
               211 r10 <- False
0x5ddfcc:
               212 r45 <- SetJumpCondition(r5)
               213 r45 <- Control(JmpIf(1204))
0x5ddfd2:
               214 r24 <- Get(r21)
0x5ddfd5:
               215 r46 <- Part { src: r17, offset: 0, size: 4 }
               216 r48 <- Part { src: r17, offset: 0, size: 4 }
               217 r46 <- Arith(BitXor, r46, r48)
               218 r49 <- Part { src: r17, offset: 4, size: 4 }
               219 r17 <- Concat { lo: r46, hi: r49 }
               220 r10 <- False
               221 r2 <- False
               222 r6 <- SignOf(r46)
               223 r5 <- IsZero(r46)
               224 r50 <- Part { src: r46, offset: 0, size: 1 }
               225 r3 <- Parity(r50)
0x5ddfd7:
               226 r46 <- Part { src: r15, offset: 0, size: 4 }
               227 r47 <- Const { value: 3, size: 4 }
               228 r46 <- Arith(BitAnd, r46, r47)
               229 r48 <- Part { src: r15, offset: 4, size: 4 }
               230 r15 <- Concat { lo: r46, hi: r48 }
               231 r10 <- False
               232 r2 <- False
               233 r6 <- SignOf(r46)
               234 r5 <- IsZero(r46)
               235 r49 <- Part { src: r46, offset: 0, size: 1 }
               236 r3 <- Parity(r49)
0x5ddfda:
               237 r45 <- SetJumpCondition(r5)
               238 r45 <- Control(JmpIf(453))
0x5ddfe0:
               239 r46 <- Const { value: 1, size: 8 }
               240 r15 <- Arith(Sub, r15, r46)
               241 r10 <- OverflowOf(r15)
               242 r2 <- CarryOf(r15)
               243 r6 <- SignOf(r15)
               244 r5 <- IsZero(r15)
               245 r47 <- Part { src: r15, offset: 0, size: 1 }
               246 r3 <- Parity(r47)
0x5ddfe4:
               247 r45 <- SetJumpCondition(r5)
               248 r45 <- Control(JmpIf(377))
0x5ddfe6:
               249 r46 <- Const { value: 2, size: 8 }
               250 r15 <- Arith(Sub, r15, r46)
               251 r10 <- OverflowOf(r15)
               252 r2 <- CarryOf(r15)
               253 r6 <- SignOf(r15)
               254 r5 <- IsZero(r15)
               255 r47 <- Part { src: r15, offset: 0, size: 1 }
               256 r3 <- Parity(r47)
0x5ddfea:
               257 r45 <- SetJumpCondition(r5)
               258 r45 <- Control(JmpIf(314))
0x5ddfec:
               259 r46 <- Const { value: 8, size: 8 }
               260 r46 <- Arith(Add, r46, r21)
               261 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               262 r22 <- Get(r45)
0x5ddff0:
               263 r46 <- Const { value: 48, size: 8 }
               264 r46 <- Arith(Add, r46, r12)
               265 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5ddff5:
               266 r25 <- Get(r21)
0x5ddff8:
               267 r46 <- Const { value: 40, size: 8 }
               268 r46 <- Arith(Add, r46, r12)
               269 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5ddffd:
               270 r14 <- Get(r22)
0x5de000:
               271 r46 <- Const { value: 8, size: 8 }
               272 r46 <- Arith(Add, r46, r12)
               273 r44 <- StoreMem { mem: r44, addr: r46, value: r22 }
0x5de005:
               274 r46 <- Ancestral(AncestralName("arg0"))
               275 r46 <- Void
               276 r46 <- Get(r14)
               277 r47 <- CArg { value: r45, next_arg: None }
               278 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               279 r47 <- Call { callee: r48, first_arg: Some(r47) }
               280 r2 <- Undefined
               281 r3 <- Undefined
               282 r4 <- Undefined
               283 r5 <- Undefined
               284 r6 <- Undefined
               285 r7 <- Undefined
               286 r8 <- Undefined
               287 r9 <- Undefined
               288 r10 <- Undefined
               289 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de00a:
               290 r46 <- Const { value: 8, size: 8 }
               291 r46 <- Arith(Add, r46, r12)
               292 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               293 r15 <- Get(r45)
0x5de00f:
               294 r46 <- Const { value: 48, size: 8 }
               295 r46 <- Arith(Add, r46, r12)
               296 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               297 r20 <- Get(r45)
0x5de014:
               298 r14 <- Get(r24)
0x5de017:
               299 r16 <- Arith(Sub, r16, r11)
               300 r10 <- OverflowOf(r16)
               301 r2 <- CarryOf(r16)
               302 r6 <- SignOf(r16)
               303 r5 <- IsZero(r16)
               304 r47 <- Part { src: r16, offset: 0, size: 1 }
               305 r3 <- Parity(r47)
0x5de01a:
               306 r45 <- SetJumpCondition(r5)
               307 r45 <- Control(JmpIf(1409))
0x5de020:
               308 r45 <- Const { value: 1, size: 4 }
               309 r46 <- Part { src: r17, offset: 4, size: 4 }
               310 r17 <- Concat { lo: r45, hi: r46 }
0x5de025:
               311 r45 <- Const { value: 40, size: 8 }
               312 r45 <- Arith(Add, r45, r14)
               313 r24 <- Get(r45)
0x5de029:
               314 r46 <- Const { value: 8, size: 8 }
               315 r46 <- Arith(Add, r46, r24)
               316 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               317 r23 <- Get(r45)
0x5de02e:
               318 r46 <- Const { value: 40, size: 8 }
               319 r46 <- Arith(Add, r46, r12)
               320 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de033:
               321 r25 <- Get(r24)
0x5de036:
               322 r14 <- Get(r23)
0x5de039:
               323 r46 <- Const { value: 8, size: 8 }
               324 r46 <- Arith(Add, r46, r12)
               325 r44 <- StoreMem { mem: r44, addr: r46, value: r23 }
0x5de03e:
               326 r46 <- Ancestral(AncestralName("arg0"))
               327 r46 <- Void
               328 r46 <- Get(r14)
               329 r47 <- CArg { value: r45, next_arg: None }
               330 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               331 r47 <- Call { callee: r48, first_arg: Some(r47) }
               332 r2 <- Undefined
               333 r3 <- Undefined
               334 r4 <- Undefined
               335 r5 <- Undefined
               336 r6 <- Undefined
               337 r7 <- Undefined
               338 r8 <- Undefined
               339 r9 <- Undefined
               340 r10 <- Undefined
               341 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de043:
               342 r46 <- Const { value: 8, size: 8 }
               343 r46 <- Arith(Add, r46, r12)
               344 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               345 r15 <- Get(r45)
0x5de048:
               346 r46 <- Const { value: 40, size: 8 }
               347 r46 <- Arith(Add, r46, r12)
               348 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               349 r20 <- Get(r45)
0x5de04d:
               350 r16 <- Arith(Sub, r16, r11)
               351 r10 <- OverflowOf(r16)
               352 r2 <- CarryOf(r16)
               353 r6 <- SignOf(r16)
               354 r5 <- IsZero(r16)
               355 r47 <- Part { src: r16, offset: 0, size: 1 }
               356 r3 <- Parity(r47)
0x5de050:
               357 r45 <- SetJumpCondition(r5)
               358 r45 <- Control(JmpIf(1360))
0x5de056:
               359 r46 <- Const { value: 1, size: 8 }
               360 r17 <- Arith(Add, r17, r46)
               361 r17 <- Get(r17)
               362 r10 <- OverflowOf(r17)
               363 r2 <- CarryOf(r17)
               364 r6 <- SignOf(r17)
               365 r5 <- IsZero(r17)
               366 r47 <- Part { src: r17, offset: 0, size: 1 }
               367 r3 <- Parity(r47)
0x5de05a:
               368 r46 <- Const { value: 40, size: 8 }
               369 r24 <- Arith(Add, r24, r46)
               370 r24 <- Get(r24)
               371 r10 <- OverflowOf(r24)
               372 r2 <- CarryOf(r24)
               373 r6 <- SignOf(r24)
               374 r5 <- IsZero(r24)
               375 r47 <- Part { src: r24, offset: 0, size: 1 }
               376 r3 <- Parity(r47)
0x5de05e:
               377 r46 <- Const { value: 8, size: 8 }
               378 r46 <- Arith(Add, r46, r24)
               379 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               380 r16 <- Get(r45)
0x5de063:
               381 r46 <- Const { value: 40, size: 8 }
               382 r46 <- Arith(Add, r46, r12)
               383 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de068:
               384 r25 <- Get(r24)
0x5de06b:
               385 r14 <- Get(r16)
0x5de06e:
               386 r46 <- Const { value: 8, size: 8 }
               387 r46 <- Arith(Add, r46, r12)
               388 r44 <- StoreMem { mem: r44, addr: r46, value: r16 }
0x5de073:
               389 r46 <- Ancestral(AncestralName("arg0"))
               390 r46 <- Void
               391 r46 <- Get(r14)
               392 r47 <- CArg { value: r45, next_arg: None }
               393 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               394 r47 <- Call { callee: r48, first_arg: Some(r47) }
               395 r2 <- Undefined
               396 r3 <- Undefined
               397 r4 <- Undefined
               398 r5 <- Undefined
               399 r6 <- Undefined
               400 r7 <- Undefined
               401 r8 <- Undefined
               402 r9 <- Undefined
               403 r10 <- Undefined
               404 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de078:
               405 r46 <- Const { value: 8, size: 8 }
               406 r46 <- Arith(Add, r46, r12)
               407 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               408 r15 <- Get(r45)
0x5de07d:
               409 r46 <- Const { value: 40, size: 8 }
               410 r46 <- Arith(Add, r46, r12)
               411 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               412 r20 <- Get(r45)
0x5de082:
               413 r16 <- Arith(Sub, r16, r11)
               414 r10 <- OverflowOf(r16)
               415 r2 <- CarryOf(r16)
               416 r6 <- SignOf(r16)
               417 r5 <- IsZero(r16)
               418 r47 <- Part { src: r16, offset: 0, size: 1 }
               419 r3 <- Parity(r47)
0x5de085:
               420 r45 <- SetJumpCondition(r5)
               421 r45 <- Control(JmpIf(1311))
0x5de08b:
               422 r46 <- Const { value: 16, size: 8 }
               423 r46 <- Arith(Add, r46, r12)
               424 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               425 r19 <- Get(r45)
0x5de090:
               426 r46 <- Const { value: 1, size: 8 }
               427 r17 <- Arith(Add, r17, r46)
               428 r17 <- Get(r17)
               429 r10 <- OverflowOf(r17)
               430 r2 <- CarryOf(r17)
               431 r6 <- SignOf(r17)
               432 r5 <- IsZero(r17)
               433 r47 <- Part { src: r17, offset: 0, size: 1 }
               434 r3 <- Parity(r47)
0x5de094:
               435 r46 <- Const { value: 40, size: 8 }
               436 r24 <- Arith(Add, r24, r46)
               437 r24 <- Get(r24)
               438 r10 <- OverflowOf(r24)
               439 r2 <- CarryOf(r24)
               440 r6 <- SignOf(r24)
               441 r5 <- IsZero(r24)
               442 r47 <- Part { src: r24, offset: 0, size: 1 }
               443 r3 <- Parity(r47)
0x5de098:
               444 r17 <- Arith(Sub, r17, r19)
               445 r10 <- OverflowOf(r17)
               446 r2 <- CarryOf(r17)
               447 r6 <- SignOf(r17)
               448 r5 <- IsZero(r17)
               449 r47 <- Part { src: r17, offset: 0, size: 1 }
               450 r3 <- Parity(r47)
0x5de09b:
               451 r45 <- SetJumpCondition(r5)
               452 r45 <- Control(JmpIf(1204))
0x5de0a1:
               453 r46 <- Const { value: 56, size: 8 }
               454 r46 <- Arith(Add, r46, r12)
               455 r44 <- StoreMem { mem: r44, addr: r46, value: r26 }
0x5de0a6:
               456 r26 <- Get(r24)
0x5de0a9:
               457 r46 <- Const { value: 40, size: 8 }
               458 r46 <- Arith(Add, r46, r12)
               459 r44 <- StoreMem { mem: r44, addr: r46, value: r27 }
0x5de0ae:
               460 r46 <- Const { value: 48, size: 8 }
               461 r46 <- Arith(Add, r46, r12)
               462 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de0b3:
               463 r45 <- Control(Jmp(617))
0x5de0c0:
               464 r46 <- Const { value: 48, size: 8 }
               465 r46 <- Arith(Add, r46, r26)
               466 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               467 r21 <- Get(r45)
0x5de0c4:
               468 r45 <- Const { value: 40, size: 8 }
               469 r45 <- Arith(Add, r45, r26)
               470 r27 <- Get(r45)
0x5de0c8:
               471 r45 <- Const { value: 1, size: 8 }
               472 r45 <- Arith(Add, r45, r17)
               473 r25 <- Get(r45)
0x5de0cc:
               474 r17 <- Get(r25)
0x5de0cf:
               475 r26 <- Get(r27)
0x5de0d2:
               476 r24 <- Get(r27)
0x5de0d5:
               477 r14 <- Get(r21)
0x5de0d8:
               478 r46 <- Const { value: 8, size: 8 }
               479 r46 <- Arith(Add, r46, r12)
               480 r44 <- StoreMem { mem: r44, addr: r46, value: r21 }
0x5de0dd:
               481 r46 <- Ancestral(AncestralName("arg0"))
               482 r46 <- Void
               483 r46 <- Get(r14)
               484 r47 <- CArg { value: r45, next_arg: None }
               485 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               486 r47 <- Call { callee: r48, first_arg: Some(r47) }
               487 r2 <- Undefined
               488 r3 <- Undefined
               489 r4 <- Undefined
               490 r5 <- Undefined
               491 r6 <- Undefined
               492 r7 <- Undefined
               493 r8 <- Undefined
               494 r9 <- Undefined
               495 r10 <- Undefined
               496 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de0e2:
               497 r46 <- Const { value: 8, size: 8 }
               498 r46 <- Arith(Add, r46, r12)
               499 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               500 r15 <- Get(r45)
0x5de0e7:
               501 r16 <- Arith(Sub, r16, r11)
               502 r10 <- OverflowOf(r16)
               503 r2 <- CarryOf(r16)
               504 r6 <- SignOf(r16)
               505 r5 <- IsZero(r16)
               506 r47 <- Part { src: r16, offset: 0, size: 1 }
               507 r3 <- Parity(r47)
0x5de0ea:
               508 r45 <- SetJumpCondition(r5)
               509 r45 <- Control(JmpIf(705))
0x5de0f0:
               510 r46 <- Const { value: 48, size: 8 }
               511 r46 <- Arith(Add, r46, r27)
               512 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               513 r18 <- Get(r45)
0x5de0f4:
               514 r45 <- Const { value: 40, size: 8 }
               515 r45 <- Arith(Add, r45, r27)
               516 r26 <- Get(r45)
0x5de0f8:
               517 r45 <- Const { value: 1, size: 8 }
               518 r45 <- Arith(Add, r45, r25)
               519 r17 <- Get(r45)
0x5de0fc:
               520 r24 <- Get(r26)
0x5de0ff:
               521 r14 <- Get(r18)
0x5de102:
               522 r46 <- Const { value: 8, size: 8 }
               523 r46 <- Arith(Add, r46, r12)
               524 r44 <- StoreMem { mem: r44, addr: r46, value: r18 }
0x5de107:
               525 r46 <- Ancestral(AncestralName("arg0"))
               526 r46 <- Void
               527 r46 <- Get(r14)
               528 r47 <- CArg { value: r45, next_arg: None }
               529 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               530 r47 <- Call { callee: r48, first_arg: Some(r47) }
               531 r2 <- Undefined
               532 r3 <- Undefined
               533 r4 <- Undefined
               534 r5 <- Undefined
               535 r6 <- Undefined
               536 r7 <- Undefined
               537 r8 <- Undefined
               538 r9 <- Undefined
               539 r10 <- Undefined
               540 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de10c:
               541 r46 <- Const { value: 8, size: 8 }
               542 r46 <- Arith(Add, r46, r12)
               543 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               544 r15 <- Get(r45)
0x5de111:
               545 r16 <- Arith(Sub, r16, r11)
               546 r10 <- OverflowOf(r16)
               547 r2 <- CarryOf(r16)
               548 r6 <- SignOf(r16)
               549 r5 <- IsZero(r16)
               550 r47 <- Part { src: r16, offset: 0, size: 1 }
               551 r3 <- Parity(r47)
0x5de114:
               552 r45 <- SetJumpCondition(r5)
               553 r45 <- Control(JmpIf(1120))
0x5de11a:
               554 r46 <- Const { value: 88, size: 8 }
               555 r46 <- Arith(Add, r46, r27)
               556 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               557 r15 <- Get(r45)
0x5de11e:
               558 r45 <- Const { value: 80, size: 8 }
               559 r45 <- Arith(Add, r45, r27)
               560 r26 <- Get(r45)
0x5de122:
               561 r45 <- Const { value: 2, size: 8 }
               562 r45 <- Arith(Add, r45, r25)
               563 r17 <- Get(r45)
0x5de126:
               564 r24 <- Get(r26)
0x5de129:
               565 r14 <- Get(r15)
0x5de12c:
               566 r46 <- Const { value: 8, size: 8 }
               567 r46 <- Arith(Add, r46, r12)
               568 r44 <- StoreMem { mem: r44, addr: r46, value: r15 }
0x5de131:
               569 r46 <- Ancestral(AncestralName("arg0"))
               570 r46 <- Void
               571 r46 <- Get(r14)
               572 r47 <- CArg { value: r45, next_arg: None }
               573 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               574 r47 <- Call { callee: r48, first_arg: Some(r47) }
               575 r2 <- Undefined
               576 r3 <- Undefined
               577 r4 <- Undefined
               578 r5 <- Undefined
               579 r6 <- Undefined
               580 r7 <- Undefined
               581 r8 <- Undefined
               582 r9 <- Undefined
               583 r10 <- Undefined
               584 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de136:
               585 r46 <- Const { value: 8, size: 8 }
               586 r46 <- Arith(Add, r46, r12)
               587 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               588 r15 <- Get(r45)
0x5de13b:
               589 r16 <- Arith(Sub, r16, r11)
               590 r10 <- OverflowOf(r16)
               591 r2 <- CarryOf(r16)
               592 r6 <- SignOf(r16)
               593 r5 <- IsZero(r16)
               594 r47 <- Part { src: r16, offset: 0, size: 1 }
               595 r3 <- Parity(r47)
0x5de13e:
               596 r45 <- SetJumpCondition(r5)
               597 r45 <- Control(JmpIf(1162))
0x5de144:
               598 r46 <- Const { value: 16, size: 8 }
               599 r46 <- Arith(Add, r46, r12)
               600 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               601 r22 <- Get(r45)
0x5de149:
               602 r45 <- Const { value: 3, size: 8 }
               603 r45 <- Arith(Add, r45, r25)
               604 r17 <- Get(r45)
0x5de14d:
               605 r45 <- Const { value: 120, size: 8 }
               606 r45 <- Arith(Add, r45, r27)
               607 r26 <- Get(r45)
0x5de151:
               608 r17 <- Arith(Sub, r17, r22)
               609 r10 <- OverflowOf(r17)
               610 r2 <- CarryOf(r17)
               611 r6 <- SignOf(r17)
               612 r5 <- IsZero(r17)
               613 r47 <- Part { src: r17, offset: 0, size: 1 }
               614 r3 <- Parity(r47)
0x5de154:
               615 r45 <- SetJumpCondition(r5)
               616 r45 <- Control(JmpIf(1204))
0x5de15a:
               617 r46 <- Const { value: 8, size: 8 }
               618 r46 <- Arith(Add, r46, r26)
               619 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               620 r27 <- Get(r45)
0x5de15e:
               621 r24 <- Get(r26)
0x5de161:
               622 r14 <- Get(r27)
0x5de164:
               623 r46 <- Ancestral(AncestralName("arg0"))
               624 r46 <- Void
               625 r46 <- Get(r14)
               626 r47 <- CArg { value: r45, next_arg: None }
               627 r48: TypeID(340439v1) <- Const { value: 4199136, size: 8 }
               628 r47 <- Call { callee: r48, first_arg: Some(r47) }
               629 r2 <- Undefined
               630 r3 <- Undefined
               631 r4 <- Undefined
               632 r5 <- Undefined
               633 r6 <- Undefined
               634 r7 <- Undefined
               635 r8 <- Undefined
               636 r9 <- Undefined
               637 r10 <- Undefined
               638 r16 <- Part { src: r47, offset: 0, size: 8 }
0x5de169:
               639 r16 <- Arith(Sub, r16, r11)
               640 r10 <- OverflowOf(r16)
               641 r2 <- CarryOf(r16)
               642 r6 <- SignOf(r16)
               643 r5 <- IsZero(r16)
               644 r47 <- Part { src: r16, offset: 0, size: 1 }
               645 r3 <- Parity(r47)
0x5de16c:
               646 r45 <- Not(r5)
               647 r46 <- SetJumpCondition(r45)
               648 r46 <- Control(JmpIf(464))
0x5de172:
               649 r46 <- Const { value: 0, size: 8 }
               650 r46 <- Arith(Add, r46, r12)
               651 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               652 r14 <- Get(r45)
0x5de176:
               653 r19 <- Get(r11)
0x5de179:
               654 r15 <- Get(r27)
0x5de17c:
               655 r48 <- Ancestral(AncestralName("arg0"))
               656 r48 <- Void
               657 r48 <- Get(r14)
               658 r49 <- Ancestral(AncestralName("arg1"))
               659 r49 <- Void
               660 r49 <- Get(r15)
               661 r50 <- Ancestral(AncestralName("arg2"))
               662 r50 <- Void
               663 r50 <- Get(r19)
               664 r51 <- CArg { value: r47, next_arg: None }
               665 r51 <- CArg { value: r46, next_arg: Some(r51) }
               666 r51 <- CArg { value: r45, next_arg: Some(r51) }
               667 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
               668 r51 <- Call { callee: r52, first_arg: Some(r51) }
               669 r2 <- Undefined
               670 r3 <- Undefined
               671 r4 <- Undefined
               672 r5 <- Undefined
               673 r6 <- Undefined
               674 r7 <- Undefined
               675 r8 <- Undefined
               676 r9 <- Undefined
               677 r10 <- Undefined
               678 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de181:
               679 r46 <- Part { src: r16, offset: 0, size: 4 }
               680 r48 <- Part { src: r16, offset: 0, size: 4 }
               681 r46 <- Arith(BitAnd, r46, r48)
               682 r6 <- SignOf(r46)
               683 r5 <- IsZero(r46)
               684 r49 <- Part { src: r46, offset: 0, size: 1 }
               685 r3 <- Parity(r46)
               686 r2 <- False
               687 r10 <- False
0x5de183:
               688 r45 <- Not(r5)
               689 r46 <- SetJumpCondition(r45)
               690 r46 <- Control(JmpIf(464))
0x5de189:
               691 r25 <- Get(r26)
0x5de18c:
               692 r46 <- Const { value: 40, size: 8 }
               693 r46 <- Arith(Add, r46, r12)
               694 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               695 r27 <- Get(r45)
0x5de191:
               696 r46 <- Const { value: 48, size: 8 }
               697 r46 <- Arith(Add, r46, r12)
               698 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               699 r20 <- Get(r45)
0x5de196:
               700 r46 <- Const { value: 56, size: 8 }
               701 r46 <- Arith(Add, r46, r12)
               702 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               703 r26 <- Get(r45)
0x5de19b:
               704 r45 <- Control(Jmp(760))
0x5de1a0:
               705 r46 <- Const { value: 0, size: 8 }
               706 r46 <- Arith(Add, r46, r12)
               707 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               708 r14 <- Get(r45)
0x5de1a4:
               709 r19 <- Get(r11)
0x5de1a7:
               710 r48 <- Ancestral(AncestralName("arg0"))
               711 r48 <- Void
               712 r48 <- Get(r14)
               713 r49 <- Ancestral(AncestralName("arg1"))
               714 r49 <- Void
               715 r49 <- Get(r15)
               716 r50 <- Ancestral(AncestralName("arg2"))
               717 r50 <- Void
               718 r50 <- Get(r19)
               719 r51 <- CArg { value: r47, next_arg: None }
               720 r51 <- CArg { value: r46, next_arg: Some(r51) }
               721 r51 <- CArg { value: r45, next_arg: Some(r51) }
               722 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
               723 r51 <- Call { callee: r52, first_arg: Some(r51) }
               724 r2 <- Undefined
               725 r3 <- Undefined
               726 r4 <- Undefined
               727 r5 <- Undefined
               728 r6 <- Undefined
               729 r7 <- Undefined
               730 r8 <- Undefined
               731 r9 <- Undefined
               732 r10 <- Undefined
               733 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de1ac:
               734 r46 <- Part { src: r16, offset: 0, size: 4 }
               735 r48 <- Part { src: r16, offset: 0, size: 4 }
               736 r46 <- Arith(BitAnd, r46, r48)
               737 r6 <- SignOf(r46)
               738 r5 <- IsZero(r46)
               739 r49 <- Part { src: r46, offset: 0, size: 1 }
               740 r3 <- Parity(r46)
               741 r2 <- False
               742 r10 <- False
0x5de1ae:
               743 r45 <- Not(r5)
               744 r46 <- SetJumpCondition(r45)
               745 r46 <- Control(JmpIf(510))
0x5de1b4:
               746 r25 <- Get(r24)
0x5de1b7:
               747 r46 <- Const { value: 40, size: 8 }
               748 r46 <- Arith(Add, r46, r12)
               749 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               750 r27 <- Get(r45)
0x5de1bc:
               751 r24 <- Get(r26)
0x5de1bf:
               752 r46 <- Const { value: 48, size: 8 }
               753 r46 <- Arith(Add, r46, r12)
               754 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               755 r20 <- Get(r45)
0x5de1c4:
               756 r46 <- Const { value: 56, size: 8 }
               757 r46 <- Arith(Add, r46, r12)
               758 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               759 r26 <- Get(r45)
0x5de1c9:
               760 r46 <- Const { value: 32, size: 8 }
               761 r46 <- Arith(Add, r46, r12)
               762 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               763 r11 <- Get(r45)
0x5de1ce:
               764 r46 <- Const { value: 0, size: 8 }
               765 r46 <- Arith(Add, r46, r11)
               766 r47 <- ArithK(Mul, r27, 8)
               767 r46 <- Arith(Add, r46, r47)
               768 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5de1d3:
               769 r24 <- Arith(Sub, r24, r26)
               770 r10 <- OverflowOf(r24)
               771 r2 <- CarryOf(r24)
               772 r6 <- SignOf(r24)
               773 r5 <- IsZero(r24)
               774 r47 <- Part { src: r24, offset: 0, size: 1 }
               775 r3 <- Parity(r47)
0x5de1d6:
               776 r45 <- SetJumpCondition(r5)
               777 r45 <- Control(JmpIf(1204))
0x5de1dc:
               778 r46 <- Const { value: 32, size: 8 }
               779 r46 <- Arith(Add, r46, r25)
               780 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               781 r47 <- Const { value: 0, size: 8 }
               782 r45 <- Arith(Sub, r45, r47)
               783 r10 <- OverflowOf(r45)
               784 r2 <- CarryOf(r45)
               785 r6 <- SignOf(r45)
               786 r5 <- IsZero(r45)
               787 r48 <- Part { src: r45, offset: 0, size: 1 }
               788 r3 <- Parity(r48)
0x5de1e1:
               789 r45 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
               790 r45 <- Not(r5)
               791 r46 <- SetJumpCondition(r45)
               792 r46 <- Control(JmpIf(1044))
0x5de1eb:
               793 r46 <- Part { src: r14, offset: 0, size: 1 }
               794 r48 <- Part { src: r14, offset: 0, size: 1 }
               795 r46 <- Arith(BitAnd, r46, r48)
               796 r6 <- SignOf(r46)
               797 r5 <- IsZero(r46)
               798 r49 <- Part { src: r46, offset: 0, size: 1 }
               799 r3 <- Parity(r46)
               800 r2 <- False
               801 r10 <- False
0x5de1ee:
               802 r45 <- SetJumpCondition(r5)
               803 r45 <- Control(JmpIf(1484))
0x5de1f4:
               804 r45 <- Const { value: 1, size: 8 }
               805 r45 <- Arith(Add, r45, r20)
               806 r14 <- Get(r45)
0x5de1f8:
               807 r45 <- Const { value: 46, size: 4 }
               808 r46 <- Part { src: r15, offset: 4, size: 4 }
               809 r15 <- Concat { lo: r45, hi: r46 }
0x5de1fd:
               810 r46 <- Const { value: 0, size: 8 }
               811 r46 <- Arith(Add, r46, r12)
               812 r44 <- StoreMem { mem: r44, addr: r46, value: r14 }
0x5de201:
               813 r47 <- Ancestral(AncestralName("arg0"))
               814 r47 <- Void
               815 r47 <- Get(r14)
               816 r48 <- Ancestral(AncestralName("arg1"))
               817 r48 <- Void
               818 r48 <- Get(r15)
               819 r48 <- Part { src: r48, offset: 0, size: 4 }
               820 r49 <- CArg { value: r46, next_arg: None }
               821 r49 <- CArg { value: r45, next_arg: Some(r49) }
               822 r50: TypeID(340441v1) <- Const { value: 4199040, size: 8 }
               823 r49 <- Call { callee: r50, first_arg: Some(r49) }
               824 r2 <- Undefined
               825 r3 <- Undefined
               826 r4 <- Undefined
               827 r5 <- Undefined
               828 r6 <- Undefined
               829 r7 <- Undefined
               830 r8 <- Undefined
               831 r9 <- Undefined
               832 r10 <- Undefined
               833 r16 <- Part { src: r49, offset: 0, size: 8 }
0x5de206:
               834 r20 <- Get(r16)
0x5de209:
               835 r16 <- Arith(BitAnd, r16, r16)
               836 r6 <- SignOf(r16)
               837 r5 <- IsZero(r16)
               838 r47 <- Part { src: r16, offset: 0, size: 1 }
               839 r3 <- Parity(r16)
               840 r2 <- False
               841 r10 <- False
0x5de20c:
               842 r45 <- SetJumpCondition(r5)
               843 r45 <- Control(JmpIf(1236))
0x5de212:
               844 r11 <- Get(r16)
0x5de215:
               845 r46 <- Const { value: 0, size: 8 }
               846 r46 <- Arith(Add, r46, r12)
               847 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               848 r23 <- Get(r45)
0x5de219:
               849 r46 <- Const { value: 24, size: 8 }
               850 r46 <- Arith(Add, r46, r12)
               851 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               852 r16 <- Get(r45)
0x5de21e:
               853 r46 <- Const { value: 1, size: 8 }
               854 r27 <- Arith(Add, r27, r46)
               855 r27 <- Get(r27)
               856 r10 <- OverflowOf(r27)
               857 r2 <- CarryOf(r27)
               858 r6 <- SignOf(r27)
               859 r5 <- IsZero(r27)
               860 r47 <- Part { src: r27, offset: 0, size: 1 }
               861 r3 <- Parity(r47)
0x5de222:
               862 r11 <- Arith(Sub, r11, r23)
               863 r11 <- Get(r11)
               864 r10 <- OverflowOf(r11)
               865 r2 <- CarryOf(r11)
               866 r6 <- SignOf(r11)
               867 r5 <- IsZero(r11)
               868 r47 <- Part { src: r11, offset: 0, size: 1 }
               869 r3 <- Parity(r47)
0x5de225:
               870 r47 <- Const { value: 0, size: 8 }
               871 r47 <- Arith(Add, r47, r16)
               872 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
               873 r27 <- Arith(Sub, r27, r46)
               874 r10 <- OverflowOf(r27)
               875 r2 <- CarryOf(r27)
               876 r6 <- SignOf(r27)
               877 r5 <- IsZero(r27)
               878 r48 <- Part { src: r27, offset: 0, size: 1 }
               879 r3 <- Parity(r48)
0x5de228:
               880 r45 <- Not(r2)
               881 r46 <- SetJumpCondition(r45)
               882 r46 <- Control(JmpIf(1283))
0x5de22e:
               883 r26 <- Get(r25)
0x5de231:
               884 r46 <- Const { value: 24, size: 8 }
               885 r46 <- Arith(Add, r46, r26)
               886 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               887 r21 <- Get(r45)
0x5de235:
               888 r46 <- Const { value: 0, size: 8 }
               889 r46 <- Arith(Add, r46, r21)
               890 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
               891 r47 <- Const { value: 0, size: 1 }
               892 r45 <- Arith(Sub, r45, r47)
               893 r10 <- OverflowOf(r45)
               894 r2 <- CarryOf(r45)
               895 r6 <- SignOf(r45)
               896 r5 <- IsZero(r45)
               897 r48 <- Part { src: r45, offset: 0, size: 1 }
               898 r3 <- Parity(r48)
0x5de239:
               899 r45 <- Not(r5)
               900 r46 <- SetJumpCondition(r45)
               901 r46 <- Control(JmpIf(198))
0x5de23f:
               902 r46 <- Const { value: 0, size: 8 }
               903 r46 <- Arith(Add, r46, r12)
               904 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               905 r14 <- Get(r45)
0x5de243:
               906 r46 <- Part { src: r15, offset: 0, size: 4 }
               907 r48 <- Part { src: r15, offset: 0, size: 4 }
               908 r46 <- Arith(BitXor, r46, r48)
               909 r49 <- Part { src: r15, offset: 4, size: 4 }
               910 r15 <- Concat { lo: r46, hi: r49 }
               911 r10 <- False
               912 r2 <- False
               913 r6 <- SignOf(r46)
               914 r5 <- IsZero(r46)
               915 r50 <- Part { src: r46, offset: 0, size: 1 }
               916 r3 <- Parity(r50)
0x5de245:
               917 r45 <- Const { value: 10, size: 4 }
               918 r46 <- Part { src: r19, offset: 4, size: 4 }
               919 r19 <- Concat { lo: r45, hi: r46 }
0x5de24a:
               920 r46 <- Const { value: 8, size: 8 }
               921 r46 <- Arith(Add, r46, r12)
               922 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de24f:
               923 r48 <- CArg { value: r47, next_arg: None }
               924 r48 <- CArg { value: r46, next_arg: Some(r48) }
               925 r48 <- CArg { value: r45, next_arg: Some(r48) }
               926 r49: TypeID(340431v1) <- Const { value: 6451424, size: 8 }
               927 r48 <- Call { callee: r49, first_arg: Some(r48) }
               928 r2 <- Undefined
               929 r3 <- Undefined
               930 r4 <- Undefined
               931 r5 <- Undefined
               932 r6 <- Undefined
               933 r7 <- Undefined
               934 r8 <- Undefined
               935 r9 <- Undefined
               936 r10 <- Undefined
               937 r16 <- Part { src: r48, offset: 0, size: 8 }
0x5de254:
               938 r46 <- Const { value: 8, size: 8 }
               939 r46 <- Arith(Add, r46, r12)
               940 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               941 r20 <- Get(r45)
0x5de259:
               942 r46 <- Const { value: -1, size: 8 }
               943 r16 <- Arith(Sub, r16, r46)
               944 r10 <- OverflowOf(r16)
               945 r2 <- CarryOf(r16)
               946 r6 <- SignOf(r16)
               947 r5 <- IsZero(r16)
               948 r47 <- Part { src: r16, offset: 0, size: 1 }
               949 r3 <- Parity(r47)
0x5de25d:
               950 r17 <- Get(r16)
0x5de260:
               951 r45 <- SetJumpCondition(r5)
               952 r45 <- Control(JmpIf(1204))
0x5de266:
               953 r46 <- Const { value: 24, size: 8 }
               954 r46 <- Arith(Add, r46, r26)
               955 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               956 r11 <- Get(r45)
0x5de26a:
               957 r46 <- Const { value: 0, size: 8 }
               958 r46 <- Arith(Add, r46, r12)
               959 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de26e:
               960 r46 <- Const { value: 0, size: 8 }
               961 r46 <- Arith(Add, r46, r11)
               962 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
               963 r47 <- Const { value: 0, size: 1 }
               964 r45 <- Arith(Sub, r45, r47)
               965 r10 <- OverflowOf(r45)
               966 r2 <- CarryOf(r45)
               967 r6 <- SignOf(r45)
               968 r5 <- IsZero(r45)
               969 r48 <- Part { src: r45, offset: 0, size: 1 }
               970 r3 <- Parity(r48)
0x5de272:
               971 r45 <- Not(r5)
               972 r46 <- SetJumpCondition(r45)
               973 r46 <- Control(JmpExtIf(4206915))
0x5de278:
               974 r46 <- Const { value: 24, size: 8 }
               975 r46 <- Arith(Add, r46, r12)
               976 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               977 r18 <- Get(r45)
0x5de27d:
               978 r46 <- Const { value: 32, size: 8 }
               979 r46 <- Arith(Add, r46, r12)
               980 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               981 r26 <- Get(r45)
0x5de282:
               982 r46 <- Const { value: 64, size: 8 }
               983 r46 <- Arith(Add, r46, r12)
               984 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               985 r14 <- Get(r45)
0x5de287:
               986 r46 <- Const { value: 0, size: 8 }
               987 r46 <- Arith(Add, r46, r18)
               988 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               989 r19 <- Get(r45)
0x5de28a:
               990 r15 <- Get(r26)
0x5de28d:
               991 r18 <- Get(r16)
0x5de290:
               992 r45 <- CArg { value: r18, next_arg: None }
               993 r45 <- CArg { value: r19, next_arg: Some(r45) }
               994 r45 <- CArg { value: r15, next_arg: Some(r45) }
               995 r45 <- CArg { value: r14, next_arg: Some(r45) }
               996 r47 <- Const { value: 8, size: 8 }
               997 r47 <- Arith(Add, r47, r11)
               998 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
               999 r46 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1000 r45 <- Call { callee: r46, first_arg: Some(r45) }
              1001 r2 <- Undefined
              1002 r3 <- Undefined
              1003 r4 <- Undefined
              1004 r5 <- Undefined
              1005 r6 <- Undefined
              1006 r7 <- Undefined
              1007 r8 <- Undefined
              1008 r9 <- Undefined
              1009 r10 <- Undefined
              1010 r45 <- Get(r16)
0x5de293:
              1011 r25 <- Get(r16)
0x5de296:
              1012 r16 <- Arith(BitAnd, r16, r16)
              1013 r6 <- SignOf(r16)
              1014 r5 <- IsZero(r16)
              1015 r47 <- Part { src: r16, offset: 0, size: 1 }
              1016 r3 <- Parity(r16)
              1017 r2 <- False
              1018 r10 <- False
0x5de299:
              1019 r45 <- SetJumpCondition(r5)
              1020 r45 <- Control(JmpIf(1204))
0x5de29f:
              1021 r46 <- Const { value: 0, size: 8 }
              1022 r46 <- Arith(Add, r46, r12)
              1023 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1024 r20 <- Get(r45)
0x5de2a3:
              1025 r46 <- Const { value: 32, size: 8 }
              1026 r46 <- Arith(Add, r46, r25)
              1027 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1028 r47 <- Const { value: 0, size: 8 }
              1029 r45 <- Arith(Sub, r45, r47)
              1030 r10 <- OverflowOf(r45)
              1031 r2 <- CarryOf(r45)
              1032 r6 <- SignOf(r45)
              1033 r5 <- IsZero(r45)
              1034 r48 <- Part { src: r45, offset: 0, size: 1 }
              1035 r3 <- Parity(r48)
0x5de2a8:
              1036 r46 <- Const { value: 0, size: 8 }
              1037 r46 <- Arith(Add, r46, r26)
              1038 r47 <- ArithK(Mul, r27, 8)
              1039 r46 <- Arith(Add, r46, r47)
              1040 r44 <- StoreMem { mem: r44, addr: r46, value: r17 }
0x5de2ac:
              1041 r45 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
              1042 r45 <- SetJumpCondition(r5)
              1043 r45 <- Control(JmpIf(793))
0x5de2b6:
              1044 r46 <- Const { value: 72, size: 8 }
              1045 r46 <- Arith(Add, r46, r12)
              1046 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1047 r17 <- Get(r45)
0x5de2bb:
              1048 r46 <- Part { src: r14, offset: 0, size: 1 }
              1049 r48 <- Part { src: r14, offset: 0, size: 1 }
              1050 r46 <- Arith(BitAnd, r46, r48)
              1051 r6 <- SignOf(r46)
              1052 r5 <- IsZero(r46)
              1053 r49 <- Part { src: r46, offset: 0, size: 1 }
              1054 r3 <- Parity(r46)
              1055 r2 <- False
              1056 r10 <- False
0x5de2be:
              1057 r45 <- Not(r5)
              1058 r46 <- SetJumpCondition(r45)
              1059 r46 <- Control(JmpIf(1204))
0x5de2c0:
              1060 r45 <- Const { value: 1, size: 8 }
              1061 r45 <- Arith(Add, r45, r27)
              1062 r20 <- Get(r45)
0x5de2c4:
              1063 r46 <- Const { value: 24, size: 8 }
              1064 r46 <- Arith(Add, r46, r12)
              1065 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1066 r27 <- Get(r45)
0x5de2c9:
              1067 r46 <- Const { value: 0, size: 8 }
              1068 r46 <- Arith(Add, r46, r27)
              1069 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de2cc:
              1070 r17 <- Arith(BitAnd, r17, r17)
              1071 r6 <- SignOf(r17)
              1072 r5 <- IsZero(r17)
              1073 r47 <- Part { src: r17, offset: 0, size: 1 }
              1074 r3 <- Parity(r17)
              1075 r2 <- False
              1076 r10 <- False
0x5de2cf:
              1077 r45 <- Not(r5)
              1078 r46 <- SetJumpCondition(r45)
              1079 r46 <- Control(JmpIf(1296))
0x5de2d5:
              1080 r46 <- Part { src: r16, offset: 0, size: 4 }
              1081 r48 <- Part { src: r16, offset: 0, size: 4 }
              1082 r46 <- Arith(BitXor, r46, r48)
              1083 r49 <- Part { src: r16, offset: 4, size: 4 }
              1084 r16 <- Concat { lo: r46, hi: r49 }
              1085 r10 <- False
              1086 r2 <- False
              1087 r6 <- SignOf(r46)
              1088 r5 <- IsZero(r46)
              1089 r50 <- Part { src: r46, offset: 0, size: 1 }
              1090 r3 <- Parity(r50)
0x5de2d7:
              1091 r46 <- Const { value: 88, size: 8 }
              1092 r12 <- Arith(Add, r12, r46)
              1093 r12 <- Get(r12)
              1094 r10 <- OverflowOf(r12)
              1095 r2 <- CarryOf(r12)
              1096 r6 <- SignOf(r12)
              1097 r5 <- IsZero(r12)
              1098 r47 <- Part { src: r12, offset: 0, size: 1 }
              1099 r3 <- Parity(r47)
0x5de2db:
              1100 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1101 r17 <- Get(r45)
              1102 r12 <- ArithK(Add, r12, 8)
0x5de2dc:
              1103 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1104 r11 <- Get(r45)
              1105 r12 <- ArithK(Add, r12, 8)
0x5de2dd:
              1106 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1107 r24 <- Get(r45)
              1108 r12 <- ArithK(Add, r12, 8)
0x5de2df:
              1109 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1110 r25 <- Get(r45)
              1111 r12 <- ArithK(Add, r12, 8)
0x5de2e1:
              1112 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1113 r26 <- Get(r45)
              1114 r12 <- ArithK(Add, r12, 8)
0x5de2e3:
              1115 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1116 r27 <- Get(r45)
              1117 r12 <- ArithK(Add, r12, 8)
0x5de2e5:
              1118 r45 <- SetReturnValue(r16)
              1119 r45 <- Control(Ret)
0x5de2f0:
              1120 r46 <- Const { value: 0, size: 8 }
              1121 r46 <- Arith(Add, r46, r12)
              1122 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1123 r14 <- Get(r45)
0x5de2f4:
              1124 r19 <- Get(r11)
0x5de2f7:
              1125 r48 <- Ancestral(AncestralName("arg0"))
              1126 r48 <- Void
              1127 r48 <- Get(r14)
              1128 r49 <- Ancestral(AncestralName("arg1"))
              1129 r49 <- Void
              1130 r49 <- Get(r15)
              1131 r50 <- Ancestral(AncestralName("arg2"))
              1132 r50 <- Void
              1133 r50 <- Get(r19)
              1134 r51 <- CArg { value: r47, next_arg: None }
              1135 r51 <- CArg { value: r46, next_arg: Some(r51) }
              1136 r51 <- CArg { value: r45, next_arg: Some(r51) }
              1137 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
              1138 r51 <- Call { callee: r52, first_arg: Some(r51) }
              1139 r2 <- Undefined
              1140 r3 <- Undefined
              1141 r4 <- Undefined
              1142 r5 <- Undefined
              1143 r6 <- Undefined
              1144 r7 <- Undefined
              1145 r8 <- Undefined
              1146 r9 <- Undefined
              1147 r10 <- Undefined
              1148 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de2fc:
              1149 r46 <- Part { src: r16, offset: 0, size: 4 }
              1150 r48 <- Part { src: r16, offset: 0, size: 4 }
              1151 r46 <- Arith(BitAnd, r46, r48)
              1152 r6 <- SignOf(r46)
              1153 r5 <- IsZero(r46)
              1154 r49 <- Part { src: r46, offset: 0, size: 1 }
              1155 r3 <- Parity(r46)
              1156 r2 <- False
              1157 r10 <- False
0x5de2fe:
              1158 r45 <- Not(r5)
              1159 r46 <- SetJumpCondition(r45)
              1160 r46 <- Control(JmpIf(554))
0x5de304:
              1161 r45 <- Control(Jmp(746))
0x5de310:
              1162 r46 <- Const { value: 0, size: 8 }
              1163 r46 <- Arith(Add, r46, r12)
              1164 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1165 r14 <- Get(r45)
0x5de314:
              1166 r19 <- Get(r11)
0x5de317:
              1167 r48 <- Ancestral(AncestralName("arg0"))
              1168 r48 <- Void
              1169 r48 <- Get(r14)
              1170 r49 <- Ancestral(AncestralName("arg1"))
              1171 r49 <- Void
              1172 r49 <- Get(r15)
              1173 r50 <- Ancestral(AncestralName("arg2"))
              1174 r50 <- Void
              1175 r50 <- Get(r19)
              1176 r51 <- CArg { value: r47, next_arg: None }
              1177 r51 <- CArg { value: r46, next_arg: Some(r51) }
              1178 r51 <- CArg { value: r45, next_arg: Some(r51) }
              1179 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
              1180 r51 <- Call { callee: r52, first_arg: Some(r51) }
              1181 r2 <- Undefined
              1182 r3 <- Undefined
              1183 r4 <- Undefined
              1184 r5 <- Undefined
              1185 r6 <- Undefined
              1186 r7 <- Undefined
              1187 r8 <- Undefined
              1188 r9 <- Undefined
              1189 r10 <- Undefined
              1190 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de31c:
              1191 r46 <- Part { src: r16, offset: 0, size: 4 }
              1192 r48 <- Part { src: r16, offset: 0, size: 4 }
              1193 r46 <- Arith(BitAnd, r46, r48)
              1194 r6 <- SignOf(r46)
              1195 r5 <- IsZero(r46)
              1196 r49 <- Part { src: r46, offset: 0, size: 1 }
              1197 r3 <- Parity(r46)
              1198 r2 <- False
              1199 r10 <- False
0x5de31e:
              1200 r45 <- Not(r5)
              1201 r46 <- SetJumpCondition(r45)
              1202 r46 <- Control(JmpIf(598))
0x5de324:
              1203 r45 <- Control(Jmp(746))
0x5de330:
              1204 r46 <- Const { value: 88, size: 8 }
              1205 r12 <- Arith(Add, r12, r46)
              1206 r12 <- Get(r12)
              1207 r10 <- OverflowOf(r12)
              1208 r2 <- CarryOf(r12)
              1209 r6 <- SignOf(r12)
              1210 r5 <- IsZero(r12)
              1211 r47 <- Part { src: r12, offset: 0, size: 1 }
              1212 r3 <- Parity(r47)
0x5de334:
              1213 r45 <- Const { value: 2, size: 4 }
              1214 r46 <- Part { src: r16, offset: 4, size: 4 }
              1215 r16 <- Concat { lo: r45, hi: r46 }
0x5de339:
              1216 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1217 r17 <- Get(r45)
              1218 r12 <- ArithK(Add, r12, 8)
0x5de33a:
              1219 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1220 r11 <- Get(r45)
              1221 r12 <- ArithK(Add, r12, 8)
0x5de33b:
              1222 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1223 r24 <- Get(r45)
              1224 r12 <- ArithK(Add, r12, 8)
0x5de33d:
              1225 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1226 r25 <- Get(r45)
              1227 r12 <- ArithK(Add, r12, 8)
0x5de33f:
              1228 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1229 r26 <- Get(r45)
              1230 r12 <- ArithK(Add, r12, 8)
0x5de341:
              1231 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
              1232 r27 <- Get(r45)
              1233 r12 <- ArithK(Add, r12, 8)
0x5de343:
              1234 r45 <- SetReturnValue(r16)
              1235 r45 <- Control(Ret)
0x5de348:
              1236 r46 <- Const { value: 0, size: 8 }
              1237 r46 <- Arith(Add, r46, r12)
              1238 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1239 r24 <- Get(r45)
0x5de34c:
              1240 r46 <- Const { value: 1, size: 8 }
              1241 r27 <- Arith(Add, r27, r46)
              1242 r27 <- Get(r27)
              1243 r10 <- OverflowOf(r27)
              1244 r2 <- CarryOf(r27)
              1245 r6 <- SignOf(r27)
              1246 r5 <- IsZero(r27)
              1247 r47 <- Part { src: r27, offset: 0, size: 1 }
              1248 r3 <- Parity(r47)
0x5de350:
              1249 r14 <- Get(r24)
0x5de353:
              1250 r46: TypeID(358626v1) <- Const { value: 4199136, size: 8 }
              1251 r45 <- Call { callee: r46, first_arg: None }
              1252 r2 <- Undefined
              1253 r3 <- Undefined
              1254 r4 <- Undefined
              1255 r5 <- Undefined
              1256 r6 <- Undefined
              1257 r7 <- Undefined
              1258 r8 <- Undefined
              1259 r9 <- Undefined
              1260 r10 <- Undefined
0x5de358:
              1261 r46 <- Const { value: 24, size: 8 }
              1262 r46 <- Arith(Add, r46, r12)
              1263 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1264 r19 <- Get(r45)
0x5de35d:
              1265 r11 <- Get(r16)
0x5de360:
              1266 r45 <- Const { value: 0, size: 8 }
              1267 r45 <- Arith(Add, r45, r24)
              1268 r46 <- ArithK(Mul, r16, 1)
              1269 r45 <- Arith(Add, r45, r46)
              1270 r20 <- Get(r45)
0x5de364:
              1271 r47 <- Const { value: 0, size: 8 }
              1272 r47 <- Arith(Add, r47, r19)
              1273 r46 <- LoadMem { mem: r44, addr: r47, size: 8 }
              1274 r27 <- Arith(Sub, r27, r46)
              1275 r10 <- OverflowOf(r27)
              1276 r2 <- CarryOf(r27)
              1277 r6 <- SignOf(r27)
              1278 r5 <- IsZero(r27)
              1279 r48 <- Part { src: r27, offset: 0, size: 1 }
              1280 r3 <- Parity(r48)
0x5de367:
              1281 r45 <- SetJumpCondition(r2)
              1282 r45 <- Control(JmpIf(883))
0x5de36d:
              1283 r46 <- Const { value: 72, size: 8 }
              1284 r46 <- Arith(Add, r46, r12)
              1285 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1286 r17 <- Get(r45)
0x5de372:
              1287 r17 <- Arith(BitAnd, r17, r17)
              1288 r6 <- SignOf(r17)
              1289 r5 <- IsZero(r17)
              1290 r47 <- Part { src: r17, offset: 0, size: 1 }
              1291 r3 <- Parity(r17)
              1292 r2 <- False
              1293 r10 <- False
0x5de375:
              1294 r45 <- SetJumpCondition(r5)
              1295 r45 <- Control(JmpIf(1080))
0x5de37b:
              1296 r46 <- Const { value: 0, size: 8 }
              1297 r46 <- Arith(Add, r46, r17)
              1298 r44 <- StoreMem { mem: r44, addr: r46, value: r25 }
0x5de37e:
              1299 r46 <- Part { src: r16, offset: 0, size: 4 }
              1300 r48 <- Part { src: r16, offset: 0, size: 4 }
              1301 r46 <- Arith(BitXor, r46, r48)
              1302 r49 <- Part { src: r16, offset: 4, size: 4 }
              1303 r16 <- Concat { lo: r46, hi: r49 }
              1304 r10 <- False
              1305 r2 <- False
              1306 r6 <- SignOf(r46)
              1307 r5 <- IsZero(r46)
              1308 r50 <- Part { src: r46, offset: 0, size: 1 }
              1309 r3 <- Parity(r50)
0x5de380:
              1310 r45 <- Control(Jmp(1091))
0x5de388:
              1311 r46 <- Const { value: 0, size: 8 }
              1312 r46 <- Arith(Add, r46, r12)
              1313 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1314 r14 <- Get(r45)
0x5de38c:
              1315 r19 <- Get(r11)
0x5de38f:
              1316 r46 <- Const { value: 8, size: 8 }
              1317 r46 <- Arith(Add, r46, r12)
              1318 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de394:
              1319 r48 <- Ancestral(AncestralName("arg0"))
              1320 r48 <- Void
              1321 r48 <- Get(r14)
              1322 r49 <- Ancestral(AncestralName("arg1"))
              1323 r49 <- Void
              1324 r49 <- Get(r15)
              1325 r50 <- Ancestral(AncestralName("arg2"))
              1326 r50 <- Void
              1327 r50 <- Get(r19)
              1328 r51 <- CArg { value: r47, next_arg: None }
              1329 r51 <- CArg { value: r46, next_arg: Some(r51) }
              1330 r51 <- CArg { value: r45, next_arg: Some(r51) }
              1331 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
              1332 r51 <- Call { callee: r52, first_arg: Some(r51) }
              1333 r2 <- Undefined
              1334 r3 <- Undefined
              1335 r4 <- Undefined
              1336 r5 <- Undefined
              1337 r6 <- Undefined
              1338 r7 <- Undefined
              1339 r8 <- Undefined
              1340 r9 <- Undefined
              1341 r10 <- Undefined
              1342 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de399:
              1343 r46 <- Const { value: 8, size: 8 }
              1344 r46 <- Arith(Add, r46, r12)
              1345 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1346 r20 <- Get(r45)
0x5de39e:
              1347 r46 <- Part { src: r16, offset: 0, size: 4 }
              1348 r48 <- Part { src: r16, offset: 0, size: 4 }
              1349 r46 <- Arith(BitAnd, r46, r48)
              1350 r6 <- SignOf(r46)
              1351 r5 <- IsZero(r46)
              1352 r49 <- Part { src: r46, offset: 0, size: 1 }
              1353 r3 <- Parity(r46)
              1354 r2 <- False
              1355 r10 <- False
0x5de3a0:
              1356 r45 <- Not(r5)
              1357 r46 <- SetJumpCondition(r45)
              1358 r46 <- Control(JmpIf(422))
0x5de3a6:
              1359 r45 <- Control(Jmp(760))
0x5de3b0:
              1360 r46 <- Const { value: 0, size: 8 }
              1361 r46 <- Arith(Add, r46, r12)
              1362 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1363 r14 <- Get(r45)
0x5de3b4:
              1364 r19 <- Get(r11)
0x5de3b7:
              1365 r46 <- Const { value: 8, size: 8 }
              1366 r46 <- Arith(Add, r46, r12)
              1367 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de3bc:
              1368 r48 <- Ancestral(AncestralName("arg0"))
              1369 r48 <- Void
              1370 r48 <- Get(r14)
              1371 r49 <- Ancestral(AncestralName("arg1"))
              1372 r49 <- Void
              1373 r49 <- Get(r15)
              1374 r50 <- Ancestral(AncestralName("arg2"))
              1375 r50 <- Void
              1376 r50 <- Get(r19)
              1377 r51 <- CArg { value: r47, next_arg: None }
              1378 r51 <- CArg { value: r46, next_arg: Some(r51) }
              1379 r51 <- CArg { value: r45, next_arg: Some(r51) }
              1380 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
              1381 r51 <- Call { callee: r52, first_arg: Some(r51) }
              1382 r2 <- Undefined
              1383 r3 <- Undefined
              1384 r4 <- Undefined
              1385 r5 <- Undefined
              1386 r6 <- Undefined
              1387 r7 <- Undefined
              1388 r8 <- Undefined
              1389 r9 <- Undefined
              1390 r10 <- Undefined
              1391 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de3c1:
              1392 r46 <- Const { value: 8, size: 8 }
              1393 r46 <- Arith(Add, r46, r12)
              1394 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1395 r20 <- Get(r45)
0x5de3c6:
              1396 r46 <- Part { src: r16, offset: 0, size: 4 }
              1397 r48 <- Part { src: r16, offset: 0, size: 4 }
              1398 r46 <- Arith(BitAnd, r46, r48)
              1399 r6 <- SignOf(r46)
              1400 r5 <- IsZero(r46)
              1401 r49 <- Part { src: r46, offset: 0, size: 1 }
              1402 r3 <- Parity(r46)
              1403 r2 <- False
              1404 r10 <- False
0x5de3c8:
              1405 r45 <- Not(r5)
              1406 r46 <- SetJumpCondition(r45)
              1407 r46 <- Control(JmpIf(359))
0x5de3ce:
              1408 r45 <- Control(Jmp(760))
0x5de3d3:
              1409 r46 <- Const { value: 0, size: 8 }
              1410 r46 <- Arith(Add, r46, r12)
              1411 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1412 r14 <- Get(r45)
0x5de3d7:
              1413 r19 <- Get(r11)
0x5de3da:
              1414 r46 <- Const { value: 40, size: 8 }
              1415 r46 <- Arith(Add, r46, r12)
              1416 r44 <- StoreMem { mem: r44, addr: r46, value: r20 }
0x5de3df:
              1417 r46 <- Const { value: 8, size: 8 }
              1418 r46 <- Arith(Add, r46, r12)
              1419 r44 <- StoreMem { mem: r44, addr: r46, value: r24 }
0x5de3e4:
              1420 r48 <- Ancestral(AncestralName("arg0"))
              1421 r48 <- Void
              1422 r48 <- Get(r14)
              1423 r49 <- Ancestral(AncestralName("arg1"))
              1424 r49 <- Void
              1425 r49 <- Get(r15)
              1426 r50 <- Ancestral(AncestralName("arg2"))
              1427 r50 <- Void
              1428 r50 <- Get(r19)
              1429 r51 <- CArg { value: r47, next_arg: None }
              1430 r51 <- CArg { value: r46, next_arg: Some(r51) }
              1431 r51 <- CArg { value: r45, next_arg: Some(r51) }
              1432 r52: TypeID(340435v1) <- Const { value: 4199232, size: 8 }
              1433 r51 <- Call { callee: r52, first_arg: Some(r51) }
              1434 r2 <- Undefined
              1435 r3 <- Undefined
              1436 r4 <- Undefined
              1437 r5 <- Undefined
              1438 r6 <- Undefined
              1439 r7 <- Undefined
              1440 r8 <- Undefined
              1441 r9 <- Undefined
              1442 r10 <- Undefined
              1443 r16 <- Part { src: r51, offset: 0, size: 8 }
0x5de3e9:
              1444 r46 <- Const { value: 40, size: 8 }
              1445 r46 <- Arith(Add, r46, r12)
              1446 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1447 r20 <- Get(r45)
0x5de3ee:
              1448 r14 <- Get(r24)
0x5de3f1:
              1449 r46 <- Part { src: r16, offset: 0, size: 4 }
              1450 r48 <- Part { src: r16, offset: 0, size: 4 }
              1451 r46 <- Arith(BitAnd, r46, r48)
              1452 r6 <- SignOf(r46)
              1453 r5 <- IsZero(r46)
              1454 r49 <- Part { src: r46, offset: 0, size: 1 }
              1455 r3 <- Parity(r46)
              1456 r2 <- False
              1457 r10 <- False
0x5de3f3:
              1458 r45 <- Not(r5)
              1459 r46 <- SetJumpCondition(r45)
              1460 r46 <- Control(JmpIf(308))
0x5de3f9:
              1461 r45 <- Control(Jmp(760))
0x5de400:
              1462 r46 <- Const { value: 0, size: 8 }
              1463 r46 <- Arith(Add, r46, r12)
              1464 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1465 r27 <- Get(r45)
0x5de404:
              1466 r14 <- Get(r27)
0x5de407:
              1467 r46: TypeID(358626v1) <- Const { value: 4199136, size: 8 }
              1468 r45 <- Call { callee: r46, first_arg: None }
              1469 r2 <- Undefined
              1470 r3 <- Undefined
              1471 r4 <- Undefined
              1472 r5 <- Undefined
              1473 r6 <- Undefined
              1474 r7 <- Undefined
              1475 r8 <- Undefined
              1476 r9 <- Undefined
              1477 r10 <- Undefined
0x5de40c:
              1478 r45 <- Const { value: 0, size: 8 }
              1479 r45 <- Arith(Add, r45, r27)
              1480 r46 <- ArithK(Mul, r16, 1)
              1481 r45 <- Arith(Add, r45, r46)
              1482 r20 <- Get(r45)
0x5de410:
              1483 r45 <- Control(Jmp(135))
0x5de415:
              1484 r46 <- Const { value: 72, size: 8 }
              1485 r46 <- Arith(Add, r46, r12)
              1486 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
              1487 r17 <- Get(r45)
0x5de41a:
              1488 r45 <- Control(Jmp(1060))
0x5de41f:
              1489 r25 <- Get(r26)
0x5de422:
              1490 r45 <- Control(Jmp(1287))


ssa pre-xform:
ssa program  1638 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
  (  3)  r14 <- Ancestral(AncestralName("RSI"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  5)  r17 <- Ancestral(AncestralName("RCX"))
  (  3)  r18 <- Ancestral(AncestralName("RDX"))
         r19 <- Ancestral(AncestralName("R8"))
         r20 <- Ancestral(AncestralName("R9"))
         r23 <- Ancestral(AncestralName("R12"))
  (  5)  r24 <- Ancestral(AncestralName("R13"))
         r25 <- Ancestral(AncestralName("R14"))
  (  4)  r26 <- Ancestral(AncestralName("R15"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r26 }
  (  2)  r67 <- ArithK(Add, r65, -8)
         r68 <- StoreMem { mem: r66, addr: r67, value: r25 }
         r70 <- Const { value: 46, size: 4 }
  (  2)  r73 <- ArithK(Add, r67, -8)
         r74 <- StoreMem { mem: r68, addr: r73, value: r24 }
  (  2)  r75 <- ArithK(Add, r73, -8)
         r76 <- StoreMem { mem: r74, addr: r75, value: r23 }
  (  2)  r77 <- ArithK(Add, r75, -8)
         r78 <- StoreMem { mem: r76, addr: r77, value: r10 }
  (  2)  r79 <- ArithK(Add, r77, -8)
         r80 <- StoreMem { mem: r78, addr: r79, value: r16 }
         r82 <- Const { value: 88, size: 8 }
  ( 56)  r83 <- Arith(Sub, r79, r82)
         r91 <- Const { value: 64, size: 8 }
         r92 <- Arith(Add, r91, r83)
         r93 <- StoreMem { mem: r80, addr: r92, value: r13 }
         r95 <- Const { value: 32, size: 8 }
         r96 <- Arith(Add, r95, r83)
         r97 <- StoreMem { mem: r93, addr: r96, value: r19 }
         r98 <- Const { value: 0, size: 8 }
         r99 <- Arith(Add, r98, r83)
         r100 <- StoreMem { mem: r97, addr: r99, value: r18 }
         r101 <- Const { value: 24, size: 8 }
  (  2)  r102 <- Arith(Add, r101, r83)
  (  7)  r103 <- StoreMem { mem: r100, addr: r102, value: r20 }
         r111 <- CArg { value: r102, next_arg: None }
         r112 <- CArg { value: r70, next_arg: Some(r111) }
         r113: strchr <TypeID(340441v1)> <- Const { value: 4199040, size: 8 }
         r114 <- Call { callee: r113, first_arg: Some(r112) }
  (  3)  r124 <- Part { src: r114, offset: 0, size: 8 }
  (  2)  r126 <- Arith(BitAnd, r124, r124)
         r128 <- IsZero(r126)
         r133 <- SetJumpCondition(r128)
         r1530 <- Upsilon { value: r124, phi_ref: r1491 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1462 <- Const { value: 0, size: 8 }
         r1463 <- Arith(Add, r1462, r83)
         r1464 <- LoadMem { mem: r103, addr: r1463, size: 8 }
         r1467: __builtin_strlen <TypeID(358626v1)> <- Const { value: 4199136, size: 8 }
         r1468 <- Call { callee: r1467, first_arg: None }
         r1478 <- Const { value: 0, size: 8 }
         r1479 <- Arith(Add, r1478, r1464)
         r1480 <- ArithK(Mul, r126, 1)
         r1481 <- Arith(Add, r1479, r1480)
         r1531 <- Upsilon { value: r1481, phi_ref: r1491 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  7)  r1491 <- Phi
         r135 <- Const { value: 0, size: 8 }
         r136 <- Arith(Add, r135, r83)
  ( 11)  r137 <- LoadMem { mem: r103, addr: r136, size: 8 }
  (  8)  r140 <- Arith(Sub, r1491, r137)
         r145 <- IsZero(r140)
         r148 <- SetJumpCondition(r145)
         r1532 <- Upsilon { value: r137, phi_ref: r1525 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r150 <- Const { value: 24, size: 8 }
         r151 <- Arith(Add, r150, r83)
         r152 <- LoadMem { mem: r103, addr: r151, size: 8 }
         r154 <- Const { value: 0, size: 8 }
         r155 <- Arith(Add, r154, r152)
         r156 <- LoadMem { mem: r103, addr: r155, size: 8 }
         r157 <- Const { value: 0, size: 8 }
         r158 <- Arith(Sub, r156, r157)
         r162 <- IsZero(r158)
         r165 <- SetJumpCondition(r162)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r167 <- Const { value: 24, size: 8 }
         r168 <- Arith(Add, r167, r14)
  ( 10)  r169 <- LoadMem { mem: r103, addr: r168, size: 8 }
         r171 <- Part { src: r26, offset: 0, size: 4 }
         r172 <- Part { src: r26, offset: 0, size: 4 }
         r173 <- Arith(BitXor, r171, r172)
         r174 <- Part { src: r26, offset: 4, size: 4 }
  (  8)  r175 <- Concat { lo: r173, hi: r174 }
         r182 <- Const { value: 72, size: 8 }
         r183 <- Arith(Add, r182, r83)
  (  7)  r184 <- StoreMem { mem: r103, addr: r183, value: r17 }
         r185 <- Const { value: 0, size: 8 }
         r186 <- Arith(Add, r185, r169)
         r187 <- LoadMem { mem: r184, addr: r186, size: 1 }
  (  2)  r188 <- Const { value: 0, size: 1 }
         r189 <- Arith(Sub, r187, r188)
         r193 <- IsZero(r189)
         r196 <- SetJumpCondition(r193)
         r1542 <- Upsilon { value: r1491, phi_ref: r1517 }
         r1543 <- Upsilon { value: r184, phi_ref: r1518 }
         r1544 <- Upsilon { value: r188, phi_ref: r1519 }
         r1545 <- Upsilon { value: r14, phi_ref: r1492 }
         r1546 <- Upsilon { value: r184, phi_ref: r1493 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  2)  r1493 <- Phi
  (  5)  r1492 <- Phi
         r198 <- Const { value: 16, size: 8 }
         r199 <- Arith(Add, r198, r1492)
  (  3)  r200 <- LoadMem { mem: r1493, addr: r199, size: 8 }
         r202 <- Const { value: 16, size: 8 }
         r203 <- Arith(Add, r202, r83)
  (  5)  r204 <- StoreMem { mem: r1493, addr: r203, value: r200 }
  (  3)  r205 <- Arith(BitAnd, r200, r200)
         r207 <- IsZero(r205)
         r212 <- SetJumpCondition(r207)
         r1567 <- Upsilon { value: r137, phi_ref: r1525 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r215 <- Part { src: r17, offset: 0, size: 4 }
         r216 <- Part { src: r17, offset: 0, size: 4 }
         r217 <- Arith(BitXor, r215, r216)
         r218 <- Part { src: r17, offset: 4, size: 4 }
  (  6)  r219 <- Concat { lo: r217, hi: r218 }
         r226 <- Part { src: r205, offset: 0, size: 4 }
         r227 <- Const { value: 3, size: 4 }
  (  2)  r228 <- Arith(BitAnd, r226, r227)
         r229 <- Part { src: r205, offset: 4, size: 4 }
         r230 <- Concat { lo: r228, hi: r229 }
         r234 <- IsZero(r228)
         r237 <- SetJumpCondition(r234)
         r1569 <- Upsilon { value: r1491, phi_ref: r1502 }
         r1570 <- Upsilon { value: r169, phi_ref: r1503 }
         r1571 <- Upsilon { value: r204, phi_ref: r1504 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r239 <- Const { value: 1, size: 8 }
  (  2)  r240 <- Arith(Sub, r230, r239)
         r244 <- IsZero(r240)
         r247 <- SetJumpCondition(r244)
         r1602 <- Upsilon { value: r1491, phi_ref: r1498 }
         r1603 <- Upsilon { value: r169, phi_ref: r1499 }
         r1604 <- Upsilon { value: r204, phi_ref: r1500 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r249 <- Const { value: 2, size: 8 }
         r250 <- Arith(Sub, r240, r249)
         r254 <- IsZero(r250)
         r257 <- SetJumpCondition(r254)
         r1617 <- Upsilon { value: r1491, phi_ref: r1495 }
         r1618 <- Upsilon { value: r169, phi_ref: r1496 }
         r1619 <- Upsilon { value: r204, phi_ref: r1497 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r259 <- Const { value: 8, size: 8 }
         r260 <- Arith(Add, r259, r169)
  (  2)  r261 <- LoadMem { mem: r204, addr: r260, size: 8 }
         r263 <- Const { value: 48, size: 8 }
         r264 <- Arith(Add, r263, r83)
         r265 <- StoreMem { mem: r204, addr: r264, value: r1491 }
         r267 <- Const { value: 40, size: 8 }
         r268 <- Arith(Add, r267, r83)
         r269 <- StoreMem { mem: r265, addr: r268, value: r169 }
         r271 <- Const { value: 8, size: 8 }
         r272 <- Arith(Add, r271, r83)
  (  4)  r273 <- StoreMem { mem: r269, addr: r272, value: r261 }
         r277 <- CArg { value: r261, next_arg: None }
         r278: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r279 <- Call { callee: r278, first_arg: Some(r277) }
         r289 <- Part { src: r279, offset: 0, size: 8 }
         r294 <- Const { value: 48, size: 8 }
         r295 <- Arith(Add, r294, r83)
  (  2)  r296 <- LoadMem { mem: r273, addr: r295, size: 8 }
  (  2)  r299 <- Arith(Sub, r289, r140)
         r303 <- IsZero(r299)
         r304 <- Part { src: r299, offset: 0, size: 1 }
         r306 <- SetJumpCondition(r303)
         r1628 <- Upsilon { value: r169, phi_ref: r1494 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1409 <- Const { value: 0, size: 8 }
         r1410 <- Arith(Add, r1409, r83)
         r1411 <- LoadMem { mem: r273, addr: r1410, size: 8 }
         r1414 <- Const { value: 40, size: 8 }
         r1415 <- Arith(Add, r1414, r83)
         r1416 <- StoreMem { mem: r273, addr: r1415, value: r296 }
         r1417 <- Const { value: 8, size: 8 }
  (  2)  r1418 <- Arith(Add, r1417, r83)
         r1419 <- StoreMem { mem: r1416, addr: r1418, value: r169 }
         r1429 <- CArg { value: r304, next_arg: None }
         r1430 <- CArg { value: r1418, next_arg: Some(r1429) }
         r1431 <- CArg { value: r1411, next_arg: Some(r1430) }
         r1432: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r1433 <- Call { callee: r1432, first_arg: Some(r1431) }
  (  2)  r1443 <- Part { src: r1433, offset: 0, size: 8 }
         r1449 <- Part { src: r1443, offset: 0, size: 4 }
         r1450 <- Part { src: r1443, offset: 0, size: 4 }
         r1451 <- Arith(BitAnd, r1449, r1450)
         r1453 <- IsZero(r1451)
         r1458 <- Not(r1453)
         r1459 <- SetJumpCondition(r1458)
         r1629 <- Upsilon { value: r169, phi_ref: r1494 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1630 <- Upsilon { value: r219, phi_ref: r1510 }
         r1631 <- Upsilon { value: r169, phi_ref: r1511 }
         r1632 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1633 <- Upsilon { value: r175, phi_ref: r1513 }
         r1634 <- Upsilon { value: r1419, phi_ref: r1514 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1494 <- Phi
         r311 <- Const { value: 40, size: 8 }
         r312 <- Arith(Add, r311, r1494)
         r1635 <- Upsilon { value: r296, phi_ref: r1495 }
         r1636 <- Upsilon { value: r312, phi_ref: r1496 }
         r1637 <- Upsilon { value: r273, phi_ref: r1497 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  2)  r1497 <- Phi
  (  3)  r1496 <- Phi
         r1495 <- Phi
         r314 <- Const { value: 8, size: 8 }
         r315 <- Arith(Add, r314, r1496)
  (  2)  r316 <- LoadMem { mem: r1497, addr: r315, size: 8 }
         r318 <- Const { value: 40, size: 8 }
         r319 <- Arith(Add, r318, r83)
         r320 <- StoreMem { mem: r1497, addr: r319, value: r1495 }
         r323 <- Const { value: 8, size: 8 }
         r324 <- Arith(Add, r323, r83)
  (  4)  r325 <- StoreMem { mem: r320, addr: r324, value: r316 }
         r329 <- CArg { value: r316, next_arg: None }
         r330: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r331 <- Call { callee: r330, first_arg: Some(r329) }
         r341 <- Part { src: r331, offset: 0, size: 8 }
         r346 <- Const { value: 40, size: 8 }
         r347 <- Arith(Add, r346, r83)
  (  2)  r348 <- LoadMem { mem: r325, addr: r347, size: 8 }
  (  2)  r350 <- Arith(Sub, r341, r140)
         r354 <- IsZero(r350)
         r355 <- Part { src: r350, offset: 0, size: 1 }
         r357 <- SetJumpCondition(r354)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1360 <- Const { value: 0, size: 8 }
         r1361 <- Arith(Add, r1360, r83)
         r1362 <- LoadMem { mem: r325, addr: r1361, size: 8 }
         r1365 <- Const { value: 8, size: 8 }
  (  2)  r1366 <- Arith(Add, r1365, r83)
         r1367 <- StoreMem { mem: r325, addr: r1366, value: r348 }
         r1377 <- CArg { value: r355, next_arg: None }
         r1378 <- CArg { value: r1366, next_arg: Some(r1377) }
         r1379 <- CArg { value: r1362, next_arg: Some(r1378) }
         r1380: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r1381 <- Call { callee: r1380, first_arg: Some(r1379) }
  (  2)  r1391 <- Part { src: r1381, offset: 0, size: 8 }
         r1396 <- Part { src: r1391, offset: 0, size: 4 }
         r1397 <- Part { src: r1391, offset: 0, size: 4 }
         r1398 <- Arith(BitAnd, r1396, r1397)
         r1400 <- IsZero(r1398)
         r1405 <- Not(r1400)
         r1406 <- SetJumpCondition(r1405)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1620 <- Upsilon { value: r219, phi_ref: r1510 }
         r1621 <- Upsilon { value: r1496, phi_ref: r1511 }
         r1622 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1623 <- Upsilon { value: r175, phi_ref: r1513 }
         r1624 <- Upsilon { value: r1367, phi_ref: r1514 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r368 <- Const { value: 40, size: 8 }
         r369 <- Arith(Add, r1496, r368)
         r1625 <- Upsilon { value: r348, phi_ref: r1498 }
         r1626 <- Upsilon { value: r369, phi_ref: r1499 }
         r1627 <- Upsilon { value: r325, phi_ref: r1500 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  2)  r1500 <- Phi
  (  3)  r1499 <- Phi
         r1498 <- Phi
         r377 <- Const { value: 8, size: 8 }
         r378 <- Arith(Add, r377, r1499)
  (  2)  r379 <- LoadMem { mem: r1500, addr: r378, size: 8 }
         r381 <- Const { value: 40, size: 8 }
         r382 <- Arith(Add, r381, r83)
         r383 <- StoreMem { mem: r1500, addr: r382, value: r1498 }
         r386 <- Const { value: 8, size: 8 }
         r387 <- Arith(Add, r386, r83)
  (  4)  r388 <- StoreMem { mem: r383, addr: r387, value: r379 }
         r392 <- CArg { value: r379, next_arg: None }
         r393: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r394 <- Call { callee: r393, first_arg: Some(r392) }
         r404 <- Part { src: r394, offset: 0, size: 8 }
         r409 <- Const { value: 40, size: 8 }
         r410 <- Arith(Add, r409, r83)
  (  2)  r411 <- LoadMem { mem: r388, addr: r410, size: 8 }
  (  3)  r413 <- Arith(Sub, r404, r140)
         r417 <- IsZero(r413)
         r418 <- Part { src: r413, offset: 0, size: 1 }
         r420 <- SetJumpCondition(r417)
         r1605 <- Upsilon { value: r388, phi_ref: r1501 }
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1311 <- Const { value: 0, size: 8 }
         r1312 <- Arith(Add, r1311, r83)
         r1313 <- LoadMem { mem: r388, addr: r1312, size: 8 }
         r1316 <- Const { value: 8, size: 8 }
  (  2)  r1317 <- Arith(Add, r1316, r83)
  (  2)  r1318 <- StoreMem { mem: r388, addr: r1317, value: r411 }
         r1328 <- CArg { value: r418, next_arg: None }
         r1329 <- CArg { value: r1317, next_arg: Some(r1328) }
         r1330 <- CArg { value: r1313, next_arg: Some(r1329) }
         r1331: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r1332 <- Call { callee: r1331, first_arg: Some(r1330) }
  (  2)  r1342 <- Part { src: r1332, offset: 0, size: 8 }
         r1347 <- Part { src: r1342, offset: 0, size: 4 }
         r1348 <- Part { src: r1342, offset: 0, size: 4 }
         r1349 <- Arith(BitAnd, r1347, r1348)
         r1351 <- IsZero(r1349)
         r1356 <- Not(r1351)
         r1357 <- SetJumpCondition(r1356)
         r1606 <- Upsilon { value: r1318, phi_ref: r1501 }
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1607 <- Upsilon { value: r219, phi_ref: r1510 }
         r1608 <- Upsilon { value: r1499, phi_ref: r1511 }
         r1609 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1610 <- Upsilon { value: r175, phi_ref: r1513 }
         r1611 <- Upsilon { value: r1318, phi_ref: r1514 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
  (  2)  r1501 <- Phi
         r422 <- Const { value: 16, size: 8 }
         r423 <- Arith(Add, r422, r83)
         r424 <- LoadMem { mem: r1501, addr: r423, size: 8 }
         r426 <- Const { value: 1, size: 8 }
         r427 <- Arith(Add, r219, r426)
         r435 <- Const { value: 40, size: 8 }
         r436 <- Arith(Add, r1499, r435)
         r444 <- Arith(Sub, r427, r424)
         r448 <- IsZero(r444)
         r451 <- SetJumpCondition(r448)
         r1612 <- Upsilon { value: r413, phi_ref: r1525 }
         r1614 <- Upsilon { value: r411, phi_ref: r1502 }
         r1615 <- Upsilon { value: r436, phi_ref: r1503 }
         r1616 <- Upsilon { value: r1501, phi_ref: r1504 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1504 <- Phi
         r1503 <- Phi
         r1502 <- Phi
         r453 <- Const { value: 56, size: 8 }
         r454 <- Arith(Add, r453, r83)
         r455 <- StoreMem { mem: r1504, addr: r454, value: r1492 }
         r457 <- Const { value: 40, size: 8 }
         r458 <- Arith(Add, r457, r83)
         r459 <- StoreMem { mem: r455, addr: r458, value: r175 }
         r460 <- Const { value: 48, size: 8 }
         r461 <- Arith(Add, r460, r83)
         r462 <- StoreMem { mem: r459, addr: r461, value: r1502 }
         r1577 <- Upsilon { value: r1503, phi_ref: r1505 }
         r1578 <- Upsilon { value: r462, phi_ref: r1506 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  7)  r1506 <- Phi
  (  4)  r1505 <- Phi
         r617 <- Const { value: 8, size: 8 }
         r618 <- Arith(Add, r617, r1505)
         r619 <- LoadMem { mem: r1506, addr: r618, size: 8 }
         r626 <- CArg { value: r619, next_arg: None }
         r627: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r628 <- Call { callee: r627, first_arg: Some(r626) }
         r638 <- Part { src: r628, offset: 0, size: 8 }
  (  2)  r639 <- Arith(Sub, r638, r140)
         r643 <- IsZero(r639)
         r644 <- Part { src: r639, offset: 0, size: 1 }
         r646 <- Not(r643)
         r647 <- SetJumpCondition(r646)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r649 <- Const { value: 0, size: 8 }
  (  2)  r650 <- Arith(Add, r649, r83)
         r651 <- LoadMem { mem: r1506, addr: r650, size: 8 }
         r664 <- CArg { value: r644, next_arg: None }
         r665 <- CArg { value: r650, next_arg: Some(r664) }
         r666 <- CArg { value: r651, next_arg: Some(r665) }
         r667: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r668 <- Call { callee: r667, first_arg: Some(r666) }
  (  2)  r678 <- Part { src: r668, offset: 0, size: 8 }
         r679 <- Part { src: r678, offset: 0, size: 4 }
         r680 <- Part { src: r678, offset: 0, size: 4 }
         r681 <- Arith(BitAnd, r679, r680)
         r683 <- IsZero(r681)
         r688 <- Not(r683)
         r689 <- SetJumpCondition(r688)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r692 <- Const { value: 40, size: 8 }
         r693 <- Arith(Add, r692, r83)
         r694 <- LoadMem { mem: r1506, addr: r693, size: 8 }
         r700 <- Const { value: 56, size: 8 }
         r701 <- Arith(Add, r700, r83)
         r702 <- LoadMem { mem: r1506, addr: r701, size: 8 }
         r1579 <- Upsilon { value: r219, phi_ref: r1510 }
         r1580 <- Upsilon { value: r1505, phi_ref: r1511 }
         r1581 <- Upsilon { value: r702, phi_ref: r1512 }
         r1582 <- Upsilon { value: r694, phi_ref: r1513 }
         r1583 <- Upsilon { value: r1506, phi_ref: r1514 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r464 <- Const { value: 48, size: 8 }
         r465 <- Arith(Add, r464, r1505)
         r466 <- LoadMem { mem: r1506, addr: r465, size: 8 }
         r468 <- Const { value: 40, size: 8 }
  (  6)  r469 <- Arith(Add, r468, r1505)
         r471 <- Const { value: 1, size: 8 }
  (  5)  r472 <- Arith(Add, r471, r219)
         r478 <- Const { value: 8, size: 8 }
         r479 <- Arith(Add, r478, r83)
  (  4)  r480 <- StoreMem { mem: r1506, addr: r479, value: r466 }
         r484 <- CArg { value: r472, next_arg: None }
         r485: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r486 <- Call { callee: r485, first_arg: Some(r484) }
         r496 <- Part { src: r486, offset: 0, size: 8 }
  (  2)  r501 <- Arith(Sub, r496, r140)
         r505 <- IsZero(r501)
         r506 <- Part { src: r501, offset: 0, size: 1 }
         r508 <- SetJumpCondition(r505)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r705 <- Const { value: 0, size: 8 }
  (  2)  r706 <- Arith(Add, r705, r83)
         r707 <- LoadMem { mem: r480, addr: r706, size: 8 }
         r719 <- CArg { value: r506, next_arg: None }
         r720 <- CArg { value: r706, next_arg: Some(r719) }
         r721 <- CArg { value: r707, next_arg: Some(r720) }
         r722: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r723 <- Call { callee: r722, first_arg: Some(r721) }
  (  2)  r733 <- Part { src: r723, offset: 0, size: 8 }
         r734 <- Part { src: r733, offset: 0, size: 4 }
         r735 <- Part { src: r733, offset: 0, size: 4 }
         r736 <- Arith(BitAnd, r734, r735)
         r738 <- IsZero(r736)
         r743 <- Not(r738)
         r744 <- SetJumpCondition(r743)
         r1590 <- Upsilon { value: r469, phi_ref: r1508 }
         r1591 <- Upsilon { value: r480, phi_ref: r1509 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r510 <- Const { value: 48, size: 8 }
         r511 <- Arith(Add, r510, r469)
         r512 <- LoadMem { mem: r480, addr: r511, size: 8 }
         r514 <- Const { value: 40, size: 8 }
         r515 <- Arith(Add, r514, r469)
         r517 <- Const { value: 1, size: 8 }
         r518 <- Arith(Add, r517, r472)
         r522 <- Const { value: 8, size: 8 }
         r523 <- Arith(Add, r522, r83)
  (  4)  r524 <- StoreMem { mem: r480, addr: r523, value: r512 }
         r528 <- CArg { value: r518, next_arg: None }
         r529: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r530 <- Call { callee: r529, first_arg: Some(r528) }
         r540 <- Part { src: r530, offset: 0, size: 8 }
  (  2)  r545 <- Arith(Sub, r540, r140)
         r549 <- IsZero(r545)
         r550 <- Part { src: r545, offset: 0, size: 1 }
         r552 <- SetJumpCondition(r549)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1120 <- Const { value: 0, size: 8 }
  (  2)  r1121 <- Arith(Add, r1120, r83)
         r1122 <- LoadMem { mem: r524, addr: r1121, size: 8 }
         r1134 <- CArg { value: r550, next_arg: None }
         r1135 <- CArg { value: r1121, next_arg: Some(r1134) }
         r1136 <- CArg { value: r1122, next_arg: Some(r1135) }
         r1137: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r1138 <- Call { callee: r1137, first_arg: Some(r1136) }
  (  2)  r1148 <- Part { src: r1138, offset: 0, size: 8 }
         r1149 <- Part { src: r1148, offset: 0, size: 4 }
         r1150 <- Part { src: r1148, offset: 0, size: 4 }
         r1151 <- Arith(BitAnd, r1149, r1150)
         r1153 <- IsZero(r1151)
         r1158 <- Not(r1153)
         r1159 <- SetJumpCondition(r1158)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1593 <- Upsilon { value: r515, phi_ref: r1508 }
         r1594 <- Upsilon { value: r524, phi_ref: r1509 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r554 <- Const { value: 88, size: 8 }
         r555 <- Arith(Add, r554, r469)
         r556 <- LoadMem { mem: r524, addr: r555, size: 8 }
         r558 <- Const { value: 80, size: 8 }
         r559 <- Arith(Add, r558, r469)
         r561 <- Const { value: 2, size: 8 }
         r562 <- Arith(Add, r561, r472)
         r566 <- Const { value: 8, size: 8 }
         r567 <- Arith(Add, r566, r83)
  (  4)  r568 <- StoreMem { mem: r524, addr: r567, value: r556 }
         r572 <- CArg { value: r562, next_arg: None }
         r573: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r574 <- Call { callee: r573, first_arg: Some(r572) }
         r584 <- Part { src: r574, offset: 0, size: 8 }
  (  3)  r589 <- Arith(Sub, r584, r140)
         r593 <- IsZero(r589)
         r594 <- Part { src: r589, offset: 0, size: 1 }
         r596 <- SetJumpCondition(r593)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1162 <- Const { value: 0, size: 8 }
  (  2)  r1163 <- Arith(Add, r1162, r83)
         r1164 <- LoadMem { mem: r568, addr: r1163, size: 8 }
         r1176 <- CArg { value: r594, next_arg: None }
         r1177 <- CArg { value: r1163, next_arg: Some(r1176) }
         r1178 <- CArg { value: r1164, next_arg: Some(r1177) }
         r1179: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
         r1180 <- Call { callee: r1179, first_arg: Some(r1178) }
  (  2)  r1190 <- Part { src: r1180, offset: 0, size: 8 }
         r1191 <- Part { src: r1190, offset: 0, size: 4 }
         r1192 <- Part { src: r1190, offset: 0, size: 4 }
         r1193 <- Arith(BitAnd, r1191, r1192)
         r1195 <- IsZero(r1193)
         r1200 <- Not(r1195)
         r1201 <- SetJumpCondition(r1200)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1596 <- Upsilon { value: r559, phi_ref: r1508 }
         r1597 <- Upsilon { value: r568, phi_ref: r1509 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
  (  3)  r1509 <- Phi
         r1508 <- Phi
         r747 <- Const { value: 40, size: 8 }
         r748 <- Arith(Add, r747, r83)
         r749 <- LoadMem { mem: r1509, addr: r748, size: 8 }
         r756 <- Const { value: 56, size: 8 }
         r757 <- Arith(Add, r756, r83)
         r758 <- LoadMem { mem: r1509, addr: r757, size: 8 }
         r1584 <- Upsilon { value: r472, phi_ref: r1510 }
         r1585 <- Upsilon { value: r1508, phi_ref: r1511 }
         r1586 <- Upsilon { value: r758, phi_ref: r1512 }
         r1587 <- Upsilon { value: r749, phi_ref: r1513 }
         r1588 <- Upsilon { value: r1509, phi_ref: r1514 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
  (  2)  r1514 <- Phi
         r1513 <- Phi
         r1512 <- Phi
         r1511 <- Phi
         r1510 <- Phi
         r760 <- Const { value: 32, size: 8 }
         r761 <- Arith(Add, r760, r83)
         r762 <- LoadMem { mem: r1514, addr: r761, size: 8 }
         r764 <- Const { value: 0, size: 8 }
         r765 <- Arith(Add, r764, r762)
         r766 <- ArithK(Mul, r1513, 8)
         r767 <- Arith(Add, r765, r766)
  (  2)  r768 <- StoreMem { mem: r1514, addr: r767, value: r1510 }
         r769 <- Arith(Sub, r1511, r1512)
         r773 <- IsZero(r769)
         r776 <- SetJumpCondition(r773)
         r1572 <- Upsilon { value: r137, phi_ref: r1525 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r778 <- Const { value: 32, size: 8 }
         r779 <- Arith(Add, r778, r24)
         r780 <- LoadMem { mem: r768, addr: r779, size: 8 }
         r781 <- Const { value: 0, size: 8 }
         r782 <- Arith(Sub, r780, r781)
         r786 <- IsZero(r782)
         r789 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r790 <- Not(r786)
         r791 <- SetJumpCondition(r790)
         r1574 <- Upsilon { value: r18, phi_ref: r1520 }
         r1575 <- Upsilon { value: r768, phi_ref: r1521 }
         r1576 <- Upsilon { value: r18, phi_ref: r1515 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1515 <- Phi
         r793 <- Part { src: r1515, offset: 0, size: 1 }
         r794 <- Part { src: r1515, offset: 0, size: 1 }
         r795 <- Arith(BitAnd, r793, r794)
         r797 <- IsZero(r795)
         r802 <- SetJumpCondition(r797)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r804 <- Const { value: 1, size: 8 }
         r805 <- Arith(Add, r804, r1491)
         r807 <- Const { value: 46, size: 4 }
         r810 <- Const { value: 0, size: 8 }
  (  2)  r811 <- Arith(Add, r810, r83)
  (  9)  r812 <- StoreMem { mem: r184, addr: r811, value: r805 }
         r820 <- CArg { value: r811, next_arg: None }
         r821 <- CArg { value: r807, next_arg: Some(r820) }
         r822: strchr <TypeID(340441v1)> <- Const { value: 4199040, size: 8 }
         r823 <- Call { callee: r822, first_arg: Some(r821) }
  (  3)  r833 <- Part { src: r823, offset: 0, size: 8 }
         r835 <- Arith(BitAnd, r833, r833)
         r837 <- IsZero(r835)
         r842 <- SetJumpCondition(r837)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r849 <- Const { value: 24, size: 8 }
         r850 <- Arith(Add, r849, r83)
         r851 <- LoadMem { mem: r812, addr: r850, size: 8 }
         r853 <- Const { value: 1, size: 8 }
         r854 <- Arith(Add, r175, r853)
         r870 <- Const { value: 0, size: 8 }
         r871 <- Arith(Add, r870, r851)
         r872 <- LoadMem { mem: r812, addr: r871, size: 8 }
         r873 <- Arith(Sub, r854, r872)
         r875 <- CarryOf(r873)
         r880 <- Not(r875)
         r881 <- SetJumpCondition(r880)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1240 <- Const { value: 1, size: 8 }
         r1241 <- Arith(Add, r175, r1240)
         r1250: __builtin_strlen <TypeID(358626v1)> <- Const { value: 4199136, size: 8 }
         r1251 <- Call { callee: r1250, first_arg: None }
         r1261 <- Const { value: 24, size: 8 }
         r1262 <- Arith(Add, r1261, r83)
         r1263 <- LoadMem { mem: r812, addr: r1262, size: 8 }
         r1271 <- Const { value: 0, size: 8 }
         r1272 <- Arith(Add, r1271, r1263)
         r1273 <- LoadMem { mem: r812, addr: r1272, size: 8 }
         r1274 <- Arith(Sub, r1241, r1273)
         r1276 <- CarryOf(r1274)
         r1281 <- SetJumpCondition(r1276)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1283 <- Const { value: 72, size: 8 }
         r1284 <- Arith(Add, r1283, r83)
         r1285 <- LoadMem { mem: r812, addr: r1284, size: 8 }
         r1560 <- Upsilon { value: r1285, phi_ref: r1527 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r884 <- Const { value: 24, size: 8 }
         r885 <- Arith(Add, r884, r24)
         r886 <- LoadMem { mem: r812, addr: r885, size: 8 }
         r888 <- Const { value: 0, size: 8 }
         r889 <- Arith(Add, r888, r886)
         r890 <- LoadMem { mem: r812, addr: r889, size: 1 }
  (  2)  r891 <- Const { value: 0, size: 1 }
         r892 <- Arith(Sub, r890, r891)
         r896 <- IsZero(r892)
         r899 <- Not(r896)
         r900 <- SetJumpCondition(r899)
         r1561 <- Upsilon { value: r24, phi_ref: r1492 }
         r1562 <- Upsilon { value: r812, phi_ref: r1493 }
         r1564 <- Upsilon { value: r833, phi_ref: r1517 }
         r1565 <- Upsilon { value: r812, phi_ref: r1518 }
         r1566 <- Upsilon { value: r891, phi_ref: r1519 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1484 <- Const { value: 72, size: 8 }
         r1485 <- Arith(Add, r1484, r83)
         r1486 <- LoadMem { mem: r184, addr: r1485, size: 8 }
         r1559 <- Upsilon { value: r1486, phi_ref: r1522 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r598 <- Const { value: 16, size: 8 }
         r599 <- Arith(Add, r598, r83)
         r600 <- LoadMem { mem: r568, addr: r599, size: 8 }
         r602 <- Const { value: 3, size: 8 }
         r603 <- Arith(Add, r602, r472)
         r605 <- Const { value: 120, size: 8 }
         r606 <- Arith(Add, r605, r469)
         r608 <- Arith(Sub, r603, r600)
         r612 <- IsZero(r608)
         r615 <- SetJumpCondition(r612)
         r1598 <- Upsilon { value: r589, phi_ref: r1525 }
         r1600 <- Upsilon { value: r606, phi_ref: r1505 }
         r1601 <- Upsilon { value: r568, phi_ref: r1506 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1519 <- Phi
         r1518 <- Phi
         r1517 <- Phi
         r917 <- Const { value: 10, size: 4 }
         r920 <- Const { value: 8, size: 8 }
  (  2)  r921 <- Arith(Add, r920, r83)
  (  3)  r922 <- StoreMem { mem: r1518, addr: r921, value: r1517 }
         r923 <- CArg { value: r1519, next_arg: None }
         r924 <- CArg { value: r921, next_arg: Some(r923) }
         r925 <- CArg { value: r917, next_arg: Some(r924) }
         r926: je_malloc_strtoumax <TypeID(340431v1)> <- Const { value: 6451424, size: 8 }
         r927 <- Call { callee: r926, first_arg: Some(r925) }
         r937 <- Part { src: r927, offset: 0, size: 8 }
         r938 <- Const { value: 8, size: 8 }
         r939 <- Arith(Add, r938, r83)
         r940 <- LoadMem { mem: r922, addr: r939, size: 8 }
         r942 <- Const { value: -1, size: 8 }
  (  7)  r943 <- Arith(Sub, r937, r942)
         r947 <- IsZero(r943)
         r951 <- SetJumpCondition(r947)
         r1552 <- Upsilon { value: r943, phi_ref: r1525 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r953 <- Const { value: 24, size: 8 }
         r954 <- Arith(Add, r953, r14)
  (  2)  r955 <- LoadMem { mem: r922, addr: r954, size: 8 }
         r957 <- Const { value: 0, size: 8 }
         r958 <- Arith(Add, r957, r83)
  (  9)  r959 <- StoreMem { mem: r922, addr: r958, value: r940 }
         r960 <- Const { value: 0, size: 8 }
         r961 <- Arith(Add, r960, r955)
         r962 <- LoadMem { mem: r959, addr: r961, size: 1 }
         r963 <- Const { value: 0, size: 1 }
         r964 <- Arith(Sub, r962, r963)
         r968 <- IsZero(r964)
         r971 <- Not(r968)
         r972 <- SetJumpCondition(r971)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r974 <- Const { value: 24, size: 8 }
         r975 <- Arith(Add, r974, r83)
         r976 <- LoadMem { mem: r959, addr: r975, size: 8 }
         r978 <- Const { value: 32, size: 8 }
         r979 <- Arith(Add, r978, r83)
  (  2)  r980 <- LoadMem { mem: r959, addr: r979, size: 8 }
         r982 <- Const { value: 64, size: 8 }
         r983 <- Arith(Add, r982, r83)
  (  3)  r984 <- LoadMem { mem: r959, addr: r983, size: 8 }
         r986 <- Const { value: 0, size: 8 }
         r987 <- Arith(Add, r986, r976)
         r988 <- LoadMem { mem: r959, addr: r987, size: 8 }
         r992 <- CArg { value: r943, next_arg: None }
         r993 <- CArg { value: r988, next_arg: Some(r992) }
         r994 <- CArg { value: r980, next_arg: Some(r993) }
         r995 <- CArg { value: r984, next_arg: Some(r994) }
         r996 <- Const { value: 8, size: 8 }
         r997 <- Arith(Add, r996, r955)
         r998 <- LoadMem { mem: r959, addr: r997, size: 8 }
         r999 <- LoadMem { mem: r959, addr: r998, size: 8 }
         r1000 <- Call { callee: r999, first_arg: Some(r995) }
  (  2)  r1012 <- Arith(BitAnd, r943, r943)
         r1014 <- IsZero(r1012)
         r1019 <- SetJumpCondition(r1014)
         r1554 <- Upsilon { value: r1012, phi_ref: r1525 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1025 <- Const { value: 32, size: 8 }
         r1026 <- Arith(Add, r1025, r943)
         r1027 <- LoadMem { mem: r959, addr: r1026, size: 8 }
         r1028 <- Const { value: 0, size: 8 }
         r1029 <- Arith(Sub, r1027, r1028)
         r1033 <- IsZero(r1029)
         r1036 <- Const { value: 0, size: 8 }
         r1037 <- Arith(Add, r1036, r980)
         r1038 <- ArithK(Mul, r175, 8)
         r1039 <- Arith(Add, r1037, r1038)
         r1040 <- StoreMem { mem: r959, addr: r1039, value: r943 }
         r1041 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1042 <- SetJumpCondition(r1033)
         r1556 <- Upsilon { value: r984, phi_ref: r1515 }
         r1557 <- Upsilon { value: r984, phi_ref: r1520 }
         r1558 <- Upsilon { value: r1040, phi_ref: r1521 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
         r1521 <- Phi
  (  2)  r1520 <- Phi
         r1044 <- Const { value: 72, size: 8 }
         r1045 <- Arith(Add, r1044, r83)
         r1046 <- LoadMem { mem: r1521, addr: r1045, size: 8 }
         r1048 <- Part { src: r1520, offset: 0, size: 1 }
         r1049 <- Part { src: r1520, offset: 0, size: 1 }
         r1050 <- Arith(BitAnd, r1048, r1049)
         r1052 <- IsZero(r1050)
         r1057 <- Not(r1052)
         r1058 <- SetJumpCondition(r1057)
         r1549 <- Upsilon { value: r137, phi_ref: r1525 }
         r1551 <- Upsilon { value: r1046, phi_ref: r1522 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1522 <- Phi
         r1060 <- Const { value: 1, size: 8 }
         r1061 <- Arith(Add, r1060, r175)
         r1063 <- Const { value: 24, size: 8 }
         r1064 <- Arith(Add, r1063, r83)
         r1065 <- LoadMem { mem: r184, addr: r1064, size: 8 }
         r1067 <- Const { value: 0, size: 8 }
         r1068 <- Arith(Add, r1067, r1065)
         r1069 <- StoreMem { mem: r184, addr: r1068, value: r1061 }
  (  2)  r1070 <- Arith(BitAnd, r1522, r1522)
         r1072 <- IsZero(r1070)
         r1077 <- Not(r1072)
         r1078 <- SetJumpCondition(r1077)
         r1547 <- Upsilon { value: r1070, phi_ref: r1528 }
         r1548 <- Upsilon { value: r1069, phi_ref: r1529 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1534 <- Upsilon { value: r17, phi_ref: r1527 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1527 <- Phi
  (  2)  r1287 <- Arith(BitAnd, r1527, r1527)
         r1289 <- IsZero(r1287)
         r1294 <- SetJumpCondition(r1289)
         r1537 <- Upsilon { value: r1287, phi_ref: r1528 }
         r1538 <- Upsilon { value: r103, phi_ref: r1529 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1529 <- Phi
         r1528 <- Phi
         r1296 <- Const { value: 0, size: 8 }
         r1297 <- Arith(Add, r1296, r1528)
         r1298 <- StoreMem { mem: r1529, addr: r1297, value: r24 }
         r1299 <- Part { src: r137, offset: 0, size: 4 }
         r1300 <- Part { src: r137, offset: 0, size: 4 }
         r1301 <- Arith(BitXor, r1299, r1300)
         r1302 <- Part { src: r137, offset: 4, size: 4 }
         r1303 <- Concat { lo: r1301, hi: r1302 }
         r1535 <- Upsilon { value: r1303, phi_ref: r1523 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1080 <- Part { src: r137, offset: 0, size: 4 }
         r1081 <- Part { src: r137, offset: 0, size: 4 }
         r1082 <- Arith(BitXor, r1080, r1081)
         r1083 <- Part { src: r137, offset: 4, size: 4 }
         r1084 <- Concat { lo: r1082, hi: r1083 }
         r1539 <- Upsilon { value: r1084, phi_ref: r1523 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1523 <- Phi
         r1118 <- SetReturnValue(r1523)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1525 <- Phi
         r1213 <- Const { value: 2, size: 4 }
         r1214 <- Part { src: r1525, offset: 4, size: 4 }
         r1215 <- Concat { lo: r1213, hi: r1214 }
         r1234 <- SetReturnValue(r1215)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r16, r17, r18, r19, r20, r23, r24, r25, r26, r43, r65, r66, r67, r68, r70, r73, r74, r75, r76, r77, r78, r79, r80, r82, r83, r91, r92, r93, r95, r96, r97, r98, r99, r100, r101, r102, r103, r111, r112, r113, r114, r124, r126, r128, r133, r1530]
  BlockID(1) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) } [r1491, r135, r136, r137, r140, r145, r148, r1532]
  BlockID(2) -> Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) } [r150, r151, r152, r154, r155, r156, r157, r158, r162, r165]
  BlockID(3) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) } [r167, r168, r169, r171, r172, r173, r174, r175, r182, r183, r184, r185, r186, r187, r188, r189, r193, r196, r1542, r1543, r1544, r1545, r1546]
  BlockID(4) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) } [r1493, r1492, r198, r199, r200, r202, r203, r204, r205, r207, r212, r1567]
  BlockID(5) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) } [r215, r216, r217, r218, r219, r226, r227, r228, r229, r230, r234, r237, r1569, r1570, r1571]
  BlockID(6) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) } [r239, r240, r244, r247, r1602, r1603, r1604]
  BlockID(7) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) } [r249, r250, r254, r257, r1617, r1618, r1619]
  BlockID(8) -> Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) } [r259, r260, r261, r263, r264, r265, r267, r268, r269, r271, r272, r273, r277, r278, r279, r289, r294, r295, r296, r299, r303, r304, r306, r1628]
  BlockID(9) -> Always(Block(BlockID(10))) [r1494, r311, r312, r1635, r1636, r1637]
  BlockID(10) -> Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) } [r1497, r1496, r1495, r314, r315, r316, r318, r319, r320, r323, r324, r325, r329, r330, r331, r341, r346, r347, r348, r350, r354, r355, r357]
  BlockID(11) -> Always(Block(BlockID(12))) [r368, r369, r1625, r1626, r1627]
  BlockID(12) -> Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) } [r1500, r1499, r1498, r377, r378, r379, r381, r382, r383, r386, r387, r388, r392, r393, r394, r404, r409, r410, r411, r413, r417, r418, r420, r1605]
  BlockID(13) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) } [r1501, r422, r423, r424, r426, r427, r435, r436, r444, r448, r451, r1612, r1614, r1615, r1616]
  BlockID(14) -> Always(Block(BlockID(19))) [r1504, r1503, r1502, r453, r454, r455, r457, r458, r459, r460, r461, r462, r1577, r1578]
  BlockID(15) -> Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) } [r464, r465, r466, r468, r469, r471, r472, r478, r479, r480, r484, r485, r486, r496, r501, r505, r506, r508]
  BlockID(16) -> Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) } [r510, r511, r512, r514, r515, r517, r518, r522, r523, r524, r528, r529, r530, r540, r545, r549, r550, r552]
  BlockID(17) -> Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) } [r554, r555, r556, r558, r559, r561, r562, r566, r567, r568, r572, r573, r574, r584, r589, r593, r594, r596]
  BlockID(18) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) } [r598, r599, r600, r602, r603, r605, r606, r608, r612, r615, r1598, r1600, r1601]
  BlockID(19) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) } [r1506, r1505, r617, r618, r619, r626, r627, r628, r638, r639, r643, r644, r646, r647]
  BlockID(20) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) } [r649, r650, r651, r664, r665, r666, r667, r668, r678, r679, r680, r681, r683, r688, r689]
  BlockID(21) -> Always(Block(BlockID(24))) [r692, r693, r694, r700, r701, r702, r1579, r1580, r1581, r1582, r1583]
  BlockID(22) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) } [r705, r706, r707, r719, r720, r721, r722, r723, r733, r734, r735, r736, r738, r743, r744, r1590, r1591]
  BlockID(23) -> Always(Block(BlockID(24))) [r1509, r1508, r747, r748, r749, r756, r757, r758, r1584, r1585, r1586, r1587, r1588]
  BlockID(24) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) } [r1514, r1513, r1512, r1511, r1510, r760, r761, r762, r764, r765, r766, r767, r768, r769, r773, r776, r1572]
  BlockID(25) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) } [r778, r779, r780, r781, r782, r786, r789, r790, r791, r1574, r1575, r1576]
  BlockID(26) -> Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) } [r1515, r793, r794, r795, r797, r802]
  BlockID(27) -> Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) } [r804, r805, r807, r810, r811, r812, r820, r821, r822, r823, r833, r835, r837, r842]
  BlockID(28) -> Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) } [r849, r850, r851, r853, r854, r870, r871, r872, r873, r875, r880, r881]
  BlockID(29) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) } [r884, r885, r886, r888, r889, r890, r891, r892, r896, r899, r900, r1561, r1562, r1564, r1565, r1566]
  BlockID(30) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) } [r1519, r1518, r1517, r917, r920, r921, r922, r923, r924, r925, r926, r927, r937, r938, r939, r940, r942, r943, r947, r951, r1552]
  BlockID(31) -> Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) } [r953, r954, r955, r957, r958, r959, r960, r961, r962, r963, r964, r968, r971, r972]
  BlockID(32) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) } [r974, r975, r976, r978, r979, r980, r982, r983, r984, r986, r987, r988, r992, r993, r994, r995, r996, r997, r998, r999, r1000, r1012, r1014, r1019, r1554]
  BlockID(33) -> Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) } [r1025, r1026, r1027, r1028, r1029, r1033, r1036, r1037, r1038, r1039, r1040, r1041, r1042, r1556, r1557, r1558]
  BlockID(34) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) } [r1521, r1520, r1044, r1045, r1046, r1048, r1049, r1050, r1052, r1057, r1058, r1549, r1551]
  BlockID(35) -> Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) } [r1522, r1060, r1061, r1063, r1064, r1065, r1067, r1068, r1069, r1070, r1072, r1077, r1078, r1547, r1548]
  BlockID(36) -> Always(Block(BlockID(37))) [r1080, r1081, r1082, r1083, r1084, r1539]
  BlockID(37) -> Always(Return) [r1523, r1118]
  BlockID(38) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) } [r1120, r1121, r1122, r1134, r1135, r1136, r1137, r1138, r1148, r1149, r1150, r1151, r1153, r1158, r1159]
  BlockID(39) -> Always(Block(BlockID(23))) [r1593, r1594]
  BlockID(40) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) } [r1162, r1163, r1164, r1176, r1177, r1178, r1179, r1180, r1190, r1191, r1192, r1193, r1195, r1200, r1201]
  BlockID(41) -> Always(Block(BlockID(23))) [r1596, r1597]
  BlockID(42) -> Always(Return) [r1525, r1213, r1214, r1215, r1234]
  BlockID(43) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) } [r1240, r1241, r1250, r1251, r1261, r1262, r1263, r1271, r1272, r1273, r1274, r1276, r1281]
  BlockID(44) -> Always(Block(BlockID(45))) [r1283, r1284, r1285, r1560]
  BlockID(45) -> Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) } [r1527, r1287, r1289, r1294, r1537, r1538]
  BlockID(46) -> Always(Block(BlockID(37))) [r1529, r1528, r1296, r1297, r1298, r1299, r1300, r1301, r1302, r1303, r1535]
  BlockID(47) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) } [r1311, r1312, r1313, r1316, r1317, r1318, r1328, r1329, r1330, r1331, r1332, r1342, r1347, r1348, r1349, r1351, r1356, r1357, r1606]
  BlockID(48) -> Always(Block(BlockID(24))) [r1607, r1608, r1609, r1610, r1611]
  BlockID(49) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) } [r1360, r1361, r1362, r1365, r1366, r1367, r1377, r1378, r1379, r1380, r1381, r1391, r1396, r1397, r1398, r1400, r1405, r1406]
  BlockID(50) -> Always(Block(BlockID(24))) [r1620, r1621, r1622, r1623, r1624]
  BlockID(51) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) } [r1409, r1410, r1411, r1414, r1415, r1416, r1417, r1418, r1419, r1429, r1430, r1431, r1432, r1433, r1443, r1449, r1450, r1451, r1453, r1458, r1459, r1629]
  BlockID(52) -> Always(Block(BlockID(24))) [r1630, r1631, r1632, r1633, r1634]
  BlockID(53) -> Always(Block(BlockID(1))) [r1462, r1463, r1464, r1467, r1468, r1478, r1479, r1480, r1481, r1531]
  BlockID(54) -> Always(Block(BlockID(35))) [r1484, r1485, r1486, r1559]
  BlockID(55) -> Always(Block(BlockID(45))) [r1534]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(51)
    |  |  |  |  |  |  |  |  |  |  BlockID(52)
    |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  |  BlockID(49)
    |  |  |  |  |  |  |  |  |  |  BlockID(50)
    |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  BlockID(47)
    |  |  |  |  |  |  |  |  |  BlockID(48)
    |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(40)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(41)
    |  |  |  |  |  |  |  |  |  |  BlockID(38)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(39)
    |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  BlockID(26)
    |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  BlockID(43)
    |  |  |  |  |  |  BlockID(44)
    |  |  |  |  |  BlockID(54)
    |  |  |  |  BlockID(30)
    |  |  |  |  |  BlockID(31)
    |  |  |  |  |  |  BlockID(32)
    |  |  |  |  |  |  |  BlockID(33)
    |  |  |  |  BlockID(34)
    |  |  |  |  BlockID(35)
    |  |  |  BlockID(36)
    |  |  |  BlockID(37)
    |  |  |  BlockID(45)
    |  |  |  BlockID(46)
    |  |  |  BlockID(55)
    |  |  BlockID(42)
    |  BlockID(53)

ssa post-xform:
ssa program  1698 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
  ( 50)  r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
  (  3)  r14 <- Ancestral(AncestralName("RSI"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  7)  r17 <- Ancestral(AncestralName("RCX"))
  ( 15)  r18 <- Ancestral(AncestralName("RDX"))
         r19 <- Ancestral(AncestralName("R8"))
  (  5)  r20 <- Ancestral(AncestralName("R9"))
         r23 <- Ancestral(AncestralName("R12"))
  (  5)  r24 <- Ancestral(AncestralName("R13"))
         r25 <- Ancestral(AncestralName("R14"))
  (  4)  r26 <- Ancestral(AncestralName("R15"))
         r43 <- Ancestral(AncestralName("memory"))
         r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r26 }
         r67 <- ArithK(Add, r11, -16)
         r68 <- StoreMem { mem: r66, addr: r67, value: r25 }
         r70 <- Const { value: 46, size: 4 }
         r73 <- ArithK(Add, r11, -24)
         r74 <- StoreMem { mem: r68, addr: r73, value: r24 }
         r75 <- ArithK(Add, r11, -32)
         r76 <- StoreMem { mem: r74, addr: r75, value: r23 }
         r77 <- ArithK(Add, r11, -40)
         r78 <- StoreMem { mem: r76, addr: r77, value: r10 }
         r79 <- ArithK(Add, r11, -48)
         r80 <- StoreMem { mem: r78, addr: r79, value: r16 }
         r92 <- ArithK(Add, r11, -72)
         r93 <- StoreMem { mem: r80, addr: r92, value: r13 }
         r96 <- ArithK(Add, r11, -104)
         r97 <- StoreMem { mem: r93, addr: r96, value: r19 }
         r99 <- ArithK(Add, r11, -136)
         r100 <- StoreMem { mem: r97, addr: r99, value: r18 }
  (  2)  r102 <- ArithK(Add, r11, -112)
  (  4)  r103 <- StoreMem { mem: r100, addr: r102, value: r20 }
         r111 <- CArg { value: r102, next_arg: None }
         r112 <- CArg { value: r70, next_arg: Some(r111) }
         r113: strchr <TypeID(340441v1)> <- Const { value: 4199040, size: 8 }
  (  3)  r114 <- Call { callee: r113, first_arg: Some(r112) }
         r128 <- IsZero(r114)
         r133 <- SetJumpCondition(r128)
         r1530 <- Upsilon { value: r114, phi_ref: r1491 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1467: __builtin_strlen <TypeID(358626v1)> <- Const { value: 4199136, size: 8 }
         r1468 <- Call { callee: r1467, first_arg: None }
         r1481 <- Arith(Add, r18, r114)
         r1531 <- Upsilon { value: r1481, phi_ref: r1491 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  9)  r1491 <- Phi
  (  8)  r140 <- Arith(Sub, r1491, r18)
         r145 <- IsZero(r140)
         r148 <- SetJumpCondition(r145)
         r1532 <- Upsilon { value: r18, phi_ref: r1525 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r156 <- LoadMem { mem: r103, addr: r20, size: 8 }
         r162 <- IsZero(r156)
         r165 <- SetJumpCondition(r162)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r168 <- ArithK(Add, r14, 24)
  ( 10)  r169 <- LoadMem { mem: r103, addr: r168, size: 8 }
         r171 <- Part { src: r26, offset: 0, size: 4 }
         r172 <- Part { src: r26, offset: 0, size: 4 }
         r173 <- Arith(BitXor, r171, r172)
         r174 <- Part { src: r26, offset: 4, size: 4 }
  (  8)  r175 <- Concat { lo: r173, hi: r174 }
         r183 <- ArithK(Add, r11, -64)
  (  5)  r184 <- StoreMem { mem: r103, addr: r183, value: r17 }
         r187 <- LoadMem { mem: r184, addr: r169, size: 1 }
         r188 <- Const { value: 0, size: 1 }
         r193 <- IsZero(r187)
         r196 <- SetJumpCondition(r193)
         r1542 <- Upsilon { value: r1491, phi_ref: r1517 }
         r1543 <- Upsilon { value: r184, phi_ref: r1518 }
         r1544 <- Upsilon { value: r188, phi_ref: r1519 }
         r1545 <- Upsilon { value: r14, phi_ref: r1492 }
         r1546 <- Upsilon { value: r184, phi_ref: r1493 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  2)  r1493 <- Phi
  (  5)  r1492 <- Phi
         r199 <- ArithK(Add, r1492, 16)
  (  4)  r200 <- LoadMem { mem: r1493, addr: r199, size: 8 }
         r203 <- ArithK(Add, r11, -120)
  (  5)  r204 <- StoreMem { mem: r1493, addr: r203, value: r200 }
         r207 <- IsZero(r200)
         r212 <- SetJumpCondition(r207)
         r1567 <- Upsilon { value: r18, phi_ref: r1525 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r215 <- Part { src: r17, offset: 0, size: 4 }
         r216 <- Part { src: r17, offset: 0, size: 4 }
         r217 <- Arith(BitXor, r215, r216)
         r218 <- Part { src: r17, offset: 4, size: 4 }
  (  9)  r219 <- Concat { lo: r217, hi: r218 }
         r226 <- Part { src: r200, offset: 0, size: 4 }
  (  2)  r228 <- ArithK(BitAnd, r226, 3)
         r229 <- Part { src: r200, offset: 4, size: 4 }
  (  2)  r230 <- Concat { lo: r228, hi: r229 }
         r234 <- IsZero(r228)
         r237 <- SetJumpCondition(r234)
         r1569 <- Upsilon { value: r1491, phi_ref: r1502 }
         r1570 <- Upsilon { value: r169, phi_ref: r1503 }
         r1571 <- Upsilon { value: r204, phi_ref: r1504 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r240 <- ArithK(Add, r230, -1)
         r244 <- IsZero(r240)
         r247 <- SetJumpCondition(r244)
         r1602 <- Upsilon { value: r1491, phi_ref: r1498 }
         r1603 <- Upsilon { value: r169, phi_ref: r1499 }
         r1604 <- Upsilon { value: r204, phi_ref: r1500 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r250 <- ArithK(Add, r230, -3)
         r254 <- IsZero(r250)
         r257 <- SetJumpCondition(r254)
         r1617 <- Upsilon { value: r1491, phi_ref: r1495 }
         r1618 <- Upsilon { value: r169, phi_ref: r1496 }
         r1619 <- Upsilon { value: r204, phi_ref: r1497 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r260 <- ArithK(Add, r169, 8)
  (  2)  r261 <- LoadMem { mem: r204, addr: r260, size: 8 }
         r264 <- ArithK(Add, r11, -88)
         r265 <- StoreMem { mem: r204, addr: r264, value: r1491 }
         r268 <- ArithK(Add, r11, -96)
         r269 <- StoreMem { mem: r265, addr: r268, value: r169 }
         r272 <- ArithK(Add, r11, -128)
  (  3)  r273 <- StoreMem { mem: r269, addr: r272, value: r261 }
         r277 <- CArg { value: r261, next_arg: None }
         r278: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r279 <- Call { callee: r278, first_arg: Some(r277) }
  (  2)  r299 <- Arith(Sub, r279, r140)
         r303 <- IsZero(r299)
         r304 <- Part { src: r299, offset: 0, size: 1 }
         r306 <- SetJumpCondition(r303)
         r1628 <- Upsilon { value: r169, phi_ref: r1494 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1410 <- ArithK(Add, r11, -136)
         r1411 <- LoadMem { mem: r273, addr: r1410, size: 8 }
         r1415 <- ArithK(Add, r11, -96)
         r1416 <- StoreMem { mem: r273, addr: r1415, value: r1491 }
  (  2)  r1418 <- ArithK(Add, r11, -128)
         r1419 <- StoreMem { mem: r1416, addr: r1418, value: r169 }
         r1429 <- CArg { value: r304, next_arg: None }
         r1430 <- CArg { value: r1418, next_arg: Some(r1429) }
         r1431 <- CArg { value: r1411, next_arg: Some(r1430) }
         r1432: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1433 <- Call { callee: r1432, first_arg: Some(r1431) }
         r1449 <- Part { src: r1433, offset: 0, size: 4 }
         r1450 <- Part { src: r1433, offset: 0, size: 4 }
         r1451 <- Arith(BitAnd, r1449, r1450)
         r1453 <- IsZero(r1451)
         r1458 <- Not(r1453)
         r1459 <- SetJumpCondition(r1458)
         r1629 <- Upsilon { value: r169, phi_ref: r1494 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1630 <- Upsilon { value: r219, phi_ref: r1510 }
         r1631 <- Upsilon { value: r169, phi_ref: r1511 }
         r1632 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1633 <- Upsilon { value: r175, phi_ref: r1513 }
         r1634 <- Upsilon { value: r1419, phi_ref: r1514 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1494 <- Phi
         r312 <- ArithK(Add, r1494, 40)
         r1635 <- Upsilon { value: r1491, phi_ref: r1495 }
         r1636 <- Upsilon { value: r312, phi_ref: r1496 }
         r1637 <- Upsilon { value: r273, phi_ref: r1497 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  2)  r1497 <- Phi
  (  3)  r1496 <- Phi
  (  3)  r1495 <- Phi
         r315 <- ArithK(Add, r1496, 8)
  (  2)  r316 <- LoadMem { mem: r1497, addr: r315, size: 8 }
         r319 <- ArithK(Add, r11, -96)
         r320 <- StoreMem { mem: r1497, addr: r319, value: r1495 }
         r324 <- ArithK(Add, r11, -128)
  (  3)  r325 <- StoreMem { mem: r320, addr: r324, value: r316 }
         r329 <- CArg { value: r316, next_arg: None }
         r330: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r331 <- Call { callee: r330, first_arg: Some(r329) }
  (  2)  r350 <- Arith(Sub, r331, r140)
         r354 <- IsZero(r350)
         r355 <- Part { src: r350, offset: 0, size: 1 }
         r357 <- SetJumpCondition(r354)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1361 <- ArithK(Add, r11, -136)
         r1362 <- LoadMem { mem: r325, addr: r1361, size: 8 }
  (  2)  r1366 <- ArithK(Add, r11, -128)
         r1367 <- StoreMem { mem: r325, addr: r1366, value: r1495 }
         r1377 <- CArg { value: r355, next_arg: None }
         r1378 <- CArg { value: r1366, next_arg: Some(r1377) }
         r1379 <- CArg { value: r1362, next_arg: Some(r1378) }
         r1380: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1381 <- Call { callee: r1380, first_arg: Some(r1379) }
         r1396 <- Part { src: r1381, offset: 0, size: 4 }
         r1397 <- Part { src: r1381, offset: 0, size: 4 }
         r1398 <- Arith(BitAnd, r1396, r1397)
         r1400 <- IsZero(r1398)
         r1405 <- Not(r1400)
         r1406 <- SetJumpCondition(r1405)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1620 <- Upsilon { value: r219, phi_ref: r1510 }
         r1621 <- Upsilon { value: r1496, phi_ref: r1511 }
         r1622 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1623 <- Upsilon { value: r175, phi_ref: r1513 }
         r1624 <- Upsilon { value: r1367, phi_ref: r1514 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r369 <- ArithK(Add, r1496, 40)
         r1625 <- Upsilon { value: r1495, phi_ref: r1498 }
         r1626 <- Upsilon { value: r369, phi_ref: r1499 }
         r1627 <- Upsilon { value: r325, phi_ref: r1500 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  2)  r1500 <- Phi
  (  3)  r1499 <- Phi
  (  3)  r1498 <- Phi
         r378 <- ArithK(Add, r1499, 8)
  (  2)  r379 <- LoadMem { mem: r1500, addr: r378, size: 8 }
         r382 <- ArithK(Add, r11, -96)
         r383 <- StoreMem { mem: r1500, addr: r382, value: r1498 }
         r387 <- ArithK(Add, r11, -128)
  (  3)  r388 <- StoreMem { mem: r383, addr: r387, value: r379 }
         r392 <- CArg { value: r379, next_arg: None }
         r393: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r394 <- Call { callee: r393, first_arg: Some(r392) }
  (  3)  r413 <- Arith(Sub, r394, r140)
         r417 <- IsZero(r413)
         r418 <- Part { src: r413, offset: 0, size: 1 }
         r420 <- SetJumpCondition(r417)
         r1605 <- Upsilon { value: r388, phi_ref: r1501 }
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1312 <- ArithK(Add, r11, -136)
         r1313 <- LoadMem { mem: r388, addr: r1312, size: 8 }
  (  2)  r1317 <- ArithK(Add, r11, -128)
  (  2)  r1318 <- StoreMem { mem: r388, addr: r1317, value: r1498 }
         r1328 <- CArg { value: r418, next_arg: None }
         r1329 <- CArg { value: r1317, next_arg: Some(r1328) }
         r1330 <- CArg { value: r1313, next_arg: Some(r1329) }
         r1331: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1332 <- Call { callee: r1331, first_arg: Some(r1330) }
         r1347 <- Part { src: r1332, offset: 0, size: 4 }
         r1348 <- Part { src: r1332, offset: 0, size: 4 }
         r1349 <- Arith(BitAnd, r1347, r1348)
         r1351 <- IsZero(r1349)
         r1356 <- Not(r1351)
         r1357 <- SetJumpCondition(r1356)
         r1606 <- Upsilon { value: r1318, phi_ref: r1501 }
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1607 <- Upsilon { value: r219, phi_ref: r1510 }
         r1608 <- Upsilon { value: r1499, phi_ref: r1511 }
         r1609 <- Upsilon { value: r1492, phi_ref: r1512 }
         r1610 <- Upsilon { value: r175, phi_ref: r1513 }
         r1611 <- Upsilon { value: r1318, phi_ref: r1514 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
  (  2)  r1501 <- Phi
         r423 <- ArithK(Add, r11, -120)
         r424 <- LoadMem { mem: r1501, addr: r423, size: 8 }
         r427 <- ArithK(Add, r219, 1)
         r436 <- ArithK(Add, r1499, 40)
         r444 <- Arith(Sub, r427, r424)
         r448 <- IsZero(r444)
         r451 <- SetJumpCondition(r448)
         r1612 <- Upsilon { value: r413, phi_ref: r1525 }
         r1614 <- Upsilon { value: r1498, phi_ref: r1502 }
         r1615 <- Upsilon { value: r436, phi_ref: r1503 }
         r1616 <- Upsilon { value: r1501, phi_ref: r1504 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1504 <- Phi
         r1503 <- Phi
         r1502 <- Phi
         r454 <- ArithK(Add, r11, -80)
         r455 <- StoreMem { mem: r1504, addr: r454, value: r1492 }
         r458 <- ArithK(Add, r11, -96)
         r459 <- StoreMem { mem: r455, addr: r458, value: r175 }
         r461 <- ArithK(Add, r11, -88)
         r462 <- StoreMem { mem: r459, addr: r461, value: r1502 }
         r1577 <- Upsilon { value: r1503, phi_ref: r1505 }
         r1578 <- Upsilon { value: r462, phi_ref: r1506 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  7)  r1506 <- Phi
  (  9)  r1505 <- Phi
         r618 <- ArithK(Add, r1505, 8)
         r619 <- LoadMem { mem: r1506, addr: r618, size: 8 }
         r626 <- CArg { value: r619, next_arg: None }
         r627: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r628 <- Call { callee: r627, first_arg: Some(r626) }
  (  2)  r639 <- Arith(Sub, r628, r140)
         r643 <- IsZero(r639)
         r644 <- Part { src: r639, offset: 0, size: 1 }
         r646 <- Not(r643)
         r647 <- SetJumpCondition(r646)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
  (  2)  r650 <- ArithK(Add, r11, -136)
         r651 <- LoadMem { mem: r1506, addr: r650, size: 8 }
         r664 <- CArg { value: r644, next_arg: None }
         r665 <- CArg { value: r650, next_arg: Some(r664) }
         r666 <- CArg { value: r651, next_arg: Some(r665) }
         r667: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r668 <- Call { callee: r667, first_arg: Some(r666) }
         r679 <- Part { src: r668, offset: 0, size: 4 }
         r680 <- Part { src: r668, offset: 0, size: 4 }
         r681 <- Arith(BitAnd, r679, r680)
         r683 <- IsZero(r681)
         r688 <- Not(r683)
         r689 <- SetJumpCondition(r688)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r693 <- ArithK(Add, r11, -96)
         r694 <- LoadMem { mem: r1506, addr: r693, size: 8 }
         r701 <- ArithK(Add, r11, -80)
         r702 <- LoadMem { mem: r1506, addr: r701, size: 8 }
         r1579 <- Upsilon { value: r219, phi_ref: r1510 }
         r1580 <- Upsilon { value: r1505, phi_ref: r1511 }
         r1581 <- Upsilon { value: r702, phi_ref: r1512 }
         r1582 <- Upsilon { value: r694, phi_ref: r1513 }
         r1583 <- Upsilon { value: r1506, phi_ref: r1514 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r465 <- ArithK(Add, r1505, 48)
         r466 <- LoadMem { mem: r1506, addr: r465, size: 8 }
         r469 <- ArithK(Add, r1505, 40)
  (  2)  r472 <- ArithK(Add, r219, 1)
         r479 <- ArithK(Add, r11, -128)
  (  4)  r480 <- StoreMem { mem: r1506, addr: r479, value: r466 }
         r484 <- CArg { value: r472, next_arg: None }
         r485: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r486 <- Call { callee: r485, first_arg: Some(r484) }
  (  2)  r501 <- Arith(Sub, r486, r140)
         r505 <- IsZero(r501)
         r506 <- Part { src: r501, offset: 0, size: 1 }
         r508 <- SetJumpCondition(r505)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
  (  2)  r706 <- ArithK(Add, r11, -136)
         r707 <- LoadMem { mem: r480, addr: r706, size: 8 }
         r719 <- CArg { value: r506, next_arg: None }
         r720 <- CArg { value: r706, next_arg: Some(r719) }
         r721 <- CArg { value: r707, next_arg: Some(r720) }
         r722: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r723 <- Call { callee: r722, first_arg: Some(r721) }
         r734 <- Part { src: r723, offset: 0, size: 4 }
         r735 <- Part { src: r723, offset: 0, size: 4 }
         r736 <- Arith(BitAnd, r734, r735)
         r738 <- IsZero(r736)
         r743 <- Not(r738)
         r744 <- SetJumpCondition(r743)
         r1590 <- Upsilon { value: r469, phi_ref: r1508 }
         r1591 <- Upsilon { value: r480, phi_ref: r1509 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r511 <- ArithK(Add, r1505, 88)
         r512 <- LoadMem { mem: r480, addr: r511, size: 8 }
         r515 <- ArithK(Add, r1505, 80)
         r518 <- ArithK(Add, r219, 2)
         r523 <- ArithK(Add, r11, -128)
  (  4)  r524 <- StoreMem { mem: r480, addr: r523, value: r512 }
         r528 <- CArg { value: r518, next_arg: None }
         r529: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r530 <- Call { callee: r529, first_arg: Some(r528) }
  (  2)  r545 <- Arith(Sub, r530, r140)
         r549 <- IsZero(r545)
         r550 <- Part { src: r545, offset: 0, size: 1 }
         r552 <- SetJumpCondition(r549)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
  (  2)  r1121 <- ArithK(Add, r11, -136)
         r1122 <- LoadMem { mem: r524, addr: r1121, size: 8 }
         r1134 <- CArg { value: r550, next_arg: None }
         r1135 <- CArg { value: r1121, next_arg: Some(r1134) }
         r1136 <- CArg { value: r1122, next_arg: Some(r1135) }
         r1137: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1138 <- Call { callee: r1137, first_arg: Some(r1136) }
         r1149 <- Part { src: r1138, offset: 0, size: 4 }
         r1150 <- Part { src: r1138, offset: 0, size: 4 }
         r1151 <- Arith(BitAnd, r1149, r1150)
         r1153 <- IsZero(r1151)
         r1158 <- Not(r1153)
         r1159 <- SetJumpCondition(r1158)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1593 <- Upsilon { value: r515, phi_ref: r1508 }
         r1594 <- Upsilon { value: r524, phi_ref: r1509 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r555 <- ArithK(Add, r1505, 128)
         r556 <- LoadMem { mem: r524, addr: r555, size: 8 }
         r559 <- ArithK(Add, r1505, 120)
         r562 <- ArithK(Add, r219, 3)
         r567 <- ArithK(Add, r11, -128)
  (  4)  r568 <- StoreMem { mem: r524, addr: r567, value: r556 }
         r572 <- CArg { value: r562, next_arg: None }
         r573: strlen <TypeID(340439v1)> <- Const { value: 4199136, size: 8 }
         r574 <- Call { callee: r573, first_arg: Some(r572) }
  (  3)  r589 <- Arith(Sub, r574, r140)
         r593 <- IsZero(r589)
         r594 <- Part { src: r589, offset: 0, size: 1 }
         r596 <- SetJumpCondition(r593)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
  (  2)  r1163 <- ArithK(Add, r11, -136)
         r1164 <- LoadMem { mem: r568, addr: r1163, size: 8 }
         r1176 <- CArg { value: r594, next_arg: None }
         r1177 <- CArg { value: r1163, next_arg: Some(r1176) }
         r1178 <- CArg { value: r1164, next_arg: Some(r1177) }
         r1179: strncmp <TypeID(340435v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1180 <- Call { callee: r1179, first_arg: Some(r1178) }
         r1191 <- Part { src: r1180, offset: 0, size: 4 }
         r1192 <- Part { src: r1180, offset: 0, size: 4 }
         r1193 <- Arith(BitAnd, r1191, r1192)
         r1195 <- IsZero(r1193)
         r1200 <- Not(r1195)
         r1201 <- SetJumpCondition(r1200)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1596 <- Upsilon { value: r559, phi_ref: r1508 }
         r1597 <- Upsilon { value: r568, phi_ref: r1509 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
  (  3)  r1509 <- Phi
         r1508 <- Phi
         r748 <- ArithK(Add, r11, -96)
         r749 <- LoadMem { mem: r1509, addr: r748, size: 8 }
         r757 <- ArithK(Add, r11, -80)
         r758 <- LoadMem { mem: r1509, addr: r757, size: 8 }
         r1584 <- Upsilon { value: r472, phi_ref: r1510 }
         r1585 <- Upsilon { value: r1508, phi_ref: r1511 }
         r1586 <- Upsilon { value: r758, phi_ref: r1512 }
         r1587 <- Upsilon { value: r749, phi_ref: r1513 }
         r1588 <- Upsilon { value: r1509, phi_ref: r1514 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
  (  2)  r1514 <- Phi
         r1513 <- Phi
         r1512 <- Phi
         r1511 <- Phi
         r1510 <- Phi
         r761 <- ArithK(Add, r11, -104)
         r762 <- LoadMem { mem: r1514, addr: r761, size: 8 }
         r766 <- ArithK(Mul, r1513, 8)
         r767 <- Arith(Add, r762, r766)
  (  2)  r768 <- StoreMem { mem: r1514, addr: r767, value: r1510 }
         r769 <- Arith(Sub, r1511, r1512)
         r773 <- IsZero(r769)
         r776 <- SetJumpCondition(r773)
         r1572 <- Upsilon { value: r18, phi_ref: r1525 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r779 <- ArithK(Add, r24, 32)
         r780 <- LoadMem { mem: r768, addr: r779, size: 8 }
         r786 <- IsZero(r780)
         r789 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r790 <- Not(r786)
         r791 <- SetJumpCondition(r790)
         r1574 <- Upsilon { value: r18, phi_ref: r1520 }
         r1575 <- Upsilon { value: r768, phi_ref: r1521 }
         r1576 <- Upsilon { value: r18, phi_ref: r1515 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1515 <- Phi
         r793 <- Part { src: r1515, offset: 0, size: 1 }
         r794 <- Part { src: r1515, offset: 0, size: 1 }
         r795 <- Arith(BitAnd, r793, r794)
         r797 <- IsZero(r795)
         r802 <- SetJumpCondition(r797)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r805 <- ArithK(Add, r1491, 1)
         r807 <- Const { value: 46, size: 4 }
  (  2)  r811 <- ArithK(Add, r11, -136)
  (  6)  r812 <- StoreMem { mem: r184, addr: r811, value: r805 }
         r820 <- CArg { value: r811, next_arg: None }
         r821 <- CArg { value: r807, next_arg: Some(r820) }
         r822: strchr <TypeID(340441v1)> <- Const { value: 4199040, size: 8 }
  (  2)  r823 <- Call { callee: r822, first_arg: Some(r821) }
         r837 <- IsZero(r823)
         r842 <- SetJumpCondition(r837)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r854 <- ArithK(Add, r175, 1)
         r872 <- LoadMem { mem: r812, addr: r20, size: 8 }
         r873 <- Arith(Sub, r854, r872)
         r875 <- CarryOf(r873)
         r880 <- Not(r875)
         r881 <- SetJumpCondition(r880)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1241 <- ArithK(Add, r175, 1)
         r1250: __builtin_strlen <TypeID(358626v1)> <- Const { value: 4199136, size: 8 }
         r1251 <- Call { callee: r1250, first_arg: None }
         r1273 <- LoadMem { mem: r812, addr: r20, size: 8 }
         r1274 <- Arith(Sub, r1241, r1273)
         r1276 <- CarryOf(r1274)
         r1281 <- SetJumpCondition(r1276)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1560 <- Upsilon { value: r17, phi_ref: r1527 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r885 <- ArithK(Add, r24, 24)
         r886 <- LoadMem { mem: r812, addr: r885, size: 8 }
         r890 <- LoadMem { mem: r812, addr: r886, size: 1 }
         r891 <- Const { value: 0, size: 1 }
         r896 <- IsZero(r890)
         r899 <- Not(r896)
         r900 <- SetJumpCondition(r899)
         r1561 <- Upsilon { value: r24, phi_ref: r1492 }
         r1562 <- Upsilon { value: r812, phi_ref: r1493 }
         r1564 <- Upsilon { value: r823, phi_ref: r1517 }
         r1565 <- Upsilon { value: r812, phi_ref: r1518 }
         r1566 <- Upsilon { value: r891, phi_ref: r1519 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1559 <- Upsilon { value: r17, phi_ref: r1522 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r599 <- ArithK(Add, r11, -120)
         r600 <- LoadMem { mem: r568, addr: r599, size: 8 }
         r603 <- ArithK(Add, r219, 4)
         r606 <- ArithK(Add, r1505, 160)
         r608 <- Arith(Sub, r603, r600)
         r612 <- IsZero(r608)
         r615 <- SetJumpCondition(r612)
         r1598 <- Upsilon { value: r589, phi_ref: r1525 }
         r1600 <- Upsilon { value: r606, phi_ref: r1505 }
         r1601 <- Upsilon { value: r568, phi_ref: r1506 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1519 <- Phi
         r1518 <- Phi
  (  2)  r1517 <- Phi
         r917 <- Const { value: 10, size: 4 }
  (  2)  r921 <- ArithK(Add, r11, -128)
  (  2)  r922 <- StoreMem { mem: r1518, addr: r921, value: r1517 }
         r923 <- CArg { value: r1519, next_arg: None }
         r924 <- CArg { value: r921, next_arg: Some(r923) }
         r925 <- CArg { value: r917, next_arg: Some(r924) }
         r926: je_malloc_strtoumax <TypeID(340431v1)> <- Const { value: 6451424, size: 8 }
  (  2)  r927 <- Call { callee: r926, first_arg: Some(r925) }
  (  6)  r943 <- ArithK(Add, r927, 1)
         r947 <- IsZero(r943)
         r951 <- SetJumpCondition(r947)
         r1552 <- Upsilon { value: r943, phi_ref: r1525 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r954 <- ArithK(Add, r14, 24)
  (  2)  r955 <- LoadMem { mem: r922, addr: r954, size: 8 }
         r958 <- ArithK(Add, r11, -136)
  (  9)  r959 <- StoreMem { mem: r922, addr: r958, value: r1517 }
         r962 <- LoadMem { mem: r959, addr: r955, size: 1 }
         r968 <- IsZero(r962)
         r971 <- Not(r968)
         r972 <- SetJumpCondition(r971)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r975 <- ArithK(Add, r11, -112)
         r976 <- LoadMem { mem: r959, addr: r975, size: 8 }
         r979 <- ArithK(Add, r11, -104)
  (  2)  r980 <- LoadMem { mem: r959, addr: r979, size: 8 }
         r983 <- ArithK(Add, r11, -72)
  (  3)  r984 <- LoadMem { mem: r959, addr: r983, size: 8 }
         r988 <- LoadMem { mem: r959, addr: r976, size: 8 }
         r992 <- CArg { value: r943, next_arg: None }
         r993 <- CArg { value: r988, next_arg: Some(r992) }
         r994 <- CArg { value: r980, next_arg: Some(r993) }
         r995 <- CArg { value: r984, next_arg: Some(r994) }
         r997 <- ArithK(Add, r955, 8)
         r998 <- LoadMem { mem: r959, addr: r997, size: 8 }
         r999 <- LoadMem { mem: r959, addr: r998, size: 8 }
         r1000 <- Call { callee: r999, first_arg: Some(r995) }
         r1014 <- IsZero(r943)
         r1019 <- SetJumpCondition(r1014)
         r1554 <- Upsilon { value: r943, phi_ref: r1525 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1026 <- ArithK(Add, r927, 33)
         r1027 <- LoadMem { mem: r959, addr: r1026, size: 8 }
         r1033 <- IsZero(r1027)
         r1038 <- ArithK(Mul, r175, 8)
         r1039 <- Arith(Add, r980, r1038)
         r1040 <- StoreMem { mem: r959, addr: r1039, value: r943 }
         r1041 <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1042 <- SetJumpCondition(r1033)
         r1556 <- Upsilon { value: r984, phi_ref: r1515 }
         r1557 <- Upsilon { value: r984, phi_ref: r1520 }
         r1558 <- Upsilon { value: r1040, phi_ref: r1521 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
         r1521 <- Phi
  (  2)  r1520 <- Phi
         r1045 <- ArithK(Add, r11, -64)
         r1046 <- LoadMem { mem: r1521, addr: r1045, size: 8 }
         r1048 <- Part { src: r1520, offset: 0, size: 1 }
         r1049 <- Part { src: r1520, offset: 0, size: 1 }
         r1050 <- Arith(BitAnd, r1048, r1049)
         r1052 <- IsZero(r1050)
         r1057 <- Not(r1052)
         r1058 <- SetJumpCondition(r1057)
         r1549 <- Upsilon { value: r18, phi_ref: r1525 }
         r1551 <- Upsilon { value: r1046, phi_ref: r1522 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1522 <- Phi
         r1061 <- ArithK(Add, r175, 1)
         r1069 <- StoreMem { mem: r184, addr: r20, value: r1061 }
         r1072 <- IsZero(r1522)
         r1077 <- Not(r1072)
         r1078 <- SetJumpCondition(r1077)
         r1547 <- Upsilon { value: r1522, phi_ref: r1528 }
         r1548 <- Upsilon { value: r1069, phi_ref: r1529 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1534 <- Upsilon { value: r17, phi_ref: r1527 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1527 <- Phi
         r1289 <- IsZero(r1527)
         r1294 <- SetJumpCondition(r1289)
         r1537 <- Upsilon { value: r1527, phi_ref: r1528 }
         r1538 <- Upsilon { value: r103, phi_ref: r1529 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1529 <- Phi
         r1528 <- Phi
         r1298 <- StoreMem { mem: r1529, addr: r1528, value: r24 }
         r1299 <- Part { src: r18, offset: 0, size: 4 }
         r1300 <- Part { src: r18, offset: 0, size: 4 }
         r1301 <- Arith(BitXor, r1299, r1300)
         r1302 <- Part { src: r18, offset: 4, size: 4 }
         r1303 <- Concat { lo: r1301, hi: r1302 }
         r1535 <- Upsilon { value: r1303, phi_ref: r1523 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1080 <- Part { src: r18, offset: 0, size: 4 }
         r1081 <- Part { src: r18, offset: 0, size: 4 }
         r1082 <- Arith(BitXor, r1080, r1081)
         r1083 <- Part { src: r18, offset: 4, size: 4 }
         r1084 <- Concat { lo: r1082, hi: r1083 }
         r1539 <- Upsilon { value: r1084, phi_ref: r1523 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1523 <- Phi
         r1118 <- SetReturnValue(r1523)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1525 <- Phi
         r1213 <- Const { value: 2, size: 4 }
         r1214 <- Part { src: r1525, offset: 4, size: 4 }
         r1215 <- Concat { lo: r1213, hi: r1214 }
         r1234 <- SetReturnValue(r1215)



T0: {
  [pre:RSP - 8]:* := pre:R15;
  [pre:RSP - 16]:* := pre:R14;
  [pre:RSP - 24]:* := pre:R13;
  [pre:RSP - 32]:* := pre:R12;
  [pre:RSP - 40]:* := pre:RBP;
  [pre:RSP - 48]:* := pre:RBX;
  [pre:RSP - 72]:* := pre:RDI;
  [pre:RSP - 104]:* := pre:R8;
  [pre:RSP - 136]:* := pre:RDX;
  let r102: Bytes(8) = pre:RSP - 112;
  [r102]:* := pre:R9;
  let r114: Bytes(8) = strchr(46,
                              r102);
  ;
  r1491 := strchr(46,
                  r102);
  if IsZero (r114) {
    __builtin_strlen();
    r1491 := pre:RDX + r114;
    goto T1
  }
  goto T1
  T1: {
    let mut r1491: Bytes(8);
    let r140: Bytes(8) = r1491 - pre:RDX;
    ;
    r1525 := pre:RDX;
    if IsZero (r140) {
      goto T42
    }
    ;
    if IsZero ([pre:R9]:8) {
      r1527 := pre:RCX;
      goto T45
    }
    let r169: Bytes(8) = [pre:RSI + 24]:8;
    let r175: Bytes(8) = pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
    [pre:RSP - 64]:* := pre:RCX;
    ;
    r1517 := phi ();
    ;
    r1519 := 0;
    r1492 := pre:RSI;
    ;
    if IsZero ([r169]:1) {
      goto T30
    }
    goto T4
    T4: {
      let mut r1493: MemoryEffect;
      let mut r1492: Bytes(8);
      let r200: Bytes(8) = [r1492 + 16]:8;
      [pre:RSP - 120]:* := r200;
      ;
      r1525 := pre:RDX;
      if IsZero (r200) {
        goto T42
      }
      let r219: Bytes(8) = pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
      let r228: Bytes(4) = r200[4 .. 0] & 3;
      let r230: Bytes(8) = r200[8 .. 4] ++ r228;
      ;
      r1502 := phi ();
      r1503 := [pre:RSI + 24]:8;
      ;
      if IsZero (r228) {
        goto T14
      }
      ;
      r1498 := phi ();
      r1499 := [pre:RSI + 24]:8;
      ;
      if IsZero (r230 - 1) {
        goto T12
      }
      ;
      r1495 := phi ();
      r1496 := [pre:RSI + 24]:8;
      ;
      if IsZero (r230 - 3) {
        goto T10
      }
      let r261: Bytes(8) = [r169 + 8]:8;
      [pre:RSP - 88]:* := r1491;
      [pre:RSP - 96]:* := r169;
      [pre:RSP - 128]:* := r261;
      strlen(r261);
      let r299: Bytes(8) = strlen(r261) - r140;
      ;
      r1494 := [pre:RSI + 24]:8;
      if IsZero (r299) {
        [pre:RSP - 96]:* := r1491;
        let r1418: Bytes(8) = pre:RSP - 128;
        [r1418]:* := r169;
        let r1433: Bytes(8) = strncmp([pre:RSP - 136]:8,
                                      r1418,
                                      r299[1 .. 0]);
        ;
        r1494 := [pre:RSI + 24]:8;
        if ! IsZero (r1433[4 .. 0] & r1433[4 .. 0]) {
          goto T9
        }
        r1510 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1511 := [pre:RSI + 24]:8;
        r1512 := phi ();
        r1513 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        ;
        goto T24
      }
      goto T9
      T9: {
        let mut r1494: Bytes(8);
        r1495 := phi ();
        r1496 := r1494 + 40;
        ;
        goto T10
      }
      
      T10: {
        let mut r1497: MemoryEffect;
        let mut r1496: Bytes(8);
        let mut r1495: Bytes(8);
        let r316: Bytes(8) = [r1496 + 8]:8;
        [pre:RSP - 96]:* := r1495;
        [pre:RSP - 128]:* := r316;
        strlen(r316);
        let r350: Bytes(8) = strlen(r316) - r140;
        ;
        if IsZero (r350) {
          let r1366: Bytes(8) = pre:RSP - 128;
          [r1366]:* := r1495;
          let r1381: Bytes(8) = strncmp([pre:RSP - 136]:8,
                                        r1366,
                                        r350[1 .. 0]);
          ;
          if ! IsZero (r1381[4 .. 0] & r1381[4 .. 0]) {
            goto T11
          }
          r1510 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1511 := phi ();
          r1512 := phi ();
          r1513 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          ;
          goto T24
        }
        goto T11
        T11: {
          r1498 := phi ();
          r1499 := r1496 + 40;
          ;
          goto T12
        }
      
      }
      
      T12: {
        let mut r1500: MemoryEffect;
        let mut r1499: Bytes(8);
        let mut r1498: Bytes(8);
        let r379: Bytes(8) = [r1499 + 8]:8;
        [pre:RSP - 96]:* := r1498;
        [pre:RSP - 128]:* := r379;
        strlen(r379);
        let r413: Bytes(8) = strlen(r379) - r140;
        ;
        ;
        if IsZero (r413) {
          let r1317: Bytes(8) = pre:RSP - 128;
          [r1317]:* := r1498;
          let r1332: Bytes(8) = strncmp([pre:RSP - 136]:8,
                                        r1317,
                                        r413[1 .. 0]);
          ;
          ;
          if ! IsZero (r1332[4 .. 0] & r1332[4 .. 0]) {
            goto T13
          }
          r1510 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1511 := phi ();
          r1512 := phi ();
          r1513 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          ;
          goto T24
        }
        goto T13
        T13: {
          let mut r1501: MemoryEffect;
          ;
          r1525 := strlen(r379) - r140;
          r1502 := phi ();
          r1503 := r1499 + 40;
          ;
          if IsZero (r219 + 1 - [pre:RSP - 120]:8) {
            goto T42
          }
          goto T14
        }
      
      }
      
      T14: {
        let mut r1504: MemoryEffect;
        let mut r1503: Bytes(8);
        let mut r1502: Bytes(8);
        [pre:RSP - 80]:* := r1492;
        [pre:RSP - 96]:* := r175;
        [pre:RSP - 88]:* := r1502;
        r1505 := phi ();
        ;
        goto T19
        T19: {
          let mut r1506: MemoryEffect;
          let mut r1505: Bytes(8);
          strlen([r1505 + 8]:8);
          let r639: Bytes(8) = strlen([r1505 + 8]:8) - r140;
          ;
          if ! IsZero (r639) {
            goto T15
          }
          let r650: Bytes(8) = pre:RSP - 136;
          let r668: Bytes(8) = strncmp([r650]:8,
                                       r650,
                                       r639[1 .. 0]);
          ;
          if ! IsZero (r668[4 .. 0] & r668[4 .. 0]) {
            goto T15
          }
          r1510 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1511 := phi ();
          r1512 := [pre:RSP - 80]:8;
          r1513 := [pre:RSP - 96]:8;
          ;
          goto T24
          T15: {
            let r472: Bytes(8) = r219 + 1;
            [pre:RSP - 128]:* := [r1505 + 48]:8;
            strlen(r472);
            let r501: Bytes(8) = strlen(r472) - r140;
            ;
            if IsZero (r501) {
              let r706: Bytes(8) = pre:RSP - 136;
              let r723: Bytes(8) = strncmp([r706]:8,
                                           r706,
                                           r501[1 .. 0]);
              ;
              r1508 := r1505 + 40;
              ;
              if ! IsZero (r723[4 .. 0] & r723[4 .. 0]) {
                goto T16
              }
              goto T23
            }
            goto T16
            T16: {
              [pre:RSP - 128]:* := [r1505 + 88]:8;
              strlen((r219 + 2));
              let r545: Bytes(8) = strlen((r219 + 2)) - r140;
              ;
              if IsZero (r545) {
                let r1121: Bytes(8) = pre:RSP - 136;
                let r1138: Bytes(8) = strncmp([r1121]:8,
                                              r1121,
                                              r545[1 .. 0]);
                ;
                if ! IsZero (r1138[4 .. 0] & r1138[4 .. 0]) {
                  goto T17
                }
                r1508 := r1505 + 80;
                ;
                goto T23
              }
              goto T17
              T17: {
                [pre:RSP - 128]:* := [r1505 + 128]:8;
                strlen((r219 + 3));
                let r589: Bytes(8) = strlen((r219 + 3)) - r140;
                ;
                if IsZero (r589) {
                  let r1163: Bytes(8) = pre:RSP - 136;
                  let r1180: Bytes(8) = strncmp([r1163]:8,
                                                r1163,
                                                r589[1 .. 0]);
                  ;
                  if ! IsZero (r1180[4 .. 0] & r1180[4 .. 0]) {
                    goto T18
                  }
                  r1508 := r1505 + 120;
                  ;
                  goto T23
                }
                goto T18
                T18: {
                  ;
                  r1525 := strlen((r219 + 3)) - r140;
                  r1505 := r1505 + 160;
                  ;
                  if IsZero (r219 + 4 - [pre:RSP - 120]:8) {
                    goto T42
                  }
                  loop T19
                }
              
              }
            
            }
            
            T23: {
              let mut r1509: MemoryEffect;
              let mut r1508: Bytes(8);
              r1510 := r219 + 1;
              r1511 := phi ();
              r1512 := [pre:RSP - 80]:8;
              r1513 := [pre:RSP - 96]:8;
              ;
              goto T24
            }
          
          }
        
        }
      
      }
      
      T24: {
        let mut r1514: MemoryEffect;
        let mut r1513: Bytes(8);
        let mut r1512: Bytes(8);
        let mut r1511: Bytes(8);
        let mut r1510: Bytes(8);
        [[pre:RSP - 104]:8 + r1513 * 8]:* := r1510;
        ;
        r1525 := pre:RDX;
        if IsZero (r1511 - r1512) {
          goto T42
        }
        TODO /* unsupported: movzx edi,byte ptr [r8] */;
        ;
        r1520 := pre:RDX;
        ;
        r1515 := pre:RDX;
        if ! IsZero ([pre:R13 + 32]:8) {
          goto T34
        }
        goto T26
      }
    
    }
    
    T26: {
      let mut r1515: Bytes(8);
      ;
      if IsZero (r1515[1 .. 0] & r1515[1 .. 0]) {
        r1522 := pre:RCX;
        goto T35
      }
      let r811: Bytes(8) = pre:RSP - 136;
      [r811]:* := r1491 + 1;
      let r823: Bytes(8) = strchr(46,
                                  r811);
      ;
      if IsZero (r823) {
        __builtin_strlen();
        ;
        if CarryOf (r175 + 1 - [pre:R9]:8) {
          goto T29
        }
        goto T44
      }
      ;
      if ! CarryOf (r175 + 1 - [pre:R9]:8) {
        goto T44
      }
      goto T29
      T29: {
        ;
        r1492 := pre:R13;
        ;
        r1517 := strchr(46,
                        r811);
        ;
        r1519 := 0;
        if ! IsZero ([[pre:R13 + 24]:8]:1) {
          goto T4
        }
        goto T30
      }
      
      T44: {
        r1527 := pre:RCX;
        goto T45
      }
    
    }
    
    T30: {
      let mut r1519: Bytes(1);
      let mut r1518: MemoryEffect;
      let mut r1517: Bytes(8);
      let r921: Bytes(8) = pre:RSP - 128;
      [r921]:* := r1517;
      let r927: Bytes(8) = je_malloc_strtoumax(10,
                                               r921,
                                               r1519);
      let r943: Bytes(8) = r927 + 1;
      ;
      r1525 := r927 + 1;
      if IsZero (r943) {
        goto T42
      }
      let r955: Bytes(8) = [pre:RSI + 24]:8;
      [pre:RSP - 136]:* := r1517;
      ;
      if ! IsZero ([r955]:1) {
        goto ext 0x403143
      }
      let r980: Bytes(8) = [pre:RSP - 104]:8;
      let r984: Bytes(8) = [pre:RSP - 72]:8;
      [[r955 + 8]:8]:8(r984,
                       r980,
                       [[pre:RSP - 112]:8]:8,
                       r943);
      ;
      r1525 := r927 + 1;
      if IsZero (r943) {
        goto T42
      }
      [r980 + r175 * 8]:* := r943;
      TODO /* unsupported: movzx edi,byte ptr [r8] */;
      ;
      r1515 := [pre:RSP - 72]:8;
      r1520 := [pre:RSP - 72]:8;
      ;
      if IsZero ([r927 + 33]:8) {
        goto T26
      }
      goto T34
    }
    
    T34: {
      let mut r1521: MemoryEffect;
      let mut r1520: Bytes(8);
      ;
      r1525 := pre:RDX;
      r1522 := [pre:RSP - 64]:8;
      if ! IsZero (r1520[1 .. 0] & r1520[1 .. 0]) {
        goto T42
      }
      goto T35
    }
    
    T35: {
      let mut r1522: Bytes(8);
      [pre:R9]:* := r175 + 1;
      ;
      r1528 := phi ();
      ;
      if ! IsZero (r1522) {
        goto T46
      }
      goto T36
    }
    
    T36: {
      r1523 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T37: {
      let mut r1523: Bytes(8);
      ;
      return r1523
    }
    
    T45: {
      let mut r1527: Bytes(8);
      ;
      r1528 := phi ();
      ;
      if IsZero (r1527) {
        goto T36
      }
      goto T46
    }
    
    T46: {
      let mut r1529: MemoryEffect;
      let mut r1528: Bytes(8);
      [r1528]:* := pre:R13;
      r1523 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T42: {
      let mut r1525: Bytes(8);
      ;
      return r1525[8 .. 4] ++ 2
    }
  
  }

}
