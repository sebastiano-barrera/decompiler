---
source: decompiler/tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

function type: 0x5ddf40: no type info
4 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: no type hints for this callsite
  #   2: no function type
  #   3: no function type


mil program = 
program  1466 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
0x5ddf40:
   43 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   44 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r27 }
0x5ddf42:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r26 }
0x5ddf44:
   47 r26: TypeID(2v1) <- Get(r15)
0x5ddf47:
   48 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
   49 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   50 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5ddf4c:
   51 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   52 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r25 }
0x5ddf4e:
   53 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   54 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x5ddf50:
   55 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   56 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x5ddf51:
   57 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   58 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x5ddf52:
   59 r17: TypeID(2v1) <- Get(r18)
0x5ddf55:
   60 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
   61 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   62 r12: TypeID(2v1) <- Get(r12)
   63 r10: TypeID(2v1) <- OverflowOf(r12)
   64 r2: TypeID(2v1) <- CarryOf(r12)
   65 r6: TypeID(2v1) <- SignOf(r12)
   66 r5: TypeID(2v1) <- IsZero(r12)
   67 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   68 r3: TypeID(2v1) <- Parity(r47)
0x5ddf59:
   69 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
   70 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   71 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5ddf5e:
   72 r14: TypeID(2v1) <- Get(r19)
0x5ddf61:
   73 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
   74 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   75 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddf66:
   76 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   77 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   78 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x5ddf6a:
   79 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
   80 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   81 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddf6f:
   82 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   83 r45: TypeID(2v1) <- Void
   84 r45: TypeID(2v1) <- Get(r14)
   85 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   86 r46: TypeID(2v1) <- Void
   87 r46: TypeID(2v1) <- Get(r15)
   88 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
   89 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
   90 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
   91 r48: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
   92 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
   93 r2: TypeID(2v1) <- Undefined
   94 r3: TypeID(2v1) <- Undefined
   95 r4: TypeID(2v1) <- Undefined
   96 r5: TypeID(2v1) <- Undefined
   97 r6: TypeID(2v1) <- Undefined
   98 r7: TypeID(2v1) <- Undefined
   99 r8: TypeID(2v1) <- Undefined
  100 r9: TypeID(2v1) <- Undefined
  101 r10: TypeID(2v1) <- Undefined
  102 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5ddf74:
  103 r20: TypeID(2v1) <- Get(r16)
0x5ddf77:
  104 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  105 r6: TypeID(2v1) <- SignOf(r16)
  106 r5: TypeID(2v1) <- IsZero(r16)
  107 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  108 r3: TypeID(2v1) <- Parity(r16)
  109 r2: TypeID(2v1) <- False
  110 r10: TypeID(2v1) <- False
0x5ddf7a:
  111 r45: TypeID(2v1) <- SetJumpCondition(r5)
  112 r45: TypeID(2v1) <- Control(JmpIf(1437))
0x5ddf80:
  113 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  114 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  115 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  116 r16: TypeID(2v1) <- Get(r45)
0x5ddf84:
  117 r11: TypeID(2v1) <- Get(r20)
0x5ddf87:
  118 r11: TypeID(2v1) <- Arith(Sub, r11, r16)
  119 r11: TypeID(2v1) <- Get(r11)
  120 r10: TypeID(2v1) <- OverflowOf(r11)
  121 r2: TypeID(2v1) <- CarryOf(r11)
  122 r6: TypeID(2v1) <- SignOf(r11)
  123 r5: TypeID(2v1) <- IsZero(r11)
  124 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  125 r3: TypeID(2v1) <- Parity(r47)
0x5ddf8a:
  126 r45: TypeID(2v1) <- SetJumpCondition(r5)
  127 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5ddf90:
  128 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  129 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  130 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  131 r19: TypeID(2v1) <- Get(r45)
0x5ddf95:
  132 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  133 r46: TypeID(2v1) <- Arith(Add, r46, r19)
  134 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  135 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  136 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  137 r10: TypeID(2v1) <- OverflowOf(r45)
  138 r2: TypeID(2v1) <- CarryOf(r45)
  139 r6: TypeID(2v1) <- SignOf(r45)
  140 r5: TypeID(2v1) <- IsZero(r45)
  141 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  142 r3: TypeID(2v1) <- Parity(r48)
0x5ddf99:
  143 r45: TypeID(2v1) <- SetJumpCondition(r5)
  144 r45: TypeID(2v1) <- Control(JmpIf(1464))
0x5ddf9f:
  145 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  146 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  147 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  148 r21: TypeID(2v1) <- Get(r45)
0x5ddfa3:
  149 r46: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  150 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  151 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  152 r49: TypeID(2v1) <- Part { src: r27, offset: 4, size: 4 }
  153 r27: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  154 r10: TypeID(2v1) <- False
  155 r2: TypeID(2v1) <- False
  156 r6: TypeID(2v1) <- SignOf(r46)
  157 r5: TypeID(2v1) <- IsZero(r46)
  158 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  159 r3: TypeID(2v1) <- Parity(r50)
0x5ddfa6:
  160 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
  161 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  162 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5ddfab:
  163 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  164 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  165 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  166 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  167 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  168 r10: TypeID(2v1) <- OverflowOf(r45)
  169 r2: TypeID(2v1) <- CarryOf(r45)
  170 r6: TypeID(2v1) <- SignOf(r45)
  171 r5: TypeID(2v1) <- IsZero(r45)
  172 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  173 r3: TypeID(2v1) <- Parity(r48)
0x5ddfaf:
  174 r45: TypeID(2v1) <- SetJumpCondition(r5)
  175 r45: TypeID(2v1) <- Control(JmpIf(880))
0x5ddfc0:
  176 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  177 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  178 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  179 r15: TypeID(2v1) <- Get(r45)
0x5ddfc4:
  180 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  181 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  182 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5ddfc9:
  183 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  184 r6: TypeID(2v1) <- SignOf(r15)
  185 r5: TypeID(2v1) <- IsZero(r15)
  186 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  187 r3: TypeID(2v1) <- Parity(r15)
  188 r2: TypeID(2v1) <- False
  189 r10: TypeID(2v1) <- False
0x5ddfcc:
  190 r45: TypeID(2v1) <- SetJumpCondition(r5)
  191 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5ddfd2:
  192 r24: TypeID(2v1) <- Get(r21)
0x5ddfd5:
  193 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  194 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  195 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  196 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  197 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  198 r10: TypeID(2v1) <- False
  199 r2: TypeID(2v1) <- False
  200 r6: TypeID(2v1) <- SignOf(r46)
  201 r5: TypeID(2v1) <- IsZero(r46)
  202 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  203 r3: TypeID(2v1) <- Parity(r50)
0x5ddfd7:
  204 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  205 r47: TypeID(2v1) <- Const { value: 3, size: 4 }
  206 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  207 r48: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  208 r15: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  209 r10: TypeID(2v1) <- False
  210 r2: TypeID(2v1) <- False
  211 r6: TypeID(2v1) <- SignOf(r46)
  212 r5: TypeID(2v1) <- IsZero(r46)
  213 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  214 r3: TypeID(2v1) <- Parity(r49)
0x5ddfda:
  215 r45: TypeID(2v1) <- SetJumpCondition(r5)
  216 r45: TypeID(2v1) <- Control(JmpIf(431))
0x5ddfe0:
  217 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  218 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  219 r10: TypeID(2v1) <- OverflowOf(r15)
  220 r2: TypeID(2v1) <- CarryOf(r15)
  221 r6: TypeID(2v1) <- SignOf(r15)
  222 r5: TypeID(2v1) <- IsZero(r15)
  223 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  224 r3: TypeID(2v1) <- Parity(r47)
0x5ddfe4:
  225 r45: TypeID(2v1) <- SetJumpCondition(r5)
  226 r45: TypeID(2v1) <- Control(JmpIf(355))
0x5ddfe6:
  227 r46: TypeID(2v1) <- Const { value: 2, size: 8 }
  228 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  229 r10: TypeID(2v1) <- OverflowOf(r15)
  230 r2: TypeID(2v1) <- CarryOf(r15)
  231 r6: TypeID(2v1) <- SignOf(r15)
  232 r5: TypeID(2v1) <- IsZero(r15)
  233 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  234 r3: TypeID(2v1) <- Parity(r47)
0x5ddfea:
  235 r45: TypeID(2v1) <- SetJumpCondition(r5)
  236 r45: TypeID(2v1) <- Control(JmpIf(292))
0x5ddfec:
  237 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  238 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  239 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  240 r22: TypeID(2v1) <- Get(r45)
0x5ddff0:
  241 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  242 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  243 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddff5:
  244 r25: TypeID(2v1) <- Get(r21)
0x5ddff8:
  245 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  246 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  247 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddffd:
  248 r14: TypeID(2v1) <- Get(r22)
0x5de000:
  249 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  250 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  251 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r22 }
0x5de005:
  252 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  253 r45: TypeID(2v1) <- Void
  254 r45: TypeID(2v1) <- Get(r14)
  255 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  256 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  257 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  258 r2: TypeID(2v1) <- Undefined
  259 r3: TypeID(2v1) <- Undefined
  260 r4: TypeID(2v1) <- Undefined
  261 r5: TypeID(2v1) <- Undefined
  262 r6: TypeID(2v1) <- Undefined
  263 r7: TypeID(2v1) <- Undefined
  264 r8: TypeID(2v1) <- Undefined
  265 r9: TypeID(2v1) <- Undefined
  266 r10: TypeID(2v1) <- Undefined
  267 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de00a:
  268 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  269 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  270 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  271 r15: TypeID(2v1) <- Get(r45)
0x5de00f:
  272 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  273 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  274 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  275 r20: TypeID(2v1) <- Get(r45)
0x5de014:
  276 r14: TypeID(2v1) <- Get(r24)
0x5de017:
  277 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  278 r10: TypeID(2v1) <- OverflowOf(r16)
  279 r2: TypeID(2v1) <- CarryOf(r16)
  280 r6: TypeID(2v1) <- SignOf(r16)
  281 r5: TypeID(2v1) <- IsZero(r16)
  282 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  283 r3: TypeID(2v1) <- Parity(r47)
0x5de01a:
  284 r45: TypeID(2v1) <- SetJumpCondition(r5)
  285 r45: TypeID(2v1) <- Control(JmpIf(1384))
0x5de020:
  286 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  287 r46: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  288 r17: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de025:
  289 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  290 r45: TypeID(2v1) <- Arith(Add, r45, r14)
  291 r24: TypeID(2v1) <- Get(r45)
0x5de029:
  292 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  293 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  294 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  295 r23: TypeID(2v1) <- Get(r45)
0x5de02e:
  296 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  297 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  298 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de033:
  299 r25: TypeID(2v1) <- Get(r24)
0x5de036:
  300 r14: TypeID(2v1) <- Get(r23)
0x5de039:
  301 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  302 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  303 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r23 }
0x5de03e:
  304 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  305 r45: TypeID(2v1) <- Void
  306 r45: TypeID(2v1) <- Get(r14)
  307 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  308 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  309 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  310 r2: TypeID(2v1) <- Undefined
  311 r3: TypeID(2v1) <- Undefined
  312 r4: TypeID(2v1) <- Undefined
  313 r5: TypeID(2v1) <- Undefined
  314 r6: TypeID(2v1) <- Undefined
  315 r7: TypeID(2v1) <- Undefined
  316 r8: TypeID(2v1) <- Undefined
  317 r9: TypeID(2v1) <- Undefined
  318 r10: TypeID(2v1) <- Undefined
  319 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de043:
  320 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  321 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  322 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  323 r15: TypeID(2v1) <- Get(r45)
0x5de048:
  324 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  325 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  326 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  327 r20: TypeID(2v1) <- Get(r45)
0x5de04d:
  328 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  329 r10: TypeID(2v1) <- OverflowOf(r16)
  330 r2: TypeID(2v1) <- CarryOf(r16)
  331 r6: TypeID(2v1) <- SignOf(r16)
  332 r5: TypeID(2v1) <- IsZero(r16)
  333 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  334 r3: TypeID(2v1) <- Parity(r47)
0x5de050:
  335 r45: TypeID(2v1) <- SetJumpCondition(r5)
  336 r45: TypeID(2v1) <- Control(JmpIf(1335))
0x5de056:
  337 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  338 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  339 r17: TypeID(2v1) <- Get(r17)
  340 r10: TypeID(2v1) <- OverflowOf(r17)
  341 r2: TypeID(2v1) <- CarryOf(r17)
  342 r6: TypeID(2v1) <- SignOf(r17)
  343 r5: TypeID(2v1) <- IsZero(r17)
  344 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  345 r3: TypeID(2v1) <- Parity(r47)
0x5de05a:
  346 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  347 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  348 r24: TypeID(2v1) <- Get(r24)
  349 r10: TypeID(2v1) <- OverflowOf(r24)
  350 r2: TypeID(2v1) <- CarryOf(r24)
  351 r6: TypeID(2v1) <- SignOf(r24)
  352 r5: TypeID(2v1) <- IsZero(r24)
  353 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  354 r3: TypeID(2v1) <- Parity(r47)
0x5de05e:
  355 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  356 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  357 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  358 r16: TypeID(2v1) <- Get(r45)
0x5de063:
  359 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  360 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  361 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de068:
  362 r25: TypeID(2v1) <- Get(r24)
0x5de06b:
  363 r14: TypeID(2v1) <- Get(r16)
0x5de06e:
  364 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  365 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  366 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5de073:
  367 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  368 r45: TypeID(2v1) <- Void
  369 r45: TypeID(2v1) <- Get(r14)
  370 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  371 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  372 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  373 r2: TypeID(2v1) <- Undefined
  374 r3: TypeID(2v1) <- Undefined
  375 r4: TypeID(2v1) <- Undefined
  376 r5: TypeID(2v1) <- Undefined
  377 r6: TypeID(2v1) <- Undefined
  378 r7: TypeID(2v1) <- Undefined
  379 r8: TypeID(2v1) <- Undefined
  380 r9: TypeID(2v1) <- Undefined
  381 r10: TypeID(2v1) <- Undefined
  382 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de078:
  383 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  384 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  385 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  386 r15: TypeID(2v1) <- Get(r45)
0x5de07d:
  387 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  388 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  389 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  390 r20: TypeID(2v1) <- Get(r45)
0x5de082:
  391 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  392 r10: TypeID(2v1) <- OverflowOf(r16)
  393 r2: TypeID(2v1) <- CarryOf(r16)
  394 r6: TypeID(2v1) <- SignOf(r16)
  395 r5: TypeID(2v1) <- IsZero(r16)
  396 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  397 r3: TypeID(2v1) <- Parity(r47)
0x5de085:
  398 r45: TypeID(2v1) <- SetJumpCondition(r5)
  399 r45: TypeID(2v1) <- Control(JmpIf(1286))
0x5de08b:
  400 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  401 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  402 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  403 r19: TypeID(2v1) <- Get(r45)
0x5de090:
  404 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  405 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  406 r17: TypeID(2v1) <- Get(r17)
  407 r10: TypeID(2v1) <- OverflowOf(r17)
  408 r2: TypeID(2v1) <- CarryOf(r17)
  409 r6: TypeID(2v1) <- SignOf(r17)
  410 r5: TypeID(2v1) <- IsZero(r17)
  411 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  412 r3: TypeID(2v1) <- Parity(r47)
0x5de094:
  413 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  414 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  415 r24: TypeID(2v1) <- Get(r24)
  416 r10: TypeID(2v1) <- OverflowOf(r24)
  417 r2: TypeID(2v1) <- CarryOf(r24)
  418 r6: TypeID(2v1) <- SignOf(r24)
  419 r5: TypeID(2v1) <- IsZero(r24)
  420 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  421 r3: TypeID(2v1) <- Parity(r47)
0x5de098:
  422 r17: TypeID(2v1) <- Arith(Sub, r17, r19)
  423 r10: TypeID(2v1) <- OverflowOf(r17)
  424 r2: TypeID(2v1) <- CarryOf(r17)
  425 r6: TypeID(2v1) <- SignOf(r17)
  426 r5: TypeID(2v1) <- IsZero(r17)
  427 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  428 r3: TypeID(2v1) <- Parity(r47)
0x5de09b:
  429 r45: TypeID(2v1) <- SetJumpCondition(r5)
  430 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5de0a1:
  431 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  432 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  433 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r26 }
0x5de0a6:
  434 r26: TypeID(2v1) <- Get(r24)
0x5de0a9:
  435 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  436 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  437 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r27 }
0x5de0ae:
  438 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  439 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  440 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de0b3:
  441 r45: TypeID(2v1) <- Control(Jmp(595))
0x5de0c0:
  442 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  443 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  444 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  445 r21: TypeID(2v1) <- Get(r45)
0x5de0c4:
  446 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  447 r45: TypeID(2v1) <- Arith(Add, r45, r26)
  448 r27: TypeID(2v1) <- Get(r45)
0x5de0c8:
  449 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  450 r45: TypeID(2v1) <- Arith(Add, r45, r17)
  451 r25: TypeID(2v1) <- Get(r45)
0x5de0cc:
  452 r17: TypeID(2v1) <- Get(r25)
0x5de0cf:
  453 r26: TypeID(2v1) <- Get(r27)
0x5de0d2:
  454 r24: TypeID(2v1) <- Get(r27)
0x5de0d5:
  455 r14: TypeID(2v1) <- Get(r21)
0x5de0d8:
  456 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  457 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  458 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5de0dd:
  459 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  460 r45: TypeID(2v1) <- Void
  461 r45: TypeID(2v1) <- Get(r14)
  462 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  463 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  464 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  465 r2: TypeID(2v1) <- Undefined
  466 r3: TypeID(2v1) <- Undefined
  467 r4: TypeID(2v1) <- Undefined
  468 r5: TypeID(2v1) <- Undefined
  469 r6: TypeID(2v1) <- Undefined
  470 r7: TypeID(2v1) <- Undefined
  471 r8: TypeID(2v1) <- Undefined
  472 r9: TypeID(2v1) <- Undefined
  473 r10: TypeID(2v1) <- Undefined
  474 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de0e2:
  475 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  476 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  477 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  478 r15: TypeID(2v1) <- Get(r45)
0x5de0e7:
  479 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  480 r10: TypeID(2v1) <- OverflowOf(r16)
  481 r2: TypeID(2v1) <- CarryOf(r16)
  482 r6: TypeID(2v1) <- SignOf(r16)
  483 r5: TypeID(2v1) <- IsZero(r16)
  484 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  485 r3: TypeID(2v1) <- Parity(r47)
0x5de0ea:
  486 r45: TypeID(2v1) <- SetJumpCondition(r5)
  487 r45: TypeID(2v1) <- Control(JmpIf(683))
0x5de0f0:
  488 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  489 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  490 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  491 r18: TypeID(2v1) <- Get(r45)
0x5de0f4:
  492 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  493 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  494 r26: TypeID(2v1) <- Get(r45)
0x5de0f8:
  495 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  496 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  497 r17: TypeID(2v1) <- Get(r45)
0x5de0fc:
  498 r24: TypeID(2v1) <- Get(r26)
0x5de0ff:
  499 r14: TypeID(2v1) <- Get(r18)
0x5de102:
  500 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  501 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  502 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r18 }
0x5de107:
  503 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  504 r45: TypeID(2v1) <- Void
  505 r45: TypeID(2v1) <- Get(r14)
  506 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  507 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  508 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  509 r2: TypeID(2v1) <- Undefined
  510 r3: TypeID(2v1) <- Undefined
  511 r4: TypeID(2v1) <- Undefined
  512 r5: TypeID(2v1) <- Undefined
  513 r6: TypeID(2v1) <- Undefined
  514 r7: TypeID(2v1) <- Undefined
  515 r8: TypeID(2v1) <- Undefined
  516 r9: TypeID(2v1) <- Undefined
  517 r10: TypeID(2v1) <- Undefined
  518 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de10c:
  519 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  520 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  521 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  522 r15: TypeID(2v1) <- Get(r45)
0x5de111:
  523 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  524 r10: TypeID(2v1) <- OverflowOf(r16)
  525 r2: TypeID(2v1) <- CarryOf(r16)
  526 r6: TypeID(2v1) <- SignOf(r16)
  527 r5: TypeID(2v1) <- IsZero(r16)
  528 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  529 r3: TypeID(2v1) <- Parity(r47)
0x5de114:
  530 r45: TypeID(2v1) <- SetJumpCondition(r5)
  531 r45: TypeID(2v1) <- Control(JmpIf(1095))
0x5de11a:
  532 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
  533 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  534 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  535 r15: TypeID(2v1) <- Get(r45)
0x5de11e:
  536 r45: TypeID(2v1) <- Const { value: 80, size: 8 }
  537 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  538 r26: TypeID(2v1) <- Get(r45)
0x5de122:
  539 r45: TypeID(2v1) <- Const { value: 2, size: 8 }
  540 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  541 r17: TypeID(2v1) <- Get(r45)
0x5de126:
  542 r24: TypeID(2v1) <- Get(r26)
0x5de129:
  543 r14: TypeID(2v1) <- Get(r15)
0x5de12c:
  544 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  545 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  546 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5de131:
  547 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  548 r45: TypeID(2v1) <- Void
  549 r45: TypeID(2v1) <- Get(r14)
  550 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  551 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  552 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  553 r2: TypeID(2v1) <- Undefined
  554 r3: TypeID(2v1) <- Undefined
  555 r4: TypeID(2v1) <- Undefined
  556 r5: TypeID(2v1) <- Undefined
  557 r6: TypeID(2v1) <- Undefined
  558 r7: TypeID(2v1) <- Undefined
  559 r8: TypeID(2v1) <- Undefined
  560 r9: TypeID(2v1) <- Undefined
  561 r10: TypeID(2v1) <- Undefined
  562 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de136:
  563 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  564 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  565 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  566 r15: TypeID(2v1) <- Get(r45)
0x5de13b:
  567 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  568 r10: TypeID(2v1) <- OverflowOf(r16)
  569 r2: TypeID(2v1) <- CarryOf(r16)
  570 r6: TypeID(2v1) <- SignOf(r16)
  571 r5: TypeID(2v1) <- IsZero(r16)
  572 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  573 r3: TypeID(2v1) <- Parity(r47)
0x5de13e:
  574 r45: TypeID(2v1) <- SetJumpCondition(r5)
  575 r45: TypeID(2v1) <- Control(JmpIf(1137))
0x5de144:
  576 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  577 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  578 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  579 r22: TypeID(2v1) <- Get(r45)
0x5de149:
  580 r45: TypeID(2v1) <- Const { value: 3, size: 8 }
  581 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  582 r17: TypeID(2v1) <- Get(r45)
0x5de14d:
  583 r45: TypeID(2v1) <- Const { value: 120, size: 8 }
  584 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  585 r26: TypeID(2v1) <- Get(r45)
0x5de151:
  586 r17: TypeID(2v1) <- Arith(Sub, r17, r22)
  587 r10: TypeID(2v1) <- OverflowOf(r17)
  588 r2: TypeID(2v1) <- CarryOf(r17)
  589 r6: TypeID(2v1) <- SignOf(r17)
  590 r5: TypeID(2v1) <- IsZero(r17)
  591 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  592 r3: TypeID(2v1) <- Parity(r47)
0x5de154:
  593 r45: TypeID(2v1) <- SetJumpCondition(r5)
  594 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5de15a:
  595 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  596 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  597 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  598 r27: TypeID(2v1) <- Get(r45)
0x5de15e:
  599 r24: TypeID(2v1) <- Get(r26)
0x5de161:
  600 r14: TypeID(2v1) <- Get(r27)
0x5de164:
  601 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  602 r45: TypeID(2v1) <- Void
  603 r45: TypeID(2v1) <- Get(r14)
  604 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  605 r47: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  606 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  607 r2: TypeID(2v1) <- Undefined
  608 r3: TypeID(2v1) <- Undefined
  609 r4: TypeID(2v1) <- Undefined
  610 r5: TypeID(2v1) <- Undefined
  611 r6: TypeID(2v1) <- Undefined
  612 r7: TypeID(2v1) <- Undefined
  613 r8: TypeID(2v1) <- Undefined
  614 r9: TypeID(2v1) <- Undefined
  615 r10: TypeID(2v1) <- Undefined
  616 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x5de169:
  617 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  618 r10: TypeID(2v1) <- OverflowOf(r16)
  619 r2: TypeID(2v1) <- CarryOf(r16)
  620 r6: TypeID(2v1) <- SignOf(r16)
  621 r5: TypeID(2v1) <- IsZero(r16)
  622 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  623 r3: TypeID(2v1) <- Parity(r47)
0x5de16c:
  624 r45: TypeID(2v1) <- Not(r5)
  625 r46: TypeID(2v1) <- SetJumpCondition(r45)
  626 r46: TypeID(2v1) <- Control(JmpIf(442))
0x5de172:
  627 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  628 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  629 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  630 r14: TypeID(2v1) <- Get(r45)
0x5de176:
  631 r19: TypeID(2v1) <- Get(r11)
0x5de179:
  632 r15: TypeID(2v1) <- Get(r27)
0x5de17c:
  633 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  634 r45: TypeID(2v1) <- Void
  635 r45: TypeID(2v1) <- Get(r14)
  636 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  637 r46: TypeID(2v1) <- Void
  638 r46: TypeID(2v1) <- Get(r15)
  639 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  640 r47: TypeID(2v1) <- Void
  641 r47: TypeID(2v1) <- Get(r19)
  642 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  643 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  644 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  645 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  646 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  647 r2: TypeID(2v1) <- Undefined
  648 r3: TypeID(2v1) <- Undefined
  649 r4: TypeID(2v1) <- Undefined
  650 r5: TypeID(2v1) <- Undefined
  651 r6: TypeID(2v1) <- Undefined
  652 r7: TypeID(2v1) <- Undefined
  653 r8: TypeID(2v1) <- Undefined
  654 r9: TypeID(2v1) <- Undefined
  655 r10: TypeID(2v1) <- Undefined
  656 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de181:
  657 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  658 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  659 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  660 r6: TypeID(2v1) <- SignOf(r46)
  661 r5: TypeID(2v1) <- IsZero(r46)
  662 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  663 r3: TypeID(2v1) <- Parity(r46)
  664 r2: TypeID(2v1) <- False
  665 r10: TypeID(2v1) <- False
0x5de183:
  666 r45: TypeID(2v1) <- Not(r5)
  667 r46: TypeID(2v1) <- SetJumpCondition(r45)
  668 r46: TypeID(2v1) <- Control(JmpIf(442))
0x5de189:
  669 r25: TypeID(2v1) <- Get(r26)
0x5de18c:
  670 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  671 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  672 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  673 r27: TypeID(2v1) <- Get(r45)
0x5de191:
  674 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  675 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  676 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  677 r20: TypeID(2v1) <- Get(r45)
0x5de196:
  678 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  679 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  680 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  681 r26: TypeID(2v1) <- Get(r45)
0x5de19b:
  682 r45: TypeID(2v1) <- Control(Jmp(738))
0x5de1a0:
  683 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  684 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  685 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  686 r14: TypeID(2v1) <- Get(r45)
0x5de1a4:
  687 r19: TypeID(2v1) <- Get(r11)
0x5de1a7:
  688 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  689 r45: TypeID(2v1) <- Void
  690 r45: TypeID(2v1) <- Get(r14)
  691 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  692 r46: TypeID(2v1) <- Void
  693 r46: TypeID(2v1) <- Get(r15)
  694 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  695 r47: TypeID(2v1) <- Void
  696 r47: TypeID(2v1) <- Get(r19)
  697 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  698 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  699 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  700 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  701 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  702 r2: TypeID(2v1) <- Undefined
  703 r3: TypeID(2v1) <- Undefined
  704 r4: TypeID(2v1) <- Undefined
  705 r5: TypeID(2v1) <- Undefined
  706 r6: TypeID(2v1) <- Undefined
  707 r7: TypeID(2v1) <- Undefined
  708 r8: TypeID(2v1) <- Undefined
  709 r9: TypeID(2v1) <- Undefined
  710 r10: TypeID(2v1) <- Undefined
  711 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de1ac:
  712 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  713 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  714 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  715 r6: TypeID(2v1) <- SignOf(r46)
  716 r5: TypeID(2v1) <- IsZero(r46)
  717 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  718 r3: TypeID(2v1) <- Parity(r46)
  719 r2: TypeID(2v1) <- False
  720 r10: TypeID(2v1) <- False
0x5de1ae:
  721 r45: TypeID(2v1) <- Not(r5)
  722 r46: TypeID(2v1) <- SetJumpCondition(r45)
  723 r46: TypeID(2v1) <- Control(JmpIf(488))
0x5de1b4:
  724 r25: TypeID(2v1) <- Get(r24)
0x5de1b7:
  725 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  726 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  727 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  728 r27: TypeID(2v1) <- Get(r45)
0x5de1bc:
  729 r24: TypeID(2v1) <- Get(r26)
0x5de1bf:
  730 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  731 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  732 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  733 r20: TypeID(2v1) <- Get(r45)
0x5de1c4:
  734 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  735 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  736 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  737 r26: TypeID(2v1) <- Get(r45)
0x5de1c9:
  738 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  739 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  740 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  741 r11: TypeID(2v1) <- Get(r45)
0x5de1ce:
  742 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  743 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  744 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
  745 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  746 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de1d3:
  747 r24: TypeID(2v1) <- Arith(Sub, r24, r26)
  748 r10: TypeID(2v1) <- OverflowOf(r24)
  749 r2: TypeID(2v1) <- CarryOf(r24)
  750 r6: TypeID(2v1) <- SignOf(r24)
  751 r5: TypeID(2v1) <- IsZero(r24)
  752 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  753 r3: TypeID(2v1) <- Parity(r47)
0x5de1d6:
  754 r45: TypeID(2v1) <- SetJumpCondition(r5)
  755 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5de1dc:
  756 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  757 r46: TypeID(2v1) <- Arith(Add, r46, r25)
  758 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  759 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  760 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  761 r10: TypeID(2v1) <- OverflowOf(r45)
  762 r2: TypeID(2v1) <- CarryOf(r45)
  763 r6: TypeID(2v1) <- SignOf(r45)
  764 r5: TypeID(2v1) <- IsZero(r45)
  765 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  766 r3: TypeID(2v1) <- Parity(r48)
0x5de1e1:
  767 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
  768 r45: TypeID(2v1) <- Not(r5)
  769 r46: TypeID(2v1) <- SetJumpCondition(r45)
  770 r46: TypeID(2v1) <- Control(JmpIf(1019))
0x5de1eb:
  771 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  772 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  773 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  774 r6: TypeID(2v1) <- SignOf(r46)
  775 r5: TypeID(2v1) <- IsZero(r46)
  776 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  777 r3: TypeID(2v1) <- Parity(r46)
  778 r2: TypeID(2v1) <- False
  779 r10: TypeID(2v1) <- False
0x5de1ee:
  780 r45: TypeID(2v1) <- SetJumpCondition(r5)
  781 r45: TypeID(2v1) <- Control(JmpIf(1459))
0x5de1f4:
  782 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  783 r45: TypeID(2v1) <- Arith(Add, r45, r20)
  784 r14: TypeID(2v1) <- Get(r45)
0x5de1f8:
  785 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
  786 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  787 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de1fd:
  788 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  789 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  790 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5de201:
  791 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  792 r45: TypeID(2v1) <- Void
  793 r45: TypeID(2v1) <- Get(r14)
  794 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  795 r46: TypeID(2v1) <- Void
  796 r46: TypeID(2v1) <- Get(r15)
  797 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  798 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  799 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  800 r48: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
  801 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  802 r2: TypeID(2v1) <- Undefined
  803 r3: TypeID(2v1) <- Undefined
  804 r4: TypeID(2v1) <- Undefined
  805 r5: TypeID(2v1) <- Undefined
  806 r6: TypeID(2v1) <- Undefined
  807 r7: TypeID(2v1) <- Undefined
  808 r8: TypeID(2v1) <- Undefined
  809 r9: TypeID(2v1) <- Undefined
  810 r10: TypeID(2v1) <- Undefined
  811 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de206:
  812 r20: TypeID(2v1) <- Get(r16)
0x5de209:
  813 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  814 r6: TypeID(2v1) <- SignOf(r16)
  815 r5: TypeID(2v1) <- IsZero(r16)
  816 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  817 r3: TypeID(2v1) <- Parity(r16)
  818 r2: TypeID(2v1) <- False
  819 r10: TypeID(2v1) <- False
0x5de20c:
  820 r45: TypeID(2v1) <- SetJumpCondition(r5)
  821 r45: TypeID(2v1) <- Control(JmpIf(1211))
0x5de212:
  822 r11: TypeID(2v1) <- Get(r16)
0x5de215:
  823 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  824 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  825 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  826 r23: TypeID(2v1) <- Get(r45)
0x5de219:
  827 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  828 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  829 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  830 r16: TypeID(2v1) <- Get(r45)
0x5de21e:
  831 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  832 r27: TypeID(2v1) <- Arith(Add, r27, r46)
  833 r27: TypeID(2v1) <- Get(r27)
  834 r10: TypeID(2v1) <- OverflowOf(r27)
  835 r2: TypeID(2v1) <- CarryOf(r27)
  836 r6: TypeID(2v1) <- SignOf(r27)
  837 r5: TypeID(2v1) <- IsZero(r27)
  838 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  839 r3: TypeID(2v1) <- Parity(r47)
0x5de222:
  840 r11: TypeID(2v1) <- Arith(Sub, r11, r23)
  841 r11: TypeID(2v1) <- Get(r11)
  842 r10: TypeID(2v1) <- OverflowOf(r11)
  843 r2: TypeID(2v1) <- CarryOf(r11)
  844 r6: TypeID(2v1) <- SignOf(r11)
  845 r5: TypeID(2v1) <- IsZero(r11)
  846 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  847 r3: TypeID(2v1) <- Parity(r47)
0x5de225:
  848 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  849 r47: TypeID(2v1) <- Arith(Add, r47, r16)
  850 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  851 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
  852 r10: TypeID(2v1) <- OverflowOf(r27)
  853 r2: TypeID(2v1) <- CarryOf(r27)
  854 r6: TypeID(2v1) <- SignOf(r27)
  855 r5: TypeID(2v1) <- IsZero(r27)
  856 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  857 r3: TypeID(2v1) <- Parity(r48)
0x5de228:
  858 r45: TypeID(2v1) <- Not(r2)
  859 r46: TypeID(2v1) <- SetJumpCondition(r45)
  860 r46: TypeID(2v1) <- Control(JmpIf(1258))
0x5de22e:
  861 r26: TypeID(2v1) <- Get(r25)
0x5de231:
  862 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  863 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  864 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  865 r21: TypeID(2v1) <- Get(r45)
0x5de235:
  866 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  867 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  868 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  869 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  870 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  871 r10: TypeID(2v1) <- OverflowOf(r45)
  872 r2: TypeID(2v1) <- CarryOf(r45)
  873 r6: TypeID(2v1) <- SignOf(r45)
  874 r5: TypeID(2v1) <- IsZero(r45)
  875 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  876 r3: TypeID(2v1) <- Parity(r48)
0x5de239:
  877 r45: TypeID(2v1) <- Not(r5)
  878 r46: TypeID(2v1) <- SetJumpCondition(r45)
  879 r46: TypeID(2v1) <- Control(JmpIf(176))
0x5de23f:
  880 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  881 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  882 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  883 r14: TypeID(2v1) <- Get(r45)
0x5de243:
  884 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  885 r48: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  886 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  887 r49: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  888 r15: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  889 r10: TypeID(2v1) <- False
  890 r2: TypeID(2v1) <- False
  891 r6: TypeID(2v1) <- SignOf(r46)
  892 r5: TypeID(2v1) <- IsZero(r46)
  893 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  894 r3: TypeID(2v1) <- Parity(r50)
0x5de245:
  895 r45: TypeID(2v1) <- Const { value: 10, size: 4 }
  896 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  897 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de24a:
  898 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  899 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  900 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de24f:
  901 r46: TypeID(340432v1) <- Const { value: 6451424, size: 8 }
  902 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  903 r2: TypeID(2v1) <- Undefined
  904 r3: TypeID(2v1) <- Undefined
  905 r4: TypeID(2v1) <- Undefined
  906 r5: TypeID(2v1) <- Undefined
  907 r6: TypeID(2v1) <- Undefined
  908 r7: TypeID(2v1) <- Undefined
  909 r8: TypeID(2v1) <- Undefined
  910 r9: TypeID(2v1) <- Undefined
  911 r10: TypeID(2v1) <- Undefined
  912 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5de254:
  913 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  914 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  915 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  916 r20: TypeID(2v1) <- Get(r45)
0x5de259:
  917 r46: TypeID(2v1) <- Const { value: -1, size: 8 }
  918 r16: TypeID(2v1) <- Arith(Sub, r16, r46)
  919 r10: TypeID(2v1) <- OverflowOf(r16)
  920 r2: TypeID(2v1) <- CarryOf(r16)
  921 r6: TypeID(2v1) <- SignOf(r16)
  922 r5: TypeID(2v1) <- IsZero(r16)
  923 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  924 r3: TypeID(2v1) <- Parity(r47)
0x5de25d:
  925 r17: TypeID(2v1) <- Get(r16)
0x5de260:
  926 r45: TypeID(2v1) <- SetJumpCondition(r5)
  927 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5de266:
  928 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  929 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  930 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  931 r11: TypeID(2v1) <- Get(r45)
0x5de26a:
  932 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  933 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  934 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de26e:
  935 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  936 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  937 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  938 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  939 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  940 r10: TypeID(2v1) <- OverflowOf(r45)
  941 r2: TypeID(2v1) <- CarryOf(r45)
  942 r6: TypeID(2v1) <- SignOf(r45)
  943 r5: TypeID(2v1) <- IsZero(r45)
  944 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  945 r3: TypeID(2v1) <- Parity(r48)
0x5de272:
  946 r45: TypeID(2v1) <- Not(r5)
  947 r46: TypeID(2v1) <- SetJumpCondition(r45)
  948 r46: TypeID(2v1) <- Control(JmpExtIf(4206915))
0x5de278:
  949 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  950 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  951 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  952 r18: TypeID(2v1) <- Get(r45)
0x5de27d:
  953 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  954 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  955 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  956 r26: TypeID(2v1) <- Get(r45)
0x5de282:
  957 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
  958 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  959 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  960 r14: TypeID(2v1) <- Get(r45)
0x5de287:
  961 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  962 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  963 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  964 r19: TypeID(2v1) <- Get(r45)
0x5de28a:
  965 r15: TypeID(2v1) <- Get(r26)
0x5de28d:
  966 r18: TypeID(2v1) <- Get(r16)
0x5de290:
  967 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  968 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  969 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  970 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  971 r47: TypeID(2v1) <- Const { value: 8, size: 8 }
  972 r47: TypeID(2v1) <- Arith(Add, r47, r11)
  973 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  974 r46: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  975 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
  976 r2: TypeID(2v1) <- Undefined
  977 r3: TypeID(2v1) <- Undefined
  978 r4: TypeID(2v1) <- Undefined
  979 r5: TypeID(2v1) <- Undefined
  980 r6: TypeID(2v1) <- Undefined
  981 r7: TypeID(2v1) <- Undefined
  982 r8: TypeID(2v1) <- Undefined
  983 r9: TypeID(2v1) <- Undefined
  984 r10: TypeID(2v1) <- Undefined
  985 r45: TypeID(2v1) <- Get(r16)
0x5de293:
  986 r25: TypeID(2v1) <- Get(r16)
0x5de296:
  987 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  988 r6: TypeID(2v1) <- SignOf(r16)
  989 r5: TypeID(2v1) <- IsZero(r16)
  990 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  991 r3: TypeID(2v1) <- Parity(r16)
  992 r2: TypeID(2v1) <- False
  993 r10: TypeID(2v1) <- False
0x5de299:
  994 r45: TypeID(2v1) <- SetJumpCondition(r5)
  995 r45: TypeID(2v1) <- Control(JmpIf(1179))
0x5de29f:
  996 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  997 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  998 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  999 r20: TypeID(2v1) <- Get(r45)
0x5de2a3:
 1000 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
 1001 r46: TypeID(2v1) <- Arith(Add, r46, r25)
 1002 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1003 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
 1004 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
 1005 r10: TypeID(2v1) <- OverflowOf(r45)
 1006 r2: TypeID(2v1) <- CarryOf(r45)
 1007 r6: TypeID(2v1) <- SignOf(r45)
 1008 r5: TypeID(2v1) <- IsZero(r45)
 1009 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
 1010 r3: TypeID(2v1) <- Parity(r48)
0x5de2a8:
 1011 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1012 r46: TypeID(2v1) <- Arith(Add, r46, r26)
 1013 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
 1014 r46: TypeID(2v1) <- Arith(Add, r46, r47)
 1015 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de2ac:
 1016 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
 1017 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1018 r45: TypeID(2v1) <- Control(JmpIf(771))
0x5de2b6:
 1019 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1020 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1021 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1022 r17: TypeID(2v1) <- Get(r45)
0x5de2bb:
 1023 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1024 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1025 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1026 r6: TypeID(2v1) <- SignOf(r46)
 1027 r5: TypeID(2v1) <- IsZero(r46)
 1028 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1029 r3: TypeID(2v1) <- Parity(r46)
 1030 r2: TypeID(2v1) <- False
 1031 r10: TypeID(2v1) <- False
0x5de2be:
 1032 r45: TypeID(2v1) <- Not(r5)
 1033 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1034 r46: TypeID(2v1) <- Control(JmpIf(1179))
0x5de2c0:
 1035 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
 1036 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1037 r20: TypeID(2v1) <- Get(r45)
0x5de2c4:
 1038 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1039 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1040 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1041 r27: TypeID(2v1) <- Get(r45)
0x5de2c9:
 1042 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1043 r46: TypeID(2v1) <- Arith(Add, r46, r27)
 1044 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de2cc:
 1045 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1046 r6: TypeID(2v1) <- SignOf(r17)
 1047 r5: TypeID(2v1) <- IsZero(r17)
 1048 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1049 r3: TypeID(2v1) <- Parity(r17)
 1050 r2: TypeID(2v1) <- False
 1051 r10: TypeID(2v1) <- False
0x5de2cf:
 1052 r45: TypeID(2v1) <- Not(r5)
 1053 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1054 r46: TypeID(2v1) <- Control(JmpIf(1271))
0x5de2d5:
 1055 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1056 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1057 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1058 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1059 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1060 r10: TypeID(2v1) <- False
 1061 r2: TypeID(2v1) <- False
 1062 r6: TypeID(2v1) <- SignOf(r46)
 1063 r5: TypeID(2v1) <- IsZero(r46)
 1064 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1065 r3: TypeID(2v1) <- Parity(r50)
0x5de2d7:
 1066 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1067 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1068 r12: TypeID(2v1) <- Get(r12)
 1069 r10: TypeID(2v1) <- OverflowOf(r12)
 1070 r2: TypeID(2v1) <- CarryOf(r12)
 1071 r6: TypeID(2v1) <- SignOf(r12)
 1072 r5: TypeID(2v1) <- IsZero(r12)
 1073 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1074 r3: TypeID(2v1) <- Parity(r47)
0x5de2db:
 1075 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1076 r17: TypeID(2v1) <- Get(r45)
 1077 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dc:
 1078 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1079 r11: TypeID(2v1) <- Get(r45)
 1080 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dd:
 1081 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1082 r24: TypeID(2v1) <- Get(r45)
 1083 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2df:
 1084 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1085 r25: TypeID(2v1) <- Get(r45)
 1086 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e1:
 1087 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1088 r26: TypeID(2v1) <- Get(r45)
 1089 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e3:
 1090 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1091 r27: TypeID(2v1) <- Get(r45)
 1092 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e5:
 1093 r45: TypeID(2v1) <- SetReturnValue(r16)
 1094 r45: TypeID(2v1) <- Control(Ret)
0x5de2f0:
 1095 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1096 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1097 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1098 r14: TypeID(2v1) <- Get(r45)
0x5de2f4:
 1099 r19: TypeID(2v1) <- Get(r11)
0x5de2f7:
 1100 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1101 r45: TypeID(2v1) <- Void
 1102 r45: TypeID(2v1) <- Get(r14)
 1103 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1104 r46: TypeID(2v1) <- Void
 1105 r46: TypeID(2v1) <- Get(r15)
 1106 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1107 r47: TypeID(2v1) <- Void
 1108 r47: TypeID(2v1) <- Get(r19)
 1109 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1110 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1111 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1112 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1113 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1114 r2: TypeID(2v1) <- Undefined
 1115 r3: TypeID(2v1) <- Undefined
 1116 r4: TypeID(2v1) <- Undefined
 1117 r5: TypeID(2v1) <- Undefined
 1118 r6: TypeID(2v1) <- Undefined
 1119 r7: TypeID(2v1) <- Undefined
 1120 r8: TypeID(2v1) <- Undefined
 1121 r9: TypeID(2v1) <- Undefined
 1122 r10: TypeID(2v1) <- Undefined
 1123 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de2fc:
 1124 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1125 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1126 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1127 r6: TypeID(2v1) <- SignOf(r46)
 1128 r5: TypeID(2v1) <- IsZero(r46)
 1129 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1130 r3: TypeID(2v1) <- Parity(r46)
 1131 r2: TypeID(2v1) <- False
 1132 r10: TypeID(2v1) <- False
0x5de2fe:
 1133 r45: TypeID(2v1) <- Not(r5)
 1134 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1135 r46: TypeID(2v1) <- Control(JmpIf(532))
0x5de304:
 1136 r45: TypeID(2v1) <- Control(Jmp(724))
0x5de310:
 1137 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1138 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1139 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1140 r14: TypeID(2v1) <- Get(r45)
0x5de314:
 1141 r19: TypeID(2v1) <- Get(r11)
0x5de317:
 1142 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1143 r45: TypeID(2v1) <- Void
 1144 r45: TypeID(2v1) <- Get(r14)
 1145 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1146 r46: TypeID(2v1) <- Void
 1147 r46: TypeID(2v1) <- Get(r15)
 1148 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1149 r47: TypeID(2v1) <- Void
 1150 r47: TypeID(2v1) <- Get(r19)
 1151 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1152 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1153 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1154 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1155 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1156 r2: TypeID(2v1) <- Undefined
 1157 r3: TypeID(2v1) <- Undefined
 1158 r4: TypeID(2v1) <- Undefined
 1159 r5: TypeID(2v1) <- Undefined
 1160 r6: TypeID(2v1) <- Undefined
 1161 r7: TypeID(2v1) <- Undefined
 1162 r8: TypeID(2v1) <- Undefined
 1163 r9: TypeID(2v1) <- Undefined
 1164 r10: TypeID(2v1) <- Undefined
 1165 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de31c:
 1166 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1167 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1168 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1169 r6: TypeID(2v1) <- SignOf(r46)
 1170 r5: TypeID(2v1) <- IsZero(r46)
 1171 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1172 r3: TypeID(2v1) <- Parity(r46)
 1173 r2: TypeID(2v1) <- False
 1174 r10: TypeID(2v1) <- False
0x5de31e:
 1175 r45: TypeID(2v1) <- Not(r5)
 1176 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1177 r46: TypeID(2v1) <- Control(JmpIf(576))
0x5de324:
 1178 r45: TypeID(2v1) <- Control(Jmp(724))
0x5de330:
 1179 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1180 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1181 r12: TypeID(2v1) <- Get(r12)
 1182 r10: TypeID(2v1) <- OverflowOf(r12)
 1183 r2: TypeID(2v1) <- CarryOf(r12)
 1184 r6: TypeID(2v1) <- SignOf(r12)
 1185 r5: TypeID(2v1) <- IsZero(r12)
 1186 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1187 r3: TypeID(2v1) <- Parity(r47)
0x5de334:
 1188 r45: TypeID(2v1) <- Const { value: 2, size: 4 }
 1189 r46: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1190 r16: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de339:
 1191 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1192 r17: TypeID(2v1) <- Get(r45)
 1193 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33a:
 1194 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1195 r11: TypeID(2v1) <- Get(r45)
 1196 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33b:
 1197 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1198 r24: TypeID(2v1) <- Get(r45)
 1199 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33d:
 1200 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1201 r25: TypeID(2v1) <- Get(r45)
 1202 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33f:
 1203 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1204 r26: TypeID(2v1) <- Get(r45)
 1205 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de341:
 1206 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1207 r27: TypeID(2v1) <- Get(r45)
 1208 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de343:
 1209 r45: TypeID(2v1) <- SetReturnValue(r16)
 1210 r45: TypeID(2v1) <- Control(Ret)
0x5de348:
 1211 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1212 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1213 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1214 r24: TypeID(2v1) <- Get(r45)
0x5de34c:
 1215 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
 1216 r27: TypeID(2v1) <- Arith(Add, r27, r46)
 1217 r27: TypeID(2v1) <- Get(r27)
 1218 r10: TypeID(2v1) <- OverflowOf(r27)
 1219 r2: TypeID(2v1) <- CarryOf(r27)
 1220 r6: TypeID(2v1) <- SignOf(r27)
 1221 r5: TypeID(2v1) <- IsZero(r27)
 1222 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1223 r3: TypeID(2v1) <- Parity(r47)
0x5de350:
 1224 r14: TypeID(2v1) <- Get(r24)
0x5de353:
 1225 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1226 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1227 r2: TypeID(2v1) <- Undefined
 1228 r3: TypeID(2v1) <- Undefined
 1229 r4: TypeID(2v1) <- Undefined
 1230 r5: TypeID(2v1) <- Undefined
 1231 r6: TypeID(2v1) <- Undefined
 1232 r7: TypeID(2v1) <- Undefined
 1233 r8: TypeID(2v1) <- Undefined
 1234 r9: TypeID(2v1) <- Undefined
 1235 r10: TypeID(2v1) <- Undefined
0x5de358:
 1236 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1237 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1238 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1239 r19: TypeID(2v1) <- Get(r45)
0x5de35d:
 1240 r11: TypeID(2v1) <- Get(r16)
0x5de360:
 1241 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1242 r45: TypeID(2v1) <- Arith(Add, r45, r24)
 1243 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1244 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1245 r20: TypeID(2v1) <- Get(r45)
0x5de364:
 1246 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
 1247 r47: TypeID(2v1) <- Arith(Add, r47, r19)
 1248 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
 1249 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
 1250 r10: TypeID(2v1) <- OverflowOf(r27)
 1251 r2: TypeID(2v1) <- CarryOf(r27)
 1252 r6: TypeID(2v1) <- SignOf(r27)
 1253 r5: TypeID(2v1) <- IsZero(r27)
 1254 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1255 r3: TypeID(2v1) <- Parity(r48)
0x5de367:
 1256 r45: TypeID(2v1) <- SetJumpCondition(r2)
 1257 r45: TypeID(2v1) <- Control(JmpIf(861))
0x5de36d:
 1258 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1259 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1260 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1261 r17: TypeID(2v1) <- Get(r45)
0x5de372:
 1262 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1263 r6: TypeID(2v1) <- SignOf(r17)
 1264 r5: TypeID(2v1) <- IsZero(r17)
 1265 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1266 r3: TypeID(2v1) <- Parity(r17)
 1267 r2: TypeID(2v1) <- False
 1268 r10: TypeID(2v1) <- False
0x5de375:
 1269 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1270 r45: TypeID(2v1) <- Control(JmpIf(1055))
0x5de37b:
 1271 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1272 r46: TypeID(2v1) <- Arith(Add, r46, r17)
 1273 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r25 }
0x5de37e:
 1274 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1275 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1276 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1277 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1278 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1279 r10: TypeID(2v1) <- False
 1280 r2: TypeID(2v1) <- False
 1281 r6: TypeID(2v1) <- SignOf(r46)
 1282 r5: TypeID(2v1) <- IsZero(r46)
 1283 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1284 r3: TypeID(2v1) <- Parity(r50)
0x5de380:
 1285 r45: TypeID(2v1) <- Control(Jmp(1066))
0x5de388:
 1286 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1287 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1288 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1289 r14: TypeID(2v1) <- Get(r45)
0x5de38c:
 1290 r19: TypeID(2v1) <- Get(r11)
0x5de38f:
 1291 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1292 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1293 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de394:
 1294 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1295 r45: TypeID(2v1) <- Void
 1296 r45: TypeID(2v1) <- Get(r14)
 1297 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1298 r46: TypeID(2v1) <- Void
 1299 r46: TypeID(2v1) <- Get(r15)
 1300 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1301 r47: TypeID(2v1) <- Void
 1302 r47: TypeID(2v1) <- Get(r19)
 1303 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1304 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1305 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1306 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1307 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1308 r2: TypeID(2v1) <- Undefined
 1309 r3: TypeID(2v1) <- Undefined
 1310 r4: TypeID(2v1) <- Undefined
 1311 r5: TypeID(2v1) <- Undefined
 1312 r6: TypeID(2v1) <- Undefined
 1313 r7: TypeID(2v1) <- Undefined
 1314 r8: TypeID(2v1) <- Undefined
 1315 r9: TypeID(2v1) <- Undefined
 1316 r10: TypeID(2v1) <- Undefined
 1317 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de399:
 1318 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1319 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1320 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1321 r20: TypeID(2v1) <- Get(r45)
0x5de39e:
 1322 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1323 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1324 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1325 r6: TypeID(2v1) <- SignOf(r46)
 1326 r5: TypeID(2v1) <- IsZero(r46)
 1327 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1328 r3: TypeID(2v1) <- Parity(r46)
 1329 r2: TypeID(2v1) <- False
 1330 r10: TypeID(2v1) <- False
0x5de3a0:
 1331 r45: TypeID(2v1) <- Not(r5)
 1332 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1333 r46: TypeID(2v1) <- Control(JmpIf(400))
0x5de3a6:
 1334 r45: TypeID(2v1) <- Control(Jmp(738))
0x5de3b0:
 1335 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1336 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1337 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1338 r14: TypeID(2v1) <- Get(r45)
0x5de3b4:
 1339 r19: TypeID(2v1) <- Get(r11)
0x5de3b7:
 1340 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1341 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1342 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3bc:
 1343 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1344 r45: TypeID(2v1) <- Void
 1345 r45: TypeID(2v1) <- Get(r14)
 1346 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1347 r46: TypeID(2v1) <- Void
 1348 r46: TypeID(2v1) <- Get(r15)
 1349 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1350 r47: TypeID(2v1) <- Void
 1351 r47: TypeID(2v1) <- Get(r19)
 1352 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1353 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1354 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1355 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1356 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1357 r2: TypeID(2v1) <- Undefined
 1358 r3: TypeID(2v1) <- Undefined
 1359 r4: TypeID(2v1) <- Undefined
 1360 r5: TypeID(2v1) <- Undefined
 1361 r6: TypeID(2v1) <- Undefined
 1362 r7: TypeID(2v1) <- Undefined
 1363 r8: TypeID(2v1) <- Undefined
 1364 r9: TypeID(2v1) <- Undefined
 1365 r10: TypeID(2v1) <- Undefined
 1366 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de3c1:
 1367 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1368 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1369 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1370 r20: TypeID(2v1) <- Get(r45)
0x5de3c6:
 1371 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1372 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1373 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1374 r6: TypeID(2v1) <- SignOf(r46)
 1375 r5: TypeID(2v1) <- IsZero(r46)
 1376 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1377 r3: TypeID(2v1) <- Parity(r46)
 1378 r2: TypeID(2v1) <- False
 1379 r10: TypeID(2v1) <- False
0x5de3c8:
 1380 r45: TypeID(2v1) <- Not(r5)
 1381 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1382 r46: TypeID(2v1) <- Control(JmpIf(337))
0x5de3ce:
 1383 r45: TypeID(2v1) <- Control(Jmp(738))
0x5de3d3:
 1384 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1385 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1386 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1387 r14: TypeID(2v1) <- Get(r45)
0x5de3d7:
 1388 r19: TypeID(2v1) <- Get(r11)
0x5de3da:
 1389 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1390 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1391 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3df:
 1392 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1393 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1394 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r24 }
0x5de3e4:
 1395 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1396 r45: TypeID(2v1) <- Void
 1397 r45: TypeID(2v1) <- Get(r14)
 1398 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1399 r46: TypeID(2v1) <- Void
 1400 r46: TypeID(2v1) <- Get(r15)
 1401 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1402 r47: TypeID(2v1) <- Void
 1403 r47: TypeID(2v1) <- Get(r19)
 1404 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1405 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
 1406 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
 1407 r49: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1408 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
 1409 r2: TypeID(2v1) <- Undefined
 1410 r3: TypeID(2v1) <- Undefined
 1411 r4: TypeID(2v1) <- Undefined
 1412 r5: TypeID(2v1) <- Undefined
 1413 r6: TypeID(2v1) <- Undefined
 1414 r7: TypeID(2v1) <- Undefined
 1415 r8: TypeID(2v1) <- Undefined
 1416 r9: TypeID(2v1) <- Undefined
 1417 r10: TypeID(2v1) <- Undefined
 1418 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de3e9:
 1419 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1420 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1421 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1422 r20: TypeID(2v1) <- Get(r45)
0x5de3ee:
 1423 r14: TypeID(2v1) <- Get(r24)
0x5de3f1:
 1424 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1425 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1426 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1427 r6: TypeID(2v1) <- SignOf(r46)
 1428 r5: TypeID(2v1) <- IsZero(r46)
 1429 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1430 r3: TypeID(2v1) <- Parity(r46)
 1431 r2: TypeID(2v1) <- False
 1432 r10: TypeID(2v1) <- False
0x5de3f3:
 1433 r45: TypeID(2v1) <- Not(r5)
 1434 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1435 r46: TypeID(2v1) <- Control(JmpIf(286))
0x5de3f9:
 1436 r45: TypeID(2v1) <- Control(Jmp(738))
0x5de400:
 1437 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1438 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1439 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1440 r27: TypeID(2v1) <- Get(r45)
0x5de404:
 1441 r14: TypeID(2v1) <- Get(r27)
0x5de407:
 1442 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1443 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1444 r2: TypeID(2v1) <- Undefined
 1445 r3: TypeID(2v1) <- Undefined
 1446 r4: TypeID(2v1) <- Undefined
 1447 r5: TypeID(2v1) <- Undefined
 1448 r6: TypeID(2v1) <- Undefined
 1449 r7: TypeID(2v1) <- Undefined
 1450 r8: TypeID(2v1) <- Undefined
 1451 r9: TypeID(2v1) <- Undefined
 1452 r10: TypeID(2v1) <- Undefined
0x5de40c:
 1453 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1454 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1455 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1456 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1457 r20: TypeID(2v1) <- Get(r45)
0x5de410:
 1458 r45: TypeID(2v1) <- Control(Jmp(113))
0x5de415:
 1459 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1460 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1461 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1462 r17: TypeID(2v1) <- Get(r45)
0x5de41a:
 1463 r45: TypeID(2v1) <- Control(Jmp(1035))
0x5de41f:
 1464 r25: TypeID(2v1) <- Get(r26)
0x5de422:
 1465 r45: TypeID(2v1) <- Control(Jmp(1262))


ssa pre-xform:
ssa program  1561 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
  (  4)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  5)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  4)  r18: ? <- Ancestral(AncestralName("RDX"))
         r19: ? <- Ancestral(AncestralName("R8"))
         r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
  (  2)  r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r26 }
  (  2)  r45: ? <- ArithK(Add, r43, -8)
         r46: ? <- StoreMem { addr: r45, value: r25 }
         r48: ? <- Const { value: 46, size: 4 }
         r49: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r50: ? <- Concat { lo: r48, hi: r49 }
  (  2)  r51: ? <- ArithK(Add, r45, -8)
         r52: ? <- StoreMem { addr: r51, value: r24 }
  (  2)  r53: ? <- ArithK(Add, r51, -8)
         r54: ? <- StoreMem { addr: r53, value: r23 }
  (  2)  r55: ? <- ArithK(Add, r53, -8)
         r56: ? <- StoreMem { addr: r55, value: r10 }
  (  2)  r57: ? <- ArithK(Add, r55, -8)
         r58: ? <- StoreMem { addr: r57, value: r16 }
         r60: ? <- Const { value: 88, size: 8 }
  ( 62)  r61: ? <- Arith(Sub, r57, r60)
         r69: ? <- Const { value: 64, size: 8 }
         r70: ? <- Arith(Add, r69, r61)
         r71: ? <- StoreMem { addr: r70, value: r13 }
         r73: ? <- Const { value: 32, size: 8 }
         r74: ? <- Arith(Add, r73, r61)
         r75: ? <- StoreMem { addr: r74, value: r19 }
         r76: ? <- Const { value: 0, size: 8 }
         r77: ? <- Arith(Add, r76, r61)
         r78: ? <- StoreMem { addr: r77, value: r18 }
         r79: ? <- Const { value: 24, size: 8 }
         r80: ? <- Arith(Add, r79, r61)
         r81: ? <- StoreMem { addr: r80, value: r20 }
         r88: ? <- Part { src: r50, offset: 0, size: 4 }
         r89: ? <- CArg { value: r88, next_arg: None }
         r90: ? <- CArg { value: r18, next_arg: Some(r89) }
         r91: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r92: ? <- Call { callee: r91, first_arg: Some(r90) }
  (  3)  r102: ? <- Part { src: r92, offset: 0, size: 8 }
  (  2)  r104: ? <- Arith(BitAnd, r102, r102)
         r106: ? <- IsZero(r104)
         r111: ? <- SetJumpCondition(r106)
         r1491: ? <- Upsilon { value: r102, phi_ref: r1466 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1437: ? <- Const { value: 0, size: 8 }
         r1438: ? <- Arith(Add, r1437, r61)
         r1439: ? <- LoadMem { addr: r1438, size: 8 }
         r1442: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1443: ? <- Call { callee: r1442, first_arg: None }
         r1453: ? <- Const { value: 0, size: 8 }
         r1454: ? <- Arith(Add, r1453, r1439)
         r1455: ? <- ArithK(Mul, r104, 1)
         r1456: ? <- Arith(Add, r1454, r1455)
         r1492: ? <- Upsilon { value: r1456, phi_ref: r1466 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  7)  r1466: ? <- Phi
         r113: ? <- Const { value: 0, size: 8 }
         r114: ? <- Arith(Add, r113, r61)
  ( 11)  r115: ? <- LoadMem { addr: r114, size: 8 }
  ( 15)  r118: ? <- Arith(Sub, r1466, r115)
         r123: ? <- IsZero(r118)
         r126: ? <- SetJumpCondition(r123)
         r1493: ? <- Upsilon { value: r115, phi_ref: r1488 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r128: ? <- Const { value: 24, size: 8 }
         r129: ? <- Arith(Add, r128, r61)
         r130: ? <- LoadMem { addr: r129, size: 8 }
         r132: ? <- Const { value: 0, size: 8 }
         r133: ? <- Arith(Add, r132, r130)
         r134: ? <- LoadMem { addr: r133, size: 8 }
         r135: ? <- Const { value: 0, size: 8 }
         r136: ? <- Arith(Sub, r134, r135)
         r140: ? <- IsZero(r136)
         r143: ? <- SetJumpCondition(r140)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r145: ? <- Const { value: 24, size: 8 }
         r146: ? <- Arith(Add, r145, r14)
  ( 10)  r147: ? <- LoadMem { addr: r146, size: 8 }
         r149: ? <- Part { src: r26, offset: 0, size: 4 }
         r150: ? <- Part { src: r26, offset: 0, size: 4 }
         r151: ? <- Arith(BitXor, r149, r150)
         r152: ? <- Part { src: r26, offset: 4, size: 4 }
  (  8)  r153: ? <- Concat { lo: r151, hi: r152 }
         r160: ? <- Const { value: 72, size: 8 }
         r161: ? <- Arith(Add, r160, r61)
         r162: ? <- StoreMem { addr: r161, value: r17 }
         r163: ? <- Const { value: 0, size: 8 }
         r164: ? <- Arith(Add, r163, r147)
         r165: ? <- LoadMem { addr: r164, size: 1 }
         r166: ? <- Const { value: 0, size: 1 }
         r167: ? <- Arith(Sub, r165, r166)
         r171: ? <- IsZero(r167)
         r174: ? <- SetJumpCondition(r171)
         r1499: ? <- Upsilon { value: r1466, phi_ref: r1484 }
         r1500: ? <- Upsilon { value: r14, phi_ref: r1467 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  5)  r1467: ? <- Phi
         r176: ? <- Const { value: 16, size: 8 }
         r177: ? <- Arith(Add, r176, r1467)
  (  3)  r178: ? <- LoadMem { addr: r177, size: 8 }
         r180: ? <- Const { value: 16, size: 8 }
         r181: ? <- Arith(Add, r180, r61)
         r182: ? <- StoreMem { addr: r181, value: r178 }
  (  3)  r183: ? <- Arith(BitAnd, r178, r178)
         r185: ? <- IsZero(r183)
         r190: ? <- SetJumpCondition(r185)
         r1513: ? <- Upsilon { value: r115, phi_ref: r1488 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r193: ? <- Part { src: r17, offset: 0, size: 4 }
         r194: ? <- Part { src: r17, offset: 0, size: 4 }
         r195: ? <- Arith(BitXor, r193, r194)
         r196: ? <- Part { src: r17, offset: 4, size: 4 }
  (  6)  r197: ? <- Concat { lo: r195, hi: r196 }
         r204: ? <- Part { src: r183, offset: 0, size: 4 }
         r205: ? <- Const { value: 3, size: 4 }
  (  2)  r206: ? <- Arith(BitAnd, r204, r205)
         r207: ? <- Part { src: r183, offset: 4, size: 4 }
         r208: ? <- Concat { lo: r206, hi: r207 }
         r212: ? <- IsZero(r206)
         r215: ? <- SetJumpCondition(r212)
         r1514: ? <- Upsilon { value: r1466, phi_ref: r1473 }
         r1515: ? <- Upsilon { value: r147, phi_ref: r1474 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r217: ? <- Const { value: 1, size: 8 }
  (  2)  r218: ? <- Arith(Sub, r208, r217)
         r222: ? <- IsZero(r218)
         r225: ? <- SetJumpCondition(r222)
         r1536: ? <- Upsilon { value: r1466, phi_ref: r1471 }
         r1537: ? <- Upsilon { value: r147, phi_ref: r1472 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r227: ? <- Const { value: 2, size: 8 }
         r228: ? <- Arith(Sub, r218, r227)
         r232: ? <- IsZero(r228)
         r235: ? <- SetJumpCondition(r232)
         r1545: ? <- Upsilon { value: r1466, phi_ref: r1469 }
         r1546: ? <- Upsilon { value: r147, phi_ref: r1470 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r237: ? <- Const { value: 8, size: 8 }
         r238: ? <- Arith(Add, r237, r147)
  (  2)  r239: ? <- LoadMem { addr: r238, size: 8 }
         r241: ? <- Const { value: 48, size: 8 }
         r242: ? <- Arith(Add, r241, r61)
         r243: ? <- StoreMem { addr: r242, value: r1466 }
         r245: ? <- Const { value: 40, size: 8 }
         r246: ? <- Arith(Add, r245, r61)
         r247: ? <- StoreMem { addr: r246, value: r147 }
         r249: ? <- Const { value: 8, size: 8 }
         r250: ? <- Arith(Add, r249, r61)
         r251: ? <- StoreMem { addr: r250, value: r239 }
         r255: ? <- CArg { value: r239, next_arg: None }
         r256: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r257: ? <- Call { callee: r256, first_arg: Some(r255) }
         r267: ? <- Part { src: r257, offset: 0, size: 8 }
         r268: ? <- Const { value: 8, size: 8 }
         r269: ? <- Arith(Add, r268, r61)
         r270: ? <- LoadMem { addr: r269, size: 8 }
         r272: ? <- Const { value: 48, size: 8 }
         r273: ? <- Arith(Add, r272, r61)
  (  2)  r274: ? <- LoadMem { addr: r273, size: 8 }
         r277: ? <- Arith(Sub, r267, r118)
         r281: ? <- IsZero(r277)
         r284: ? <- SetJumpCondition(r281)
         r1553: ? <- Upsilon { value: r147, phi_ref: r1468 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1384: ? <- Const { value: 0, size: 8 }
         r1385: ? <- Arith(Add, r1384, r61)
         r1386: ? <- LoadMem { addr: r1385, size: 8 }
         r1389: ? <- Const { value: 40, size: 8 }
         r1390: ? <- Arith(Add, r1389, r61)
         r1391: ? <- StoreMem { addr: r1390, value: r274 }
         r1392: ? <- Const { value: 8, size: 8 }
         r1393: ? <- Arith(Add, r1392, r61)
         r1394: ? <- StoreMem { addr: r1393, value: r147 }
         r1404: ? <- CArg { value: r118, next_arg: None }
         r1405: ? <- CArg { value: r270, next_arg: Some(r1404) }
         r1406: ? <- CArg { value: r1386, next_arg: Some(r1405) }
         r1407: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1408: ? <- Call { callee: r1407, first_arg: Some(r1406) }
  (  2)  r1418: ? <- Part { src: r1408, offset: 0, size: 8 }
         r1424: ? <- Part { src: r1418, offset: 0, size: 4 }
         r1425: ? <- Part { src: r1418, offset: 0, size: 4 }
         r1426: ? <- Arith(BitAnd, r1424, r1425)
         r1428: ? <- IsZero(r1426)
         r1433: ? <- Not(r1428)
         r1434: ? <- SetJumpCondition(r1433)
         r1554: ? <- Upsilon { value: r147, phi_ref: r1468 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1555: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1556: ? <- Upsilon { value: r147, phi_ref: r1479 }
         r1557: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1558: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1468: ? <- Phi
         r289: ? <- Const { value: 40, size: 8 }
         r290: ? <- Arith(Add, r289, r1468)
         r1559: ? <- Upsilon { value: r274, phi_ref: r1469 }
         r1560: ? <- Upsilon { value: r290, phi_ref: r1470 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1470: ? <- Phi
         r1469: ? <- Phi
         r292: ? <- Const { value: 8, size: 8 }
         r293: ? <- Arith(Add, r292, r1470)
  (  2)  r294: ? <- LoadMem { addr: r293, size: 8 }
         r296: ? <- Const { value: 40, size: 8 }
         r297: ? <- Arith(Add, r296, r61)
         r298: ? <- StoreMem { addr: r297, value: r1469 }
         r301: ? <- Const { value: 8, size: 8 }
         r302: ? <- Arith(Add, r301, r61)
         r303: ? <- StoreMem { addr: r302, value: r294 }
         r307: ? <- CArg { value: r294, next_arg: None }
         r308: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r309: ? <- Call { callee: r308, first_arg: Some(r307) }
         r319: ? <- Part { src: r309, offset: 0, size: 8 }
         r320: ? <- Const { value: 8, size: 8 }
         r321: ? <- Arith(Add, r320, r61)
         r322: ? <- LoadMem { addr: r321, size: 8 }
         r324: ? <- Const { value: 40, size: 8 }
         r325: ? <- Arith(Add, r324, r61)
  (  2)  r326: ? <- LoadMem { addr: r325, size: 8 }
         r328: ? <- Arith(Sub, r319, r118)
         r332: ? <- IsZero(r328)
         r335: ? <- SetJumpCondition(r332)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1335: ? <- Const { value: 0, size: 8 }
         r1336: ? <- Arith(Add, r1335, r61)
         r1337: ? <- LoadMem { addr: r1336, size: 8 }
         r1340: ? <- Const { value: 8, size: 8 }
         r1341: ? <- Arith(Add, r1340, r61)
         r1342: ? <- StoreMem { addr: r1341, value: r326 }
         r1352: ? <- CArg { value: r118, next_arg: None }
         r1353: ? <- CArg { value: r322, next_arg: Some(r1352) }
         r1354: ? <- CArg { value: r1337, next_arg: Some(r1353) }
         r1355: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1356: ? <- Call { callee: r1355, first_arg: Some(r1354) }
  (  2)  r1366: ? <- Part { src: r1356, offset: 0, size: 8 }
         r1371: ? <- Part { src: r1366, offset: 0, size: 4 }
         r1372: ? <- Part { src: r1366, offset: 0, size: 4 }
         r1373: ? <- Arith(BitAnd, r1371, r1372)
         r1375: ? <- IsZero(r1373)
         r1380: ? <- Not(r1375)
         r1381: ? <- SetJumpCondition(r1380)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1547: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1548: ? <- Upsilon { value: r1470, phi_ref: r1479 }
         r1549: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1550: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r346: ? <- Const { value: 40, size: 8 }
         r347: ? <- Arith(Add, r1470, r346)
         r1551: ? <- Upsilon { value: r326, phi_ref: r1471 }
         r1552: ? <- Upsilon { value: r347, phi_ref: r1472 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1472: ? <- Phi
         r1471: ? <- Phi
         r355: ? <- Const { value: 8, size: 8 }
         r356: ? <- Arith(Add, r355, r1472)
  (  2)  r357: ? <- LoadMem { addr: r356, size: 8 }
         r359: ? <- Const { value: 40, size: 8 }
         r360: ? <- Arith(Add, r359, r61)
         r361: ? <- StoreMem { addr: r360, value: r1471 }
         r364: ? <- Const { value: 8, size: 8 }
         r365: ? <- Arith(Add, r364, r61)
         r366: ? <- StoreMem { addr: r365, value: r357 }
         r370: ? <- CArg { value: r357, next_arg: None }
         r371: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r372: ? <- Call { callee: r371, first_arg: Some(r370) }
         r382: ? <- Part { src: r372, offset: 0, size: 8 }
         r383: ? <- Const { value: 8, size: 8 }
         r384: ? <- Arith(Add, r383, r61)
         r385: ? <- LoadMem { addr: r384, size: 8 }
         r387: ? <- Const { value: 40, size: 8 }
         r388: ? <- Arith(Add, r387, r61)
  (  2)  r389: ? <- LoadMem { addr: r388, size: 8 }
  (  2)  r391: ? <- Arith(Sub, r382, r118)
         r395: ? <- IsZero(r391)
         r398: ? <- SetJumpCondition(r395)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1286: ? <- Const { value: 0, size: 8 }
         r1287: ? <- Arith(Add, r1286, r61)
         r1288: ? <- LoadMem { addr: r1287, size: 8 }
         r1291: ? <- Const { value: 8, size: 8 }
         r1292: ? <- Arith(Add, r1291, r61)
         r1293: ? <- StoreMem { addr: r1292, value: r389 }
         r1303: ? <- CArg { value: r118, next_arg: None }
         r1304: ? <- CArg { value: r385, next_arg: Some(r1303) }
         r1305: ? <- CArg { value: r1288, next_arg: Some(r1304) }
         r1306: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1307: ? <- Call { callee: r1306, first_arg: Some(r1305) }
  (  2)  r1317: ? <- Part { src: r1307, offset: 0, size: 8 }
         r1322: ? <- Part { src: r1317, offset: 0, size: 4 }
         r1323: ? <- Part { src: r1317, offset: 0, size: 4 }
         r1324: ? <- Arith(BitAnd, r1322, r1323)
         r1326: ? <- IsZero(r1324)
         r1331: ? <- Not(r1326)
         r1332: ? <- SetJumpCondition(r1331)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1538: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1539: ? <- Upsilon { value: r1472, phi_ref: r1479 }
         r1540: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1541: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r400: ? <- Const { value: 16, size: 8 }
         r401: ? <- Arith(Add, r400, r61)
         r402: ? <- LoadMem { addr: r401, size: 8 }
         r404: ? <- Const { value: 1, size: 8 }
         r405: ? <- Arith(Add, r197, r404)
         r413: ? <- Const { value: 40, size: 8 }
         r414: ? <- Arith(Add, r1472, r413)
         r422: ? <- Arith(Sub, r405, r402)
         r426: ? <- IsZero(r422)
         r429: ? <- SetJumpCondition(r426)
         r1542: ? <- Upsilon { value: r391, phi_ref: r1488 }
         r1543: ? <- Upsilon { value: r389, phi_ref: r1473 }
         r1544: ? <- Upsilon { value: r414, phi_ref: r1474 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1474: ? <- Phi
         r1473: ? <- Phi
         r431: ? <- Const { value: 56, size: 8 }
         r432: ? <- Arith(Add, r431, r61)
         r433: ? <- StoreMem { addr: r432, value: r1467 }
         r435: ? <- Const { value: 40, size: 8 }
         r436: ? <- Arith(Add, r435, r61)
         r437: ? <- StoreMem { addr: r436, value: r153 }
         r438: ? <- Const { value: 48, size: 8 }
         r439: ? <- Arith(Add, r438, r61)
         r440: ? <- StoreMem { addr: r439, value: r1473 }
         r1519: ? <- Upsilon { value: r1474, phi_ref: r1475 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  4)  r1475: ? <- Phi
         r595: ? <- Const { value: 8, size: 8 }
         r596: ? <- Arith(Add, r595, r1475)
  (  2)  r597: ? <- LoadMem { addr: r596, size: 8 }
         r604: ? <- CArg { value: r597, next_arg: None }
         r605: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r606: ? <- Call { callee: r605, first_arg: Some(r604) }
         r616: ? <- Part { src: r606, offset: 0, size: 8 }
         r617: ? <- Arith(Sub, r616, r118)
         r621: ? <- IsZero(r617)
         r624: ? <- Not(r621)
         r625: ? <- SetJumpCondition(r624)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r627: ? <- Const { value: 0, size: 8 }
         r628: ? <- Arith(Add, r627, r61)
         r629: ? <- LoadMem { addr: r628, size: 8 }
         r642: ? <- CArg { value: r118, next_arg: None }
         r643: ? <- CArg { value: r597, next_arg: Some(r642) }
         r644: ? <- CArg { value: r629, next_arg: Some(r643) }
         r645: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r646: ? <- Call { callee: r645, first_arg: Some(r644) }
  (  2)  r656: ? <- Part { src: r646, offset: 0, size: 8 }
         r657: ? <- Part { src: r656, offset: 0, size: 4 }
         r658: ? <- Part { src: r656, offset: 0, size: 4 }
         r659: ? <- Arith(BitAnd, r657, r658)
         r661: ? <- IsZero(r659)
         r666: ? <- Not(r661)
         r667: ? <- SetJumpCondition(r666)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r670: ? <- Const { value: 40, size: 8 }
         r671: ? <- Arith(Add, r670, r61)
         r672: ? <- LoadMem { addr: r671, size: 8 }
         r678: ? <- Const { value: 56, size: 8 }
         r679: ? <- Arith(Add, r678, r61)
         r680: ? <- LoadMem { addr: r679, size: 8 }
         r1520: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1521: ? <- Upsilon { value: r1475, phi_ref: r1479 }
         r1522: ? <- Upsilon { value: r680, phi_ref: r1480 }
         r1523: ? <- Upsilon { value: r672, phi_ref: r1481 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r442: ? <- Const { value: 48, size: 8 }
         r443: ? <- Arith(Add, r442, r1475)
  (  2)  r444: ? <- LoadMem { addr: r443, size: 8 }
         r446: ? <- Const { value: 40, size: 8 }
  (  6)  r447: ? <- Arith(Add, r446, r1475)
         r449: ? <- Const { value: 1, size: 8 }
  (  2)  r450: ? <- Arith(Add, r449, r197)
         r456: ? <- Const { value: 8, size: 8 }
         r457: ? <- Arith(Add, r456, r61)
         r458: ? <- StoreMem { addr: r457, value: r444 }
         r462: ? <- CArg { value: r444, next_arg: None }
         r463: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r464: ? <- Call { callee: r463, first_arg: Some(r462) }
         r474: ? <- Part { src: r464, offset: 0, size: 8 }
         r475: ? <- Const { value: 8, size: 8 }
         r476: ? <- Arith(Add, r475, r61)
         r477: ? <- LoadMem { addr: r476, size: 8 }
         r479: ? <- Arith(Sub, r474, r118)
         r483: ? <- IsZero(r479)
         r486: ? <- SetJumpCondition(r483)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r683: ? <- Const { value: 0, size: 8 }
         r684: ? <- Arith(Add, r683, r61)
         r685: ? <- LoadMem { addr: r684, size: 8 }
         r697: ? <- CArg { value: r118, next_arg: None }
         r698: ? <- CArg { value: r477, next_arg: Some(r697) }
         r699: ? <- CArg { value: r685, next_arg: Some(r698) }
         r700: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r701: ? <- Call { callee: r700, first_arg: Some(r699) }
  (  2)  r711: ? <- Part { src: r701, offset: 0, size: 8 }
         r712: ? <- Part { src: r711, offset: 0, size: 4 }
         r713: ? <- Part { src: r711, offset: 0, size: 4 }
         r714: ? <- Arith(BitAnd, r712, r713)
         r716: ? <- IsZero(r714)
         r721: ? <- Not(r716)
         r722: ? <- SetJumpCondition(r721)
         r1529: ? <- Upsilon { value: r447, phi_ref: r1477 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r488: ? <- Const { value: 48, size: 8 }
         r489: ? <- Arith(Add, r488, r447)
  (  2)  r490: ? <- LoadMem { addr: r489, size: 8 }
         r492: ? <- Const { value: 40, size: 8 }
         r493: ? <- Arith(Add, r492, r447)
         r500: ? <- Const { value: 8, size: 8 }
         r501: ? <- Arith(Add, r500, r61)
         r502: ? <- StoreMem { addr: r501, value: r490 }
         r506: ? <- CArg { value: r490, next_arg: None }
         r507: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r508: ? <- Call { callee: r507, first_arg: Some(r506) }
         r518: ? <- Part { src: r508, offset: 0, size: 8 }
         r519: ? <- Const { value: 8, size: 8 }
         r520: ? <- Arith(Add, r519, r61)
         r521: ? <- LoadMem { addr: r520, size: 8 }
         r523: ? <- Arith(Sub, r518, r118)
         r527: ? <- IsZero(r523)
         r530: ? <- SetJumpCondition(r527)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1095: ? <- Const { value: 0, size: 8 }
         r1096: ? <- Arith(Add, r1095, r61)
         r1097: ? <- LoadMem { addr: r1096, size: 8 }
         r1109: ? <- CArg { value: r118, next_arg: None }
         r1110: ? <- CArg { value: r521, next_arg: Some(r1109) }
         r1111: ? <- CArg { value: r1097, next_arg: Some(r1110) }
         r1112: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1113: ? <- Call { callee: r1112, first_arg: Some(r1111) }
  (  2)  r1123: ? <- Part { src: r1113, offset: 0, size: 8 }
         r1124: ? <- Part { src: r1123, offset: 0, size: 4 }
         r1125: ? <- Part { src: r1123, offset: 0, size: 4 }
         r1126: ? <- Arith(BitAnd, r1124, r1125)
         r1128: ? <- IsZero(r1126)
         r1133: ? <- Not(r1128)
         r1134: ? <- SetJumpCondition(r1133)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1531: ? <- Upsilon { value: r493, phi_ref: r1477 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r532: ? <- Const { value: 88, size: 8 }
         r533: ? <- Arith(Add, r532, r447)
  (  2)  r534: ? <- LoadMem { addr: r533, size: 8 }
         r536: ? <- Const { value: 80, size: 8 }
         r537: ? <- Arith(Add, r536, r447)
         r544: ? <- Const { value: 8, size: 8 }
         r545: ? <- Arith(Add, r544, r61)
         r546: ? <- StoreMem { addr: r545, value: r534 }
         r550: ? <- CArg { value: r534, next_arg: None }
         r551: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r552: ? <- Call { callee: r551, first_arg: Some(r550) }
         r562: ? <- Part { src: r552, offset: 0, size: 8 }
         r563: ? <- Const { value: 8, size: 8 }
         r564: ? <- Arith(Add, r563, r61)
         r565: ? <- LoadMem { addr: r564, size: 8 }
  (  2)  r567: ? <- Arith(Sub, r562, r118)
         r571: ? <- IsZero(r567)
         r574: ? <- SetJumpCondition(r571)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1137: ? <- Const { value: 0, size: 8 }
         r1138: ? <- Arith(Add, r1137, r61)
         r1139: ? <- LoadMem { addr: r1138, size: 8 }
         r1151: ? <- CArg { value: r118, next_arg: None }
         r1152: ? <- CArg { value: r565, next_arg: Some(r1151) }
         r1153: ? <- CArg { value: r1139, next_arg: Some(r1152) }
         r1154: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1155: ? <- Call { callee: r1154, first_arg: Some(r1153) }
  (  2)  r1165: ? <- Part { src: r1155, offset: 0, size: 8 }
         r1166: ? <- Part { src: r1165, offset: 0, size: 4 }
         r1167: ? <- Part { src: r1165, offset: 0, size: 4 }
         r1168: ? <- Arith(BitAnd, r1166, r1167)
         r1170: ? <- IsZero(r1168)
         r1175: ? <- Not(r1170)
         r1176: ? <- SetJumpCondition(r1175)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1533: ? <- Upsilon { value: r537, phi_ref: r1477 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1477: ? <- Phi
         r725: ? <- Const { value: 40, size: 8 }
         r726: ? <- Arith(Add, r725, r61)
         r727: ? <- LoadMem { addr: r726, size: 8 }
         r734: ? <- Const { value: 56, size: 8 }
         r735: ? <- Arith(Add, r734, r61)
         r736: ? <- LoadMem { addr: r735, size: 8 }
         r1524: ? <- Upsilon { value: r450, phi_ref: r1478 }
         r1525: ? <- Upsilon { value: r1477, phi_ref: r1479 }
         r1526: ? <- Upsilon { value: r736, phi_ref: r1480 }
         r1527: ? <- Upsilon { value: r727, phi_ref: r1481 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1481: ? <- Phi
         r1480: ? <- Phi
         r1479: ? <- Phi
         r1478: ? <- Phi
         r738: ? <- Const { value: 32, size: 8 }
         r739: ? <- Arith(Add, r738, r61)
         r740: ? <- LoadMem { addr: r739, size: 8 }
         r742: ? <- Const { value: 0, size: 8 }
         r743: ? <- Arith(Add, r742, r740)
         r744: ? <- ArithK(Mul, r1481, 8)
         r745: ? <- Arith(Add, r743, r744)
         r746: ? <- StoreMem { addr: r745, value: r1478 }
         r747: ? <- Arith(Sub, r1479, r1480)
         r751: ? <- IsZero(r747)
         r754: ? <- SetJumpCondition(r751)
         r1516: ? <- Upsilon { value: r115, phi_ref: r1488 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r756: ? <- Const { value: 32, size: 8 }
         r757: ? <- Arith(Add, r756, r24)
         r758: ? <- LoadMem { addr: r757, size: 8 }
         r759: ? <- Const { value: 0, size: 8 }
         r760: ? <- Arith(Sub, r758, r759)
         r764: ? <- IsZero(r760)
         r767: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r768: ? <- Not(r764)
         r769: ? <- SetJumpCondition(r768)
         r1517: ? <- Upsilon { value: r18, phi_ref: r1485 }
         r1518: ? <- Upsilon { value: r18, phi_ref: r1482 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1482: ? <- Phi
         r771: ? <- Part { src: r1482, offset: 0, size: 1 }
         r772: ? <- Part { src: r1482, offset: 0, size: 1 }
         r773: ? <- Arith(BitAnd, r771, r772)
         r775: ? <- IsZero(r773)
         r780: ? <- SetJumpCondition(r775)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r782: ? <- Const { value: 1, size: 8 }
  (  2)  r783: ? <- Arith(Add, r782, r1466)
         r785: ? <- Const { value: 46, size: 4 }
         r786: ? <- Part { src: r50, offset: 4, size: 4 }
         r787: ? <- Concat { lo: r785, hi: r786 }
         r788: ? <- Const { value: 0, size: 8 }
         r789: ? <- Arith(Add, r788, r61)
         r790: ? <- StoreMem { addr: r789, value: r783 }
         r797: ? <- Part { src: r787, offset: 0, size: 4 }
         r798: ? <- CArg { value: r797, next_arg: None }
         r799: ? <- CArg { value: r783, next_arg: Some(r798) }
         r800: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r801: ? <- Call { callee: r800, first_arg: Some(r799) }
  (  3)  r811: ? <- Part { src: r801, offset: 0, size: 8 }
         r813: ? <- Arith(BitAnd, r811, r811)
         r815: ? <- IsZero(r813)
         r820: ? <- SetJumpCondition(r815)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r827: ? <- Const { value: 24, size: 8 }
         r828: ? <- Arith(Add, r827, r61)
         r829: ? <- LoadMem { addr: r828, size: 8 }
         r831: ? <- Const { value: 1, size: 8 }
         r832: ? <- Arith(Add, r153, r831)
         r848: ? <- Const { value: 0, size: 8 }
         r849: ? <- Arith(Add, r848, r829)
         r850: ? <- LoadMem { addr: r849, size: 8 }
         r851: ? <- Arith(Sub, r832, r850)
         r853: ? <- CarryOf(r851)
         r858: ? <- Not(r853)
         r859: ? <- SetJumpCondition(r858)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1215: ? <- Const { value: 1, size: 8 }
         r1216: ? <- Arith(Add, r153, r1215)
         r1225: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1226: ? <- Call { callee: r1225, first_arg: None }
         r1236: ? <- Const { value: 24, size: 8 }
         r1237: ? <- Arith(Add, r1236, r61)
         r1238: ? <- LoadMem { addr: r1237, size: 8 }
         r1246: ? <- Const { value: 0, size: 8 }
         r1247: ? <- Arith(Add, r1246, r1238)
         r1248: ? <- LoadMem { addr: r1247, size: 8 }
         r1249: ? <- Arith(Sub, r1216, r1248)
         r1251: ? <- CarryOf(r1249)
         r1256: ? <- SetJumpCondition(r1251)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1258: ? <- Const { value: 72, size: 8 }
         r1259: ? <- Arith(Add, r1258, r61)
         r1260: ? <- LoadMem { addr: r1259, size: 8 }
         r1509: ? <- Upsilon { value: r1260, phi_ref: r1489 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r862: ? <- Const { value: 24, size: 8 }
         r863: ? <- Arith(Add, r862, r24)
         r864: ? <- LoadMem { addr: r863, size: 8 }
         r866: ? <- Const { value: 0, size: 8 }
         r867: ? <- Arith(Add, r866, r864)
         r868: ? <- LoadMem { addr: r867, size: 1 }
         r869: ? <- Const { value: 0, size: 1 }
         r870: ? <- Arith(Sub, r868, r869)
         r874: ? <- IsZero(r870)
         r877: ? <- Not(r874)
         r878: ? <- SetJumpCondition(r877)
         r1510: ? <- Upsilon { value: r24, phi_ref: r1467 }
         r1512: ? <- Upsilon { value: r811, phi_ref: r1484 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1459: ? <- Const { value: 72, size: 8 }
         r1460: ? <- Arith(Add, r1459, r61)
         r1461: ? <- LoadMem { addr: r1460, size: 8 }
         r1508: ? <- Upsilon { value: r1461, phi_ref: r1486 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r576: ? <- Const { value: 16, size: 8 }
         r577: ? <- Arith(Add, r576, r61)
         r578: ? <- LoadMem { addr: r577, size: 8 }
         r580: ? <- Const { value: 3, size: 8 }
         r581: ? <- Arith(Add, r580, r450)
         r583: ? <- Const { value: 120, size: 8 }
         r584: ? <- Arith(Add, r583, r447)
         r586: ? <- Arith(Sub, r581, r578)
         r590: ? <- IsZero(r586)
         r593: ? <- SetJumpCondition(r590)
         r1534: ? <- Upsilon { value: r567, phi_ref: r1488 }
         r1535: ? <- Upsilon { value: r584, phi_ref: r1475 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1484: ? <- Phi
         r898: ? <- Const { value: 8, size: 8 }
         r899: ? <- Arith(Add, r898, r61)
         r900: ? <- StoreMem { addr: r899, value: r1484 }
         r901: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
         r902: ? <- Call { callee: r901, first_arg: None }
         r912: ? <- Part { src: r902, offset: 0, size: 8 }
         r913: ? <- Const { value: 8, size: 8 }
         r914: ? <- Arith(Add, r913, r61)
         r915: ? <- LoadMem { addr: r914, size: 8 }
         r917: ? <- Const { value: -1, size: 8 }
  (  7)  r918: ? <- Arith(Sub, r912, r917)
         r922: ? <- IsZero(r918)
         r926: ? <- SetJumpCondition(r922)
         r1504: ? <- Upsilon { value: r918, phi_ref: r1488 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r928: ? <- Const { value: 24, size: 8 }
         r929: ? <- Arith(Add, r928, r14)
  (  2)  r930: ? <- LoadMem { addr: r929, size: 8 }
         r932: ? <- Const { value: 0, size: 8 }
         r933: ? <- Arith(Add, r932, r61)
         r934: ? <- StoreMem { addr: r933, value: r915 }
         r935: ? <- Const { value: 0, size: 8 }
         r936: ? <- Arith(Add, r935, r930)
         r937: ? <- LoadMem { addr: r936, size: 1 }
         r938: ? <- Const { value: 0, size: 1 }
         r939: ? <- Arith(Sub, r937, r938)
         r943: ? <- IsZero(r939)
         r946: ? <- Not(r943)
         r947: ? <- SetJumpCondition(r946)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r949: ? <- Const { value: 24, size: 8 }
         r950: ? <- Arith(Add, r949, r61)
         r951: ? <- LoadMem { addr: r950, size: 8 }
         r953: ? <- Const { value: 32, size: 8 }
         r954: ? <- Arith(Add, r953, r61)
  (  2)  r955: ? <- LoadMem { addr: r954, size: 8 }
         r957: ? <- Const { value: 64, size: 8 }
         r958: ? <- Arith(Add, r957, r61)
  (  3)  r959: ? <- LoadMem { addr: r958, size: 8 }
         r961: ? <- Const { value: 0, size: 8 }
         r962: ? <- Arith(Add, r961, r951)
         r963: ? <- LoadMem { addr: r962, size: 8 }
         r967: ? <- CArg { value: r918, next_arg: None }
         r968: ? <- CArg { value: r963, next_arg: Some(r967) }
         r969: ? <- CArg { value: r955, next_arg: Some(r968) }
         r970: ? <- CArg { value: r959, next_arg: Some(r969) }
         r971: ? <- Const { value: 8, size: 8 }
         r972: ? <- Arith(Add, r971, r930)
         r973: ? <- LoadMem { addr: r972, size: 8 }
         r974: ? <- LoadMem { addr: r973, size: 8 }
         r975: ? <- Call { callee: r974, first_arg: Some(r970) }
  (  2)  r987: ? <- Arith(BitAnd, r918, r918)
         r989: ? <- IsZero(r987)
         r994: ? <- SetJumpCondition(r989)
         r1505: ? <- Upsilon { value: r987, phi_ref: r1488 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1000: ? <- Const { value: 32, size: 8 }
         r1001: ? <- Arith(Add, r1000, r918)
         r1002: ? <- LoadMem { addr: r1001, size: 8 }
         r1003: ? <- Const { value: 0, size: 8 }
         r1004: ? <- Arith(Sub, r1002, r1003)
         r1008: ? <- IsZero(r1004)
         r1011: ? <- Const { value: 0, size: 8 }
         r1012: ? <- Arith(Add, r1011, r955)
         r1013: ? <- ArithK(Mul, r153, 8)
         r1014: ? <- Arith(Add, r1012, r1013)
         r1015: ? <- StoreMem { addr: r1014, value: r918 }
         r1016: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1017: ? <- SetJumpCondition(r1008)
         r1506: ? <- Upsilon { value: r959, phi_ref: r1482 }
         r1507: ? <- Upsilon { value: r959, phi_ref: r1485 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1485: ? <- Phi
         r1019: ? <- Const { value: 72, size: 8 }
         r1020: ? <- Arith(Add, r1019, r61)
         r1021: ? <- LoadMem { addr: r1020, size: 8 }
         r1023: ? <- Part { src: r1485, offset: 0, size: 1 }
         r1024: ? <- Part { src: r1485, offset: 0, size: 1 }
         r1025: ? <- Arith(BitAnd, r1023, r1024)
         r1027: ? <- IsZero(r1025)
         r1032: ? <- Not(r1027)
         r1033: ? <- SetJumpCondition(r1032)
         r1502: ? <- Upsilon { value: r115, phi_ref: r1488 }
         r1503: ? <- Upsilon { value: r1021, phi_ref: r1486 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1486: ? <- Phi
         r1035: ? <- Const { value: 1, size: 8 }
         r1036: ? <- Arith(Add, r1035, r153)
         r1038: ? <- Const { value: 24, size: 8 }
         r1039: ? <- Arith(Add, r1038, r61)
         r1040: ? <- LoadMem { addr: r1039, size: 8 }
         r1042: ? <- Const { value: 0, size: 8 }
         r1043: ? <- Arith(Add, r1042, r1040)
         r1044: ? <- StoreMem { addr: r1043, value: r1036 }
  (  2)  r1045: ? <- Arith(BitAnd, r1486, r1486)
         r1047: ? <- IsZero(r1045)
         r1052: ? <- Not(r1047)
         r1053: ? <- SetJumpCondition(r1052)
         r1501: ? <- Upsilon { value: r1045, phi_ref: r1490 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1494: ? <- Upsilon { value: r17, phi_ref: r1489 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1489: ? <- Phi
  (  2)  r1262: ? <- Arith(BitAnd, r1489, r1489)
         r1264: ? <- IsZero(r1262)
         r1269: ? <- SetJumpCondition(r1264)
         r1496: ? <- Upsilon { value: r1262, phi_ref: r1490 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1490: ? <- Phi
         r1271: ? <- Const { value: 0, size: 8 }
         r1272: ? <- Arith(Add, r1271, r1490)
         r1273: ? <- StoreMem { addr: r1272, value: r24 }
         r1274: ? <- Part { src: r115, offset: 0, size: 4 }
         r1275: ? <- Part { src: r115, offset: 0, size: 4 }
         r1276: ? <- Arith(BitXor, r1274, r1275)
         r1277: ? <- Part { src: r115, offset: 4, size: 4 }
         r1278: ? <- Concat { lo: r1276, hi: r1277 }
         r1495: ? <- Upsilon { value: r1278, phi_ref: r1487 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1055: ? <- Part { src: r115, offset: 0, size: 4 }
         r1056: ? <- Part { src: r115, offset: 0, size: 4 }
         r1057: ? <- Arith(BitXor, r1055, r1056)
         r1058: ? <- Part { src: r115, offset: 4, size: 4 }
         r1059: ? <- Concat { lo: r1057, hi: r1058 }
         r1497: ? <- Upsilon { value: r1059, phi_ref: r1487 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1487: ? <- Phi
         r1093: ? <- SetReturnValue(r1487)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1488: ? <- Phi
         r1188: ? <- Const { value: 2, size: 4 }
         r1189: ? <- Part { src: r1488, offset: 4, size: 4 }
         r1190: ? <- Concat { lo: r1188, hi: r1189 }
         r1209: ? <- SetReturnValue(r1190)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r16, r17, r18, r19, r20, r23, r24, r25, r26, r43, r44, r45, r46, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r60, r61, r69, r70, r71, r73, r74, r75, r76, r77, r78, r79, r80, r81, r88, r89, r90, r91, r92, r102, r104, r106, r111, r1491]
  BlockID(1) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) } [r1466, r113, r114, r115, r118, r123, r126, r1493]
  BlockID(2) -> Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) } [r128, r129, r130, r132, r133, r134, r135, r136, r140, r143]
  BlockID(3) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) } [r145, r146, r147, r149, r150, r151, r152, r153, r160, r161, r162, r163, r164, r165, r166, r167, r171, r174, r1499, r1500]
  BlockID(4) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) } [r1467, r176, r177, r178, r180, r181, r182, r183, r185, r190, r1513]
  BlockID(5) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) } [r193, r194, r195, r196, r197, r204, r205, r206, r207, r208, r212, r215, r1514, r1515]
  BlockID(6) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) } [r217, r218, r222, r225, r1536, r1537]
  BlockID(7) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) } [r227, r228, r232, r235, r1545, r1546]
  BlockID(8) -> Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) } [r237, r238, r239, r241, r242, r243, r245, r246, r247, r249, r250, r251, r255, r256, r257, r267, r268, r269, r270, r272, r273, r274, r277, r281, r284, r1553]
  BlockID(9) -> Always(Block(BlockID(10))) [r1468, r289, r290, r1559, r1560]
  BlockID(10) -> Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) } [r1470, r1469, r292, r293, r294, r296, r297, r298, r301, r302, r303, r307, r308, r309, r319, r320, r321, r322, r324, r325, r326, r328, r332, r335]
  BlockID(11) -> Always(Block(BlockID(12))) [r346, r347, r1551, r1552]
  BlockID(12) -> Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) } [r1472, r1471, r355, r356, r357, r359, r360, r361, r364, r365, r366, r370, r371, r372, r382, r383, r384, r385, r387, r388, r389, r391, r395, r398]
  BlockID(13) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) } [r400, r401, r402, r404, r405, r413, r414, r422, r426, r429, r1542, r1543, r1544]
  BlockID(14) -> Always(Block(BlockID(19))) [r1474, r1473, r431, r432, r433, r435, r436, r437, r438, r439, r440, r1519]
  BlockID(15) -> Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) } [r442, r443, r444, r446, r447, r449, r450, r456, r457, r458, r462, r463, r464, r474, r475, r476, r477, r479, r483, r486]
  BlockID(16) -> Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) } [r488, r489, r490, r492, r493, r500, r501, r502, r506, r507, r508, r518, r519, r520, r521, r523, r527, r530]
  BlockID(17) -> Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) } [r532, r533, r534, r536, r537, r544, r545, r546, r550, r551, r552, r562, r563, r564, r565, r567, r571, r574]
  BlockID(18) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) } [r576, r577, r578, r580, r581, r583, r584, r586, r590, r593, r1534, r1535]
  BlockID(19) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) } [r1475, r595, r596, r597, r604, r605, r606, r616, r617, r621, r624, r625]
  BlockID(20) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) } [r627, r628, r629, r642, r643, r644, r645, r646, r656, r657, r658, r659, r661, r666, r667]
  BlockID(21) -> Always(Block(BlockID(24))) [r670, r671, r672, r678, r679, r680, r1520, r1521, r1522, r1523]
  BlockID(22) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) } [r683, r684, r685, r697, r698, r699, r700, r701, r711, r712, r713, r714, r716, r721, r722, r1529]
  BlockID(23) -> Always(Block(BlockID(24))) [r1477, r725, r726, r727, r734, r735, r736, r1524, r1525, r1526, r1527]
  BlockID(24) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) } [r1481, r1480, r1479, r1478, r738, r739, r740, r742, r743, r744, r745, r746, r747, r751, r754, r1516]
  BlockID(25) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) } [r756, r757, r758, r759, r760, r764, r767, r768, r769, r1517, r1518]
  BlockID(26) -> Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) } [r1482, r771, r772, r773, r775, r780]
  BlockID(27) -> Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) } [r782, r783, r785, r786, r787, r788, r789, r790, r797, r798, r799, r800, r801, r811, r813, r815, r820]
  BlockID(28) -> Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) } [r827, r828, r829, r831, r832, r848, r849, r850, r851, r853, r858, r859]
  BlockID(29) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) } [r862, r863, r864, r866, r867, r868, r869, r870, r874, r877, r878, r1510, r1512]
  BlockID(30) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) } [r1484, r898, r899, r900, r901, r902, r912, r913, r914, r915, r917, r918, r922, r926, r1504]
  BlockID(31) -> Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) } [r928, r929, r930, r932, r933, r934, r935, r936, r937, r938, r939, r943, r946, r947]
  BlockID(32) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) } [r949, r950, r951, r953, r954, r955, r957, r958, r959, r961, r962, r963, r967, r968, r969, r970, r971, r972, r973, r974, r975, r987, r989, r994, r1505]
  BlockID(33) -> Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) } [r1000, r1001, r1002, r1003, r1004, r1008, r1011, r1012, r1013, r1014, r1015, r1016, r1017, r1506, r1507]
  BlockID(34) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) } [r1485, r1019, r1020, r1021, r1023, r1024, r1025, r1027, r1032, r1033, r1502, r1503]
  BlockID(35) -> Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) } [r1486, r1035, r1036, r1038, r1039, r1040, r1042, r1043, r1044, r1045, r1047, r1052, r1053, r1501]
  BlockID(36) -> Always(Block(BlockID(37))) [r1055, r1056, r1057, r1058, r1059, r1497]
  BlockID(37) -> Always(Return) [r1487, r1093]
  BlockID(38) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) } [r1095, r1096, r1097, r1109, r1110, r1111, r1112, r1113, r1123, r1124, r1125, r1126, r1128, r1133, r1134]
  BlockID(39) -> Always(Block(BlockID(23))) [r1531]
  BlockID(40) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) } [r1137, r1138, r1139, r1151, r1152, r1153, r1154, r1155, r1165, r1166, r1167, r1168, r1170, r1175, r1176]
  BlockID(41) -> Always(Block(BlockID(23))) [r1533]
  BlockID(42) -> Always(Return) [r1488, r1188, r1189, r1190, r1209]
  BlockID(43) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) } [r1215, r1216, r1225, r1226, r1236, r1237, r1238, r1246, r1247, r1248, r1249, r1251, r1256]
  BlockID(44) -> Always(Block(BlockID(45))) [r1258, r1259, r1260, r1509]
  BlockID(45) -> Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) } [r1489, r1262, r1264, r1269, r1496]
  BlockID(46) -> Always(Block(BlockID(37))) [r1490, r1271, r1272, r1273, r1274, r1275, r1276, r1277, r1278, r1495]
  BlockID(47) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) } [r1286, r1287, r1288, r1291, r1292, r1293, r1303, r1304, r1305, r1306, r1307, r1317, r1322, r1323, r1324, r1326, r1331, r1332]
  BlockID(48) -> Always(Block(BlockID(24))) [r1538, r1539, r1540, r1541]
  BlockID(49) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) } [r1335, r1336, r1337, r1340, r1341, r1342, r1352, r1353, r1354, r1355, r1356, r1366, r1371, r1372, r1373, r1375, r1380, r1381]
  BlockID(50) -> Always(Block(BlockID(24))) [r1547, r1548, r1549, r1550]
  BlockID(51) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) } [r1384, r1385, r1386, r1389, r1390, r1391, r1392, r1393, r1394, r1404, r1405, r1406, r1407, r1408, r1418, r1424, r1425, r1426, r1428, r1433, r1434, r1554]
  BlockID(52) -> Always(Block(BlockID(24))) [r1555, r1556, r1557, r1558]
  BlockID(53) -> Always(Block(BlockID(1))) [r1437, r1438, r1439, r1442, r1443, r1453, r1454, r1455, r1456, r1492]
  BlockID(54) -> Always(Block(BlockID(35))) [r1459, r1460, r1461, r1508]
  BlockID(55) -> Always(Block(BlockID(45))) [r1494]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(51)
    |  |  |  |  |  |  |  |  |  |  BlockID(52)
    |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  |  BlockID(49)
    |  |  |  |  |  |  |  |  |  |  BlockID(50)
    |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  BlockID(47)
    |  |  |  |  |  |  |  |  |  BlockID(48)
    |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(40)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(41)
    |  |  |  |  |  |  |  |  |  |  BlockID(38)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(39)
    |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  BlockID(26)
    |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  BlockID(43)
    |  |  |  |  |  |  BlockID(44)
    |  |  |  |  |  BlockID(54)
    |  |  |  |  BlockID(30)
    |  |  |  |  |  BlockID(31)
    |  |  |  |  |  |  BlockID(32)
    |  |  |  |  |  |  |  BlockID(33)
    |  |  |  |  BlockID(34)
    |  |  |  |  BlockID(35)
    |  |  |  BlockID(36)
    |  |  |  BlockID(37)
    |  |  |  BlockID(45)
    |  |  |  BlockID(46)
    |  |  |  BlockID(55)
    |  |  BlockID(42)
    |  BlockID(53)

ssa post-xform:
ssa program  1741 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  ( 32)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  4)  r13: ? <- Ancestral(AncestralName("RDI"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  8)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 23)  r18: ? <- Ancestral(AncestralName("RDX"))
  (  4)  r19: ? <- Ancestral(AncestralName("R8"))
  (  6)  r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
         r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r26 }
         r45: ? <- ArithK(Add, r11, -16)
         r46: ? <- StoreMem { addr: r45, value: r25 }
         r48: ? <- Const { value: 46, size: 4 }
         r51: ? <- ArithK(Add, r11, -24)
         r52: ? <- StoreMem { addr: r51, value: r24 }
         r53: ? <- ArithK(Add, r11, -32)
         r54: ? <- StoreMem { addr: r53, value: r23 }
         r55: ? <- ArithK(Add, r11, -40)
         r56: ? <- StoreMem { addr: r55, value: r10 }
         r57: ? <- ArithK(Add, r11, -48)
         r58: ? <- StoreMem { addr: r57, value: r16 }
         r70: ? <- ArithK(Add, r11, -72)
         r71: ? <- StoreMem { addr: r70, value: r13 }
         r74: ? <- ArithK(Add, r11, -104)
         r75: ? <- StoreMem { addr: r74, value: r19 }
         r77: ? <- ArithK(Add, r11, -136)
         r78: ? <- StoreMem { addr: r77, value: r18 }
         r80: ? <- ArithK(Add, r11, -112)
         r81: ? <- StoreMem { addr: r80, value: r20 }
         r89: ? <- CArg { value: r48, next_arg: None }
         r90: ? <- CArg { value: r18, next_arg: Some(r89) }
         r91: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  3)  r92: ? <- Call { callee: r91, first_arg: Some(r90) }
         r106: ? <- IsZero(r92)
         r111: ? <- SetJumpCondition(r106)
         r1491: ? <- Upsilon { value: r92, phi_ref: r1466 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1442: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1443: ? <- Call { callee: r1442, first_arg: None }
         r1456: ? <- Arith(Add, r18, r92)
         r1492: ? <- Upsilon { value: r1456, phi_ref: r1466 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  9)  r1466: ? <- Phi
  ( 15)  r118: ? <- Arith(Sub, r1466, r18)
         r123: ? <- IsZero(r118)
         r126: ? <- SetJumpCondition(r123)
         r1493: ? <- Upsilon { value: r18, phi_ref: r1488 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r134: ? <- LoadMem { addr: r20, size: 8 }
         r140: ? <- IsZero(r134)
         r143: ? <- SetJumpCondition(r140)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r146: ? <- ArithK(Add, r14, 24)
  ( 10)  r147: ? <- LoadMem { addr: r146, size: 8 }
         r149: ? <- Part { src: r26, offset: 0, size: 4 }
         r150: ? <- Part { src: r26, offset: 0, size: 4 }
         r151: ? <- Arith(BitXor, r149, r150)
         r152: ? <- Part { src: r26, offset: 4, size: 4 }
  ( 10)  r153: ? <- Concat { lo: r151, hi: r152 }
         r161: ? <- ArithK(Add, r11, -64)
         r162: ? <- StoreMem { addr: r161, value: r17 }
         r165: ? <- LoadMem { addr: r147, size: 1 }
         r171: ? <- IsZero(r165)
         r174: ? <- SetJumpCondition(r171)
         r1499: ? <- Upsilon { value: r1466, phi_ref: r1484 }
         r1500: ? <- Upsilon { value: r14, phi_ref: r1467 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  7)  r1467: ? <- Phi
         r177: ? <- ArithK(Add, r1467, 16)
  (  6)  r178: ? <- LoadMem { addr: r177, size: 8 }
         r181: ? <- ArithK(Add, r11, -120)
         r182: ? <- StoreMem { addr: r181, value: r178 }
         r185: ? <- IsZero(r178)
         r190: ? <- SetJumpCondition(r185)
         r1513: ? <- Upsilon { value: r18, phi_ref: r1488 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r193: ? <- Part { src: r17, offset: 0, size: 4 }
         r194: ? <- Part { src: r17, offset: 0, size: 4 }
         r195: ? <- Arith(BitXor, r193, r194)
         r196: ? <- Part { src: r17, offset: 4, size: 4 }
  (  7)  r197: ? <- Concat { lo: r195, hi: r196 }
         r204: ? <- Part { src: r178, offset: 0, size: 4 }
  (  2)  r206: ? <- ArithK(BitAnd, r204, 3)
         r207: ? <- Part { src: r178, offset: 4, size: 4 }
  (  2)  r208: ? <- Concat { lo: r206, hi: r207 }
         r212: ? <- IsZero(r206)
         r215: ? <- SetJumpCondition(r212)
         r1514: ? <- Upsilon { value: r1466, phi_ref: r1473 }
         r1515: ? <- Upsilon { value: r147, phi_ref: r1474 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r218: ? <- ArithK(Add, r208, -1)
         r222: ? <- IsZero(r218)
         r225: ? <- SetJumpCondition(r222)
         r1536: ? <- Upsilon { value: r1466, phi_ref: r1471 }
         r1537: ? <- Upsilon { value: r147, phi_ref: r1472 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r228: ? <- ArithK(Add, r208, -3)
         r232: ? <- IsZero(r228)
         r235: ? <- SetJumpCondition(r232)
         r1545: ? <- Upsilon { value: r1466, phi_ref: r1469 }
         r1546: ? <- Upsilon { value: r147, phi_ref: r1470 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r238: ? <- ArithK(Add, r147, 8)
  (  3)  r239: ? <- LoadMem { addr: r238, size: 8 }
         r242: ? <- ArithK(Add, r11, -88)
         r243: ? <- StoreMem { addr: r242, value: r1466 }
         r246: ? <- ArithK(Add, r11, -96)
         r247: ? <- StoreMem { addr: r246, value: r147 }
         r250: ? <- ArithK(Add, r11, -128)
         r251: ? <- StoreMem { addr: r250, value: r239 }
         r255: ? <- CArg { value: r239, next_arg: None }
         r256: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r257: ? <- Call { callee: r256, first_arg: Some(r255) }
         r277: ? <- Arith(Sub, r257, r118)
         r281: ? <- IsZero(r277)
         r284: ? <- SetJumpCondition(r281)
         r1553: ? <- Upsilon { value: r147, phi_ref: r1468 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1390: ? <- ArithK(Add, r11, -96)
         r1391: ? <- StoreMem { addr: r1390, value: r1466 }
         r1393: ? <- ArithK(Add, r11, -128)
         r1394: ? <- StoreMem { addr: r1393, value: r147 }
         r1404: ? <- CArg { value: r118, next_arg: None }
         r1405: ? <- CArg { value: r239, next_arg: Some(r1404) }
         r1406: ? <- CArg { value: r18, next_arg: Some(r1405) }
         r1407: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1408: ? <- Call { callee: r1407, first_arg: Some(r1406) }
         r1424: ? <- Part { src: r1408, offset: 0, size: 4 }
         r1425: ? <- Part { src: r1408, offset: 0, size: 4 }
         r1426: ? <- Arith(BitAnd, r1424, r1425)
         r1428: ? <- IsZero(r1426)
         r1433: ? <- Not(r1428)
         r1434: ? <- SetJumpCondition(r1433)
         r1554: ? <- Upsilon { value: r147, phi_ref: r1468 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1555: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1556: ? <- Upsilon { value: r147, phi_ref: r1479 }
         r1557: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1558: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1468: ? <- Phi
         r290: ? <- ArithK(Add, r1468, 40)
         r1559: ? <- Upsilon { value: r1466, phi_ref: r1469 }
         r1560: ? <- Upsilon { value: r290, phi_ref: r1470 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1470: ? <- Phi
  (  3)  r1469: ? <- Phi
         r293: ? <- ArithK(Add, r1470, 8)
  (  3)  r294: ? <- LoadMem { addr: r293, size: 8 }
         r297: ? <- ArithK(Add, r11, -96)
         r298: ? <- StoreMem { addr: r297, value: r1469 }
         r302: ? <- ArithK(Add, r11, -128)
         r303: ? <- StoreMem { addr: r302, value: r294 }
         r307: ? <- CArg { value: r294, next_arg: None }
         r308: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r309: ? <- Call { callee: r308, first_arg: Some(r307) }
         r328: ? <- Arith(Sub, r309, r118)
         r332: ? <- IsZero(r328)
         r335: ? <- SetJumpCondition(r332)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1341: ? <- ArithK(Add, r11, -128)
         r1342: ? <- StoreMem { addr: r1341, value: r1469 }
         r1352: ? <- CArg { value: r118, next_arg: None }
         r1353: ? <- CArg { value: r294, next_arg: Some(r1352) }
         r1354: ? <- CArg { value: r18, next_arg: Some(r1353) }
         r1355: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1356: ? <- Call { callee: r1355, first_arg: Some(r1354) }
         r1371: ? <- Part { src: r1356, offset: 0, size: 4 }
         r1372: ? <- Part { src: r1356, offset: 0, size: 4 }
         r1373: ? <- Arith(BitAnd, r1371, r1372)
         r1375: ? <- IsZero(r1373)
         r1380: ? <- Not(r1375)
         r1381: ? <- SetJumpCondition(r1380)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1547: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1548: ? <- Upsilon { value: r1470, phi_ref: r1479 }
         r1549: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1550: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r347: ? <- ArithK(Add, r1470, 40)
         r1551: ? <- Upsilon { value: r1469, phi_ref: r1471 }
         r1552: ? <- Upsilon { value: r347, phi_ref: r1472 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1472: ? <- Phi
  (  3)  r1471: ? <- Phi
         r356: ? <- ArithK(Add, r1472, 8)
  (  3)  r357: ? <- LoadMem { addr: r356, size: 8 }
         r360: ? <- ArithK(Add, r11, -96)
         r361: ? <- StoreMem { addr: r360, value: r1471 }
         r365: ? <- ArithK(Add, r11, -128)
         r366: ? <- StoreMem { addr: r365, value: r357 }
         r370: ? <- CArg { value: r357, next_arg: None }
         r371: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r372: ? <- Call { callee: r371, first_arg: Some(r370) }
  (  2)  r391: ? <- Arith(Sub, r372, r118)
         r395: ? <- IsZero(r391)
         r398: ? <- SetJumpCondition(r395)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1292: ? <- ArithK(Add, r11, -128)
         r1293: ? <- StoreMem { addr: r1292, value: r1471 }
         r1303: ? <- CArg { value: r118, next_arg: None }
         r1304: ? <- CArg { value: r357, next_arg: Some(r1303) }
         r1305: ? <- CArg { value: r18, next_arg: Some(r1304) }
         r1306: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1307: ? <- Call { callee: r1306, first_arg: Some(r1305) }
         r1322: ? <- Part { src: r1307, offset: 0, size: 4 }
         r1323: ? <- Part { src: r1307, offset: 0, size: 4 }
         r1324: ? <- Arith(BitAnd, r1322, r1323)
         r1326: ? <- IsZero(r1324)
         r1331: ? <- Not(r1326)
         r1332: ? <- SetJumpCondition(r1331)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1538: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1539: ? <- Upsilon { value: r1472, phi_ref: r1479 }
         r1540: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1541: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r405: ? <- ArithK(Add, r197, 1)
         r414: ? <- ArithK(Add, r1472, 40)
         r422: ? <- Arith(Sub, r405, r178)
         r426: ? <- IsZero(r422)
         r429: ? <- SetJumpCondition(r426)
         r1542: ? <- Upsilon { value: r391, phi_ref: r1488 }
         r1543: ? <- Upsilon { value: r1471, phi_ref: r1473 }
         r1544: ? <- Upsilon { value: r414, phi_ref: r1474 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1474: ? <- Phi
         r1473: ? <- Phi
         r432: ? <- ArithK(Add, r11, -80)
         r433: ? <- StoreMem { addr: r432, value: r1467 }
         r436: ? <- ArithK(Add, r11, -96)
         r437: ? <- StoreMem { addr: r436, value: r153 }
         r439: ? <- ArithK(Add, r11, -88)
         r440: ? <- StoreMem { addr: r439, value: r1473 }
         r1519: ? <- Upsilon { value: r1474, phi_ref: r1475 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  9)  r1475: ? <- Phi
         r596: ? <- ArithK(Add, r1475, 8)
  (  2)  r597: ? <- LoadMem { addr: r596, size: 8 }
         r604: ? <- CArg { value: r597, next_arg: None }
         r605: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r606: ? <- Call { callee: r605, first_arg: Some(r604) }
         r617: ? <- Arith(Sub, r606, r118)
         r621: ? <- IsZero(r617)
         r624: ? <- Not(r621)
         r625: ? <- SetJumpCondition(r624)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r642: ? <- CArg { value: r118, next_arg: None }
         r643: ? <- CArg { value: r597, next_arg: Some(r642) }
         r644: ? <- CArg { value: r18, next_arg: Some(r643) }
         r645: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r646: ? <- Call { callee: r645, first_arg: Some(r644) }
         r657: ? <- Part { src: r646, offset: 0, size: 4 }
         r658: ? <- Part { src: r646, offset: 0, size: 4 }
         r659: ? <- Arith(BitAnd, r657, r658)
         r661: ? <- IsZero(r659)
         r666: ? <- Not(r661)
         r667: ? <- SetJumpCondition(r666)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r1520: ? <- Upsilon { value: r197, phi_ref: r1478 }
         r1521: ? <- Upsilon { value: r1475, phi_ref: r1479 }
         r1522: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1523: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r443: ? <- ArithK(Add, r1475, 48)
  (  3)  r444: ? <- LoadMem { addr: r443, size: 8 }
         r447: ? <- ArithK(Add, r1475, 40)
         r450: ? <- ArithK(Add, r197, 1)
         r457: ? <- ArithK(Add, r11, -128)
         r458: ? <- StoreMem { addr: r457, value: r444 }
         r462: ? <- CArg { value: r444, next_arg: None }
         r463: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r464: ? <- Call { callee: r463, first_arg: Some(r462) }
         r479: ? <- Arith(Sub, r464, r118)
         r483: ? <- IsZero(r479)
         r486: ? <- SetJumpCondition(r483)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r697: ? <- CArg { value: r118, next_arg: None }
         r698: ? <- CArg { value: r444, next_arg: Some(r697) }
         r699: ? <- CArg { value: r18, next_arg: Some(r698) }
         r700: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r701: ? <- Call { callee: r700, first_arg: Some(r699) }
         r712: ? <- Part { src: r701, offset: 0, size: 4 }
         r713: ? <- Part { src: r701, offset: 0, size: 4 }
         r714: ? <- Arith(BitAnd, r712, r713)
         r716: ? <- IsZero(r714)
         r721: ? <- Not(r716)
         r722: ? <- SetJumpCondition(r721)
         r1529: ? <- Upsilon { value: r447, phi_ref: r1477 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r489: ? <- ArithK(Add, r1475, 88)
  (  3)  r490: ? <- LoadMem { addr: r489, size: 8 }
         r493: ? <- ArithK(Add, r1475, 80)
         r501: ? <- ArithK(Add, r11, -128)
         r502: ? <- StoreMem { addr: r501, value: r490 }
         r506: ? <- CArg { value: r490, next_arg: None }
         r507: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r508: ? <- Call { callee: r507, first_arg: Some(r506) }
         r523: ? <- Arith(Sub, r508, r118)
         r527: ? <- IsZero(r523)
         r530: ? <- SetJumpCondition(r527)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1109: ? <- CArg { value: r118, next_arg: None }
         r1110: ? <- CArg { value: r490, next_arg: Some(r1109) }
         r1111: ? <- CArg { value: r18, next_arg: Some(r1110) }
         r1112: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1113: ? <- Call { callee: r1112, first_arg: Some(r1111) }
         r1124: ? <- Part { src: r1113, offset: 0, size: 4 }
         r1125: ? <- Part { src: r1113, offset: 0, size: 4 }
         r1126: ? <- Arith(BitAnd, r1124, r1125)
         r1128: ? <- IsZero(r1126)
         r1133: ? <- Not(r1128)
         r1134: ? <- SetJumpCondition(r1133)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1531: ? <- Upsilon { value: r493, phi_ref: r1477 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r533: ? <- ArithK(Add, r1475, 128)
  (  3)  r534: ? <- LoadMem { addr: r533, size: 8 }
         r537: ? <- ArithK(Add, r1475, 120)
         r545: ? <- ArithK(Add, r11, -128)
         r546: ? <- StoreMem { addr: r545, value: r534 }
         r550: ? <- CArg { value: r534, next_arg: None }
         r551: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r552: ? <- Call { callee: r551, first_arg: Some(r550) }
  (  2)  r567: ? <- Arith(Sub, r552, r118)
         r571: ? <- IsZero(r567)
         r574: ? <- SetJumpCondition(r571)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1151: ? <- CArg { value: r118, next_arg: None }
         r1152: ? <- CArg { value: r534, next_arg: Some(r1151) }
         r1153: ? <- CArg { value: r18, next_arg: Some(r1152) }
         r1154: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1155: ? <- Call { callee: r1154, first_arg: Some(r1153) }
         r1166: ? <- Part { src: r1155, offset: 0, size: 4 }
         r1167: ? <- Part { src: r1155, offset: 0, size: 4 }
         r1168: ? <- Arith(BitAnd, r1166, r1167)
         r1170: ? <- IsZero(r1168)
         r1175: ? <- Not(r1170)
         r1176: ? <- SetJumpCondition(r1175)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1533: ? <- Upsilon { value: r537, phi_ref: r1477 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1477: ? <- Phi
         r1524: ? <- Upsilon { value: r450, phi_ref: r1478 }
         r1525: ? <- Upsilon { value: r1477, phi_ref: r1479 }
         r1526: ? <- Upsilon { value: r1467, phi_ref: r1480 }
         r1527: ? <- Upsilon { value: r153, phi_ref: r1481 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1481: ? <- Phi
         r1480: ? <- Phi
         r1479: ? <- Phi
         r1478: ? <- Phi
         r744: ? <- ArithK(Mul, r1481, 8)
         r745: ? <- Arith(Add, r19, r744)
         r746: ? <- StoreMem { addr: r745, value: r1478 }
         r747: ? <- Arith(Sub, r1479, r1480)
         r751: ? <- IsZero(r747)
         r754: ? <- SetJumpCondition(r751)
         r1516: ? <- Upsilon { value: r18, phi_ref: r1488 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r757: ? <- ArithK(Add, r24, 32)
         r758: ? <- LoadMem { addr: r757, size: 8 }
         r764: ? <- IsZero(r758)
         r767: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r768: ? <- Not(r764)
         r769: ? <- SetJumpCondition(r768)
         r1517: ? <- Upsilon { value: r18, phi_ref: r1485 }
         r1518: ? <- Upsilon { value: r18, phi_ref: r1482 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1482: ? <- Phi
         r771: ? <- Part { src: r1482, offset: 0, size: 1 }
         r772: ? <- Part { src: r1482, offset: 0, size: 1 }
         r773: ? <- Arith(BitAnd, r771, r772)
         r775: ? <- IsZero(r773)
         r780: ? <- SetJumpCondition(r775)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
  (  2)  r783: ? <- ArithK(Add, r1466, 1)
         r785: ? <- Const { value: 46, size: 4 }
         r789: ? <- ArithK(Add, r11, -136)
         r790: ? <- StoreMem { addr: r789, value: r783 }
         r798: ? <- CArg { value: r785, next_arg: None }
         r799: ? <- CArg { value: r783, next_arg: Some(r798) }
         r800: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  2)  r801: ? <- Call { callee: r800, first_arg: Some(r799) }
         r815: ? <- IsZero(r801)
         r820: ? <- SetJumpCondition(r815)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r832: ? <- ArithK(Add, r153, 1)
         r850: ? <- LoadMem { addr: r20, size: 8 }
         r851: ? <- Arith(Sub, r832, r850)
         r853: ? <- CarryOf(r851)
         r858: ? <- Not(r853)
         r859: ? <- SetJumpCondition(r858)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1216: ? <- ArithK(Add, r153, 1)
         r1225: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1226: ? <- Call { callee: r1225, first_arg: None }
         r1248: ? <- LoadMem { addr: r20, size: 8 }
         r1249: ? <- Arith(Sub, r1216, r1248)
         r1251: ? <- CarryOf(r1249)
         r1256: ? <- SetJumpCondition(r1251)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1509: ? <- Upsilon { value: r17, phi_ref: r1489 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r863: ? <- ArithK(Add, r24, 24)
         r864: ? <- LoadMem { addr: r863, size: 8 }
         r868: ? <- LoadMem { addr: r864, size: 1 }
         r874: ? <- IsZero(r868)
         r877: ? <- Not(r874)
         r878: ? <- SetJumpCondition(r877)
         r1510: ? <- Upsilon { value: r24, phi_ref: r1467 }
         r1512: ? <- Upsilon { value: r801, phi_ref: r1484 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1508: ? <- Upsilon { value: r17, phi_ref: r1486 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r581: ? <- ArithK(Add, r197, 4)
         r584: ? <- ArithK(Add, r1475, 160)
         r586: ? <- Arith(Sub, r581, r178)
         r590: ? <- IsZero(r586)
         r593: ? <- SetJumpCondition(r590)
         r1534: ? <- Upsilon { value: r567, phi_ref: r1488 }
         r1535: ? <- Upsilon { value: r584, phi_ref: r1475 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
  (  2)  r1484: ? <- Phi
         r899: ? <- ArithK(Add, r11, -128)
         r900: ? <- StoreMem { addr: r899, value: r1484 }
         r901: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
  (  2)  r902: ? <- Call { callee: r901, first_arg: None }
  (  6)  r918: ? <- ArithK(Add, r902, 1)
         r922: ? <- IsZero(r918)
         r926: ? <- SetJumpCondition(r922)
         r1504: ? <- Upsilon { value: r918, phi_ref: r1488 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r929: ? <- ArithK(Add, r14, 24)
  (  2)  r930: ? <- LoadMem { addr: r929, size: 8 }
         r933: ? <- ArithK(Add, r11, -136)
         r934: ? <- StoreMem { addr: r933, value: r1484 }
         r937: ? <- LoadMem { addr: r930, size: 1 }
         r943: ? <- IsZero(r937)
         r946: ? <- Not(r943)
         r947: ? <- SetJumpCondition(r946)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r963: ? <- LoadMem { addr: r20, size: 8 }
         r967: ? <- CArg { value: r918, next_arg: None }
         r968: ? <- CArg { value: r963, next_arg: Some(r967) }
         r969: ? <- CArg { value: r19, next_arg: Some(r968) }
         r970: ? <- CArg { value: r13, next_arg: Some(r969) }
         r972: ? <- ArithK(Add, r930, 8)
         r973: ? <- LoadMem { addr: r972, size: 8 }
         r974: ? <- LoadMem { addr: r973, size: 8 }
         r975: ? <- Call { callee: r974, first_arg: Some(r970) }
         r989: ? <- IsZero(r918)
         r994: ? <- SetJumpCondition(r989)
         r1505: ? <- Upsilon { value: r918, phi_ref: r1488 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1001: ? <- ArithK(Add, r902, 33)
         r1002: ? <- LoadMem { addr: r1001, size: 8 }
         r1008: ? <- IsZero(r1002)
         r1013: ? <- ArithK(Mul, r153, 8)
         r1014: ? <- Arith(Add, r19, r1013)
         r1015: ? <- StoreMem { addr: r1014, value: r918 }
         r1016: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1017: ? <- SetJumpCondition(r1008)
         r1506: ? <- Upsilon { value: r13, phi_ref: r1482 }
         r1507: ? <- Upsilon { value: r13, phi_ref: r1485 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1485: ? <- Phi
         r1023: ? <- Part { src: r1485, offset: 0, size: 1 }
         r1024: ? <- Part { src: r1485, offset: 0, size: 1 }
         r1025: ? <- Arith(BitAnd, r1023, r1024)
         r1027: ? <- IsZero(r1025)
         r1032: ? <- Not(r1027)
         r1033: ? <- SetJumpCondition(r1032)
         r1502: ? <- Upsilon { value: r18, phi_ref: r1488 }
         r1503: ? <- Upsilon { value: r17, phi_ref: r1486 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1486: ? <- Phi
         r1036: ? <- ArithK(Add, r153, 1)
         r1044: ? <- StoreMem { addr: r20, value: r1036 }
         r1047: ? <- IsZero(r1486)
         r1052: ? <- Not(r1047)
         r1053: ? <- SetJumpCondition(r1052)
         r1501: ? <- Upsilon { value: r1486, phi_ref: r1490 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1494: ? <- Upsilon { value: r17, phi_ref: r1489 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1489: ? <- Phi
         r1264: ? <- IsZero(r1489)
         r1269: ? <- SetJumpCondition(r1264)
         r1496: ? <- Upsilon { value: r1489, phi_ref: r1490 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1490: ? <- Phi
         r1273: ? <- StoreMem { addr: r1490, value: r24 }
         r1274: ? <- Part { src: r18, offset: 0, size: 4 }
         r1275: ? <- Part { src: r18, offset: 0, size: 4 }
         r1276: ? <- Arith(BitXor, r1274, r1275)
         r1277: ? <- Part { src: r18, offset: 4, size: 4 }
         r1278: ? <- Concat { lo: r1276, hi: r1277 }
         r1495: ? <- Upsilon { value: r1278, phi_ref: r1487 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1055: ? <- Part { src: r18, offset: 0, size: 4 }
         r1056: ? <- Part { src: r18, offset: 0, size: 4 }
         r1057: ? <- Arith(BitXor, r1055, r1056)
         r1058: ? <- Part { src: r18, offset: 4, size: 4 }
         r1059: ? <- Concat { lo: r1057, hi: r1058 }
         r1497: ? <- Upsilon { value: r1059, phi_ref: r1487 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1487: ? <- Phi
         r1093: ? <- SetReturnValue(r1487)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1488: ? <- Phi
         r1188: ? <- Const { value: 2, size: 4 }
         r1189: ? <- Part { src: r1488, offset: 4, size: 4 }
         r1190: ? <- Concat { lo: r1188, hi: r1189 }
         r1209: ? <- SetReturnValue(r1190)



T0: {
  [pre:RSP - 8]:* := pre:R15;
  [pre:RSP - 16]:* := pre:R14;
  [pre:RSP - 24]:* := pre:R13;
  [pre:RSP - 32]:* := pre:R12;
  [pre:RSP - 40]:* := pre:RBP;
  [pre:RSP - 48]:* := pre:RBX;
  [pre:RSP - 72]:* := pre:RDI;
  [pre:RSP - 104]:* := pre:R8;
  [pre:RSP - 136]:* := pre:RDX;
  [pre:RSP - 112]:* := pre:R9;
  let r92: Bytes(8) = strchr(pre:RDX,
                             46);
  ;
  r1466 := strchr(pre:RDX,
                  46);
  if IsZero (r92) {
    __builtin_strlen();
    r1466 := pre:RDX + r92;
    goto T1
  }
  goto T1
  T1: {
    let mut r1466: Bytes(8);
    let r118: Bytes(8) = r1466 - pre:RDX;
    ;
    r1488 := pre:RDX;
    if IsZero (r118) {
      goto T42
    }
    ;
    if IsZero ([pre:R9]:8) {
      r1489 := pre:RCX;
      goto T45
    }
    let r147: Bytes(8) = [pre:RSI + 24]:8;
    let r153: Bytes(8) = pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
    [pre:RSP - 64]:* := pre:RCX;
    ;
    r1484 := phi ();
    r1467 := pre:RSI;
    if IsZero ([r147]:1) {
      goto T30
    }
    goto T4
    T4: {
      let mut r1467: Bytes(8);
      let r178: Bytes(8) = [r1467 + 16]:8;
      [pre:RSP - 120]:* := r178;
      ;
      r1488 := pre:RDX;
      if IsZero (r178) {
        goto T42
      }
      let r197: Bytes(8) = pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
      let r206: Bytes(4) = r178[4 .. 0] & 3;
      let r208: Bytes(8) = r178[8 .. 4] ++ r206;
      ;
      r1473 := phi ();
      r1474 := [pre:RSI + 24]:8;
      if IsZero (r206) {
        goto T14
      }
      ;
      r1471 := phi ();
      r1472 := [pre:RSI + 24]:8;
      if IsZero (r208 - 1) {
        goto T12
      }
      ;
      r1469 := phi ();
      r1470 := [pre:RSI + 24]:8;
      if IsZero (r208 - 3) {
        goto T10
      }
      let r239: Bytes(8) = [r147 + 8]:8;
      [pre:RSP - 88]:* := r1466;
      [pre:RSP - 96]:* := r147;
      [pre:RSP - 128]:* := r239;
      strlen(r239);
      ;
      r1468 := [pre:RSI + 24]:8;
      if IsZero (strlen(r239) - r118) {
        [pre:RSP - 96]:* := r1466;
        [pre:RSP - 128]:* := r147;
        let r1408: Bytes(8) = strncmp(pre:RDX,
                                      r239,
                                      r118);
        ;
        r1468 := [pre:RSI + 24]:8;
        if ! IsZero (r1408[4 .. 0] & r1408[4 .. 0]) {
          goto T9
        }
        r1478 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1479 := [pre:RSI + 24]:8;
        r1480 := phi ();
        r1481 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        goto T24
      }
      goto T9
      T9: {
        let mut r1468: Bytes(8);
        r1469 := phi ();
        r1470 := r1468 + 40;
        goto T10
      }
      
      T10: {
        let mut r1470: Bytes(8);
        let mut r1469: Bytes(8);
        let r294: Bytes(8) = [r1470 + 8]:8;
        [pre:RSP - 96]:* := r1469;
        [pre:RSP - 128]:* := r294;
        strlen(r294);
        ;
        if IsZero (strlen(r294) - r118) {
          [pre:RSP - 128]:* := r1469;
          let r1356: Bytes(8) = strncmp(pre:RDX,
                                        r294,
                                        r118);
          ;
          if ! IsZero (r1356[4 .. 0] & r1356[4 .. 0]) {
            goto T11
          }
          r1478 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1479 := phi ();
          r1480 := phi ();
          r1481 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T11
        T11: {
          r1471 := phi ();
          r1472 := r1470 + 40;
          goto T12
        }
      
      }
      
      T12: {
        let mut r1472: Bytes(8);
        let mut r1471: Bytes(8);
        let r357: Bytes(8) = [r1472 + 8]:8;
        [pre:RSP - 96]:* := r1471;
        [pre:RSP - 128]:* := r357;
        strlen(r357);
        let r391: Bytes(8) = strlen(r357) - r118;
        ;
        if IsZero (r391) {
          [pre:RSP - 128]:* := r1471;
          let r1307: Bytes(8) = strncmp(pre:RDX,
                                        r357,
                                        r118);
          ;
          if ! IsZero (r1307[4 .. 0] & r1307[4 .. 0]) {
            goto T13
          }
          r1478 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1479 := phi ();
          r1480 := phi ();
          r1481 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T13
        T13: {
          ;
          r1488 := strlen(r357) - r118;
          r1473 := phi ();
          r1474 := r1472 + 40;
          if IsZero (r197 + 1 - r178) {
            goto T42
          }
          goto T14
        }
      
      }
      
      T14: {
        let mut r1474: Bytes(8);
        let mut r1473: Bytes(8);
        [pre:RSP - 80]:* := r1467;
        [pre:RSP - 96]:* := r153;
        [pre:RSP - 88]:* := r1473;
        r1475 := phi ();
        goto T19
        T19: {
          let mut r1475: Bytes(8);
          let r597: Bytes(8) = [r1475 + 8]:8;
          strlen(r597);
          ;
          if ! IsZero (strlen(r597) - r118) {
            goto T15
          }
          let r646: Bytes(8) = strncmp(pre:RDX,
                                       r597,
                                       r118);
          ;
          if ! IsZero (r646[4 .. 0] & r646[4 .. 0]) {
            goto T15
          }
          r1478 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1479 := phi ();
          r1480 := phi ();
          r1481 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
          T15: {
            let r444: Bytes(8) = [r1475 + 48]:8;
            [pre:RSP - 128]:* := r444;
            strlen(r444);
            ;
            if IsZero (strlen(r444) - r118) {
              let r701: Bytes(8) = strncmp(pre:RDX,
                                           r444,
                                           r118);
              ;
              r1477 := r1475 + 40;
              if ! IsZero (r701[4 .. 0] & r701[4 .. 0]) {
                goto T16
              }
              goto T23
            }
            goto T16
            T16: {
              let r490: Bytes(8) = [r1475 + 88]:8;
              [pre:RSP - 128]:* := r490;
              strlen(r490);
              ;
              if IsZero (strlen(r490) - r118) {
                let r1113: Bytes(8) = strncmp(pre:RDX,
                                              r490,
                                              r118);
                ;
                if ! IsZero (r1113[4 .. 0] & r1113[4 .. 0]) {
                  goto T17
                }
                r1477 := r1475 + 80;
                goto T23
              }
              goto T17
              T17: {
                let r534: Bytes(8) = [r1475 + 128]:8;
                [pre:RSP - 128]:* := r534;
                strlen(r534);
                let r567: Bytes(8) = strlen(r534) - r118;
                ;
                if IsZero (r567) {
                  let r1155: Bytes(8) = strncmp(pre:RDX,
                                                r534,
                                                r118);
                  ;
                  if ! IsZero (r1155[4 .. 0] & r1155[4 .. 0]) {
                    goto T18
                  }
                  r1477 := r1475 + 120;
                  goto T23
                }
                goto T18
                T18: {
                  ;
                  r1488 := strlen(r534) - r118;
                  r1475 := r1475 + 160;
                  if IsZero (r197 + 4 - r178) {
                    goto T42
                  }
                  loop T19
                }
              
              }
            
            }
            
            T23: {
              let mut r1477: Bytes(8);
              r1478 := r197 + 1;
              r1479 := phi ();
              r1480 := phi ();
              r1481 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
              goto T24
            }
          
          }
        
        }
      
      }
      
      T24: {
        let mut r1481: Bytes(8);
        let mut r1480: Bytes(8);
        let mut r1479: Bytes(8);
        let mut r1478: Bytes(8);
        [pre:R8 + r1481 * 8]:* := r1478;
        ;
        r1488 := pre:RDX;
        if IsZero (r1479 - r1480) {
          goto T42
        }
        TODO /* unsupported: movzx edi,byte ptr [r8] */;
        ;
        r1485 := pre:RDX;
        r1482 := pre:RDX;
        if ! IsZero ([pre:R13 + 32]:8) {
          goto T34
        }
        goto T26
      }
    
    }
    
    T26: {
      let mut r1482: Bytes(8);
      ;
      if IsZero (r1482[1 .. 0] & r1482[1 .. 0]) {
        r1486 := pre:RCX;
        goto T35
      }
      let r783: Bytes(8) = r1466 + 1;
      [pre:RSP - 136]:* := r783;
      let r801: Bytes(8) = strchr(r783,
                                  46);
      ;
      if IsZero (r801) {
        __builtin_strlen();
        ;
        if CarryOf (r153 + 1 - [pre:R9]:8) {
          goto T29
        }
        goto T44
      }
      ;
      if ! CarryOf (r153 + 1 - [pre:R9]:8) {
        goto T44
      }
      goto T29
      T29: {
        ;
        r1467 := pre:R13;
        r1484 := strchr(r783,
                        46);
        if ! IsZero ([[pre:R13 + 24]:8]:1) {
          goto T4
        }
        goto T30
      }
      
      T44: {
        r1489 := pre:RCX;
        goto T45
      }
    
    }
    
    T30: {
      let mut r1484: Bytes(8);
      [pre:RSP - 128]:* := r1484;
      let r902: Bytes(8) = je_malloc_strtoumax();
      let r918: Bytes(8) = r902 + 1;
      ;
      r1488 := r902 + 1;
      if IsZero (r918) {
        goto T42
      }
      let r930: Bytes(8) = [pre:RSI + 24]:8;
      [pre:RSP - 136]:* := r1484;
      ;
      if ! IsZero ([r930]:1) {
        goto ext 0x403143
      }
      [[r930 + 8]:8]:8(pre:RDI,
                       pre:R8,
                       [pre:R9]:8,
                       r918);
      ;
      r1488 := r902 + 1;
      if IsZero (r918) {
        goto T42
      }
      [pre:R8 + r153 * 8]:* := r918;
      TODO /* unsupported: movzx edi,byte ptr [r8] */;
      ;
      r1482 := pre:RDI;
      r1485 := pre:RDI;
      if IsZero ([r902 + 33]:8) {
        goto T26
      }
      goto T34
    }
    
    T34: {
      let mut r1485: Bytes(8);
      ;
      r1488 := pre:RDX;
      r1486 := pre:RCX;
      if ! IsZero (r1485[1 .. 0] & r1485[1 .. 0]) {
        goto T42
      }
      goto T35
    }
    
    T35: {
      let mut r1486: Bytes(8);
      [pre:R9]:* := r153 + 1;
      ;
      r1490 := phi ();
      if ! IsZero (r1486) {
        goto T46
      }
      goto T36
    }
    
    T36: {
      r1487 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T37: {
      let mut r1487: Bytes(8);
      ;
      return r1487
    }
    
    T45: {
      let mut r1489: Bytes(8);
      ;
      r1490 := phi ();
      if IsZero (r1489) {
        goto T36
      }
      goto T46
    }
    
    T46: {
      let mut r1490: Bytes(8);
      [r1490]:* := pre:R13;
      r1487 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T42: {
      let mut r1488: Bytes(8);
      ;
      return r1488[8 .. 4] ++ 2
    }
  
  }

}
