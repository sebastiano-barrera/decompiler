---
source: decompiler/tests/test_tool.rs
expression: out
---
ctl_lookup 0x5ddf40+1255 (file 0x1ddf40)
          5ddf40: 41 57                   push r15
          5ddf42: 41 56                   push r14
          5ddf44: 49 89 f6                mov r14,rsi
          5ddf47: be 2e 00 00 00          mov esi,2Eh
          5ddf4c: 41 55                   push r13
          5ddf4e: 41 54                   push r12
          5ddf50: 55                      push rbp
          5ddf51: 53                      push rbx
          5ddf52: 48 89 cb                mov rbx,rcx
          5ddf55: 48 83 ec 58             sub rsp,58h
          5ddf59: 48 89 7c 24 40          mov [rsp+40h],rdi
          5ddf5e: 48 89 d7                mov rdi,rdx
          5ddf61: 4c 89 44 24 20          mov [rsp+20h],r8
          5ddf66: 48 89 14 24             mov [rsp],rdx
          5ddf6a: 4c 89 4c 24 18          mov [rsp+18h],r9
          5ddf6f: e8 0c 33 e2 ff          call 0000000000401280h
          5ddf74: 49 89 c0                mov r8,rax
          5ddf77: 48 85 c0                test rax,rax
          5ddf7a: 0f 84 80 04 00 00       je 00000000005DE400h
          5ddf80: 48 8b 04 24             mov rax,[rsp]
          5ddf84: 4c 89 c5                mov rbp,r8
          5ddf87: 48 29 c5                sub rbp,rax
          5ddf8a: 0f 84 a0 03 00 00       je 00000000005DE330h
          5ddf90: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5ddf95: 48 83 3a 00             cmp qword ptr [rdx],0
          5ddf99: 0f 84 80 04 00 00       je 00000000005DE41Fh
          5ddf9f: 4d 8b 4e 18             mov r9,[r14+18h]
          5ddfa3: 45 31 ff                xor r15d,r15d
          5ddfa6: 48 89 5c 24 48          mov [rsp+48h],rbx
          5ddfab: 41 80 39 00             cmp byte ptr [r9],0
          5ddfaf: 0f 84 8a 02 00 00       je 00000000005DE23Fh
          5ddfb5: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          5ddfc0: 49 8b 76 10             mov rsi,[r14+10h]
          5ddfc4: 48 89 74 24 10          mov [rsp+10h],rsi
          5ddfc9: 48 85 f6                test rsi,rsi
          5ddfcc: 0f 84 5e 03 00 00       je 00000000005DE330h
          5ddfd2: 4d 89 cc                mov r12,r9
          5ddfd5: 31 db                   xor ebx,ebx
          5ddfd7: 83 e6 03                and esi,3
          5ddfda: 0f 84 c1 00 00 00       je 00000000005DE0A1h
          5ddfe0: 48 83 fe 01             cmp rsi,1
          5ddfe4: 74 78                   je short 00000000005DE05Eh
          5ddfe6: 48 83 fe 02             cmp rsi,2
          5ddfea: 74 3d                   je short 00000000005DE029h
          5ddfec: 4d 8b 51 08             mov r10,[r9+8]
          5ddff0: 4c 89 44 24 30          mov [rsp+30h],r8
          5ddff5: 4d 89 cd                mov r13,r9
          5ddff8: 4c 89 4c 24 28          mov [rsp+28h],r9
          5ddffd: 4c 89 d7                mov rdi,r10
          5de000: 4c 89 54 24 08          mov [rsp+8],r10
          5de005: e8 d6 32 e2 ff          call 00000000004012E0h
          5de00a: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de00f: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de014: 4c 89 e7                mov rdi,r12
          5de017: 48 39 e8                cmp rax,rbp
          5de01a: 0f 84 b3 03 00 00       je 00000000005DE3D3h
          5de020: bb 01 00 00 00          mov ebx,1
          5de025: 4c 8d 67 28             lea r12,[rdi+28h]
          5de029: 4d 8b 5c 24 08          mov r11,[r12+8]
          5de02e: 4c 89 44 24 28          mov [rsp+28h],r8
          5de033: 4d 89 e5                mov r13,r12
          5de036: 4c 89 df                mov rdi,r11
          5de039: 4c 89 5c 24 08          mov [rsp+8],r11
          5de03e: e8 9d 32 e2 ff          call 00000000004012E0h
          5de043: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de048: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de04d: 48 39 e8                cmp rax,rbp
          5de050: 0f 84 5a 03 00 00       je 00000000005DE3B0h
          5de056: 48 83 c3 01             add rbx,1
          5de05a: 49 83 c4 28             add r12,28h
          5de05e: 49 8b 44 24 08          mov rax,[r12+8]
          5de063: 4c 89 44 24 28          mov [rsp+28h],r8
          5de068: 4d 89 e5                mov r13,r12
          5de06b: 48 89 c7                mov rdi,rax
          5de06e: 48 89 44 24 08          mov [rsp+8],rax
          5de073: e8 68 32 e2 ff          call 00000000004012E0h
          5de078: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de07d: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de082: 48 39 e8                cmp rax,rbp
          5de085: 0f 84 fd 02 00 00       je 00000000005DE388h
          5de08b: 48 8b 54 24 10          mov rdx,[rsp+10h]
          5de090: 48 83 c3 01             add rbx,1
          5de094: 49 83 c4 28             add r12,28h
          5de098: 48 39 d3                cmp rbx,rdx
          5de09b: 0f 84 8f 02 00 00       je 00000000005DE330h
          5de0a1: 4c 89 74 24 38          mov [rsp+38h],r14
          5de0a6: 4d 89 e6                mov r14,r12
          5de0a9: 4c 89 7c 24 28          mov [rsp+28h],r15
          5de0ae: 4c 89 44 24 30          mov [rsp+30h],r8
          5de0b3: e9 a2 00 00 00          jmp 00000000005DE15Ah
          5de0b8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          5de0c0: 4d 8b 4e 30             mov r9,[r14+30h]
          5de0c4: 4d 8d 7e 28             lea r15,[r14+28h]
          5de0c8: 4c 8d 6b 01             lea r13,[rbx+1]
          5de0cc: 4c 89 eb                mov rbx,r13
          5de0cf: 4d 89 fe                mov r14,r15
          5de0d2: 4d 89 fc                mov r12,r15
          5de0d5: 4c 89 cf                mov rdi,r9
          5de0d8: 4c 89 4c 24 08          mov [rsp+8],r9
          5de0dd: e8 fe 31 e2 ff          call 00000000004012E0h
          5de0e2: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de0e7: 48 39 e8                cmp rax,rbp
          5de0ea: 0f 84 b0 00 00 00       je 00000000005DE1A0h
          5de0f0: 49 8b 4f 30             mov rcx,[r15+30h]
          5de0f4: 4d 8d 77 28             lea r14,[r15+28h]
          5de0f8: 49 8d 5d 01             lea rbx,[r13+1]
          5de0fc: 4d 89 f4                mov r12,r14
          5de0ff: 48 89 cf                mov rdi,rcx
          5de102: 48 89 4c 24 08          mov [rsp+8],rcx
          5de107: e8 d4 31 e2 ff          call 00000000004012E0h
          5de10c: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de111: 48 39 e8                cmp rax,rbp
          5de114: 0f 84 d6 01 00 00       je 00000000005DE2F0h
          5de11a: 49 8b 77 58             mov rsi,[r15+58h]
          5de11e: 4d 8d 77 50             lea r14,[r15+50h]
          5de122: 49 8d 5d 02             lea rbx,[r13+2]
          5de126: 4d 89 f4                mov r12,r14
          5de129: 48 89 f7                mov rdi,rsi
          5de12c: 48 89 74 24 08          mov [rsp+8],rsi
          5de131: e8 aa 31 e2 ff          call 00000000004012E0h
          5de136: 48 8b 74 24 08          mov rsi,[rsp+8]
          5de13b: 48 39 e8                cmp rax,rbp
          5de13e: 0f 84 cc 01 00 00       je 00000000005DE310h
          5de144: 4c 8b 54 24 10          mov r10,[rsp+10h]
          5de149: 49 8d 5d 03             lea rbx,[r13+3]
          5de14d: 4d 8d 77 78             lea r14,[r15+78h]
          5de151: 4c 39 d3                cmp rbx,r10
          5de154: 0f 84 d6 01 00 00       je 00000000005DE330h
          5de15a: 4d 8b 7e 08             mov r15,[r14+8]
          5de15e: 4d 89 f4                mov r12,r14
          5de161: 4c 89 ff                mov rdi,r15
          5de164: e8 77 31 e2 ff          call 00000000004012E0h
          5de169: 48 39 e8                cmp rax,rbp
          5de16c: 0f 85 4e ff ff ff       jne 00000000005DE0C0h
          5de172: 48 8b 3c 24             mov rdi,[rsp]
          5de176: 48 89 ea                mov rdx,rbp
          5de179: 4c 89 fe                mov rsi,r15
          5de17c: e8 bf 31 e2 ff          call 0000000000401340h
          5de181: 85 c0                   test eax,eax
          5de183: 0f 85 37 ff ff ff       jne 00000000005DE0C0h
          5de189: 4d 89 f5                mov r13,r14
          5de18c: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de191: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de196: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de19b: eb 2c                   jmp short 00000000005DE1C9h
          5de19d: 0f 1f 00                nop [rax]
          5de1a0: 48 8b 3c 24             mov rdi,[rsp]
          5de1a4: 48 89 ea                mov rdx,rbp
          5de1a7: e8 94 31 e2 ff          call 0000000000401340h
          5de1ac: 85 c0                   test eax,eax
          5de1ae: 0f 85 3c ff ff ff       jne 00000000005DE0F0h
          5de1b4: 4d 89 e5                mov r13,r12
          5de1b7: 4c 8b 7c 24 28          mov r15,[rsp+28h]
          5de1bc: 4d 89 f4                mov r12,r14
          5de1bf: 4c 8b 44 24 30          mov r8,[rsp+30h]
          5de1c4: 4c 8b 74 24 38          mov r14,[rsp+38h]
          5de1c9: 48 8b 6c 24 20          mov rbp,[rsp+20h]
          5de1ce: 4a 89 5c fd 00          mov [rbp+r15*8],rbx
          5de1d3: 4d 39 f4                cmp r12,r14
          5de1d6: 0f 84 54 01 00 00       je 00000000005DE330h
          5de1dc: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de1e1: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de1e5: 0f 85 cb 00 00 00       jne 00000000005DE2B6h
          5de1eb: 40 84 ff                test dil,dil
          5de1ee: 0f 84 21 02 00 00       je 00000000005DE415h
          5de1f4: 49 8d 78 01             lea rdi,[r8+1]
          5de1f8: be 2e 00 00 00          mov esi,2Eh
          5de1fd: 48 89 3c 24             mov [rsp],rdi
          5de201: e8 7a 30 e2 ff          call 0000000000401280h
          5de206: 49 89 c0                mov r8,rax
          5de209: 48 85 c0                test rax,rax
          5de20c: 0f 84 36 01 00 00       je 00000000005DE348h
          5de212: 48 89 c5                mov rbp,rax
          5de215: 4c 8b 1c 24             mov r11,[rsp]
          5de219: 48 8b 44 24 18          mov rax,[rsp+18h]
          5de21e: 49 83 c7 01             add r15,1
          5de222: 4c 29 dd                sub rbp,r11
          5de225: 4c 3b 38                cmp r15,[rax]
          5de228: 0f 83 3f 01 00 00       jae 00000000005DE36Dh
          5de22e: 4d 89 ee                mov r14,r13
          5de231: 4d 8b 4e 18             mov r9,[r14+18h]
          5de235: 41 80 39 00             cmp byte ptr [r9],0
          5de239: 0f 85 81 fd ff ff       jne 00000000005DDFC0h
          5de23f: 48 8b 3c 24             mov rdi,[rsp]
          5de243: 31 f6                   xor esi,esi
          5de245: ba 0a 00 00 00          mov edx,0Ah
          5de24a: 4c 89 44 24 08          mov [rsp+8],r8
          5de24f: e8 8c 8e 04 00          call 00000000006270E0h
          5de254: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de259: 48 83 f8 ff             cmp rax,0FFFFFFFFFFFFFFFFh
          5de25d: 48 89 c3                mov rbx,rax
          5de260: 0f 84 ca 00 00 00       je 00000000005DE330h
          5de266: 49 8b 6e 18             mov rbp,[r14+18h]
          5de26a: 4c 89 04 24             mov [rsp],r8
          5de26e: 80 7d 00 00             cmp byte ptr [rbp],0
          5de272: 0f 85 cb 4e e2 ff       jne 0000000000403143h
          5de278: 48 8b 4c 24 18          mov rcx,[rsp+18h]
          5de27d: 4c 8b 74 24 20          mov r14,[rsp+20h]
          5de282: 48 8b 7c 24 40          mov rdi,[rsp+40h]
          5de287: 48 8b 11                mov rdx,[rcx]
          5de28a: 4c 89 f6                mov rsi,r14
          5de28d: 48 89 c1                mov rcx,rax
          5de290: ff 55 08                call qword ptr [rbp+8]
          5de293: 49 89 c5                mov r13,rax
          5de296: 48 85 c0                test rax,rax
          5de299: 0f 84 91 00 00 00       je 00000000005DE330h
          5de29f: 4c 8b 04 24             mov r8,[rsp]
          5de2a3: 49 83 7d 20 00          cmp qword ptr [r13+20h],0
          5de2a8: 4b 89 1c fe             mov [r14+r15*8],rbx
          5de2ac: 41 0f b6 38             movzx edi,byte ptr [r8]
          5de2b0: 0f 84 35 ff ff ff       je 00000000005DE1EBh
          5de2b6: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de2bb: 40 84 ff                test dil,dil
          5de2be: 75 70                   jne short 00000000005DE330h
          5de2c0: 4d 8d 47 01             lea r8,[r15+1]
          5de2c4: 4c 8b 7c 24 18          mov r15,[rsp+18h]
          5de2c9: 4d 89 07                mov [r15],r8
          5de2cc: 48 85 db                test rbx,rbx
          5de2cf: 0f 85 a6 00 00 00       jne 00000000005DE37Bh
          5de2d5: 31 c0                   xor eax,eax
          5de2d7: 48 83 c4 58             add rsp,58h
          5de2db: 5b                      pop rbx
          5de2dc: 5d                      pop rbp
          5de2dd: 41 5c                   pop r12
          5de2df: 41 5d                   pop r13
          5de2e1: 41 5e                   pop r14
          5de2e3: 41 5f                   pop r15
          5de2e5: c3                      ret
          5de2e6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          5de2f0: 48 8b 3c 24             mov rdi,[rsp]
          5de2f4: 48 89 ea                mov rdx,rbp
          5de2f7: e8 44 30 e2 ff          call 0000000000401340h
          5de2fc: 85 c0                   test eax,eax
          5de2fe: 0f 85 16 fe ff ff       jne 00000000005DE11Ah
          5de304: e9 ab fe ff ff          jmp 00000000005DE1B4h
          5de309: 0f 1f 80 00 00 00 00    nop [rax]
          5de310: 48 8b 3c 24             mov rdi,[rsp]
          5de314: 48 89 ea                mov rdx,rbp
          5de317: e8 24 30 e2 ff          call 0000000000401340h
          5de31c: 85 c0                   test eax,eax
          5de31e: 0f 85 20 fe ff ff       jne 00000000005DE144h
          5de324: e9 8b fe ff ff          jmp 00000000005DE1B4h
          5de329: 0f 1f 80 00 00 00 00    nop [rax]
          5de330: 48 83 c4 58             add rsp,58h
          5de334: b8 02 00 00 00          mov eax,2
          5de339: 5b                      pop rbx
          5de33a: 5d                      pop rbp
          5de33b: 41 5c                   pop r12
          5de33d: 41 5d                   pop r13
          5de33f: 41 5e                   pop r14
          5de341: 41 5f                   pop r15
          5de343: c3                      ret
          5de344: 0f 1f 40 00             nop [rax]
          5de348: 4c 8b 24 24             mov r12,[rsp]
          5de34c: 49 83 c7 01             add r15,1
          5de350: 4c 89 e7                mov rdi,r12
          5de353: e8 88 2f e2 ff          call 00000000004012E0h
          5de358: 48 8b 54 24 18          mov rdx,[rsp+18h]
          5de35d: 48 89 c5                mov rbp,rax
          5de360: 4d 8d 04 04             lea r8,[r12+rax]
          5de364: 4c 3b 3a                cmp r15,[rdx]
          5de367: 0f 82 c1 fe ff ff       jb 00000000005DE22Eh
          5de36d: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de372: 48 85 db                test rbx,rbx
          5de375: 0f 84 5a ff ff ff       je 00000000005DE2D5h
          5de37b: 4c 89 2b                mov [rbx],r13
          5de37e: 31 c0                   xor eax,eax
          5de380: e9 52 ff ff ff          jmp 00000000005DE2D7h
          5de385: 0f 1f 00                nop [rax]
          5de388: 48 8b 3c 24             mov rdi,[rsp]
          5de38c: 48 89 ea                mov rdx,rbp
          5de38f: 4c 89 44 24 08          mov [rsp+8],r8
          5de394: e8 a7 2f e2 ff          call 0000000000401340h
          5de399: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de39e: 85 c0                   test eax,eax
          5de3a0: 0f 85 e5 fc ff ff       jne 00000000005DE08Bh
          5de3a6: e9 1e fe ff ff          jmp 00000000005DE1C9h
          5de3ab: 0f 1f 44 00 00          nop [rax+rax]
          5de3b0: 48 8b 3c 24             mov rdi,[rsp]
          5de3b4: 48 89 ea                mov rdx,rbp
          5de3b7: 4c 89 44 24 08          mov [rsp+8],r8
          5de3bc: e8 7f 2f e2 ff          call 0000000000401340h
          5de3c1: 4c 8b 44 24 08          mov r8,[rsp+8]
          5de3c6: 85 c0                   test eax,eax
          5de3c8: 0f 85 88 fc ff ff       jne 00000000005DE056h
          5de3ce: e9 f6 fd ff ff          jmp 00000000005DE1C9h
          5de3d3: 48 8b 3c 24             mov rdi,[rsp]
          5de3d7: 48 89 ea                mov rdx,rbp
          5de3da: 4c 89 44 24 28          mov [rsp+28h],r8
          5de3df: 4c 89 64 24 08          mov [rsp+8],r12
          5de3e4: e8 57 2f e2 ff          call 0000000000401340h
          5de3e9: 4c 8b 44 24 28          mov r8,[rsp+28h]
          5de3ee: 4c 89 e7                mov rdi,r12
          5de3f1: 85 c0                   test eax,eax
          5de3f3: 0f 85 27 fc ff ff       jne 00000000005DE020h
          5de3f9: e9 cb fd ff ff          jmp 00000000005DE1C9h
          5de3fe: 66 90                   xchg ax,ax
          5de400: 4c 8b 3c 24             mov r15,[rsp]
          5de404: 4c 89 ff                mov rdi,r15
          5de407: e8 d4 2e e2 ff          call 00000000004012E0h
          5de40c: 4d 8d 04 07             lea r8,[r15+rax]
          5de410: e9 6b fb ff ff          jmp 00000000005DDF80h
          5de415: 48 8b 5c 24 48          mov rbx,[rsp+48h]
          5de41a: e9 a1 fe ff ff          jmp 00000000005DE2C0h
          5de41f: 4d 89 f5                mov r13,r14
          5de422: e9 4b ff ff ff          jmp 00000000005DE372h

function type: 0x5ddf40: no type info
4 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: no type hints for this callsite
  #   2: no function type
  #   3: no function type


mil program = 
program  1490 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Undefined
   44 r46: TypeID(2v1) <- Undefined
   45 r47: TypeID(2v1) <- Undefined
   46 r48: TypeID(2v1) <- Undefined
   47 r49: TypeID(2v1) <- Undefined
   48 r50: TypeID(2v1) <- Undefined
   49 r51: TypeID(2v1) <- Undefined
   50 r52: TypeID(2v1) <- Undefined
   51 r53: TypeID(2v1) <- Undefined
   52 r54: TypeID(2v1) <- Undefined
   53 r55: TypeID(2v1) <- Undefined
   54 r56: TypeID(2v1) <- Undefined
   55 r57: TypeID(2v1) <- Undefined
   56 r58: TypeID(2v1) <- Undefined
   57 r59: TypeID(2v1) <- Undefined
   58 r60: TypeID(2v1) <- Undefined
   59 r61: TypeID(2v1) <- Undefined
   60 r62: TypeID(2v1) <- Undefined
   61 r63: TypeID(2v1) <- Undefined
   62 r64: TypeID(2v1) <- Undefined
   63 r65: TypeID(2v1) <- Undefined
0x5ddf40:
   64 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   65 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r27 }
0x5ddf42:
   66 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   67 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r26 }
0x5ddf44:
   68 r26: TypeID(2v1) <- Get(r15)
0x5ddf47:
   69 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
   70 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   71 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5ddf4c:
   72 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   73 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r25 }
0x5ddf4e:
   74 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   75 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x5ddf50:
   76 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   77 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x5ddf51:
   78 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   79 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x5ddf52:
   80 r17: TypeID(2v1) <- Get(r18)
0x5ddf55:
   81 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
   82 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   83 r12: TypeID(2v1) <- Get(r12)
   84 r10: TypeID(2v1) <- OverflowOf(r12)
   85 r2: TypeID(2v1) <- CarryOf(r12)
   86 r6: TypeID(2v1) <- SignOf(r12)
   87 r5: TypeID(2v1) <- IsZero(r12)
   88 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   89 r3: TypeID(2v1) <- Parity(r47)
0x5ddf59:
   90 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
   91 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   92 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5ddf5e:
   93 r14: TypeID(2v1) <- Get(r19)
0x5ddf61:
   94 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
   95 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   96 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddf66:
   97 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   98 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   99 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x5ddf6a:
  100 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  101 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  102 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddf6f:
  103 r47: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  104 r47: TypeID(2v1) <- Void
  105 r47: TypeID(2v1) <- Get(r14)
  106 r48: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  107 r48: TypeID(2v1) <- Void
  108 r48: TypeID(2v1) <- Get(r15)
  109 r48: TypeID(2v1) <- Part { src: r48, offset: 0, size: 4 }
  110 r49: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  111 r49: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r49) }
  112 r50: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
  113 r49: TypeID(2v1) <- Call { callee: r50, first_arg: Some(r49) }
  114 r2: TypeID(2v1) <- Undefined
  115 r3: TypeID(2v1) <- Undefined
  116 r4: TypeID(2v1) <- Undefined
  117 r5: TypeID(2v1) <- Undefined
  118 r6: TypeID(2v1) <- Undefined
  119 r7: TypeID(2v1) <- Undefined
  120 r8: TypeID(2v1) <- Undefined
  121 r9: TypeID(2v1) <- Undefined
  122 r10: TypeID(2v1) <- Undefined
  123 r16: TypeID(2v1) <- Part { src: r49, offset: 0, size: 8 }
0x5ddf74:
  124 r20: TypeID(2v1) <- Get(r16)
0x5ddf77:
  125 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  126 r6: TypeID(2v1) <- SignOf(r16)
  127 r5: TypeID(2v1) <- IsZero(r16)
  128 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  129 r3: TypeID(2v1) <- Parity(r16)
  130 r2: TypeID(2v1) <- False
  131 r10: TypeID(2v1) <- False
0x5ddf7a:
  132 r45: TypeID(2v1) <- SetJumpCondition(r5)
  133 r45: TypeID(2v1) <- Control(JmpIf(1461))
0x5ddf80:
  134 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  135 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  136 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  137 r16: TypeID(2v1) <- Get(r45)
0x5ddf84:
  138 r11: TypeID(2v1) <- Get(r20)
0x5ddf87:
  139 r11: TypeID(2v1) <- Arith(Sub, r11, r16)
  140 r11: TypeID(2v1) <- Get(r11)
  141 r10: TypeID(2v1) <- OverflowOf(r11)
  142 r2: TypeID(2v1) <- CarryOf(r11)
  143 r6: TypeID(2v1) <- SignOf(r11)
  144 r5: TypeID(2v1) <- IsZero(r11)
  145 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  146 r3: TypeID(2v1) <- Parity(r47)
0x5ddf8a:
  147 r45: TypeID(2v1) <- SetJumpCondition(r5)
  148 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5ddf90:
  149 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  150 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  151 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  152 r19: TypeID(2v1) <- Get(r45)
0x5ddf95:
  153 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  154 r46: TypeID(2v1) <- Arith(Add, r46, r19)
  155 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  156 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  157 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  158 r10: TypeID(2v1) <- OverflowOf(r45)
  159 r2: TypeID(2v1) <- CarryOf(r45)
  160 r6: TypeID(2v1) <- SignOf(r45)
  161 r5: TypeID(2v1) <- IsZero(r45)
  162 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  163 r3: TypeID(2v1) <- Parity(r48)
0x5ddf99:
  164 r45: TypeID(2v1) <- SetJumpCondition(r5)
  165 r45: TypeID(2v1) <- Control(JmpIf(1488))
0x5ddf9f:
  166 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  167 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  168 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  169 r21: TypeID(2v1) <- Get(r45)
0x5ddfa3:
  170 r46: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  171 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 4 }
  172 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  173 r49: TypeID(2v1) <- Part { src: r27, offset: 4, size: 4 }
  174 r27: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  175 r10: TypeID(2v1) <- False
  176 r2: TypeID(2v1) <- False
  177 r6: TypeID(2v1) <- SignOf(r46)
  178 r5: TypeID(2v1) <- IsZero(r46)
  179 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  180 r3: TypeID(2v1) <- Parity(r50)
0x5ddfa6:
  181 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
  182 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  183 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5ddfab:
  184 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  185 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  186 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  187 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  188 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  189 r10: TypeID(2v1) <- OverflowOf(r45)
  190 r2: TypeID(2v1) <- CarryOf(r45)
  191 r6: TypeID(2v1) <- SignOf(r45)
  192 r5: TypeID(2v1) <- IsZero(r45)
  193 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  194 r3: TypeID(2v1) <- Parity(r48)
0x5ddfaf:
  195 r45: TypeID(2v1) <- SetJumpCondition(r5)
  196 r45: TypeID(2v1) <- Control(JmpIf(901))
0x5ddfc0:
  197 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  198 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  199 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  200 r15: TypeID(2v1) <- Get(r45)
0x5ddfc4:
  201 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  202 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  203 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5ddfc9:
  204 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  205 r6: TypeID(2v1) <- SignOf(r15)
  206 r5: TypeID(2v1) <- IsZero(r15)
  207 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  208 r3: TypeID(2v1) <- Parity(r15)
  209 r2: TypeID(2v1) <- False
  210 r10: TypeID(2v1) <- False
0x5ddfcc:
  211 r45: TypeID(2v1) <- SetJumpCondition(r5)
  212 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5ddfd2:
  213 r24: TypeID(2v1) <- Get(r21)
0x5ddfd5:
  214 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  215 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  216 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  217 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  218 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  219 r10: TypeID(2v1) <- False
  220 r2: TypeID(2v1) <- False
  221 r6: TypeID(2v1) <- SignOf(r46)
  222 r5: TypeID(2v1) <- IsZero(r46)
  223 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  224 r3: TypeID(2v1) <- Parity(r50)
0x5ddfd7:
  225 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  226 r47: TypeID(2v1) <- Const { value: 3, size: 4 }
  227 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  228 r48: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  229 r15: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  230 r10: TypeID(2v1) <- False
  231 r2: TypeID(2v1) <- False
  232 r6: TypeID(2v1) <- SignOf(r46)
  233 r5: TypeID(2v1) <- IsZero(r46)
  234 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  235 r3: TypeID(2v1) <- Parity(r49)
0x5ddfda:
  236 r45: TypeID(2v1) <- SetJumpCondition(r5)
  237 r45: TypeID(2v1) <- Control(JmpIf(452))
0x5ddfe0:
  238 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  239 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  240 r10: TypeID(2v1) <- OverflowOf(r15)
  241 r2: TypeID(2v1) <- CarryOf(r15)
  242 r6: TypeID(2v1) <- SignOf(r15)
  243 r5: TypeID(2v1) <- IsZero(r15)
  244 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  245 r3: TypeID(2v1) <- Parity(r47)
0x5ddfe4:
  246 r45: TypeID(2v1) <- SetJumpCondition(r5)
  247 r45: TypeID(2v1) <- Control(JmpIf(376))
0x5ddfe6:
  248 r46: TypeID(2v1) <- Const { value: 2, size: 8 }
  249 r15: TypeID(2v1) <- Arith(Sub, r15, r46)
  250 r10: TypeID(2v1) <- OverflowOf(r15)
  251 r2: TypeID(2v1) <- CarryOf(r15)
  252 r6: TypeID(2v1) <- SignOf(r15)
  253 r5: TypeID(2v1) <- IsZero(r15)
  254 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  255 r3: TypeID(2v1) <- Parity(r47)
0x5ddfea:
  256 r45: TypeID(2v1) <- SetJumpCondition(r5)
  257 r45: TypeID(2v1) <- Control(JmpIf(313))
0x5ddfec:
  258 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  259 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  260 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  261 r22: TypeID(2v1) <- Get(r45)
0x5ddff0:
  262 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  263 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  264 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5ddff5:
  265 r25: TypeID(2v1) <- Get(r21)
0x5ddff8:
  266 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  267 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  268 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5ddffd:
  269 r14: TypeID(2v1) <- Get(r22)
0x5de000:
  270 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  271 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  272 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r22 }
0x5de005:
  273 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  274 r46: TypeID(2v1) <- Void
  275 r46: TypeID(2v1) <- Get(r14)
  276 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  277 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  278 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  279 r2: TypeID(2v1) <- Undefined
  280 r3: TypeID(2v1) <- Undefined
  281 r4: TypeID(2v1) <- Undefined
  282 r5: TypeID(2v1) <- Undefined
  283 r6: TypeID(2v1) <- Undefined
  284 r7: TypeID(2v1) <- Undefined
  285 r8: TypeID(2v1) <- Undefined
  286 r9: TypeID(2v1) <- Undefined
  287 r10: TypeID(2v1) <- Undefined
  288 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de00a:
  289 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  290 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  291 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  292 r15: TypeID(2v1) <- Get(r45)
0x5de00f:
  293 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  294 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  295 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  296 r20: TypeID(2v1) <- Get(r45)
0x5de014:
  297 r14: TypeID(2v1) <- Get(r24)
0x5de017:
  298 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  299 r10: TypeID(2v1) <- OverflowOf(r16)
  300 r2: TypeID(2v1) <- CarryOf(r16)
  301 r6: TypeID(2v1) <- SignOf(r16)
  302 r5: TypeID(2v1) <- IsZero(r16)
  303 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  304 r3: TypeID(2v1) <- Parity(r47)
0x5de01a:
  305 r45: TypeID(2v1) <- SetJumpCondition(r5)
  306 r45: TypeID(2v1) <- Control(JmpIf(1408))
0x5de020:
  307 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  308 r46: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  309 r17: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de025:
  310 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  311 r45: TypeID(2v1) <- Arith(Add, r45, r14)
  312 r24: TypeID(2v1) <- Get(r45)
0x5de029:
  313 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  314 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  315 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  316 r23: TypeID(2v1) <- Get(r45)
0x5de02e:
  317 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  318 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  319 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de033:
  320 r25: TypeID(2v1) <- Get(r24)
0x5de036:
  321 r14: TypeID(2v1) <- Get(r23)
0x5de039:
  322 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  323 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  324 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r23 }
0x5de03e:
  325 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  326 r46: TypeID(2v1) <- Void
  327 r46: TypeID(2v1) <- Get(r14)
  328 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  329 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  330 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  331 r2: TypeID(2v1) <- Undefined
  332 r3: TypeID(2v1) <- Undefined
  333 r4: TypeID(2v1) <- Undefined
  334 r5: TypeID(2v1) <- Undefined
  335 r6: TypeID(2v1) <- Undefined
  336 r7: TypeID(2v1) <- Undefined
  337 r8: TypeID(2v1) <- Undefined
  338 r9: TypeID(2v1) <- Undefined
  339 r10: TypeID(2v1) <- Undefined
  340 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de043:
  341 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  342 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  343 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  344 r15: TypeID(2v1) <- Get(r45)
0x5de048:
  345 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  346 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  347 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  348 r20: TypeID(2v1) <- Get(r45)
0x5de04d:
  349 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  350 r10: TypeID(2v1) <- OverflowOf(r16)
  351 r2: TypeID(2v1) <- CarryOf(r16)
  352 r6: TypeID(2v1) <- SignOf(r16)
  353 r5: TypeID(2v1) <- IsZero(r16)
  354 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  355 r3: TypeID(2v1) <- Parity(r47)
0x5de050:
  356 r45: TypeID(2v1) <- SetJumpCondition(r5)
  357 r45: TypeID(2v1) <- Control(JmpIf(1359))
0x5de056:
  358 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  359 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  360 r17: TypeID(2v1) <- Get(r17)
  361 r10: TypeID(2v1) <- OverflowOf(r17)
  362 r2: TypeID(2v1) <- CarryOf(r17)
  363 r6: TypeID(2v1) <- SignOf(r17)
  364 r5: TypeID(2v1) <- IsZero(r17)
  365 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  366 r3: TypeID(2v1) <- Parity(r47)
0x5de05a:
  367 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  368 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  369 r24: TypeID(2v1) <- Get(r24)
  370 r10: TypeID(2v1) <- OverflowOf(r24)
  371 r2: TypeID(2v1) <- CarryOf(r24)
  372 r6: TypeID(2v1) <- SignOf(r24)
  373 r5: TypeID(2v1) <- IsZero(r24)
  374 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  375 r3: TypeID(2v1) <- Parity(r47)
0x5de05e:
  376 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  377 r46: TypeID(2v1) <- Arith(Add, r46, r24)
  378 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  379 r16: TypeID(2v1) <- Get(r45)
0x5de063:
  380 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  381 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  382 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de068:
  383 r25: TypeID(2v1) <- Get(r24)
0x5de06b:
  384 r14: TypeID(2v1) <- Get(r16)
0x5de06e:
  385 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  386 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  387 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5de073:
  388 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  389 r46: TypeID(2v1) <- Void
  390 r46: TypeID(2v1) <- Get(r14)
  391 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  392 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  393 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  394 r2: TypeID(2v1) <- Undefined
  395 r3: TypeID(2v1) <- Undefined
  396 r4: TypeID(2v1) <- Undefined
  397 r5: TypeID(2v1) <- Undefined
  398 r6: TypeID(2v1) <- Undefined
  399 r7: TypeID(2v1) <- Undefined
  400 r8: TypeID(2v1) <- Undefined
  401 r9: TypeID(2v1) <- Undefined
  402 r10: TypeID(2v1) <- Undefined
  403 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de078:
  404 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  405 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  406 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  407 r15: TypeID(2v1) <- Get(r45)
0x5de07d:
  408 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  409 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  410 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  411 r20: TypeID(2v1) <- Get(r45)
0x5de082:
  412 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  413 r10: TypeID(2v1) <- OverflowOf(r16)
  414 r2: TypeID(2v1) <- CarryOf(r16)
  415 r6: TypeID(2v1) <- SignOf(r16)
  416 r5: TypeID(2v1) <- IsZero(r16)
  417 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  418 r3: TypeID(2v1) <- Parity(r47)
0x5de085:
  419 r45: TypeID(2v1) <- SetJumpCondition(r5)
  420 r45: TypeID(2v1) <- Control(JmpIf(1310))
0x5de08b:
  421 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  422 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  423 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  424 r19: TypeID(2v1) <- Get(r45)
0x5de090:
  425 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  426 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  427 r17: TypeID(2v1) <- Get(r17)
  428 r10: TypeID(2v1) <- OverflowOf(r17)
  429 r2: TypeID(2v1) <- CarryOf(r17)
  430 r6: TypeID(2v1) <- SignOf(r17)
  431 r5: TypeID(2v1) <- IsZero(r17)
  432 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  433 r3: TypeID(2v1) <- Parity(r47)
0x5de094:
  434 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  435 r24: TypeID(2v1) <- Arith(Add, r24, r46)
  436 r24: TypeID(2v1) <- Get(r24)
  437 r10: TypeID(2v1) <- OverflowOf(r24)
  438 r2: TypeID(2v1) <- CarryOf(r24)
  439 r6: TypeID(2v1) <- SignOf(r24)
  440 r5: TypeID(2v1) <- IsZero(r24)
  441 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  442 r3: TypeID(2v1) <- Parity(r47)
0x5de098:
  443 r17: TypeID(2v1) <- Arith(Sub, r17, r19)
  444 r10: TypeID(2v1) <- OverflowOf(r17)
  445 r2: TypeID(2v1) <- CarryOf(r17)
  446 r6: TypeID(2v1) <- SignOf(r17)
  447 r5: TypeID(2v1) <- IsZero(r17)
  448 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  449 r3: TypeID(2v1) <- Parity(r47)
0x5de09b:
  450 r45: TypeID(2v1) <- SetJumpCondition(r5)
  451 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5de0a1:
  452 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  453 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  454 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r26 }
0x5de0a6:
  455 r26: TypeID(2v1) <- Get(r24)
0x5de0a9:
  456 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  457 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  458 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r27 }
0x5de0ae:
  459 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  460 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  461 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de0b3:
  462 r45: TypeID(2v1) <- Control(Jmp(616))
0x5de0c0:
  463 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  464 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  465 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  466 r21: TypeID(2v1) <- Get(r45)
0x5de0c4:
  467 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  468 r45: TypeID(2v1) <- Arith(Add, r45, r26)
  469 r27: TypeID(2v1) <- Get(r45)
0x5de0c8:
  470 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  471 r45: TypeID(2v1) <- Arith(Add, r45, r17)
  472 r25: TypeID(2v1) <- Get(r45)
0x5de0cc:
  473 r17: TypeID(2v1) <- Get(r25)
0x5de0cf:
  474 r26: TypeID(2v1) <- Get(r27)
0x5de0d2:
  475 r24: TypeID(2v1) <- Get(r27)
0x5de0d5:
  476 r14: TypeID(2v1) <- Get(r21)
0x5de0d8:
  477 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  478 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  479 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r21 }
0x5de0dd:
  480 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  481 r46: TypeID(2v1) <- Void
  482 r46: TypeID(2v1) <- Get(r14)
  483 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  484 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  485 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  486 r2: TypeID(2v1) <- Undefined
  487 r3: TypeID(2v1) <- Undefined
  488 r4: TypeID(2v1) <- Undefined
  489 r5: TypeID(2v1) <- Undefined
  490 r6: TypeID(2v1) <- Undefined
  491 r7: TypeID(2v1) <- Undefined
  492 r8: TypeID(2v1) <- Undefined
  493 r9: TypeID(2v1) <- Undefined
  494 r10: TypeID(2v1) <- Undefined
  495 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de0e2:
  496 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  497 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  498 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  499 r15: TypeID(2v1) <- Get(r45)
0x5de0e7:
  500 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  501 r10: TypeID(2v1) <- OverflowOf(r16)
  502 r2: TypeID(2v1) <- CarryOf(r16)
  503 r6: TypeID(2v1) <- SignOf(r16)
  504 r5: TypeID(2v1) <- IsZero(r16)
  505 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  506 r3: TypeID(2v1) <- Parity(r47)
0x5de0ea:
  507 r45: TypeID(2v1) <- SetJumpCondition(r5)
  508 r45: TypeID(2v1) <- Control(JmpIf(704))
0x5de0f0:
  509 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  510 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  511 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  512 r18: TypeID(2v1) <- Get(r45)
0x5de0f4:
  513 r45: TypeID(2v1) <- Const { value: 40, size: 8 }
  514 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  515 r26: TypeID(2v1) <- Get(r45)
0x5de0f8:
  516 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  517 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  518 r17: TypeID(2v1) <- Get(r45)
0x5de0fc:
  519 r24: TypeID(2v1) <- Get(r26)
0x5de0ff:
  520 r14: TypeID(2v1) <- Get(r18)
0x5de102:
  521 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  522 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  523 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r18 }
0x5de107:
  524 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  525 r46: TypeID(2v1) <- Void
  526 r46: TypeID(2v1) <- Get(r14)
  527 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  528 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  529 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  530 r2: TypeID(2v1) <- Undefined
  531 r3: TypeID(2v1) <- Undefined
  532 r4: TypeID(2v1) <- Undefined
  533 r5: TypeID(2v1) <- Undefined
  534 r6: TypeID(2v1) <- Undefined
  535 r7: TypeID(2v1) <- Undefined
  536 r8: TypeID(2v1) <- Undefined
  537 r9: TypeID(2v1) <- Undefined
  538 r10: TypeID(2v1) <- Undefined
  539 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de10c:
  540 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  541 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  542 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  543 r15: TypeID(2v1) <- Get(r45)
0x5de111:
  544 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  545 r10: TypeID(2v1) <- OverflowOf(r16)
  546 r2: TypeID(2v1) <- CarryOf(r16)
  547 r6: TypeID(2v1) <- SignOf(r16)
  548 r5: TypeID(2v1) <- IsZero(r16)
  549 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  550 r3: TypeID(2v1) <- Parity(r47)
0x5de114:
  551 r45: TypeID(2v1) <- SetJumpCondition(r5)
  552 r45: TypeID(2v1) <- Control(JmpIf(1119))
0x5de11a:
  553 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
  554 r46: TypeID(2v1) <- Arith(Add, r46, r27)
  555 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  556 r15: TypeID(2v1) <- Get(r45)
0x5de11e:
  557 r45: TypeID(2v1) <- Const { value: 80, size: 8 }
  558 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  559 r26: TypeID(2v1) <- Get(r45)
0x5de122:
  560 r45: TypeID(2v1) <- Const { value: 2, size: 8 }
  561 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  562 r17: TypeID(2v1) <- Get(r45)
0x5de126:
  563 r24: TypeID(2v1) <- Get(r26)
0x5de129:
  564 r14: TypeID(2v1) <- Get(r15)
0x5de12c:
  565 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  566 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  567 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x5de131:
  568 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  569 r46: TypeID(2v1) <- Void
  570 r46: TypeID(2v1) <- Get(r14)
  571 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  572 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  573 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  574 r2: TypeID(2v1) <- Undefined
  575 r3: TypeID(2v1) <- Undefined
  576 r4: TypeID(2v1) <- Undefined
  577 r5: TypeID(2v1) <- Undefined
  578 r6: TypeID(2v1) <- Undefined
  579 r7: TypeID(2v1) <- Undefined
  580 r8: TypeID(2v1) <- Undefined
  581 r9: TypeID(2v1) <- Undefined
  582 r10: TypeID(2v1) <- Undefined
  583 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de136:
  584 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  585 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  586 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  587 r15: TypeID(2v1) <- Get(r45)
0x5de13b:
  588 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  589 r10: TypeID(2v1) <- OverflowOf(r16)
  590 r2: TypeID(2v1) <- CarryOf(r16)
  591 r6: TypeID(2v1) <- SignOf(r16)
  592 r5: TypeID(2v1) <- IsZero(r16)
  593 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  594 r3: TypeID(2v1) <- Parity(r47)
0x5de13e:
  595 r45: TypeID(2v1) <- SetJumpCondition(r5)
  596 r45: TypeID(2v1) <- Control(JmpIf(1161))
0x5de144:
  597 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  598 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  599 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  600 r22: TypeID(2v1) <- Get(r45)
0x5de149:
  601 r45: TypeID(2v1) <- Const { value: 3, size: 8 }
  602 r45: TypeID(2v1) <- Arith(Add, r45, r25)
  603 r17: TypeID(2v1) <- Get(r45)
0x5de14d:
  604 r45: TypeID(2v1) <- Const { value: 120, size: 8 }
  605 r45: TypeID(2v1) <- Arith(Add, r45, r27)
  606 r26: TypeID(2v1) <- Get(r45)
0x5de151:
  607 r17: TypeID(2v1) <- Arith(Sub, r17, r22)
  608 r10: TypeID(2v1) <- OverflowOf(r17)
  609 r2: TypeID(2v1) <- CarryOf(r17)
  610 r6: TypeID(2v1) <- SignOf(r17)
  611 r5: TypeID(2v1) <- IsZero(r17)
  612 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  613 r3: TypeID(2v1) <- Parity(r47)
0x5de154:
  614 r45: TypeID(2v1) <- SetJumpCondition(r5)
  615 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5de15a:
  616 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  617 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  618 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  619 r27: TypeID(2v1) <- Get(r45)
0x5de15e:
  620 r24: TypeID(2v1) <- Get(r26)
0x5de161:
  621 r14: TypeID(2v1) <- Get(r27)
0x5de164:
  622 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  623 r46: TypeID(2v1) <- Void
  624 r46: TypeID(2v1) <- Get(r14)
  625 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  626 r48: TypeID(340440v1) <- Const { value: 4199136, size: 8 }
  627 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  628 r2: TypeID(2v1) <- Undefined
  629 r3: TypeID(2v1) <- Undefined
  630 r4: TypeID(2v1) <- Undefined
  631 r5: TypeID(2v1) <- Undefined
  632 r6: TypeID(2v1) <- Undefined
  633 r7: TypeID(2v1) <- Undefined
  634 r8: TypeID(2v1) <- Undefined
  635 r9: TypeID(2v1) <- Undefined
  636 r10: TypeID(2v1) <- Undefined
  637 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5de169:
  638 r16: TypeID(2v1) <- Arith(Sub, r16, r11)
  639 r10: TypeID(2v1) <- OverflowOf(r16)
  640 r2: TypeID(2v1) <- CarryOf(r16)
  641 r6: TypeID(2v1) <- SignOf(r16)
  642 r5: TypeID(2v1) <- IsZero(r16)
  643 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  644 r3: TypeID(2v1) <- Parity(r47)
0x5de16c:
  645 r45: TypeID(2v1) <- Not(r5)
  646 r46: TypeID(2v1) <- SetJumpCondition(r45)
  647 r46: TypeID(2v1) <- Control(JmpIf(463))
0x5de172:
  648 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  649 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  650 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  651 r14: TypeID(2v1) <- Get(r45)
0x5de176:
  652 r19: TypeID(2v1) <- Get(r11)
0x5de179:
  653 r15: TypeID(2v1) <- Get(r27)
0x5de17c:
  654 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  655 r48: TypeID(2v1) <- Void
  656 r48: TypeID(2v1) <- Get(r14)
  657 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  658 r49: TypeID(2v1) <- Void
  659 r49: TypeID(2v1) <- Get(r15)
  660 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  661 r50: TypeID(2v1) <- Void
  662 r50: TypeID(2v1) <- Get(r19)
  663 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  664 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
  665 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
  666 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  667 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
  668 r2: TypeID(2v1) <- Undefined
  669 r3: TypeID(2v1) <- Undefined
  670 r4: TypeID(2v1) <- Undefined
  671 r5: TypeID(2v1) <- Undefined
  672 r6: TypeID(2v1) <- Undefined
  673 r7: TypeID(2v1) <- Undefined
  674 r8: TypeID(2v1) <- Undefined
  675 r9: TypeID(2v1) <- Undefined
  676 r10: TypeID(2v1) <- Undefined
  677 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de181:
  678 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  679 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  680 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  681 r6: TypeID(2v1) <- SignOf(r46)
  682 r5: TypeID(2v1) <- IsZero(r46)
  683 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  684 r3: TypeID(2v1) <- Parity(r46)
  685 r2: TypeID(2v1) <- False
  686 r10: TypeID(2v1) <- False
0x5de183:
  687 r45: TypeID(2v1) <- Not(r5)
  688 r46: TypeID(2v1) <- SetJumpCondition(r45)
  689 r46: TypeID(2v1) <- Control(JmpIf(463))
0x5de189:
  690 r25: TypeID(2v1) <- Get(r26)
0x5de18c:
  691 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  692 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  693 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  694 r27: TypeID(2v1) <- Get(r45)
0x5de191:
  695 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  696 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  697 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  698 r20: TypeID(2v1) <- Get(r45)
0x5de196:
  699 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  700 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  701 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  702 r26: TypeID(2v1) <- Get(r45)
0x5de19b:
  703 r45: TypeID(2v1) <- Control(Jmp(759))
0x5de1a0:
  704 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  705 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  706 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  707 r14: TypeID(2v1) <- Get(r45)
0x5de1a4:
  708 r19: TypeID(2v1) <- Get(r11)
0x5de1a7:
  709 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  710 r48: TypeID(2v1) <- Void
  711 r48: TypeID(2v1) <- Get(r14)
  712 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  713 r49: TypeID(2v1) <- Void
  714 r49: TypeID(2v1) <- Get(r15)
  715 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  716 r50: TypeID(2v1) <- Void
  717 r50: TypeID(2v1) <- Get(r19)
  718 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  719 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
  720 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
  721 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
  722 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
  723 r2: TypeID(2v1) <- Undefined
  724 r3: TypeID(2v1) <- Undefined
  725 r4: TypeID(2v1) <- Undefined
  726 r5: TypeID(2v1) <- Undefined
  727 r6: TypeID(2v1) <- Undefined
  728 r7: TypeID(2v1) <- Undefined
  729 r8: TypeID(2v1) <- Undefined
  730 r9: TypeID(2v1) <- Undefined
  731 r10: TypeID(2v1) <- Undefined
  732 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de1ac:
  733 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  734 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  735 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  736 r6: TypeID(2v1) <- SignOf(r46)
  737 r5: TypeID(2v1) <- IsZero(r46)
  738 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  739 r3: TypeID(2v1) <- Parity(r46)
  740 r2: TypeID(2v1) <- False
  741 r10: TypeID(2v1) <- False
0x5de1ae:
  742 r45: TypeID(2v1) <- Not(r5)
  743 r46: TypeID(2v1) <- SetJumpCondition(r45)
  744 r46: TypeID(2v1) <- Control(JmpIf(509))
0x5de1b4:
  745 r25: TypeID(2v1) <- Get(r24)
0x5de1b7:
  746 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  747 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  748 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  749 r27: TypeID(2v1) <- Get(r45)
0x5de1bc:
  750 r24: TypeID(2v1) <- Get(r26)
0x5de1bf:
  751 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  752 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  753 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  754 r20: TypeID(2v1) <- Get(r45)
0x5de1c4:
  755 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  756 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  757 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  758 r26: TypeID(2v1) <- Get(r45)
0x5de1c9:
  759 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  760 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  761 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  762 r11: TypeID(2v1) <- Get(r45)
0x5de1ce:
  763 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  764 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  765 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
  766 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  767 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de1d3:
  768 r24: TypeID(2v1) <- Arith(Sub, r24, r26)
  769 r10: TypeID(2v1) <- OverflowOf(r24)
  770 r2: TypeID(2v1) <- CarryOf(r24)
  771 r6: TypeID(2v1) <- SignOf(r24)
  772 r5: TypeID(2v1) <- IsZero(r24)
  773 r47: TypeID(2v1) <- Part { src: r24, offset: 0, size: 1 }
  774 r3: TypeID(2v1) <- Parity(r47)
0x5de1d6:
  775 r45: TypeID(2v1) <- SetJumpCondition(r5)
  776 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5de1dc:
  777 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  778 r46: TypeID(2v1) <- Arith(Add, r46, r25)
  779 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  780 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  781 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  782 r10: TypeID(2v1) <- OverflowOf(r45)
  783 r2: TypeID(2v1) <- CarryOf(r45)
  784 r6: TypeID(2v1) <- SignOf(r45)
  785 r5: TypeID(2v1) <- IsZero(r45)
  786 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  787 r3: TypeID(2v1) <- Parity(r48)
0x5de1e1:
  788 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de1e5:
  789 r45: TypeID(2v1) <- Not(r5)
  790 r46: TypeID(2v1) <- SetJumpCondition(r45)
  791 r46: TypeID(2v1) <- Control(JmpIf(1043))
0x5de1eb:
  792 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  793 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  794 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  795 r6: TypeID(2v1) <- SignOf(r46)
  796 r5: TypeID(2v1) <- IsZero(r46)
  797 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  798 r3: TypeID(2v1) <- Parity(r46)
  799 r2: TypeID(2v1) <- False
  800 r10: TypeID(2v1) <- False
0x5de1ee:
  801 r45: TypeID(2v1) <- SetJumpCondition(r5)
  802 r45: TypeID(2v1) <- Control(JmpIf(1483))
0x5de1f4:
  803 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
  804 r45: TypeID(2v1) <- Arith(Add, r45, r20)
  805 r14: TypeID(2v1) <- Get(r45)
0x5de1f8:
  806 r45: TypeID(2v1) <- Const { value: 46, size: 4 }
  807 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  808 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de1fd:
  809 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  810 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  811 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r14 }
0x5de201:
  812 r47: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  813 r47: TypeID(2v1) <- Void
  814 r47: TypeID(2v1) <- Get(r14)
  815 r48: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  816 r48: TypeID(2v1) <- Void
  817 r48: TypeID(2v1) <- Get(r15)
  818 r48: TypeID(2v1) <- Part { src: r48, offset: 0, size: 4 }
  819 r49: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  820 r49: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r49) }
  821 r50: TypeID(340442v1) <- Const { value: 4199040, size: 8 }
  822 r49: TypeID(2v1) <- Call { callee: r50, first_arg: Some(r49) }
  823 r2: TypeID(2v1) <- Undefined
  824 r3: TypeID(2v1) <- Undefined
  825 r4: TypeID(2v1) <- Undefined
  826 r5: TypeID(2v1) <- Undefined
  827 r6: TypeID(2v1) <- Undefined
  828 r7: TypeID(2v1) <- Undefined
  829 r8: TypeID(2v1) <- Undefined
  830 r9: TypeID(2v1) <- Undefined
  831 r10: TypeID(2v1) <- Undefined
  832 r16: TypeID(2v1) <- Part { src: r49, offset: 0, size: 8 }
0x5de206:
  833 r20: TypeID(2v1) <- Get(r16)
0x5de209:
  834 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  835 r6: TypeID(2v1) <- SignOf(r16)
  836 r5: TypeID(2v1) <- IsZero(r16)
  837 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  838 r3: TypeID(2v1) <- Parity(r16)
  839 r2: TypeID(2v1) <- False
  840 r10: TypeID(2v1) <- False
0x5de20c:
  841 r45: TypeID(2v1) <- SetJumpCondition(r5)
  842 r45: TypeID(2v1) <- Control(JmpIf(1235))
0x5de212:
  843 r11: TypeID(2v1) <- Get(r16)
0x5de215:
  844 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  845 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  846 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  847 r23: TypeID(2v1) <- Get(r45)
0x5de219:
  848 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  849 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  850 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  851 r16: TypeID(2v1) <- Get(r45)
0x5de21e:
  852 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  853 r27: TypeID(2v1) <- Arith(Add, r27, r46)
  854 r27: TypeID(2v1) <- Get(r27)
  855 r10: TypeID(2v1) <- OverflowOf(r27)
  856 r2: TypeID(2v1) <- CarryOf(r27)
  857 r6: TypeID(2v1) <- SignOf(r27)
  858 r5: TypeID(2v1) <- IsZero(r27)
  859 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  860 r3: TypeID(2v1) <- Parity(r47)
0x5de222:
  861 r11: TypeID(2v1) <- Arith(Sub, r11, r23)
  862 r11: TypeID(2v1) <- Get(r11)
  863 r10: TypeID(2v1) <- OverflowOf(r11)
  864 r2: TypeID(2v1) <- CarryOf(r11)
  865 r6: TypeID(2v1) <- SignOf(r11)
  866 r5: TypeID(2v1) <- IsZero(r11)
  867 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  868 r3: TypeID(2v1) <- Parity(r47)
0x5de225:
  869 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  870 r47: TypeID(2v1) <- Arith(Add, r47, r16)
  871 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  872 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
  873 r10: TypeID(2v1) <- OverflowOf(r27)
  874 r2: TypeID(2v1) <- CarryOf(r27)
  875 r6: TypeID(2v1) <- SignOf(r27)
  876 r5: TypeID(2v1) <- IsZero(r27)
  877 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  878 r3: TypeID(2v1) <- Parity(r48)
0x5de228:
  879 r45: TypeID(2v1) <- Not(r2)
  880 r46: TypeID(2v1) <- SetJumpCondition(r45)
  881 r46: TypeID(2v1) <- Control(JmpIf(1282))
0x5de22e:
  882 r26: TypeID(2v1) <- Get(r25)
0x5de231:
  883 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  884 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  885 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  886 r21: TypeID(2v1) <- Get(r45)
0x5de235:
  887 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  888 r46: TypeID(2v1) <- Arith(Add, r46, r21)
  889 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  890 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  891 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  892 r10: TypeID(2v1) <- OverflowOf(r45)
  893 r2: TypeID(2v1) <- CarryOf(r45)
  894 r6: TypeID(2v1) <- SignOf(r45)
  895 r5: TypeID(2v1) <- IsZero(r45)
  896 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  897 r3: TypeID(2v1) <- Parity(r48)
0x5de239:
  898 r45: TypeID(2v1) <- Not(r5)
  899 r46: TypeID(2v1) <- SetJumpCondition(r45)
  900 r46: TypeID(2v1) <- Control(JmpIf(197))
0x5de23f:
  901 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  902 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  903 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  904 r14: TypeID(2v1) <- Get(r45)
0x5de243:
  905 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  906 r48: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  907 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  908 r49: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  909 r15: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  910 r10: TypeID(2v1) <- False
  911 r2: TypeID(2v1) <- False
  912 r6: TypeID(2v1) <- SignOf(r46)
  913 r5: TypeID(2v1) <- IsZero(r46)
  914 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  915 r3: TypeID(2v1) <- Parity(r50)
0x5de245:
  916 r45: TypeID(2v1) <- Const { value: 10, size: 4 }
  917 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  918 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de24a:
  919 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  920 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  921 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de24f:
  922 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  923 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  924 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  925 r49: TypeID(340432v1) <- Const { value: 6451424, size: 8 }
  926 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  927 r2: TypeID(2v1) <- Undefined
  928 r3: TypeID(2v1) <- Undefined
  929 r4: TypeID(2v1) <- Undefined
  930 r5: TypeID(2v1) <- Undefined
  931 r6: TypeID(2v1) <- Undefined
  932 r7: TypeID(2v1) <- Undefined
  933 r8: TypeID(2v1) <- Undefined
  934 r9: TypeID(2v1) <- Undefined
  935 r10: TypeID(2v1) <- Undefined
  936 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x5de254:
  937 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  938 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  939 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  940 r20: TypeID(2v1) <- Get(r45)
0x5de259:
  941 r46: TypeID(2v1) <- Const { value: -1, size: 8 }
  942 r16: TypeID(2v1) <- Arith(Sub, r16, r46)
  943 r10: TypeID(2v1) <- OverflowOf(r16)
  944 r2: TypeID(2v1) <- CarryOf(r16)
  945 r6: TypeID(2v1) <- SignOf(r16)
  946 r5: TypeID(2v1) <- IsZero(r16)
  947 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  948 r3: TypeID(2v1) <- Parity(r47)
0x5de25d:
  949 r17: TypeID(2v1) <- Get(r16)
0x5de260:
  950 r45: TypeID(2v1) <- SetJumpCondition(r5)
  951 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5de266:
  952 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  953 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  954 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  955 r11: TypeID(2v1) <- Get(r45)
0x5de26a:
  956 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  957 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  958 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de26e:
  959 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  960 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  961 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  962 r47: TypeID(2v1) <- Const { value: 0, size: 1 }
  963 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  964 r10: TypeID(2v1) <- OverflowOf(r45)
  965 r2: TypeID(2v1) <- CarryOf(r45)
  966 r6: TypeID(2v1) <- SignOf(r45)
  967 r5: TypeID(2v1) <- IsZero(r45)
  968 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  969 r3: TypeID(2v1) <- Parity(r48)
0x5de272:
  970 r45: TypeID(2v1) <- Not(r5)
  971 r46: TypeID(2v1) <- SetJumpCondition(r45)
  972 r46: TypeID(2v1) <- Control(JmpExtIf(4206915))
0x5de278:
  973 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  974 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  975 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  976 r18: TypeID(2v1) <- Get(r45)
0x5de27d:
  977 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  978 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  979 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  980 r26: TypeID(2v1) <- Get(r45)
0x5de282:
  981 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
  982 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  983 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  984 r14: TypeID(2v1) <- Get(r45)
0x5de287:
  985 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  986 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  987 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  988 r19: TypeID(2v1) <- Get(r45)
0x5de28a:
  989 r15: TypeID(2v1) <- Get(r26)
0x5de28d:
  990 r18: TypeID(2v1) <- Get(r16)
0x5de290:
  991 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  992 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  993 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  994 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  995 r47: TypeID(2v1) <- Const { value: 8, size: 8 }
  996 r47: TypeID(2v1) <- Arith(Add, r47, r11)
  997 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
  998 r46: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  999 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
 1000 r2: TypeID(2v1) <- Undefined
 1001 r3: TypeID(2v1) <- Undefined
 1002 r4: TypeID(2v1) <- Undefined
 1003 r5: TypeID(2v1) <- Undefined
 1004 r6: TypeID(2v1) <- Undefined
 1005 r7: TypeID(2v1) <- Undefined
 1006 r8: TypeID(2v1) <- Undefined
 1007 r9: TypeID(2v1) <- Undefined
 1008 r10: TypeID(2v1) <- Undefined
 1009 r45: TypeID(2v1) <- Get(r16)
0x5de293:
 1010 r25: TypeID(2v1) <- Get(r16)
0x5de296:
 1011 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
 1012 r6: TypeID(2v1) <- SignOf(r16)
 1013 r5: TypeID(2v1) <- IsZero(r16)
 1014 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
 1015 r3: TypeID(2v1) <- Parity(r16)
 1016 r2: TypeID(2v1) <- False
 1017 r10: TypeID(2v1) <- False
0x5de299:
 1018 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1019 r45: TypeID(2v1) <- Control(JmpIf(1203))
0x5de29f:
 1020 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1021 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1022 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1023 r20: TypeID(2v1) <- Get(r45)
0x5de2a3:
 1024 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
 1025 r46: TypeID(2v1) <- Arith(Add, r46, r25)
 1026 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1027 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
 1028 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
 1029 r10: TypeID(2v1) <- OverflowOf(r45)
 1030 r2: TypeID(2v1) <- CarryOf(r45)
 1031 r6: TypeID(2v1) <- SignOf(r45)
 1032 r5: TypeID(2v1) <- IsZero(r45)
 1033 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
 1034 r3: TypeID(2v1) <- Parity(r48)
0x5de2a8:
 1035 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1036 r46: TypeID(2v1) <- Arith(Add, r46, r26)
 1037 r47: TypeID(2v1) <- ArithK(Mul, r27, 8)
 1038 r46: TypeID(2v1) <- Arith(Add, r46, r47)
 1039 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r17 }
0x5de2ac:
 1040 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
0x5de2b0:
 1041 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1042 r45: TypeID(2v1) <- Control(JmpIf(792))
0x5de2b6:
 1043 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1044 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1045 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1046 r17: TypeID(2v1) <- Get(r45)
0x5de2bb:
 1047 r46: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1048 r48: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
 1049 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1050 r6: TypeID(2v1) <- SignOf(r46)
 1051 r5: TypeID(2v1) <- IsZero(r46)
 1052 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1053 r3: TypeID(2v1) <- Parity(r46)
 1054 r2: TypeID(2v1) <- False
 1055 r10: TypeID(2v1) <- False
0x5de2be:
 1056 r45: TypeID(2v1) <- Not(r5)
 1057 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1058 r46: TypeID(2v1) <- Control(JmpIf(1203))
0x5de2c0:
 1059 r45: TypeID(2v1) <- Const { value: 1, size: 8 }
 1060 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1061 r20: TypeID(2v1) <- Get(r45)
0x5de2c4:
 1062 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1063 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1064 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1065 r27: TypeID(2v1) <- Get(r45)
0x5de2c9:
 1066 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1067 r46: TypeID(2v1) <- Arith(Add, r46, r27)
 1068 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de2cc:
 1069 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1070 r6: TypeID(2v1) <- SignOf(r17)
 1071 r5: TypeID(2v1) <- IsZero(r17)
 1072 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1073 r3: TypeID(2v1) <- Parity(r17)
 1074 r2: TypeID(2v1) <- False
 1075 r10: TypeID(2v1) <- False
0x5de2cf:
 1076 r45: TypeID(2v1) <- Not(r5)
 1077 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1078 r46: TypeID(2v1) <- Control(JmpIf(1295))
0x5de2d5:
 1079 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1080 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1081 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1082 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1083 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1084 r10: TypeID(2v1) <- False
 1085 r2: TypeID(2v1) <- False
 1086 r6: TypeID(2v1) <- SignOf(r46)
 1087 r5: TypeID(2v1) <- IsZero(r46)
 1088 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1089 r3: TypeID(2v1) <- Parity(r50)
0x5de2d7:
 1090 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1091 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1092 r12: TypeID(2v1) <- Get(r12)
 1093 r10: TypeID(2v1) <- OverflowOf(r12)
 1094 r2: TypeID(2v1) <- CarryOf(r12)
 1095 r6: TypeID(2v1) <- SignOf(r12)
 1096 r5: TypeID(2v1) <- IsZero(r12)
 1097 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1098 r3: TypeID(2v1) <- Parity(r47)
0x5de2db:
 1099 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1100 r17: TypeID(2v1) <- Get(r45)
 1101 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dc:
 1102 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1103 r11: TypeID(2v1) <- Get(r45)
 1104 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2dd:
 1105 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1106 r24: TypeID(2v1) <- Get(r45)
 1107 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2df:
 1108 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1109 r25: TypeID(2v1) <- Get(r45)
 1110 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e1:
 1111 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1112 r26: TypeID(2v1) <- Get(r45)
 1113 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e3:
 1114 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1115 r27: TypeID(2v1) <- Get(r45)
 1116 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de2e5:
 1117 r45: TypeID(2v1) <- SetReturnValue(r16)
 1118 r45: TypeID(2v1) <- Control(Ret)
0x5de2f0:
 1119 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1120 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1121 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1122 r14: TypeID(2v1) <- Get(r45)
0x5de2f4:
 1123 r19: TypeID(2v1) <- Get(r11)
0x5de2f7:
 1124 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1125 r48: TypeID(2v1) <- Void
 1126 r48: TypeID(2v1) <- Get(r14)
 1127 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1128 r49: TypeID(2v1) <- Void
 1129 r49: TypeID(2v1) <- Get(r15)
 1130 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1131 r50: TypeID(2v1) <- Void
 1132 r50: TypeID(2v1) <- Get(r19)
 1133 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1134 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
 1135 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
 1136 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1137 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
 1138 r2: TypeID(2v1) <- Undefined
 1139 r3: TypeID(2v1) <- Undefined
 1140 r4: TypeID(2v1) <- Undefined
 1141 r5: TypeID(2v1) <- Undefined
 1142 r6: TypeID(2v1) <- Undefined
 1143 r7: TypeID(2v1) <- Undefined
 1144 r8: TypeID(2v1) <- Undefined
 1145 r9: TypeID(2v1) <- Undefined
 1146 r10: TypeID(2v1) <- Undefined
 1147 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de2fc:
 1148 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1149 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1150 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1151 r6: TypeID(2v1) <- SignOf(r46)
 1152 r5: TypeID(2v1) <- IsZero(r46)
 1153 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1154 r3: TypeID(2v1) <- Parity(r46)
 1155 r2: TypeID(2v1) <- False
 1156 r10: TypeID(2v1) <- False
0x5de2fe:
 1157 r45: TypeID(2v1) <- Not(r5)
 1158 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1159 r46: TypeID(2v1) <- Control(JmpIf(553))
0x5de304:
 1160 r45: TypeID(2v1) <- Control(Jmp(745))
0x5de310:
 1161 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1162 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1163 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1164 r14: TypeID(2v1) <- Get(r45)
0x5de314:
 1165 r19: TypeID(2v1) <- Get(r11)
0x5de317:
 1166 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1167 r48: TypeID(2v1) <- Void
 1168 r48: TypeID(2v1) <- Get(r14)
 1169 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1170 r49: TypeID(2v1) <- Void
 1171 r49: TypeID(2v1) <- Get(r15)
 1172 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1173 r50: TypeID(2v1) <- Void
 1174 r50: TypeID(2v1) <- Get(r19)
 1175 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1176 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
 1177 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
 1178 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1179 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
 1180 r2: TypeID(2v1) <- Undefined
 1181 r3: TypeID(2v1) <- Undefined
 1182 r4: TypeID(2v1) <- Undefined
 1183 r5: TypeID(2v1) <- Undefined
 1184 r6: TypeID(2v1) <- Undefined
 1185 r7: TypeID(2v1) <- Undefined
 1186 r8: TypeID(2v1) <- Undefined
 1187 r9: TypeID(2v1) <- Undefined
 1188 r10: TypeID(2v1) <- Undefined
 1189 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de31c:
 1190 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1191 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1192 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1193 r6: TypeID(2v1) <- SignOf(r46)
 1194 r5: TypeID(2v1) <- IsZero(r46)
 1195 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1196 r3: TypeID(2v1) <- Parity(r46)
 1197 r2: TypeID(2v1) <- False
 1198 r10: TypeID(2v1) <- False
0x5de31e:
 1199 r45: TypeID(2v1) <- Not(r5)
 1200 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1201 r46: TypeID(2v1) <- Control(JmpIf(597))
0x5de324:
 1202 r45: TypeID(2v1) <- Control(Jmp(745))
0x5de330:
 1203 r46: TypeID(2v1) <- Const { value: 88, size: 8 }
 1204 r12: TypeID(2v1) <- Arith(Add, r12, r46)
 1205 r12: TypeID(2v1) <- Get(r12)
 1206 r10: TypeID(2v1) <- OverflowOf(r12)
 1207 r2: TypeID(2v1) <- CarryOf(r12)
 1208 r6: TypeID(2v1) <- SignOf(r12)
 1209 r5: TypeID(2v1) <- IsZero(r12)
 1210 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
 1211 r3: TypeID(2v1) <- Parity(r47)
0x5de334:
 1212 r45: TypeID(2v1) <- Const { value: 2, size: 4 }
 1213 r46: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1214 r16: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5de339:
 1215 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1216 r17: TypeID(2v1) <- Get(r45)
 1217 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33a:
 1218 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1219 r11: TypeID(2v1) <- Get(r45)
 1220 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33b:
 1221 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1222 r24: TypeID(2v1) <- Get(r45)
 1223 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33d:
 1224 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1225 r25: TypeID(2v1) <- Get(r45)
 1226 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de33f:
 1227 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1228 r26: TypeID(2v1) <- Get(r45)
 1229 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de341:
 1230 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
 1231 r27: TypeID(2v1) <- Get(r45)
 1232 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5de343:
 1233 r45: TypeID(2v1) <- SetReturnValue(r16)
 1234 r45: TypeID(2v1) <- Control(Ret)
0x5de348:
 1235 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1236 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1237 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1238 r24: TypeID(2v1) <- Get(r45)
0x5de34c:
 1239 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
 1240 r27: TypeID(2v1) <- Arith(Add, r27, r46)
 1241 r27: TypeID(2v1) <- Get(r27)
 1242 r10: TypeID(2v1) <- OverflowOf(r27)
 1243 r2: TypeID(2v1) <- CarryOf(r27)
 1244 r6: TypeID(2v1) <- SignOf(r27)
 1245 r5: TypeID(2v1) <- IsZero(r27)
 1246 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1247 r3: TypeID(2v1) <- Parity(r47)
0x5de350:
 1248 r14: TypeID(2v1) <- Get(r24)
0x5de353:
 1249 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1250 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1251 r2: TypeID(2v1) <- Undefined
 1252 r3: TypeID(2v1) <- Undefined
 1253 r4: TypeID(2v1) <- Undefined
 1254 r5: TypeID(2v1) <- Undefined
 1255 r6: TypeID(2v1) <- Undefined
 1256 r7: TypeID(2v1) <- Undefined
 1257 r8: TypeID(2v1) <- Undefined
 1258 r9: TypeID(2v1) <- Undefined
 1259 r10: TypeID(2v1) <- Undefined
0x5de358:
 1260 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
 1261 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1262 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1263 r19: TypeID(2v1) <- Get(r45)
0x5de35d:
 1264 r11: TypeID(2v1) <- Get(r16)
0x5de360:
 1265 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1266 r45: TypeID(2v1) <- Arith(Add, r45, r24)
 1267 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1268 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1269 r20: TypeID(2v1) <- Get(r45)
0x5de364:
 1270 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
 1271 r47: TypeID(2v1) <- Arith(Add, r47, r19)
 1272 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
 1273 r27: TypeID(2v1) <- Arith(Sub, r27, r46)
 1274 r10: TypeID(2v1) <- OverflowOf(r27)
 1275 r2: TypeID(2v1) <- CarryOf(r27)
 1276 r6: TypeID(2v1) <- SignOf(r27)
 1277 r5: TypeID(2v1) <- IsZero(r27)
 1278 r48: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
 1279 r3: TypeID(2v1) <- Parity(r48)
0x5de367:
 1280 r45: TypeID(2v1) <- SetJumpCondition(r2)
 1281 r45: TypeID(2v1) <- Control(JmpIf(882))
0x5de36d:
 1282 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1283 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1284 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1285 r17: TypeID(2v1) <- Get(r45)
0x5de372:
 1286 r17: TypeID(2v1) <- Arith(BitAnd, r17, r17)
 1287 r6: TypeID(2v1) <- SignOf(r17)
 1288 r5: TypeID(2v1) <- IsZero(r17)
 1289 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
 1290 r3: TypeID(2v1) <- Parity(r17)
 1291 r2: TypeID(2v1) <- False
 1292 r10: TypeID(2v1) <- False
0x5de375:
 1293 r45: TypeID(2v1) <- SetJumpCondition(r5)
 1294 r45: TypeID(2v1) <- Control(JmpIf(1079))
0x5de37b:
 1295 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1296 r46: TypeID(2v1) <- Arith(Add, r46, r17)
 1297 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r25 }
0x5de37e:
 1298 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1299 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1300 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
 1301 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
 1302 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
 1303 r10: TypeID(2v1) <- False
 1304 r2: TypeID(2v1) <- False
 1305 r6: TypeID(2v1) <- SignOf(r46)
 1306 r5: TypeID(2v1) <- IsZero(r46)
 1307 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1308 r3: TypeID(2v1) <- Parity(r50)
0x5de380:
 1309 r45: TypeID(2v1) <- Control(Jmp(1090))
0x5de388:
 1310 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1311 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1312 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1313 r14: TypeID(2v1) <- Get(r45)
0x5de38c:
 1314 r19: TypeID(2v1) <- Get(r11)
0x5de38f:
 1315 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1316 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1317 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de394:
 1318 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1319 r48: TypeID(2v1) <- Void
 1320 r48: TypeID(2v1) <- Get(r14)
 1321 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1322 r49: TypeID(2v1) <- Void
 1323 r49: TypeID(2v1) <- Get(r15)
 1324 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1325 r50: TypeID(2v1) <- Void
 1326 r50: TypeID(2v1) <- Get(r19)
 1327 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1328 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
 1329 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
 1330 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1331 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
 1332 r2: TypeID(2v1) <- Undefined
 1333 r3: TypeID(2v1) <- Undefined
 1334 r4: TypeID(2v1) <- Undefined
 1335 r5: TypeID(2v1) <- Undefined
 1336 r6: TypeID(2v1) <- Undefined
 1337 r7: TypeID(2v1) <- Undefined
 1338 r8: TypeID(2v1) <- Undefined
 1339 r9: TypeID(2v1) <- Undefined
 1340 r10: TypeID(2v1) <- Undefined
 1341 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de399:
 1342 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1343 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1344 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1345 r20: TypeID(2v1) <- Get(r45)
0x5de39e:
 1346 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1347 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1348 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1349 r6: TypeID(2v1) <- SignOf(r46)
 1350 r5: TypeID(2v1) <- IsZero(r46)
 1351 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1352 r3: TypeID(2v1) <- Parity(r46)
 1353 r2: TypeID(2v1) <- False
 1354 r10: TypeID(2v1) <- False
0x5de3a0:
 1355 r45: TypeID(2v1) <- Not(r5)
 1356 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1357 r46: TypeID(2v1) <- Control(JmpIf(421))
0x5de3a6:
 1358 r45: TypeID(2v1) <- Control(Jmp(759))
0x5de3b0:
 1359 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1360 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1361 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1362 r14: TypeID(2v1) <- Get(r45)
0x5de3b4:
 1363 r19: TypeID(2v1) <- Get(r11)
0x5de3b7:
 1364 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1365 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1366 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3bc:
 1367 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1368 r48: TypeID(2v1) <- Void
 1369 r48: TypeID(2v1) <- Get(r14)
 1370 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1371 r49: TypeID(2v1) <- Void
 1372 r49: TypeID(2v1) <- Get(r15)
 1373 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1374 r50: TypeID(2v1) <- Void
 1375 r50: TypeID(2v1) <- Get(r19)
 1376 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1377 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
 1378 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
 1379 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1380 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
 1381 r2: TypeID(2v1) <- Undefined
 1382 r3: TypeID(2v1) <- Undefined
 1383 r4: TypeID(2v1) <- Undefined
 1384 r5: TypeID(2v1) <- Undefined
 1385 r6: TypeID(2v1) <- Undefined
 1386 r7: TypeID(2v1) <- Undefined
 1387 r8: TypeID(2v1) <- Undefined
 1388 r9: TypeID(2v1) <- Undefined
 1389 r10: TypeID(2v1) <- Undefined
 1390 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de3c1:
 1391 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1392 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1393 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1394 r20: TypeID(2v1) <- Get(r45)
0x5de3c6:
 1395 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1396 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1397 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1398 r6: TypeID(2v1) <- SignOf(r46)
 1399 r5: TypeID(2v1) <- IsZero(r46)
 1400 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1401 r3: TypeID(2v1) <- Parity(r46)
 1402 r2: TypeID(2v1) <- False
 1403 r10: TypeID(2v1) <- False
0x5de3c8:
 1404 r45: TypeID(2v1) <- Not(r5)
 1405 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1406 r46: TypeID(2v1) <- Control(JmpIf(358))
0x5de3ce:
 1407 r45: TypeID(2v1) <- Control(Jmp(759))
0x5de3d3:
 1408 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1409 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1410 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1411 r14: TypeID(2v1) <- Get(r45)
0x5de3d7:
 1412 r19: TypeID(2v1) <- Get(r11)
0x5de3da:
 1413 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1414 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1415 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r20 }
0x5de3df:
 1416 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
 1417 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1418 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r24 }
0x5de3e4:
 1419 r48: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
 1420 r48: TypeID(2v1) <- Void
 1421 r48: TypeID(2v1) <- Get(r14)
 1422 r49: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
 1423 r49: TypeID(2v1) <- Void
 1424 r49: TypeID(2v1) <- Get(r15)
 1425 r50: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
 1426 r50: TypeID(2v1) <- Void
 1427 r50: TypeID(2v1) <- Get(r19)
 1428 r51: TypeID(2v1) <- CArg { value: r47, next_arg: None }
 1429 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
 1430 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
 1431 r52: TypeID(340436v1) <- Const { value: 4199232, size: 8 }
 1432 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
 1433 r2: TypeID(2v1) <- Undefined
 1434 r3: TypeID(2v1) <- Undefined
 1435 r4: TypeID(2v1) <- Undefined
 1436 r5: TypeID(2v1) <- Undefined
 1437 r6: TypeID(2v1) <- Undefined
 1438 r7: TypeID(2v1) <- Undefined
 1439 r8: TypeID(2v1) <- Undefined
 1440 r9: TypeID(2v1) <- Undefined
 1441 r10: TypeID(2v1) <- Undefined
 1442 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x5de3e9:
 1443 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
 1444 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1445 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1446 r20: TypeID(2v1) <- Get(r45)
0x5de3ee:
 1447 r14: TypeID(2v1) <- Get(r24)
0x5de3f1:
 1448 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1449 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
 1450 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
 1451 r6: TypeID(2v1) <- SignOf(r46)
 1452 r5: TypeID(2v1) <- IsZero(r46)
 1453 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
 1454 r3: TypeID(2v1) <- Parity(r46)
 1455 r2: TypeID(2v1) <- False
 1456 r10: TypeID(2v1) <- False
0x5de3f3:
 1457 r45: TypeID(2v1) <- Not(r5)
 1458 r46: TypeID(2v1) <- SetJumpCondition(r45)
 1459 r46: TypeID(2v1) <- Control(JmpIf(307))
0x5de3f9:
 1460 r45: TypeID(2v1) <- Control(Jmp(759))
0x5de400:
 1461 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
 1462 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1463 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1464 r27: TypeID(2v1) <- Get(r45)
0x5de404:
 1465 r14: TypeID(2v1) <- Get(r27)
0x5de407:
 1466 r46: TypeID(358627v1) <- Const { value: 4199136, size: 8 }
 1467 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
 1468 r2: TypeID(2v1) <- Undefined
 1469 r3: TypeID(2v1) <- Undefined
 1470 r4: TypeID(2v1) <- Undefined
 1471 r5: TypeID(2v1) <- Undefined
 1472 r6: TypeID(2v1) <- Undefined
 1473 r7: TypeID(2v1) <- Undefined
 1474 r8: TypeID(2v1) <- Undefined
 1475 r9: TypeID(2v1) <- Undefined
 1476 r10: TypeID(2v1) <- Undefined
0x5de40c:
 1477 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
 1478 r45: TypeID(2v1) <- Arith(Add, r45, r27)
 1479 r46: TypeID(2v1) <- ArithK(Mul, r16, 1)
 1480 r45: TypeID(2v1) <- Arith(Add, r45, r46)
 1481 r20: TypeID(2v1) <- Get(r45)
0x5de410:
 1482 r45: TypeID(2v1) <- Control(Jmp(134))
0x5de415:
 1483 r46: TypeID(2v1) <- Const { value: 72, size: 8 }
 1484 r46: TypeID(2v1) <- Arith(Add, r46, r12)
 1485 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
 1486 r17: TypeID(2v1) <- Get(r45)
0x5de41a:
 1487 r45: TypeID(2v1) <- Control(Jmp(1059))
0x5de41f:
 1488 r25: TypeID(2v1) <- Get(r26)
0x5de422:
 1489 r45: TypeID(2v1) <- Control(Jmp(1286))


ssa pre-xform:
ssa program  1588 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  5)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  3)  r18: ? <- Ancestral(AncestralName("RDX"))
         r19: ? <- Ancestral(AncestralName("R8"))
         r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
  (  2)  r64: ? <- ArithK(Add, r11, -8)
         r65: ? <- StoreMem { addr: r64, value: r26 }
  (  2)  r66: ? <- ArithK(Add, r64, -8)
         r67: ? <- StoreMem { addr: r66, value: r25 }
         r69: ? <- Const { value: 46, size: 4 }
  (  2)  r72: ? <- ArithK(Add, r66, -8)
         r73: ? <- StoreMem { addr: r72, value: r24 }
  (  2)  r74: ? <- ArithK(Add, r72, -8)
         r75: ? <- StoreMem { addr: r74, value: r23 }
  (  2)  r76: ? <- ArithK(Add, r74, -8)
         r77: ? <- StoreMem { addr: r76, value: r10 }
  (  2)  r78: ? <- ArithK(Add, r76, -8)
         r79: ? <- StoreMem { addr: r78, value: r16 }
         r81: ? <- Const { value: 88, size: 8 }
  ( 56)  r82: ? <- Arith(Sub, r78, r81)
         r90: ? <- Const { value: 64, size: 8 }
         r91: ? <- Arith(Add, r90, r82)
         r92: ? <- StoreMem { addr: r91, value: r13 }
         r94: ? <- Const { value: 32, size: 8 }
         r95: ? <- Arith(Add, r94, r82)
         r96: ? <- StoreMem { addr: r95, value: r19 }
         r97: ? <- Const { value: 0, size: 8 }
         r98: ? <- Arith(Add, r97, r82)
         r99: ? <- StoreMem { addr: r98, value: r18 }
         r100: ? <- Const { value: 24, size: 8 }
         r101: ? <- Arith(Add, r100, r82)
         r102: ? <- StoreMem { addr: r101, value: r20 }
         r110: ? <- CArg { value: r102, next_arg: None }
         r111: ? <- CArg { value: r69, next_arg: Some(r110) }
         r112: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r113: ? <- Call { callee: r112, first_arg: Some(r111) }
  (  3)  r123: ? <- Part { src: r113, offset: 0, size: 8 }
  (  2)  r125: ? <- Arith(BitAnd, r123, r123)
         r127: ? <- IsZero(r125)
         r132: ? <- SetJumpCondition(r127)
         r1516: ? <- Upsilon { value: r123, phi_ref: r1490 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1461: ? <- Const { value: 0, size: 8 }
         r1462: ? <- Arith(Add, r1461, r82)
         r1463: ? <- LoadMem { addr: r1462, size: 8 }
         r1466: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1467: ? <- Call { callee: r1466, first_arg: None }
         r1477: ? <- Const { value: 0, size: 8 }
         r1478: ? <- Arith(Add, r1477, r1463)
         r1479: ? <- ArithK(Mul, r125, 1)
         r1480: ? <- Arith(Add, r1478, r1479)
         r1517: ? <- Upsilon { value: r1480, phi_ref: r1490 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  7)  r1490: ? <- Phi
         r134: ? <- Const { value: 0, size: 8 }
         r135: ? <- Arith(Add, r134, r82)
  ( 11)  r136: ? <- LoadMem { addr: r135, size: 8 }
  (  8)  r139: ? <- Arith(Sub, r1490, r136)
         r144: ? <- IsZero(r139)
         r147: ? <- SetJumpCondition(r144)
         r1518: ? <- Upsilon { value: r136, phi_ref: r1513 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r149: ? <- Const { value: 24, size: 8 }
         r150: ? <- Arith(Add, r149, r82)
         r151: ? <- LoadMem { addr: r150, size: 8 }
         r153: ? <- Const { value: 0, size: 8 }
         r154: ? <- Arith(Add, r153, r151)
         r155: ? <- LoadMem { addr: r154, size: 8 }
         r156: ? <- Const { value: 0, size: 8 }
         r157: ? <- Arith(Sub, r155, r156)
         r161: ? <- IsZero(r157)
         r164: ? <- SetJumpCondition(r161)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r166: ? <- Const { value: 24, size: 8 }
         r167: ? <- Arith(Add, r166, r14)
  ( 10)  r168: ? <- LoadMem { addr: r167, size: 8 }
         r170: ? <- Part { src: r26, offset: 0, size: 4 }
         r171: ? <- Part { src: r26, offset: 0, size: 4 }
         r172: ? <- Arith(BitXor, r170, r171)
         r173: ? <- Part { src: r26, offset: 4, size: 4 }
  (  8)  r174: ? <- Concat { lo: r172, hi: r173 }
         r181: ? <- Const { value: 72, size: 8 }
         r182: ? <- Arith(Add, r181, r82)
         r183: ? <- StoreMem { addr: r182, value: r17 }
         r184: ? <- Const { value: 0, size: 8 }
         r185: ? <- Arith(Add, r184, r168)
         r186: ? <- LoadMem { addr: r185, size: 1 }
  (  2)  r187: ? <- Const { value: 0, size: 1 }
         r188: ? <- Arith(Sub, r186, r187)
         r192: ? <- IsZero(r188)
         r195: ? <- SetJumpCondition(r192)
         r1524: ? <- Upsilon { value: r1490, phi_ref: r1508 }
         r1525: ? <- Upsilon { value: r187, phi_ref: r1509 }
         r1526: ? <- Upsilon { value: r14, phi_ref: r1491 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  5)  r1491: ? <- Phi
         r197: ? <- Const { value: 16, size: 8 }
         r198: ? <- Arith(Add, r197, r1491)
  (  3)  r199: ? <- LoadMem { addr: r198, size: 8 }
         r201: ? <- Const { value: 16, size: 8 }
         r202: ? <- Arith(Add, r201, r82)
         r203: ? <- StoreMem { addr: r202, value: r199 }
  (  3)  r204: ? <- Arith(BitAnd, r199, r199)
         r206: ? <- IsZero(r204)
         r211: ? <- SetJumpCondition(r206)
         r1540: ? <- Upsilon { value: r136, phi_ref: r1513 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r214: ? <- Part { src: r17, offset: 0, size: 4 }
         r215: ? <- Part { src: r17, offset: 0, size: 4 }
         r216: ? <- Arith(BitXor, r214, r215)
         r217: ? <- Part { src: r17, offset: 4, size: 4 }
  (  6)  r218: ? <- Concat { lo: r216, hi: r217 }
         r225: ? <- Part { src: r204, offset: 0, size: 4 }
         r226: ? <- Const { value: 3, size: 4 }
  (  2)  r227: ? <- Arith(BitAnd, r225, r226)
         r228: ? <- Part { src: r204, offset: 4, size: 4 }
         r229: ? <- Concat { lo: r227, hi: r228 }
         r233: ? <- IsZero(r227)
         r236: ? <- SetJumpCondition(r233)
         r1541: ? <- Upsilon { value: r1490, phi_ref: r1497 }
         r1542: ? <- Upsilon { value: r168, phi_ref: r1498 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r238: ? <- Const { value: 1, size: 8 }
  (  2)  r239: ? <- Arith(Sub, r229, r238)
         r243: ? <- IsZero(r239)
         r246: ? <- SetJumpCondition(r243)
         r1563: ? <- Upsilon { value: r1490, phi_ref: r1495 }
         r1564: ? <- Upsilon { value: r168, phi_ref: r1496 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r248: ? <- Const { value: 2, size: 8 }
         r249: ? <- Arith(Sub, r239, r248)
         r253: ? <- IsZero(r249)
         r256: ? <- SetJumpCondition(r253)
         r1572: ? <- Upsilon { value: r1490, phi_ref: r1493 }
         r1573: ? <- Upsilon { value: r168, phi_ref: r1494 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r258: ? <- Const { value: 8, size: 8 }
         r259: ? <- Arith(Add, r258, r168)
  (  2)  r260: ? <- LoadMem { addr: r259, size: 8 }
         r262: ? <- Const { value: 48, size: 8 }
         r263: ? <- Arith(Add, r262, r82)
         r264: ? <- StoreMem { addr: r263, value: r1490 }
         r266: ? <- Const { value: 40, size: 8 }
         r267: ? <- Arith(Add, r266, r82)
         r268: ? <- StoreMem { addr: r267, value: r168 }
         r270: ? <- Const { value: 8, size: 8 }
         r271: ? <- Arith(Add, r270, r82)
         r272: ? <- StoreMem { addr: r271, value: r260 }
         r276: ? <- CArg { value: r260, next_arg: None }
         r277: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r278: ? <- Call { callee: r277, first_arg: Some(r276) }
         r288: ? <- Part { src: r278, offset: 0, size: 8 }
         r293: ? <- Const { value: 48, size: 8 }
         r294: ? <- Arith(Add, r293, r82)
  (  2)  r295: ? <- LoadMem { addr: r294, size: 8 }
  (  2)  r298: ? <- Arith(Sub, r288, r139)
         r302: ? <- IsZero(r298)
         r303: ? <- Part { src: r298, offset: 0, size: 1 }
         r305: ? <- SetJumpCondition(r302)
         r1580: ? <- Upsilon { value: r168, phi_ref: r1492 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1408: ? <- Const { value: 0, size: 8 }
         r1409: ? <- Arith(Add, r1408, r82)
         r1410: ? <- LoadMem { addr: r1409, size: 8 }
         r1413: ? <- Const { value: 40, size: 8 }
         r1414: ? <- Arith(Add, r1413, r82)
         r1415: ? <- StoreMem { addr: r1414, value: r295 }
         r1416: ? <- Const { value: 8, size: 8 }
         r1417: ? <- Arith(Add, r1416, r82)
         r1418: ? <- StoreMem { addr: r1417, value: r168 }
         r1428: ? <- CArg { value: r303, next_arg: None }
         r1429: ? <- CArg { value: r1418, next_arg: Some(r1428) }
         r1430: ? <- CArg { value: r1410, next_arg: Some(r1429) }
         r1431: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1432: ? <- Call { callee: r1431, first_arg: Some(r1430) }
  (  2)  r1442: ? <- Part { src: r1432, offset: 0, size: 8 }
         r1448: ? <- Part { src: r1442, offset: 0, size: 4 }
         r1449: ? <- Part { src: r1442, offset: 0, size: 4 }
         r1450: ? <- Arith(BitAnd, r1448, r1449)
         r1452: ? <- IsZero(r1450)
         r1457: ? <- Not(r1452)
         r1458: ? <- SetJumpCondition(r1457)
         r1581: ? <- Upsilon { value: r168, phi_ref: r1492 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1582: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1583: ? <- Upsilon { value: r168, phi_ref: r1503 }
         r1584: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1585: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1492: ? <- Phi
         r310: ? <- Const { value: 40, size: 8 }
         r311: ? <- Arith(Add, r310, r1492)
         r1586: ? <- Upsilon { value: r295, phi_ref: r1493 }
         r1587: ? <- Upsilon { value: r311, phi_ref: r1494 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1494: ? <- Phi
         r1493: ? <- Phi
         r313: ? <- Const { value: 8, size: 8 }
         r314: ? <- Arith(Add, r313, r1494)
  (  2)  r315: ? <- LoadMem { addr: r314, size: 8 }
         r317: ? <- Const { value: 40, size: 8 }
         r318: ? <- Arith(Add, r317, r82)
         r319: ? <- StoreMem { addr: r318, value: r1493 }
         r322: ? <- Const { value: 8, size: 8 }
         r323: ? <- Arith(Add, r322, r82)
         r324: ? <- StoreMem { addr: r323, value: r315 }
         r328: ? <- CArg { value: r315, next_arg: None }
         r329: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r330: ? <- Call { callee: r329, first_arg: Some(r328) }
         r340: ? <- Part { src: r330, offset: 0, size: 8 }
         r345: ? <- Const { value: 40, size: 8 }
         r346: ? <- Arith(Add, r345, r82)
  (  2)  r347: ? <- LoadMem { addr: r346, size: 8 }
  (  2)  r349: ? <- Arith(Sub, r340, r139)
         r353: ? <- IsZero(r349)
         r354: ? <- Part { src: r349, offset: 0, size: 1 }
         r356: ? <- SetJumpCondition(r353)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1359: ? <- Const { value: 0, size: 8 }
         r1360: ? <- Arith(Add, r1359, r82)
         r1361: ? <- LoadMem { addr: r1360, size: 8 }
         r1364: ? <- Const { value: 8, size: 8 }
         r1365: ? <- Arith(Add, r1364, r82)
         r1366: ? <- StoreMem { addr: r1365, value: r347 }
         r1376: ? <- CArg { value: r354, next_arg: None }
         r1377: ? <- CArg { value: r1366, next_arg: Some(r1376) }
         r1378: ? <- CArg { value: r1361, next_arg: Some(r1377) }
         r1379: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1380: ? <- Call { callee: r1379, first_arg: Some(r1378) }
  (  2)  r1390: ? <- Part { src: r1380, offset: 0, size: 8 }
         r1395: ? <- Part { src: r1390, offset: 0, size: 4 }
         r1396: ? <- Part { src: r1390, offset: 0, size: 4 }
         r1397: ? <- Arith(BitAnd, r1395, r1396)
         r1399: ? <- IsZero(r1397)
         r1404: ? <- Not(r1399)
         r1405: ? <- SetJumpCondition(r1404)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1574: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1575: ? <- Upsilon { value: r1494, phi_ref: r1503 }
         r1576: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1577: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r367: ? <- Const { value: 40, size: 8 }
         r368: ? <- Arith(Add, r1494, r367)
         r1578: ? <- Upsilon { value: r347, phi_ref: r1495 }
         r1579: ? <- Upsilon { value: r368, phi_ref: r1496 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1496: ? <- Phi
         r1495: ? <- Phi
         r376: ? <- Const { value: 8, size: 8 }
         r377: ? <- Arith(Add, r376, r1496)
  (  2)  r378: ? <- LoadMem { addr: r377, size: 8 }
         r380: ? <- Const { value: 40, size: 8 }
         r381: ? <- Arith(Add, r380, r82)
         r382: ? <- StoreMem { addr: r381, value: r1495 }
         r385: ? <- Const { value: 8, size: 8 }
         r386: ? <- Arith(Add, r385, r82)
         r387: ? <- StoreMem { addr: r386, value: r378 }
         r391: ? <- CArg { value: r378, next_arg: None }
         r392: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r393: ? <- Call { callee: r392, first_arg: Some(r391) }
         r403: ? <- Part { src: r393, offset: 0, size: 8 }
         r408: ? <- Const { value: 40, size: 8 }
         r409: ? <- Arith(Add, r408, r82)
  (  2)  r410: ? <- LoadMem { addr: r409, size: 8 }
  (  3)  r412: ? <- Arith(Sub, r403, r139)
         r416: ? <- IsZero(r412)
         r417: ? <- Part { src: r412, offset: 0, size: 1 }
         r419: ? <- SetJumpCondition(r416)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1310: ? <- Const { value: 0, size: 8 }
         r1311: ? <- Arith(Add, r1310, r82)
         r1312: ? <- LoadMem { addr: r1311, size: 8 }
         r1315: ? <- Const { value: 8, size: 8 }
         r1316: ? <- Arith(Add, r1315, r82)
         r1317: ? <- StoreMem { addr: r1316, value: r410 }
         r1327: ? <- CArg { value: r417, next_arg: None }
         r1328: ? <- CArg { value: r1317, next_arg: Some(r1327) }
         r1329: ? <- CArg { value: r1312, next_arg: Some(r1328) }
         r1330: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1331: ? <- Call { callee: r1330, first_arg: Some(r1329) }
  (  2)  r1341: ? <- Part { src: r1331, offset: 0, size: 8 }
         r1346: ? <- Part { src: r1341, offset: 0, size: 4 }
         r1347: ? <- Part { src: r1341, offset: 0, size: 4 }
         r1348: ? <- Arith(BitAnd, r1346, r1347)
         r1350: ? <- IsZero(r1348)
         r1355: ? <- Not(r1350)
         r1356: ? <- SetJumpCondition(r1355)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1565: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1566: ? <- Upsilon { value: r1496, phi_ref: r1503 }
         r1567: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1568: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r421: ? <- Const { value: 16, size: 8 }
         r422: ? <- Arith(Add, r421, r82)
         r423: ? <- LoadMem { addr: r422, size: 8 }
         r425: ? <- Const { value: 1, size: 8 }
         r426: ? <- Arith(Add, r218, r425)
         r434: ? <- Const { value: 40, size: 8 }
         r435: ? <- Arith(Add, r1496, r434)
         r443: ? <- Arith(Sub, r426, r423)
         r447: ? <- IsZero(r443)
         r450: ? <- SetJumpCondition(r447)
         r1569: ? <- Upsilon { value: r412, phi_ref: r1513 }
         r1570: ? <- Upsilon { value: r410, phi_ref: r1497 }
         r1571: ? <- Upsilon { value: r435, phi_ref: r1498 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1498: ? <- Phi
         r1497: ? <- Phi
         r452: ? <- Const { value: 56, size: 8 }
         r453: ? <- Arith(Add, r452, r82)
         r454: ? <- StoreMem { addr: r453, value: r1491 }
         r456: ? <- Const { value: 40, size: 8 }
         r457: ? <- Arith(Add, r456, r82)
         r458: ? <- StoreMem { addr: r457, value: r174 }
         r459: ? <- Const { value: 48, size: 8 }
         r460: ? <- Arith(Add, r459, r82)
         r461: ? <- StoreMem { addr: r460, value: r1497 }
         r1546: ? <- Upsilon { value: r1498, phi_ref: r1499 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  4)  r1499: ? <- Phi
         r616: ? <- Const { value: 8, size: 8 }
         r617: ? <- Arith(Add, r616, r1499)
         r618: ? <- LoadMem { addr: r617, size: 8 }
         r625: ? <- CArg { value: r618, next_arg: None }
         r626: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r627: ? <- Call { callee: r626, first_arg: Some(r625) }
         r637: ? <- Part { src: r627, offset: 0, size: 8 }
  (  2)  r638: ? <- Arith(Sub, r637, r139)
         r642: ? <- IsZero(r638)
         r643: ? <- Part { src: r638, offset: 0, size: 1 }
         r645: ? <- Not(r642)
         r646: ? <- SetJumpCondition(r645)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r648: ? <- Const { value: 0, size: 8 }
  (  2)  r649: ? <- Arith(Add, r648, r82)
         r650: ? <- LoadMem { addr: r649, size: 8 }
         r663: ? <- CArg { value: r643, next_arg: None }
         r664: ? <- CArg { value: r649, next_arg: Some(r663) }
         r665: ? <- CArg { value: r650, next_arg: Some(r664) }
         r666: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r667: ? <- Call { callee: r666, first_arg: Some(r665) }
  (  2)  r677: ? <- Part { src: r667, offset: 0, size: 8 }
         r678: ? <- Part { src: r677, offset: 0, size: 4 }
         r679: ? <- Part { src: r677, offset: 0, size: 4 }
         r680: ? <- Arith(BitAnd, r678, r679)
         r682: ? <- IsZero(r680)
         r687: ? <- Not(r682)
         r688: ? <- SetJumpCondition(r687)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r691: ? <- Const { value: 40, size: 8 }
         r692: ? <- Arith(Add, r691, r82)
         r693: ? <- LoadMem { addr: r692, size: 8 }
         r699: ? <- Const { value: 56, size: 8 }
         r700: ? <- Arith(Add, r699, r82)
         r701: ? <- LoadMem { addr: r700, size: 8 }
         r1547: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1548: ? <- Upsilon { value: r1499, phi_ref: r1503 }
         r1549: ? <- Upsilon { value: r701, phi_ref: r1504 }
         r1550: ? <- Upsilon { value: r693, phi_ref: r1505 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r463: ? <- Const { value: 48, size: 8 }
         r464: ? <- Arith(Add, r463, r1499)
         r465: ? <- LoadMem { addr: r464, size: 8 }
         r467: ? <- Const { value: 40, size: 8 }
  (  6)  r468: ? <- Arith(Add, r467, r1499)
         r470: ? <- Const { value: 1, size: 8 }
  (  5)  r471: ? <- Arith(Add, r470, r218)
         r477: ? <- Const { value: 8, size: 8 }
         r478: ? <- Arith(Add, r477, r82)
         r479: ? <- StoreMem { addr: r478, value: r465 }
         r483: ? <- CArg { value: r471, next_arg: None }
         r484: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r485: ? <- Call { callee: r484, first_arg: Some(r483) }
         r495: ? <- Part { src: r485, offset: 0, size: 8 }
  (  2)  r500: ? <- Arith(Sub, r495, r139)
         r504: ? <- IsZero(r500)
         r505: ? <- Part { src: r500, offset: 0, size: 1 }
         r507: ? <- SetJumpCondition(r504)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r704: ? <- Const { value: 0, size: 8 }
  (  2)  r705: ? <- Arith(Add, r704, r82)
         r706: ? <- LoadMem { addr: r705, size: 8 }
         r718: ? <- CArg { value: r505, next_arg: None }
         r719: ? <- CArg { value: r705, next_arg: Some(r718) }
         r720: ? <- CArg { value: r706, next_arg: Some(r719) }
         r721: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r722: ? <- Call { callee: r721, first_arg: Some(r720) }
  (  2)  r732: ? <- Part { src: r722, offset: 0, size: 8 }
         r733: ? <- Part { src: r732, offset: 0, size: 4 }
         r734: ? <- Part { src: r732, offset: 0, size: 4 }
         r735: ? <- Arith(BitAnd, r733, r734)
         r737: ? <- IsZero(r735)
         r742: ? <- Not(r737)
         r743: ? <- SetJumpCondition(r742)
         r1556: ? <- Upsilon { value: r468, phi_ref: r1501 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r509: ? <- Const { value: 48, size: 8 }
         r510: ? <- Arith(Add, r509, r468)
         r511: ? <- LoadMem { addr: r510, size: 8 }
         r513: ? <- Const { value: 40, size: 8 }
         r514: ? <- Arith(Add, r513, r468)
         r516: ? <- Const { value: 1, size: 8 }
         r517: ? <- Arith(Add, r516, r471)
         r521: ? <- Const { value: 8, size: 8 }
         r522: ? <- Arith(Add, r521, r82)
         r523: ? <- StoreMem { addr: r522, value: r511 }
         r527: ? <- CArg { value: r517, next_arg: None }
         r528: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r529: ? <- Call { callee: r528, first_arg: Some(r527) }
         r539: ? <- Part { src: r529, offset: 0, size: 8 }
  (  2)  r544: ? <- Arith(Sub, r539, r139)
         r548: ? <- IsZero(r544)
         r549: ? <- Part { src: r544, offset: 0, size: 1 }
         r551: ? <- SetJumpCondition(r548)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1119: ? <- Const { value: 0, size: 8 }
  (  2)  r1120: ? <- Arith(Add, r1119, r82)
         r1121: ? <- LoadMem { addr: r1120, size: 8 }
         r1133: ? <- CArg { value: r549, next_arg: None }
         r1134: ? <- CArg { value: r1120, next_arg: Some(r1133) }
         r1135: ? <- CArg { value: r1121, next_arg: Some(r1134) }
         r1136: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1137: ? <- Call { callee: r1136, first_arg: Some(r1135) }
  (  2)  r1147: ? <- Part { src: r1137, offset: 0, size: 8 }
         r1148: ? <- Part { src: r1147, offset: 0, size: 4 }
         r1149: ? <- Part { src: r1147, offset: 0, size: 4 }
         r1150: ? <- Arith(BitAnd, r1148, r1149)
         r1152: ? <- IsZero(r1150)
         r1157: ? <- Not(r1152)
         r1158: ? <- SetJumpCondition(r1157)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1558: ? <- Upsilon { value: r514, phi_ref: r1501 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r553: ? <- Const { value: 88, size: 8 }
         r554: ? <- Arith(Add, r553, r468)
         r555: ? <- LoadMem { addr: r554, size: 8 }
         r557: ? <- Const { value: 80, size: 8 }
         r558: ? <- Arith(Add, r557, r468)
         r560: ? <- Const { value: 2, size: 8 }
         r561: ? <- Arith(Add, r560, r471)
         r565: ? <- Const { value: 8, size: 8 }
         r566: ? <- Arith(Add, r565, r82)
         r567: ? <- StoreMem { addr: r566, value: r555 }
         r571: ? <- CArg { value: r561, next_arg: None }
         r572: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r573: ? <- Call { callee: r572, first_arg: Some(r571) }
         r583: ? <- Part { src: r573, offset: 0, size: 8 }
  (  3)  r588: ? <- Arith(Sub, r583, r139)
         r592: ? <- IsZero(r588)
         r593: ? <- Part { src: r588, offset: 0, size: 1 }
         r595: ? <- SetJumpCondition(r592)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1161: ? <- Const { value: 0, size: 8 }
  (  2)  r1162: ? <- Arith(Add, r1161, r82)
         r1163: ? <- LoadMem { addr: r1162, size: 8 }
         r1175: ? <- CArg { value: r593, next_arg: None }
         r1176: ? <- CArg { value: r1162, next_arg: Some(r1175) }
         r1177: ? <- CArg { value: r1163, next_arg: Some(r1176) }
         r1178: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
         r1179: ? <- Call { callee: r1178, first_arg: Some(r1177) }
  (  2)  r1189: ? <- Part { src: r1179, offset: 0, size: 8 }
         r1190: ? <- Part { src: r1189, offset: 0, size: 4 }
         r1191: ? <- Part { src: r1189, offset: 0, size: 4 }
         r1192: ? <- Arith(BitAnd, r1190, r1191)
         r1194: ? <- IsZero(r1192)
         r1199: ? <- Not(r1194)
         r1200: ? <- SetJumpCondition(r1199)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1560: ? <- Upsilon { value: r558, phi_ref: r1501 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1501: ? <- Phi
         r746: ? <- Const { value: 40, size: 8 }
         r747: ? <- Arith(Add, r746, r82)
         r748: ? <- LoadMem { addr: r747, size: 8 }
         r755: ? <- Const { value: 56, size: 8 }
         r756: ? <- Arith(Add, r755, r82)
         r757: ? <- LoadMem { addr: r756, size: 8 }
         r1551: ? <- Upsilon { value: r471, phi_ref: r1502 }
         r1552: ? <- Upsilon { value: r1501, phi_ref: r1503 }
         r1553: ? <- Upsilon { value: r757, phi_ref: r1504 }
         r1554: ? <- Upsilon { value: r748, phi_ref: r1505 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1505: ? <- Phi
         r1504: ? <- Phi
         r1503: ? <- Phi
         r1502: ? <- Phi
         r759: ? <- Const { value: 32, size: 8 }
         r760: ? <- Arith(Add, r759, r82)
         r761: ? <- LoadMem { addr: r760, size: 8 }
         r763: ? <- Const { value: 0, size: 8 }
         r764: ? <- Arith(Add, r763, r761)
         r765: ? <- ArithK(Mul, r1505, 8)
         r766: ? <- Arith(Add, r764, r765)
         r767: ? <- StoreMem { addr: r766, value: r1502 }
         r768: ? <- Arith(Sub, r1503, r1504)
         r772: ? <- IsZero(r768)
         r775: ? <- SetJumpCondition(r772)
         r1543: ? <- Upsilon { value: r136, phi_ref: r1513 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r777: ? <- Const { value: 32, size: 8 }
         r778: ? <- Arith(Add, r777, r24)
         r779: ? <- LoadMem { addr: r778, size: 8 }
         r780: ? <- Const { value: 0, size: 8 }
         r781: ? <- Arith(Sub, r779, r780)
         r785: ? <- IsZero(r781)
         r788: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r789: ? <- Not(r785)
         r790: ? <- SetJumpCondition(r789)
         r1544: ? <- Upsilon { value: r18, phi_ref: r1510 }
         r1545: ? <- Upsilon { value: r18, phi_ref: r1506 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1506: ? <- Phi
         r792: ? <- Part { src: r1506, offset: 0, size: 1 }
         r793: ? <- Part { src: r1506, offset: 0, size: 1 }
         r794: ? <- Arith(BitAnd, r792, r793)
         r796: ? <- IsZero(r794)
         r801: ? <- SetJumpCondition(r796)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r803: ? <- Const { value: 1, size: 8 }
         r804: ? <- Arith(Add, r803, r1490)
         r806: ? <- Const { value: 46, size: 4 }
         r809: ? <- Const { value: 0, size: 8 }
         r810: ? <- Arith(Add, r809, r82)
         r811: ? <- StoreMem { addr: r810, value: r804 }
         r819: ? <- CArg { value: r811, next_arg: None }
         r820: ? <- CArg { value: r806, next_arg: Some(r819) }
         r821: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
         r822: ? <- Call { callee: r821, first_arg: Some(r820) }
  (  3)  r832: ? <- Part { src: r822, offset: 0, size: 8 }
         r834: ? <- Arith(BitAnd, r832, r832)
         r836: ? <- IsZero(r834)
         r841: ? <- SetJumpCondition(r836)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r848: ? <- Const { value: 24, size: 8 }
         r849: ? <- Arith(Add, r848, r82)
         r850: ? <- LoadMem { addr: r849, size: 8 }
         r852: ? <- Const { value: 1, size: 8 }
         r853: ? <- Arith(Add, r174, r852)
         r869: ? <- Const { value: 0, size: 8 }
         r870: ? <- Arith(Add, r869, r850)
         r871: ? <- LoadMem { addr: r870, size: 8 }
         r872: ? <- Arith(Sub, r853, r871)
         r874: ? <- CarryOf(r872)
         r879: ? <- Not(r874)
         r880: ? <- SetJumpCondition(r879)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1239: ? <- Const { value: 1, size: 8 }
         r1240: ? <- Arith(Add, r174, r1239)
         r1249: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1250: ? <- Call { callee: r1249, first_arg: None }
         r1260: ? <- Const { value: 24, size: 8 }
         r1261: ? <- Arith(Add, r1260, r82)
         r1262: ? <- LoadMem { addr: r1261, size: 8 }
         r1270: ? <- Const { value: 0, size: 8 }
         r1271: ? <- Arith(Add, r1270, r1262)
         r1272: ? <- LoadMem { addr: r1271, size: 8 }
         r1273: ? <- Arith(Sub, r1240, r1272)
         r1275: ? <- CarryOf(r1273)
         r1280: ? <- SetJumpCondition(r1275)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1282: ? <- Const { value: 72, size: 8 }
         r1283: ? <- Arith(Add, r1282, r82)
         r1284: ? <- LoadMem { addr: r1283, size: 8 }
         r1535: ? <- Upsilon { value: r1284, phi_ref: r1514 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r883: ? <- Const { value: 24, size: 8 }
         r884: ? <- Arith(Add, r883, r24)
         r885: ? <- LoadMem { addr: r884, size: 8 }
         r887: ? <- Const { value: 0, size: 8 }
         r888: ? <- Arith(Add, r887, r885)
         r889: ? <- LoadMem { addr: r888, size: 1 }
  (  2)  r890: ? <- Const { value: 0, size: 1 }
         r891: ? <- Arith(Sub, r889, r890)
         r895: ? <- IsZero(r891)
         r898: ? <- Not(r895)
         r899: ? <- SetJumpCondition(r898)
         r1536: ? <- Upsilon { value: r24, phi_ref: r1491 }
         r1538: ? <- Upsilon { value: r832, phi_ref: r1508 }
         r1539: ? <- Upsilon { value: r890, phi_ref: r1509 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1483: ? <- Const { value: 72, size: 8 }
         r1484: ? <- Arith(Add, r1483, r82)
         r1485: ? <- LoadMem { addr: r1484, size: 8 }
         r1534: ? <- Upsilon { value: r1485, phi_ref: r1511 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r597: ? <- Const { value: 16, size: 8 }
         r598: ? <- Arith(Add, r597, r82)
         r599: ? <- LoadMem { addr: r598, size: 8 }
         r601: ? <- Const { value: 3, size: 8 }
         r602: ? <- Arith(Add, r601, r471)
         r604: ? <- Const { value: 120, size: 8 }
         r605: ? <- Arith(Add, r604, r468)
         r607: ? <- Arith(Sub, r602, r599)
         r611: ? <- IsZero(r607)
         r614: ? <- SetJumpCondition(r611)
         r1561: ? <- Upsilon { value: r588, phi_ref: r1513 }
         r1562: ? <- Upsilon { value: r605, phi_ref: r1499 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1509: ? <- Phi
         r1508: ? <- Phi
         r916: ? <- Const { value: 10, size: 4 }
         r919: ? <- Const { value: 8, size: 8 }
         r920: ? <- Arith(Add, r919, r82)
         r921: ? <- StoreMem { addr: r920, value: r1508 }
         r922: ? <- CArg { value: r1509, next_arg: None }
         r923: ? <- CArg { value: r921, next_arg: Some(r922) }
         r924: ? <- CArg { value: r916, next_arg: Some(r923) }
         r925: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
         r926: ? <- Call { callee: r925, first_arg: Some(r924) }
         r936: ? <- Part { src: r926, offset: 0, size: 8 }
         r937: ? <- Const { value: 8, size: 8 }
         r938: ? <- Arith(Add, r937, r82)
         r939: ? <- LoadMem { addr: r938, size: 8 }
         r941: ? <- Const { value: -1, size: 8 }
  (  7)  r942: ? <- Arith(Sub, r936, r941)
         r946: ? <- IsZero(r942)
         r950: ? <- SetJumpCondition(r946)
         r1530: ? <- Upsilon { value: r942, phi_ref: r1513 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r952: ? <- Const { value: 24, size: 8 }
         r953: ? <- Arith(Add, r952, r14)
  (  2)  r954: ? <- LoadMem { addr: r953, size: 8 }
         r956: ? <- Const { value: 0, size: 8 }
         r957: ? <- Arith(Add, r956, r82)
         r958: ? <- StoreMem { addr: r957, value: r939 }
         r959: ? <- Const { value: 0, size: 8 }
         r960: ? <- Arith(Add, r959, r954)
         r961: ? <- LoadMem { addr: r960, size: 1 }
         r962: ? <- Const { value: 0, size: 1 }
         r963: ? <- Arith(Sub, r961, r962)
         r967: ? <- IsZero(r963)
         r970: ? <- Not(r967)
         r971: ? <- SetJumpCondition(r970)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r973: ? <- Const { value: 24, size: 8 }
         r974: ? <- Arith(Add, r973, r82)
         r975: ? <- LoadMem { addr: r974, size: 8 }
         r977: ? <- Const { value: 32, size: 8 }
         r978: ? <- Arith(Add, r977, r82)
  (  2)  r979: ? <- LoadMem { addr: r978, size: 8 }
         r981: ? <- Const { value: 64, size: 8 }
         r982: ? <- Arith(Add, r981, r82)
  (  3)  r983: ? <- LoadMem { addr: r982, size: 8 }
         r985: ? <- Const { value: 0, size: 8 }
         r986: ? <- Arith(Add, r985, r975)
         r987: ? <- LoadMem { addr: r986, size: 8 }
         r991: ? <- CArg { value: r942, next_arg: None }
         r992: ? <- CArg { value: r987, next_arg: Some(r991) }
         r993: ? <- CArg { value: r979, next_arg: Some(r992) }
         r994: ? <- CArg { value: r983, next_arg: Some(r993) }
         r995: ? <- Const { value: 8, size: 8 }
         r996: ? <- Arith(Add, r995, r954)
         r997: ? <- LoadMem { addr: r996, size: 8 }
         r998: ? <- LoadMem { addr: r997, size: 8 }
         r999: ? <- Call { callee: r998, first_arg: Some(r994) }
  (  2)  r1011: ? <- Arith(BitAnd, r942, r942)
         r1013: ? <- IsZero(r1011)
         r1018: ? <- SetJumpCondition(r1013)
         r1531: ? <- Upsilon { value: r1011, phi_ref: r1513 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1024: ? <- Const { value: 32, size: 8 }
         r1025: ? <- Arith(Add, r1024, r942)
         r1026: ? <- LoadMem { addr: r1025, size: 8 }
         r1027: ? <- Const { value: 0, size: 8 }
         r1028: ? <- Arith(Sub, r1026, r1027)
         r1032: ? <- IsZero(r1028)
         r1035: ? <- Const { value: 0, size: 8 }
         r1036: ? <- Arith(Add, r1035, r979)
         r1037: ? <- ArithK(Mul, r174, 8)
         r1038: ? <- Arith(Add, r1036, r1037)
         r1039: ? <- StoreMem { addr: r1038, value: r942 }
         r1040: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1041: ? <- SetJumpCondition(r1032)
         r1532: ? <- Upsilon { value: r983, phi_ref: r1506 }
         r1533: ? <- Upsilon { value: r983, phi_ref: r1510 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1510: ? <- Phi
         r1043: ? <- Const { value: 72, size: 8 }
         r1044: ? <- Arith(Add, r1043, r82)
         r1045: ? <- LoadMem { addr: r1044, size: 8 }
         r1047: ? <- Part { src: r1510, offset: 0, size: 1 }
         r1048: ? <- Part { src: r1510, offset: 0, size: 1 }
         r1049: ? <- Arith(BitAnd, r1047, r1048)
         r1051: ? <- IsZero(r1049)
         r1056: ? <- Not(r1051)
         r1057: ? <- SetJumpCondition(r1056)
         r1528: ? <- Upsilon { value: r136, phi_ref: r1513 }
         r1529: ? <- Upsilon { value: r1045, phi_ref: r1511 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1511: ? <- Phi
         r1059: ? <- Const { value: 1, size: 8 }
         r1060: ? <- Arith(Add, r1059, r174)
         r1062: ? <- Const { value: 24, size: 8 }
         r1063: ? <- Arith(Add, r1062, r82)
         r1064: ? <- LoadMem { addr: r1063, size: 8 }
         r1066: ? <- Const { value: 0, size: 8 }
         r1067: ? <- Arith(Add, r1066, r1064)
         r1068: ? <- StoreMem { addr: r1067, value: r1060 }
  (  2)  r1069: ? <- Arith(BitAnd, r1511, r1511)
         r1071: ? <- IsZero(r1069)
         r1076: ? <- Not(r1071)
         r1077: ? <- SetJumpCondition(r1076)
         r1527: ? <- Upsilon { value: r1069, phi_ref: r1515 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1519: ? <- Upsilon { value: r17, phi_ref: r1514 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1514: ? <- Phi
  (  2)  r1286: ? <- Arith(BitAnd, r1514, r1514)
         r1288: ? <- IsZero(r1286)
         r1293: ? <- SetJumpCondition(r1288)
         r1521: ? <- Upsilon { value: r1286, phi_ref: r1515 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1515: ? <- Phi
         r1295: ? <- Const { value: 0, size: 8 }
         r1296: ? <- Arith(Add, r1295, r1515)
         r1297: ? <- StoreMem { addr: r1296, value: r24 }
         r1298: ? <- Part { src: r136, offset: 0, size: 4 }
         r1299: ? <- Part { src: r136, offset: 0, size: 4 }
         r1300: ? <- Arith(BitXor, r1298, r1299)
         r1301: ? <- Part { src: r136, offset: 4, size: 4 }
         r1302: ? <- Concat { lo: r1300, hi: r1301 }
         r1520: ? <- Upsilon { value: r1302, phi_ref: r1512 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1079: ? <- Part { src: r136, offset: 0, size: 4 }
         r1080: ? <- Part { src: r136, offset: 0, size: 4 }
         r1081: ? <- Arith(BitXor, r1079, r1080)
         r1082: ? <- Part { src: r136, offset: 4, size: 4 }
         r1083: ? <- Concat { lo: r1081, hi: r1082 }
         r1522: ? <- Upsilon { value: r1083, phi_ref: r1512 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1512: ? <- Phi
         r1117: ? <- SetReturnValue(r1512)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1513: ? <- Phi
         r1212: ? <- Const { value: 2, size: 4 }
         r1213: ? <- Part { src: r1513, offset: 4, size: 4 }
         r1214: ? <- Concat { lo: r1212, hi: r1213 }
         r1233: ? <- SetReturnValue(r1214)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r16, r17, r18, r19, r20, r23, r24, r25, r26, r64, r65, r66, r67, r69, r72, r73, r74, r75, r76, r77, r78, r79, r81, r82, r90, r91, r92, r94, r95, r96, r97, r98, r99, r100, r101, r102, r110, r111, r112, r113, r123, r125, r127, r132, r1516]
  BlockID(1) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) } [r1490, r134, r135, r136, r139, r144, r147, r1518]
  BlockID(2) -> Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) } [r149, r150, r151, r153, r154, r155, r156, r157, r161, r164]
  BlockID(3) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) } [r166, r167, r168, r170, r171, r172, r173, r174, r181, r182, r183, r184, r185, r186, r187, r188, r192, r195, r1524, r1525, r1526]
  BlockID(4) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) } [r1491, r197, r198, r199, r201, r202, r203, r204, r206, r211, r1540]
  BlockID(5) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) } [r214, r215, r216, r217, r218, r225, r226, r227, r228, r229, r233, r236, r1541, r1542]
  BlockID(6) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) } [r238, r239, r243, r246, r1563, r1564]
  BlockID(7) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) } [r248, r249, r253, r256, r1572, r1573]
  BlockID(8) -> Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) } [r258, r259, r260, r262, r263, r264, r266, r267, r268, r270, r271, r272, r276, r277, r278, r288, r293, r294, r295, r298, r302, r303, r305, r1580]
  BlockID(9) -> Always(Block(BlockID(10))) [r1492, r310, r311, r1586, r1587]
  BlockID(10) -> Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) } [r1494, r1493, r313, r314, r315, r317, r318, r319, r322, r323, r324, r328, r329, r330, r340, r345, r346, r347, r349, r353, r354, r356]
  BlockID(11) -> Always(Block(BlockID(12))) [r367, r368, r1578, r1579]
  BlockID(12) -> Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) } [r1496, r1495, r376, r377, r378, r380, r381, r382, r385, r386, r387, r391, r392, r393, r403, r408, r409, r410, r412, r416, r417, r419]
  BlockID(13) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) } [r421, r422, r423, r425, r426, r434, r435, r443, r447, r450, r1569, r1570, r1571]
  BlockID(14) -> Always(Block(BlockID(19))) [r1498, r1497, r452, r453, r454, r456, r457, r458, r459, r460, r461, r1546]
  BlockID(15) -> Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) } [r463, r464, r465, r467, r468, r470, r471, r477, r478, r479, r483, r484, r485, r495, r500, r504, r505, r507]
  BlockID(16) -> Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) } [r509, r510, r511, r513, r514, r516, r517, r521, r522, r523, r527, r528, r529, r539, r544, r548, r549, r551]
  BlockID(17) -> Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) } [r553, r554, r555, r557, r558, r560, r561, r565, r566, r567, r571, r572, r573, r583, r588, r592, r593, r595]
  BlockID(18) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) } [r597, r598, r599, r601, r602, r604, r605, r607, r611, r614, r1561, r1562]
  BlockID(19) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) } [r1499, r616, r617, r618, r625, r626, r627, r637, r638, r642, r643, r645, r646]
  BlockID(20) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) } [r648, r649, r650, r663, r664, r665, r666, r667, r677, r678, r679, r680, r682, r687, r688]
  BlockID(21) -> Always(Block(BlockID(24))) [r691, r692, r693, r699, r700, r701, r1547, r1548, r1549, r1550]
  BlockID(22) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) } [r704, r705, r706, r718, r719, r720, r721, r722, r732, r733, r734, r735, r737, r742, r743, r1556]
  BlockID(23) -> Always(Block(BlockID(24))) [r1501, r746, r747, r748, r755, r756, r757, r1551, r1552, r1553, r1554]
  BlockID(24) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) } [r1505, r1504, r1503, r1502, r759, r760, r761, r763, r764, r765, r766, r767, r768, r772, r775, r1543]
  BlockID(25) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) } [r777, r778, r779, r780, r781, r785, r788, r789, r790, r1544, r1545]
  BlockID(26) -> Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) } [r1506, r792, r793, r794, r796, r801]
  BlockID(27) -> Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) } [r803, r804, r806, r809, r810, r811, r819, r820, r821, r822, r832, r834, r836, r841]
  BlockID(28) -> Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) } [r848, r849, r850, r852, r853, r869, r870, r871, r872, r874, r879, r880]
  BlockID(29) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) } [r883, r884, r885, r887, r888, r889, r890, r891, r895, r898, r899, r1536, r1538, r1539]
  BlockID(30) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) } [r1509, r1508, r916, r919, r920, r921, r922, r923, r924, r925, r926, r936, r937, r938, r939, r941, r942, r946, r950, r1530]
  BlockID(31) -> Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) } [r952, r953, r954, r956, r957, r958, r959, r960, r961, r962, r963, r967, r970, r971]
  BlockID(32) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) } [r973, r974, r975, r977, r978, r979, r981, r982, r983, r985, r986, r987, r991, r992, r993, r994, r995, r996, r997, r998, r999, r1011, r1013, r1018, r1531]
  BlockID(33) -> Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) } [r1024, r1025, r1026, r1027, r1028, r1032, r1035, r1036, r1037, r1038, r1039, r1040, r1041, r1532, r1533]
  BlockID(34) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) } [r1510, r1043, r1044, r1045, r1047, r1048, r1049, r1051, r1056, r1057, r1528, r1529]
  BlockID(35) -> Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) } [r1511, r1059, r1060, r1062, r1063, r1064, r1066, r1067, r1068, r1069, r1071, r1076, r1077, r1527]
  BlockID(36) -> Always(Block(BlockID(37))) [r1079, r1080, r1081, r1082, r1083, r1522]
  BlockID(37) -> Always(Return) [r1512, r1117]
  BlockID(38) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) } [r1119, r1120, r1121, r1133, r1134, r1135, r1136, r1137, r1147, r1148, r1149, r1150, r1152, r1157, r1158]
  BlockID(39) -> Always(Block(BlockID(23))) [r1558]
  BlockID(40) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) } [r1161, r1162, r1163, r1175, r1176, r1177, r1178, r1179, r1189, r1190, r1191, r1192, r1194, r1199, r1200]
  BlockID(41) -> Always(Block(BlockID(23))) [r1560]
  BlockID(42) -> Always(Return) [r1513, r1212, r1213, r1214, r1233]
  BlockID(43) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) } [r1239, r1240, r1249, r1250, r1260, r1261, r1262, r1270, r1271, r1272, r1273, r1275, r1280]
  BlockID(44) -> Always(Block(BlockID(45))) [r1282, r1283, r1284, r1535]
  BlockID(45) -> Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) } [r1514, r1286, r1288, r1293, r1521]
  BlockID(46) -> Always(Block(BlockID(37))) [r1515, r1295, r1296, r1297, r1298, r1299, r1300, r1301, r1302, r1520]
  BlockID(47) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) } [r1310, r1311, r1312, r1315, r1316, r1317, r1327, r1328, r1329, r1330, r1331, r1341, r1346, r1347, r1348, r1350, r1355, r1356]
  BlockID(48) -> Always(Block(BlockID(24))) [r1565, r1566, r1567, r1568]
  BlockID(49) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) } [r1359, r1360, r1361, r1364, r1365, r1366, r1376, r1377, r1378, r1379, r1380, r1390, r1395, r1396, r1397, r1399, r1404, r1405]
  BlockID(50) -> Always(Block(BlockID(24))) [r1574, r1575, r1576, r1577]
  BlockID(51) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) } [r1408, r1409, r1410, r1413, r1414, r1415, r1416, r1417, r1418, r1428, r1429, r1430, r1431, r1432, r1442, r1448, r1449, r1450, r1452, r1457, r1458, r1581]
  BlockID(52) -> Always(Block(BlockID(24))) [r1582, r1583, r1584, r1585]
  BlockID(53) -> Always(Block(BlockID(1))) [r1461, r1462, r1463, r1466, r1467, r1477, r1478, r1479, r1480, r1517]
  BlockID(54) -> Always(Block(BlockID(35))) [r1483, r1484, r1485, r1534]
  BlockID(55) -> Always(Block(BlockID(45))) [r1519]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(51)
    |  |  |  |  |  |  |  |  |  |  BlockID(52)
    |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  |  BlockID(49)
    |  |  |  |  |  |  |  |  |  |  BlockID(50)
    |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  BlockID(47)
    |  |  |  |  |  |  |  |  |  BlockID(48)
    |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(40)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(41)
    |  |  |  |  |  |  |  |  |  |  BlockID(38)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(39)
    |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  BlockID(26)
    |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  BlockID(43)
    |  |  |  |  |  |  BlockID(44)
    |  |  |  |  |  BlockID(54)
    |  |  |  |  BlockID(30)
    |  |  |  |  |  BlockID(31)
    |  |  |  |  |  |  BlockID(32)
    |  |  |  |  |  |  |  BlockID(33)
    |  |  |  |  BlockID(34)
    |  |  |  |  BlockID(35)
    |  |  |  BlockID(36)
    |  |  |  BlockID(37)
    |  |  |  BlockID(45)
    |  |  |  BlockID(46)
    |  |  |  BlockID(55)
    |  |  BlockID(42)
    |  BlockID(53)

ssa post-xform:
ssa program  1738 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  ( 36)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  4)  r13: ? <- Ancestral(AncestralName("RDI"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  8)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 22)  r18: ? <- Ancestral(AncestralName("RDX"))
  (  4)  r19: ? <- Ancestral(AncestralName("R8"))
  (  6)  r20: ? <- Ancestral(AncestralName("R9"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  5)  r24: ? <- Ancestral(AncestralName("R13"))
         r25: ? <- Ancestral(AncestralName("R14"))
  (  4)  r26: ? <- Ancestral(AncestralName("R15"))
         r64: ? <- ArithK(Add, r11, -8)
         r65: ? <- StoreMem { addr: r64, value: r26 }
         r66: ? <- ArithK(Add, r11, -16)
         r67: ? <- StoreMem { addr: r66, value: r25 }
         r69: ? <- Const { value: 46, size: 4 }
         r72: ? <- ArithK(Add, r11, -24)
         r73: ? <- StoreMem { addr: r72, value: r24 }
         r74: ? <- ArithK(Add, r11, -32)
         r75: ? <- StoreMem { addr: r74, value: r23 }
         r76: ? <- ArithK(Add, r11, -40)
         r77: ? <- StoreMem { addr: r76, value: r10 }
         r78: ? <- ArithK(Add, r11, -48)
         r79: ? <- StoreMem { addr: r78, value: r16 }
         r91: ? <- ArithK(Add, r11, -72)
         r92: ? <- StoreMem { addr: r91, value: r13 }
         r95: ? <- ArithK(Add, r11, -104)
         r96: ? <- StoreMem { addr: r95, value: r19 }
         r98: ? <- ArithK(Add, r11, -136)
         r99: ? <- StoreMem { addr: r98, value: r18 }
         r101: ? <- ArithK(Add, r11, -112)
         r102: ? <- StoreMem { addr: r101, value: r20 }
         r110: ? <- CArg { value: r102, next_arg: None }
         r111: ? <- CArg { value: r69, next_arg: Some(r110) }
         r112: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  3)  r113: ? <- Call { callee: r112, first_arg: Some(r111) }
         r127: ? <- IsZero(r113)
         r132: ? <- SetJumpCondition(r127)
         r1516: ? <- Upsilon { value: r113, phi_ref: r1490 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1466: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1467: ? <- Call { callee: r1466, first_arg: None }
         r1480: ? <- Arith(Add, r18, r113)
         r1517: ? <- Upsilon { value: r1480, phi_ref: r1490 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  9)  r1490: ? <- Phi
  (  8)  r139: ? <- Arith(Sub, r1490, r18)
         r144: ? <- IsZero(r139)
         r147: ? <- SetJumpCondition(r144)
         r1518: ? <- Upsilon { value: r18, phi_ref: r1513 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r155: ? <- LoadMem { addr: r20, size: 8 }
         r161: ? <- IsZero(r155)
         r164: ? <- SetJumpCondition(r161)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r167: ? <- ArithK(Add, r14, 24)
  ( 10)  r168: ? <- LoadMem { addr: r167, size: 8 }
         r170: ? <- Part { src: r26, offset: 0, size: 4 }
         r171: ? <- Part { src: r26, offset: 0, size: 4 }
         r172: ? <- Arith(BitXor, r170, r171)
         r173: ? <- Part { src: r26, offset: 4, size: 4 }
  ( 10)  r174: ? <- Concat { lo: r172, hi: r173 }
         r182: ? <- ArithK(Add, r11, -64)
         r183: ? <- StoreMem { addr: r182, value: r17 }
         r186: ? <- LoadMem { addr: r168, size: 1 }
         r187: ? <- Const { value: 0, size: 1 }
         r192: ? <- IsZero(r186)
         r195: ? <- SetJumpCondition(r192)
         r1524: ? <- Upsilon { value: r1490, phi_ref: r1508 }
         r1525: ? <- Upsilon { value: r187, phi_ref: r1509 }
         r1526: ? <- Upsilon { value: r14, phi_ref: r1491 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  7)  r1491: ? <- Phi
         r198: ? <- ArithK(Add, r1491, 16)
  (  6)  r199: ? <- LoadMem { addr: r198, size: 8 }
         r202: ? <- ArithK(Add, r11, -120)
         r203: ? <- StoreMem { addr: r202, value: r199 }
         r206: ? <- IsZero(r199)
         r211: ? <- SetJumpCondition(r206)
         r1540: ? <- Upsilon { value: r18, phi_ref: r1513 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r214: ? <- Part { src: r17, offset: 0, size: 4 }
         r215: ? <- Part { src: r17, offset: 0, size: 4 }
         r216: ? <- Arith(BitXor, r214, r215)
         r217: ? <- Part { src: r17, offset: 4, size: 4 }
  (  9)  r218: ? <- Concat { lo: r216, hi: r217 }
         r225: ? <- Part { src: r199, offset: 0, size: 4 }
  (  2)  r227: ? <- ArithK(BitAnd, r225, 3)
         r228: ? <- Part { src: r199, offset: 4, size: 4 }
  (  2)  r229: ? <- Concat { lo: r227, hi: r228 }
         r233: ? <- IsZero(r227)
         r236: ? <- SetJumpCondition(r233)
         r1541: ? <- Upsilon { value: r1490, phi_ref: r1497 }
         r1542: ? <- Upsilon { value: r168, phi_ref: r1498 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r239: ? <- ArithK(Add, r229, -1)
         r243: ? <- IsZero(r239)
         r246: ? <- SetJumpCondition(r243)
         r1563: ? <- Upsilon { value: r1490, phi_ref: r1495 }
         r1564: ? <- Upsilon { value: r168, phi_ref: r1496 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r249: ? <- ArithK(Add, r229, -3)
         r253: ? <- IsZero(r249)
         r256: ? <- SetJumpCondition(r253)
         r1572: ? <- Upsilon { value: r1490, phi_ref: r1493 }
         r1573: ? <- Upsilon { value: r168, phi_ref: r1494 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r259: ? <- ArithK(Add, r168, 8)
  (  2)  r260: ? <- LoadMem { addr: r259, size: 8 }
         r263: ? <- ArithK(Add, r11, -88)
         r264: ? <- StoreMem { addr: r263, value: r1490 }
         r267: ? <- ArithK(Add, r11, -96)
         r268: ? <- StoreMem { addr: r267, value: r168 }
         r271: ? <- ArithK(Add, r11, -128)
         r272: ? <- StoreMem { addr: r271, value: r260 }
         r276: ? <- CArg { value: r260, next_arg: None }
         r277: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r278: ? <- Call { callee: r277, first_arg: Some(r276) }
  (  2)  r298: ? <- Arith(Sub, r278, r139)
         r302: ? <- IsZero(r298)
         r303: ? <- Part { src: r298, offset: 0, size: 1 }
         r305: ? <- SetJumpCondition(r302)
         r1580: ? <- Upsilon { value: r168, phi_ref: r1492 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1414: ? <- ArithK(Add, r11, -96)
         r1415: ? <- StoreMem { addr: r1414, value: r1490 }
         r1417: ? <- ArithK(Add, r11, -128)
         r1418: ? <- StoreMem { addr: r1417, value: r168 }
         r1428: ? <- CArg { value: r303, next_arg: None }
         r1429: ? <- CArg { value: r1418, next_arg: Some(r1428) }
         r1430: ? <- CArg { value: r18, next_arg: Some(r1429) }
         r1431: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1432: ? <- Call { callee: r1431, first_arg: Some(r1430) }
         r1448: ? <- Part { src: r1432, offset: 0, size: 4 }
         r1449: ? <- Part { src: r1432, offset: 0, size: 4 }
         r1450: ? <- Arith(BitAnd, r1448, r1449)
         r1452: ? <- IsZero(r1450)
         r1457: ? <- Not(r1452)
         r1458: ? <- SetJumpCondition(r1457)
         r1581: ? <- Upsilon { value: r168, phi_ref: r1492 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1582: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1583: ? <- Upsilon { value: r168, phi_ref: r1503 }
         r1584: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1585: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1492: ? <- Phi
         r311: ? <- ArithK(Add, r1492, 40)
         r1586: ? <- Upsilon { value: r1490, phi_ref: r1493 }
         r1587: ? <- Upsilon { value: r311, phi_ref: r1494 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1494: ? <- Phi
  (  3)  r1493: ? <- Phi
         r314: ? <- ArithK(Add, r1494, 8)
  (  2)  r315: ? <- LoadMem { addr: r314, size: 8 }
         r318: ? <- ArithK(Add, r11, -96)
         r319: ? <- StoreMem { addr: r318, value: r1493 }
         r323: ? <- ArithK(Add, r11, -128)
         r324: ? <- StoreMem { addr: r323, value: r315 }
         r328: ? <- CArg { value: r315, next_arg: None }
         r329: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r330: ? <- Call { callee: r329, first_arg: Some(r328) }
  (  2)  r349: ? <- Arith(Sub, r330, r139)
         r353: ? <- IsZero(r349)
         r354: ? <- Part { src: r349, offset: 0, size: 1 }
         r356: ? <- SetJumpCondition(r353)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1365: ? <- ArithK(Add, r11, -128)
         r1366: ? <- StoreMem { addr: r1365, value: r1493 }
         r1376: ? <- CArg { value: r354, next_arg: None }
         r1377: ? <- CArg { value: r1366, next_arg: Some(r1376) }
         r1378: ? <- CArg { value: r18, next_arg: Some(r1377) }
         r1379: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1380: ? <- Call { callee: r1379, first_arg: Some(r1378) }
         r1395: ? <- Part { src: r1380, offset: 0, size: 4 }
         r1396: ? <- Part { src: r1380, offset: 0, size: 4 }
         r1397: ? <- Arith(BitAnd, r1395, r1396)
         r1399: ? <- IsZero(r1397)
         r1404: ? <- Not(r1399)
         r1405: ? <- SetJumpCondition(r1404)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1574: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1575: ? <- Upsilon { value: r1494, phi_ref: r1503 }
         r1576: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1577: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r368: ? <- ArithK(Add, r1494, 40)
         r1578: ? <- Upsilon { value: r1493, phi_ref: r1495 }
         r1579: ? <- Upsilon { value: r368, phi_ref: r1496 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1496: ? <- Phi
  (  3)  r1495: ? <- Phi
         r377: ? <- ArithK(Add, r1496, 8)
  (  2)  r378: ? <- LoadMem { addr: r377, size: 8 }
         r381: ? <- ArithK(Add, r11, -96)
         r382: ? <- StoreMem { addr: r381, value: r1495 }
         r386: ? <- ArithK(Add, r11, -128)
         r387: ? <- StoreMem { addr: r386, value: r378 }
         r391: ? <- CArg { value: r378, next_arg: None }
         r392: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r393: ? <- Call { callee: r392, first_arg: Some(r391) }
  (  3)  r412: ? <- Arith(Sub, r393, r139)
         r416: ? <- IsZero(r412)
         r417: ? <- Part { src: r412, offset: 0, size: 1 }
         r419: ? <- SetJumpCondition(r416)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1316: ? <- ArithK(Add, r11, -128)
         r1317: ? <- StoreMem { addr: r1316, value: r1495 }
         r1327: ? <- CArg { value: r417, next_arg: None }
         r1328: ? <- CArg { value: r1317, next_arg: Some(r1327) }
         r1329: ? <- CArg { value: r18, next_arg: Some(r1328) }
         r1330: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1331: ? <- Call { callee: r1330, first_arg: Some(r1329) }
         r1346: ? <- Part { src: r1331, offset: 0, size: 4 }
         r1347: ? <- Part { src: r1331, offset: 0, size: 4 }
         r1348: ? <- Arith(BitAnd, r1346, r1347)
         r1350: ? <- IsZero(r1348)
         r1355: ? <- Not(r1350)
         r1356: ? <- SetJumpCondition(r1355)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1565: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1566: ? <- Upsilon { value: r1496, phi_ref: r1503 }
         r1567: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1568: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r426: ? <- ArithK(Add, r218, 1)
         r435: ? <- ArithK(Add, r1496, 40)
         r443: ? <- Arith(Sub, r426, r199)
         r447: ? <- IsZero(r443)
         r450: ? <- SetJumpCondition(r447)
         r1569: ? <- Upsilon { value: r412, phi_ref: r1513 }
         r1570: ? <- Upsilon { value: r1495, phi_ref: r1497 }
         r1571: ? <- Upsilon { value: r435, phi_ref: r1498 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1498: ? <- Phi
         r1497: ? <- Phi
         r453: ? <- ArithK(Add, r11, -80)
         r454: ? <- StoreMem { addr: r453, value: r1491 }
         r457: ? <- ArithK(Add, r11, -96)
         r458: ? <- StoreMem { addr: r457, value: r174 }
         r460: ? <- ArithK(Add, r11, -88)
         r461: ? <- StoreMem { addr: r460, value: r1497 }
         r1546: ? <- Upsilon { value: r1498, phi_ref: r1499 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  9)  r1499: ? <- Phi
         r617: ? <- ArithK(Add, r1499, 8)
         r618: ? <- LoadMem { addr: r617, size: 8 }
         r625: ? <- CArg { value: r618, next_arg: None }
         r626: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r627: ? <- Call { callee: r626, first_arg: Some(r625) }
  (  2)  r638: ? <- Arith(Sub, r627, r139)
         r642: ? <- IsZero(r638)
         r643: ? <- Part { src: r638, offset: 0, size: 1 }
         r645: ? <- Not(r642)
         r646: ? <- SetJumpCondition(r645)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r649: ? <- ArithK(Add, r11, -136)
         r663: ? <- CArg { value: r643, next_arg: None }
         r664: ? <- CArg { value: r649, next_arg: Some(r663) }
         r665: ? <- CArg { value: r18, next_arg: Some(r664) }
         r666: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r667: ? <- Call { callee: r666, first_arg: Some(r665) }
         r678: ? <- Part { src: r667, offset: 0, size: 4 }
         r679: ? <- Part { src: r667, offset: 0, size: 4 }
         r680: ? <- Arith(BitAnd, r678, r679)
         r682: ? <- IsZero(r680)
         r687: ? <- Not(r682)
         r688: ? <- SetJumpCondition(r687)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r1547: ? <- Upsilon { value: r218, phi_ref: r1502 }
         r1548: ? <- Upsilon { value: r1499, phi_ref: r1503 }
         r1549: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1550: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r464: ? <- ArithK(Add, r1499, 48)
         r465: ? <- LoadMem { addr: r464, size: 8 }
         r468: ? <- ArithK(Add, r1499, 40)
  (  2)  r471: ? <- ArithK(Add, r218, 1)
         r478: ? <- ArithK(Add, r11, -128)
         r479: ? <- StoreMem { addr: r478, value: r465 }
         r483: ? <- CArg { value: r471, next_arg: None }
         r484: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r485: ? <- Call { callee: r484, first_arg: Some(r483) }
  (  2)  r500: ? <- Arith(Sub, r485, r139)
         r504: ? <- IsZero(r500)
         r505: ? <- Part { src: r500, offset: 0, size: 1 }
         r507: ? <- SetJumpCondition(r504)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r705: ? <- ArithK(Add, r11, -136)
         r718: ? <- CArg { value: r505, next_arg: None }
         r719: ? <- CArg { value: r705, next_arg: Some(r718) }
         r720: ? <- CArg { value: r18, next_arg: Some(r719) }
         r721: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r722: ? <- Call { callee: r721, first_arg: Some(r720) }
         r733: ? <- Part { src: r722, offset: 0, size: 4 }
         r734: ? <- Part { src: r722, offset: 0, size: 4 }
         r735: ? <- Arith(BitAnd, r733, r734)
         r737: ? <- IsZero(r735)
         r742: ? <- Not(r737)
         r743: ? <- SetJumpCondition(r742)
         r1556: ? <- Upsilon { value: r468, phi_ref: r1501 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r510: ? <- ArithK(Add, r1499, 88)
         r511: ? <- LoadMem { addr: r510, size: 8 }
         r514: ? <- ArithK(Add, r1499, 80)
         r517: ? <- ArithK(Add, r218, 2)
         r522: ? <- ArithK(Add, r11, -128)
         r523: ? <- StoreMem { addr: r522, value: r511 }
         r527: ? <- CArg { value: r517, next_arg: None }
         r528: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r529: ? <- Call { callee: r528, first_arg: Some(r527) }
  (  2)  r544: ? <- Arith(Sub, r529, r139)
         r548: ? <- IsZero(r544)
         r549: ? <- Part { src: r544, offset: 0, size: 1 }
         r551: ? <- SetJumpCondition(r548)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1120: ? <- ArithK(Add, r11, -136)
         r1133: ? <- CArg { value: r549, next_arg: None }
         r1134: ? <- CArg { value: r1120, next_arg: Some(r1133) }
         r1135: ? <- CArg { value: r18, next_arg: Some(r1134) }
         r1136: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1137: ? <- Call { callee: r1136, first_arg: Some(r1135) }
         r1148: ? <- Part { src: r1137, offset: 0, size: 4 }
         r1149: ? <- Part { src: r1137, offset: 0, size: 4 }
         r1150: ? <- Arith(BitAnd, r1148, r1149)
         r1152: ? <- IsZero(r1150)
         r1157: ? <- Not(r1152)
         r1158: ? <- SetJumpCondition(r1157)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1558: ? <- Upsilon { value: r514, phi_ref: r1501 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r554: ? <- ArithK(Add, r1499, 128)
         r555: ? <- LoadMem { addr: r554, size: 8 }
         r558: ? <- ArithK(Add, r1499, 120)
         r561: ? <- ArithK(Add, r218, 3)
         r566: ? <- ArithK(Add, r11, -128)
         r567: ? <- StoreMem { addr: r566, value: r555 }
         r571: ? <- CArg { value: r561, next_arg: None }
         r572: strlen <TypeID(340440v1)> <- Const { value: 4199136, size: 8 }
         r573: ? <- Call { callee: r572, first_arg: Some(r571) }
  (  3)  r588: ? <- Arith(Sub, r573, r139)
         r592: ? <- IsZero(r588)
         r593: ? <- Part { src: r588, offset: 0, size: 1 }
         r595: ? <- SetJumpCondition(r592)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1162: ? <- ArithK(Add, r11, -136)
         r1175: ? <- CArg { value: r593, next_arg: None }
         r1176: ? <- CArg { value: r1162, next_arg: Some(r1175) }
         r1177: ? <- CArg { value: r18, next_arg: Some(r1176) }
         r1178: strncmp <TypeID(340436v1)> <- Const { value: 4199232, size: 8 }
  (  2)  r1179: ? <- Call { callee: r1178, first_arg: Some(r1177) }
         r1190: ? <- Part { src: r1179, offset: 0, size: 4 }
         r1191: ? <- Part { src: r1179, offset: 0, size: 4 }
         r1192: ? <- Arith(BitAnd, r1190, r1191)
         r1194: ? <- IsZero(r1192)
         r1199: ? <- Not(r1194)
         r1200: ? <- SetJumpCondition(r1199)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1560: ? <- Upsilon { value: r558, phi_ref: r1501 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1501: ? <- Phi
         r1551: ? <- Upsilon { value: r471, phi_ref: r1502 }
         r1552: ? <- Upsilon { value: r1501, phi_ref: r1503 }
         r1553: ? <- Upsilon { value: r1491, phi_ref: r1504 }
         r1554: ? <- Upsilon { value: r174, phi_ref: r1505 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1505: ? <- Phi
         r1504: ? <- Phi
         r1503: ? <- Phi
         r1502: ? <- Phi
         r765: ? <- ArithK(Mul, r1505, 8)
         r766: ? <- Arith(Add, r19, r765)
         r767: ? <- StoreMem { addr: r766, value: r1502 }
         r768: ? <- Arith(Sub, r1503, r1504)
         r772: ? <- IsZero(r768)
         r775: ? <- SetJumpCondition(r772)
         r1543: ? <- Upsilon { value: r18, phi_ref: r1513 }
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r778: ? <- ArithK(Add, r24, 32)
         r779: ? <- LoadMem { addr: r778, size: 8 }
         r785: ? <- IsZero(r779)
         r788: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r789: ? <- Not(r785)
         r790: ? <- SetJumpCondition(r789)
         r1544: ? <- Upsilon { value: r18, phi_ref: r1510 }
         r1545: ? <- Upsilon { value: r18, phi_ref: r1506 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1506: ? <- Phi
         r792: ? <- Part { src: r1506, offset: 0, size: 1 }
         r793: ? <- Part { src: r1506, offset: 0, size: 1 }
         r794: ? <- Arith(BitAnd, r792, r793)
         r796: ? <- IsZero(r794)
         r801: ? <- SetJumpCondition(r796)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r804: ? <- ArithK(Add, r1490, 1)
         r806: ? <- Const { value: 46, size: 4 }
         r810: ? <- ArithK(Add, r11, -136)
         r811: ? <- StoreMem { addr: r810, value: r804 }
         r819: ? <- CArg { value: r811, next_arg: None }
         r820: ? <- CArg { value: r806, next_arg: Some(r819) }
         r821: strchr <TypeID(340442v1)> <- Const { value: 4199040, size: 8 }
  (  2)  r822: ? <- Call { callee: r821, first_arg: Some(r820) }
         r836: ? <- IsZero(r822)
         r841: ? <- SetJumpCondition(r836)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r853: ? <- ArithK(Add, r174, 1)
         r871: ? <- LoadMem { addr: r20, size: 8 }
         r872: ? <- Arith(Sub, r853, r871)
         r874: ? <- CarryOf(r872)
         r879: ? <- Not(r874)
         r880: ? <- SetJumpCondition(r879)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1240: ? <- ArithK(Add, r174, 1)
         r1249: __builtin_strlen <TypeID(358627v1)> <- Const { value: 4199136, size: 8 }
         r1250: ? <- Call { callee: r1249, first_arg: None }
         r1272: ? <- LoadMem { addr: r20, size: 8 }
         r1273: ? <- Arith(Sub, r1240, r1272)
         r1275: ? <- CarryOf(r1273)
         r1280: ? <- SetJumpCondition(r1275)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1535: ? <- Upsilon { value: r17, phi_ref: r1514 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r884: ? <- ArithK(Add, r24, 24)
         r885: ? <- LoadMem { addr: r884, size: 8 }
         r889: ? <- LoadMem { addr: r885, size: 1 }
         r890: ? <- Const { value: 0, size: 1 }
         r895: ? <- IsZero(r889)
         r898: ? <- Not(r895)
         r899: ? <- SetJumpCondition(r898)
         r1536: ? <- Upsilon { value: r24, phi_ref: r1491 }
         r1538: ? <- Upsilon { value: r822, phi_ref: r1508 }
         r1539: ? <- Upsilon { value: r890, phi_ref: r1509 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1534: ? <- Upsilon { value: r17, phi_ref: r1511 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r602: ? <- ArithK(Add, r218, 4)
         r605: ? <- ArithK(Add, r1499, 160)
         r607: ? <- Arith(Sub, r602, r199)
         r611: ? <- IsZero(r607)
         r614: ? <- SetJumpCondition(r611)
         r1561: ? <- Upsilon { value: r588, phi_ref: r1513 }
         r1562: ? <- Upsilon { value: r605, phi_ref: r1499 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1509: ? <- Phi
  (  2)  r1508: ? <- Phi
         r916: ? <- Const { value: 10, size: 4 }
         r920: ? <- ArithK(Add, r11, -128)
         r921: ? <- StoreMem { addr: r920, value: r1508 }
         r922: ? <- CArg { value: r1509, next_arg: None }
         r923: ? <- CArg { value: r921, next_arg: Some(r922) }
         r924: ? <- CArg { value: r916, next_arg: Some(r923) }
         r925: je_malloc_strtoumax <TypeID(340432v1)> <- Const { value: 6451424, size: 8 }
  (  2)  r926: ? <- Call { callee: r925, first_arg: Some(r924) }
  (  6)  r942: ? <- ArithK(Add, r926, 1)
         r946: ? <- IsZero(r942)
         r950: ? <- SetJumpCondition(r946)
         r1530: ? <- Upsilon { value: r942, phi_ref: r1513 }
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r953: ? <- ArithK(Add, r14, 24)
  (  2)  r954: ? <- LoadMem { addr: r953, size: 8 }
         r957: ? <- ArithK(Add, r11, -136)
         r958: ? <- StoreMem { addr: r957, value: r1508 }
         r961: ? <- LoadMem { addr: r954, size: 1 }
         r967: ? <- IsZero(r961)
         r970: ? <- Not(r967)
         r971: ? <- SetJumpCondition(r970)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r987: ? <- LoadMem { addr: r20, size: 8 }
         r991: ? <- CArg { value: r942, next_arg: None }
         r992: ? <- CArg { value: r987, next_arg: Some(r991) }
         r993: ? <- CArg { value: r19, next_arg: Some(r992) }
         r994: ? <- CArg { value: r13, next_arg: Some(r993) }
         r996: ? <- ArithK(Add, r954, 8)
         r997: ? <- LoadMem { addr: r996, size: 8 }
         r998: ? <- LoadMem { addr: r997, size: 8 }
         r999: ? <- Call { callee: r998, first_arg: Some(r994) }
         r1013: ? <- IsZero(r942)
         r1018: ? <- SetJumpCondition(r1013)
         r1531: ? <- Upsilon { value: r942, phi_ref: r1513 }
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r1025: ? <- ArithK(Add, r926, 33)
         r1026: ? <- LoadMem { addr: r1025, size: 8 }
         r1032: ? <- IsZero(r1026)
         r1037: ? <- ArithK(Mul, r174, 8)
         r1038: ? <- Arith(Add, r19, r1037)
         r1039: ? <- StoreMem { addr: r1038, value: r942 }
         r1040: ? <- NotYetImplemented("unsupported: movzx edi,byte ptr [r8]")
         r1041: ? <- SetJumpCondition(r1032)
         r1532: ? <- Upsilon { value: r13, phi_ref: r1506 }
         r1533: ? <- Upsilon { value: r13, phi_ref: r1510 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1510: ? <- Phi
         r1047: ? <- Part { src: r1510, offset: 0, size: 1 }
         r1048: ? <- Part { src: r1510, offset: 0, size: 1 }
         r1049: ? <- Arith(BitAnd, r1047, r1048)
         r1051: ? <- IsZero(r1049)
         r1056: ? <- Not(r1051)
         r1057: ? <- SetJumpCondition(r1056)
         r1528: ? <- Upsilon { value: r18, phi_ref: r1513 }
         r1529: ? <- Upsilon { value: r17, phi_ref: r1511 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1511: ? <- Phi
         r1060: ? <- ArithK(Add, r174, 1)
         r1068: ? <- StoreMem { addr: r20, value: r1060 }
         r1071: ? <- IsZero(r1511)
         r1076: ? <- Not(r1071)
         r1077: ? <- SetJumpCondition(r1076)
         r1527: ? <- Upsilon { value: r1511, phi_ref: r1515 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1519: ? <- Upsilon { value: r17, phi_ref: r1514 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1514: ? <- Phi
         r1288: ? <- IsZero(r1514)
         r1293: ? <- SetJumpCondition(r1288)
         r1521: ? <- Upsilon { value: r1514, phi_ref: r1515 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1515: ? <- Phi
         r1297: ? <- StoreMem { addr: r1515, value: r24 }
         r1298: ? <- Part { src: r18, offset: 0, size: 4 }
         r1299: ? <- Part { src: r18, offset: 0, size: 4 }
         r1300: ? <- Arith(BitXor, r1298, r1299)
         r1301: ? <- Part { src: r18, offset: 4, size: 4 }
         r1302: ? <- Concat { lo: r1300, hi: r1301 }
         r1520: ? <- Upsilon { value: r1302, phi_ref: r1512 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1079: ? <- Part { src: r18, offset: 0, size: 4 }
         r1080: ? <- Part { src: r18, offset: 0, size: 4 }
         r1081: ? <- Arith(BitXor, r1079, r1080)
         r1082: ? <- Part { src: r18, offset: 4, size: 4 }
         r1083: ? <- Concat { lo: r1081, hi: r1082 }
         r1522: ? <- Upsilon { value: r1083, phi_ref: r1512 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1512: ? <- Phi
         r1117: ? <- SetReturnValue(r1512)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1513: ? <- Phi
         r1212: ? <- Const { value: 2, size: 4 }
         r1213: ? <- Part { src: r1513, offset: 4, size: 4 }
         r1214: ? <- Concat { lo: r1212, hi: r1213 }
         r1233: ? <- SetReturnValue(r1214)



T0: {
  [pre:RSP - 8]:* := pre:R15;
  [pre:RSP - 16]:* := pre:R14;
  [pre:RSP - 24]:* := pre:R13;
  [pre:RSP - 32]:* := pre:R12;
  [pre:RSP - 40]:* := pre:RBP;
  [pre:RSP - 48]:* := pre:RBX;
  [pre:RSP - 72]:* := pre:RDI;
  [pre:RSP - 104]:* := pre:R8;
  [pre:RSP - 136]:* := pre:RDX;
  [pre:RSP - 112]:* := pre:R9;
  let r113: Bytes(8) = strchr(46,
                              ([pre:RSP - 112]:* := pre:R9));
  ;
  r1490 := strchr(46,
                  ([pre:RSP - 112]:* := pre:R9));
  if IsZero (r113) {
    __builtin_strlen();
    r1490 := pre:RDX + r113;
    goto T1
  }
  goto T1
  T1: {
    let mut r1490: Bytes(8);
    let r139: Bytes(8) = r1490 - pre:RDX;
    ;
    r1513 := pre:RDX;
    if IsZero (r139) {
      goto T42
    }
    ;
    if IsZero ([pre:R9]:8) {
      r1514 := pre:RCX;
      goto T45
    }
    let r168: Bytes(8) = [pre:RSI + 24]:8;
    let r174: Bytes(8) = pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
    [pre:RSP - 64]:* := pre:RCX;
    ;
    r1508 := phi ();
    r1509 := 0;
    r1491 := pre:RSI;
    if IsZero ([r168]:1) {
      goto T30
    }
    goto T4
    T4: {
      let mut r1491: Bytes(8);
      let r199: Bytes(8) = [r1491 + 16]:8;
      [pre:RSP - 120]:* := r199;
      ;
      r1513 := pre:RDX;
      if IsZero (r199) {
        goto T42
      }
      let r218: Bytes(8) = pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
      let r227: Bytes(4) = r199[4 .. 0] & 3;
      let r229: Bytes(8) = r199[8 .. 4] ++ r227;
      ;
      r1497 := phi ();
      r1498 := [pre:RSI + 24]:8;
      if IsZero (r227) {
        goto T14
      }
      ;
      r1495 := phi ();
      r1496 := [pre:RSI + 24]:8;
      if IsZero (r229 - 1) {
        goto T12
      }
      ;
      r1493 := phi ();
      r1494 := [pre:RSI + 24]:8;
      if IsZero (r229 - 3) {
        goto T10
      }
      let r260: Bytes(8) = [r168 + 8]:8;
      [pre:RSP - 88]:* := r1490;
      [pre:RSP - 96]:* := r168;
      [pre:RSP - 128]:* := r260;
      strlen(r260);
      let r298: Bytes(8) = strlen(r260) - r139;
      ;
      r1492 := [pre:RSI + 24]:8;
      if IsZero (r298) {
        [pre:RSP - 96]:* := r1490;
        [pre:RSP - 128]:* := r168;
        let r1432: Bytes(8) = strncmp(pre:RDX,
                                      ([pre:RSP - 128]:* := r168),
                                      r298[1 .. 0]);
        ;
        r1492 := [pre:RSI + 24]:8;
        if ! IsZero (r1432[4 .. 0] & r1432[4 .. 0]) {
          goto T9
        }
        r1502 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
        r1503 := [pre:RSI + 24]:8;
        r1504 := phi ();
        r1505 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
        goto T24
      }
      goto T9
      T9: {
        let mut r1492: Bytes(8);
        r1493 := phi ();
        r1494 := r1492 + 40;
        goto T10
      }
      
      T10: {
        let mut r1494: Bytes(8);
        let mut r1493: Bytes(8);
        let r315: Bytes(8) = [r1494 + 8]:8;
        [pre:RSP - 96]:* := r1493;
        [pre:RSP - 128]:* := r315;
        strlen(r315);
        let r349: Bytes(8) = strlen(r315) - r139;
        ;
        if IsZero (r349) {
          [pre:RSP - 128]:* := r1493;
          let r1380: Bytes(8) = strncmp(pre:RDX,
                                        ([pre:RSP - 128]:* := r1493),
                                        r349[1 .. 0]);
          ;
          if ! IsZero (r1380[4 .. 0] & r1380[4 .. 0]) {
            goto T11
          }
          r1502 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1503 := phi ();
          r1504 := phi ();
          r1505 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T11
        T11: {
          r1495 := phi ();
          r1496 := r1494 + 40;
          goto T12
        }
      
      }
      
      T12: {
        let mut r1496: Bytes(8);
        let mut r1495: Bytes(8);
        let r378: Bytes(8) = [r1496 + 8]:8;
        [pre:RSP - 96]:* := r1495;
        [pre:RSP - 128]:* := r378;
        strlen(r378);
        let r412: Bytes(8) = strlen(r378) - r139;
        ;
        if IsZero (r412) {
          [pre:RSP - 128]:* := r1495;
          let r1331: Bytes(8) = strncmp(pre:RDX,
                                        ([pre:RSP - 128]:* := r1495),
                                        r412[1 .. 0]);
          ;
          if ! IsZero (r1331[4 .. 0] & r1331[4 .. 0]) {
            goto T13
          }
          r1502 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1503 := phi ();
          r1504 := phi ();
          r1505 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
        }
        goto T13
        T13: {
          ;
          r1513 := strlen(r378) - r139;
          r1497 := phi ();
          r1498 := r1496 + 40;
          if IsZero (r218 + 1 - r199) {
            goto T42
          }
          goto T14
        }
      
      }
      
      T14: {
        let mut r1498: Bytes(8);
        let mut r1497: Bytes(8);
        [pre:RSP - 80]:* := r1491;
        [pre:RSP - 96]:* := r174;
        [pre:RSP - 88]:* := r1497;
        r1499 := phi ();
        goto T19
        T19: {
          let mut r1499: Bytes(8);
          strlen([r1499 + 8]:8);
          let r638: Bytes(8) = strlen([r1499 + 8]:8) - r139;
          ;
          if ! IsZero (r638) {
            goto T15
          }
          let r667: Bytes(8) = strncmp(pre:RDX,
                                       (pre:RSP - 136),
                                       r638[1 .. 0]);
          ;
          if ! IsZero (r667[4 .. 0] & r667[4 .. 0]) {
            goto T15
          }
          r1502 := pre:RCX[8 .. 4] ++ (pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0]);
          r1503 := phi ();
          r1504 := phi ();
          r1505 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
          goto T24
          T15: {
            let r471: Bytes(8) = r218 + 1;
            [pre:RSP - 128]:* := [r1499 + 48]:8;
            strlen(r471);
            let r500: Bytes(8) = strlen(r471) - r139;
            ;
            if IsZero (r500) {
              let r722: Bytes(8) = strncmp(pre:RDX,
                                           (pre:RSP - 136),
                                           r500[1 .. 0]);
              ;
              r1501 := r1499 + 40;
              if ! IsZero (r722[4 .. 0] & r722[4 .. 0]) {
                goto T16
              }
              goto T23
            }
            goto T16
            T16: {
              [pre:RSP - 128]:* := [r1499 + 88]:8;
              strlen((r218 + 2));
              let r544: Bytes(8) = strlen((r218 + 2)) - r139;
              ;
              if IsZero (r544) {
                let r1137: Bytes(8) = strncmp(pre:RDX,
                                              (pre:RSP - 136),
                                              r544[1 .. 0]);
                ;
                if ! IsZero (r1137[4 .. 0] & r1137[4 .. 0]) {
                  goto T17
                }
                r1501 := r1499 + 80;
                goto T23
              }
              goto T17
              T17: {
                [pre:RSP - 128]:* := [r1499 + 128]:8;
                strlen((r218 + 3));
                let r588: Bytes(8) = strlen((r218 + 3)) - r139;
                ;
                if IsZero (r588) {
                  let r1179: Bytes(8) = strncmp(pre:RDX,
                                                (pre:RSP - 136),
                                                r588[1 .. 0]);
                  ;
                  if ! IsZero (r1179[4 .. 0] & r1179[4 .. 0]) {
                    goto T18
                  }
                  r1501 := r1499 + 120;
                  goto T23
                }
                goto T18
                T18: {
                  ;
                  r1513 := strlen((r218 + 3)) - r139;
                  r1499 := r1499 + 160;
                  if IsZero (r218 + 4 - r199) {
                    goto T42
                  }
                  loop T19
                }
              
              }
            
            }
            
            T23: {
              let mut r1501: Bytes(8);
              r1502 := r218 + 1;
              r1503 := phi ();
              r1504 := phi ();
              r1505 := pre:R15[8 .. 4] ++ (pre:R15[4 .. 0] ^ pre:R15[4 .. 0]);
              goto T24
            }
          
          }
        
        }
      
      }
      
      T24: {
        let mut r1505: Bytes(8);
        let mut r1504: Bytes(8);
        let mut r1503: Bytes(8);
        let mut r1502: Bytes(8);
        [pre:R8 + r1505 * 8]:* := r1502;
        ;
        r1513 := pre:RDX;
        if IsZero (r1503 - r1504) {
          goto T42
        }
        TODO /* unsupported: movzx edi,byte ptr [r8] */;
        ;
        r1510 := pre:RDX;
        r1506 := pre:RDX;
        if ! IsZero ([pre:R13 + 32]:8) {
          goto T34
        }
        goto T26
      }
    
    }
    
    T26: {
      let mut r1506: Bytes(8);
      ;
      if IsZero (r1506[1 .. 0] & r1506[1 .. 0]) {
        r1511 := pre:RCX;
        goto T35
      }
      [pre:RSP - 136]:* := r1490 + 1;
      let r822: Bytes(8) = strchr(46,
                                  ([pre:RSP - 136]:* := r1490 + 1));
      ;
      if IsZero (r822) {
        __builtin_strlen();
        ;
        if CarryOf (r174 + 1 - [pre:R9]:8) {
          goto T29
        }
        goto T44
      }
      ;
      if ! CarryOf (r174 + 1 - [pre:R9]:8) {
        goto T44
      }
      goto T29
      T29: {
        ;
        r1491 := pre:R13;
        r1508 := strchr(46,
                        ([pre:RSP - 136]:* := r1490 + 1));
        r1509 := 0;
        if ! IsZero ([[pre:R13 + 24]:8]:1) {
          goto T4
        }
        goto T30
      }
      
      T44: {
        r1514 := pre:RCX;
        goto T45
      }
    
    }
    
    T30: {
      let mut r1509: Bytes(1);
      let mut r1508: Bytes(8);
      [pre:RSP - 128]:* := r1508;
      let r926: Bytes(8) = je_malloc_strtoumax(10,
                                               ([pre:RSP - 128]:* := r1508),
                                               r1509);
      let r942: Bytes(8) = r926 + 1;
      ;
      r1513 := r926 + 1;
      if IsZero (r942) {
        goto T42
      }
      let r954: Bytes(8) = [pre:RSI + 24]:8;
      [pre:RSP - 136]:* := r1508;
      ;
      if ! IsZero ([r954]:1) {
        goto ext 0x403143
      }
      [[r954 + 8]:8]:8(pre:RDI,
                       pre:R8,
                       [pre:R9]:8,
                       r942);
      ;
      r1513 := r926 + 1;
      if IsZero (r942) {
        goto T42
      }
      [pre:R8 + r174 * 8]:* := r942;
      TODO /* unsupported: movzx edi,byte ptr [r8] */;
      ;
      r1506 := pre:RDI;
      r1510 := pre:RDI;
      if IsZero ([r926 + 33]:8) {
        goto T26
      }
      goto T34
    }
    
    T34: {
      let mut r1510: Bytes(8);
      ;
      r1513 := pre:RDX;
      r1511 := pre:RCX;
      if ! IsZero (r1510[1 .. 0] & r1510[1 .. 0]) {
        goto T42
      }
      goto T35
    }
    
    T35: {
      let mut r1511: Bytes(8);
      [pre:R9]:* := r174 + 1;
      ;
      r1515 := phi ();
      if ! IsZero (r1511) {
        goto T46
      }
      goto T36
    }
    
    T36: {
      r1512 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T37: {
      let mut r1512: Bytes(8);
      ;
      return r1512
    }
    
    T45: {
      let mut r1514: Bytes(8);
      ;
      r1515 := phi ();
      if IsZero (r1514) {
        goto T36
      }
      goto T46
    }
    
    T46: {
      let mut r1515: Bytes(8);
      [r1515]:* := pre:R13;
      r1512 := pre:RDX[8 .. 4] ++ (pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0]);
      goto T37
    }
    
    T42: {
      let mut r1513: Bytes(8);
      ;
      return r1513[8 .. 4] ++ 2
    }
  
  }

}
