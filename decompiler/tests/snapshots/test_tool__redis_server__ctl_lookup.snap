---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  1453 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
0x5ddf40:
   42 r12 <- ArithK(Add, r12, -8)
   43 r46 <- StoreMem { addr: r12, value: r27 }
0x5ddf42:
   44 r12 <- ArithK(Add, r12, -8)
   45 r46 <- StoreMem { addr: r12, value: r26 }
0x5ddf44:
   46 r26 <- Get(r15)
0x5ddf47:
   47 r45 <- Int { value: 46, size: 4 }
   48 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   49 r15 <- Get(r45)
0x5ddf4c:
   50 r12 <- ArithK(Add, r12, -8)
   51 r46 <- StoreMem { addr: r12, value: r25 }
0x5ddf4e:
   52 r12 <- ArithK(Add, r12, -8)
   53 r46 <- StoreMem { addr: r12, value: r24 }
0x5ddf50:
   54 r12 <- ArithK(Add, r12, -8)
   55 r46 <- StoreMem { addr: r12, value: r11 }
0x5ddf51:
   56 r12 <- ArithK(Add, r12, -8)
   57 r46 <- StoreMem { addr: r12, value: r17 }
0x5ddf52:
   58 r17 <- Get(r18)
0x5ddf55:
   59 r46 <- Int { value: 88, size: 8 }
   60 r12 <- Arith(Sub, r12, r46)
   61 r12 <- Get(r12)
   62 r10 <- OverflowOf(r12)
   63 r2 <- CarryOf(r12)
   64 r6 <- SignOf(r12)
   65 r5 <- IsZero(r12)
   66 r47 <- Part { src: r12, offset: 0, size: 1 }
   67 r3 <- Parity(r47)
0x5ddf59:
   68 r46 <- Int { value: 64, size: 8 }
   69 r46 <- Arith(Add, r46, r12)
   70 r46 <- StoreMem { addr: r46, value: r14 }
0x5ddf5e:
   71 r14 <- Get(r19)
0x5ddf61:
   72 r46 <- Int { value: 32, size: 8 }
   73 r46 <- Arith(Add, r46, r12)
   74 r46 <- StoreMem { addr: r46, value: r20 }
0x5ddf66:
   75 r46 <- Int { value: 0, size: 8 }
   76 r46 <- Arith(Add, r46, r12)
   77 r46 <- StoreMem { addr: r46, value: r19 }
0x5ddf6a:
   78 r46 <- Int { value: 24, size: 8 }
   79 r46 <- Arith(Add, r46, r12)
   80 r46 <- StoreMem { addr: r46, value: r21 }
0x5ddf6f:
   81 r45 <- Int { value: 4199040, size: 8 }
   82 r47 <- Void
   83 r47 <- Get(r14)
   84 r48 <- Void
   85 r48 <- Get(r15)
   86 r48 <- Part { src: r48, offset: 0, size: 4 }
   87 r46 <- CArg { value: r48, next_arg: None }
   88 r46 <- CArg { value: r47, next_arg: Some(r46) }
   89 r46 <- Call { callee: r45, first_arg: Some(r46) }
   90 r2 <- UndefinedBool
   91 r3 <- UndefinedBool
   92 r4 <- UndefinedBool
   93 r5 <- UndefinedBool
   94 r6 <- UndefinedBool
   95 r7 <- UndefinedBool
   96 r8 <- UndefinedBool
   97 r9 <- UndefinedBool
   98 r10 <- UndefinedBool
   99 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5ddf74:
  100 r20 <- Get(r16)
0x5ddf77:
  101 r16 <- Arith(BitAnd, r16, r16)
  102 r6 <- SignOf(r16)
  103 r5 <- IsZero(r16)
  104 r47 <- Part { src: r16, offset: 0, size: 1 }
  105 r3 <- Parity(r16)
  106 r2 <- False
  107 r10 <- False
0x5ddf7a:
  108 r45 <- SetJumpCondition(r5)
  109 r45 <- Control(JmpExtIf(6153216))
0x5ddf80:
  110 r46 <- Int { value: 0, size: 8 }
  111 r46 <- Arith(Add, r46, r12)
  112 r45 <- LoadMem { addr: r46, size: 8 }
  113 r16 <- Get(r45)
0x5ddf84:
  114 r11 <- Get(r20)
0x5ddf87:
  115 r11 <- Arith(Sub, r11, r16)
  116 r11 <- Get(r11)
  117 r10 <- OverflowOf(r11)
  118 r2 <- CarryOf(r11)
  119 r6 <- SignOf(r11)
  120 r5 <- IsZero(r11)
  121 r47 <- Part { src: r11, offset: 0, size: 1 }
  122 r3 <- Parity(r47)
0x5ddf8a:
  123 r45 <- SetJumpCondition(r5)
  124 r45 <- Control(JmpExtIf(6153008))
0x5ddf90:
  125 r46 <- Int { value: 24, size: 8 }
  126 r46 <- Arith(Add, r46, r12)
  127 r45 <- LoadMem { addr: r46, size: 8 }
  128 r19 <- Get(r45)
0x5ddf95:
  129 r46 <- Int { value: 0, size: 8 }
  130 r46 <- Arith(Add, r46, r19)
  131 r45 <- LoadMem { addr: r46, size: 8 }
  132 r47 <- Int { value: 0, size: 8 }
  133 r45 <- Arith(Sub, r45, r47)
  134 r10 <- OverflowOf(r45)
  135 r2 <- CarryOf(r45)
  136 r6 <- SignOf(r45)
  137 r5 <- IsZero(r45)
  138 r48 <- Part { src: r45, offset: 0, size: 1 }
  139 r3 <- Parity(r48)
0x5ddf99:
  140 r45 <- SetJumpCondition(r5)
  141 r45 <- Control(JmpExtIf(6153247))
0x5ddf9f:
  142 r46 <- Int { value: 24, size: 8 }
  143 r46 <- Arith(Add, r46, r26)
  144 r45 <- LoadMem { addr: r46, size: 8 }
  145 r21 <- Get(r45)
0x5ddfa3:
  146 r46 <- Part { src: r27, offset: 0, size: 4 }
  147 r48 <- Part { src: r27, offset: 0, size: 4 }
  148 r46 <- Arith(BitXor, r46, r48)
  149 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  150 r27 <- Get(r46)
  151 r10 <- False
  152 r2 <- False
  153 r6 <- SignOf(r46)
  154 r5 <- IsZero(r46)
  155 r49 <- Part { src: r46, offset: 0, size: 1 }
  156 r3 <- Parity(r49)
0x5ddfa6:
  157 r46 <- Int { value: 72, size: 8 }
  158 r46 <- Arith(Add, r46, r12)
  159 r46 <- StoreMem { addr: r46, value: r17 }
0x5ddfab:
  160 r46 <- Int { value: 0, size: 8 }
  161 r46 <- Arith(Add, r46, r21)
  162 r45 <- LoadMem { addr: r46, size: 1 }
  163 r47 <- Int { value: 0, size: 1 }
  164 r45 <- Arith(Sub, r45, r47)
  165 r10 <- OverflowOf(r45)
  166 r2 <- CarryOf(r45)
  167 r6 <- SignOf(r45)
  168 r5 <- IsZero(r45)
  169 r48 <- Part { src: r45, offset: 0, size: 1 }
  170 r3 <- Parity(r48)
0x5ddfaf:
  171 r45 <- SetJumpCondition(r5)
  172 r45 <- Control(JmpExtIf(6152767))
0x5ddfc0:
  173 r46 <- Int { value: 16, size: 8 }
  174 r46 <- Arith(Add, r46, r26)
  175 r45 <- LoadMem { addr: r46, size: 8 }
  176 r15 <- Get(r45)
0x5ddfc4:
  177 r46 <- Int { value: 16, size: 8 }
  178 r46 <- Arith(Add, r46, r12)
  179 r46 <- StoreMem { addr: r46, value: r15 }
0x5ddfc9:
  180 r15 <- Arith(BitAnd, r15, r15)
  181 r6 <- SignOf(r15)
  182 r5 <- IsZero(r15)
  183 r47 <- Part { src: r15, offset: 0, size: 1 }
  184 r3 <- Parity(r15)
  185 r2 <- False
  186 r10 <- False
0x5ddfcc:
  187 r45 <- SetJumpCondition(r5)
  188 r45 <- Control(JmpExtIf(6153008))
0x5ddfd2:
  189 r24 <- Get(r21)
0x5ddfd5:
  190 r46 <- Part { src: r17, offset: 0, size: 4 }
  191 r48 <- Part { src: r17, offset: 0, size: 4 }
  192 r46 <- Arith(BitXor, r46, r48)
  193 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  194 r17 <- Get(r46)
  195 r10 <- False
  196 r2 <- False
  197 r6 <- SignOf(r46)
  198 r5 <- IsZero(r46)
  199 r49 <- Part { src: r46, offset: 0, size: 1 }
  200 r3 <- Parity(r49)
0x5ddfd7:
  201 r46 <- Part { src: r15, offset: 0, size: 4 }
  202 r47 <- Int { value: 3, size: 4 }
  203 r46 <- Arith(BitAnd, r46, r47)
  204 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  205 r15 <- Get(r46)
  206 r10 <- False
  207 r2 <- False
  208 r6 <- SignOf(r46)
  209 r5 <- IsZero(r46)
  210 r48 <- Part { src: r46, offset: 0, size: 1 }
  211 r3 <- Parity(r48)
0x5ddfda:
  212 r45 <- SetJumpCondition(r5)
  213 r45 <- Control(JmpExtIf(6152353))
0x5ddfe0:
  214 r46 <- Int { value: 1, size: 8 }
  215 r15 <- Arith(Sub, r15, r46)
  216 r10 <- OverflowOf(r15)
  217 r2 <- CarryOf(r15)
  218 r6 <- SignOf(r15)
  219 r5 <- IsZero(r15)
  220 r47 <- Part { src: r15, offset: 0, size: 1 }
  221 r3 <- Parity(r47)
0x5ddfe4:
  222 r45 <- SetJumpCondition(r5)
  223 r45 <- Control(JmpExtIf(6152286))
0x5ddfe6:
  224 r46 <- Int { value: 2, size: 8 }
  225 r15 <- Arith(Sub, r15, r46)
  226 r10 <- OverflowOf(r15)
  227 r2 <- CarryOf(r15)
  228 r6 <- SignOf(r15)
  229 r5 <- IsZero(r15)
  230 r47 <- Part { src: r15, offset: 0, size: 1 }
  231 r3 <- Parity(r47)
0x5ddfea:
  232 r45 <- SetJumpCondition(r5)
  233 r45 <- Control(JmpExtIf(6152233))
0x5ddfec:
  234 r46 <- Int { value: 8, size: 8 }
  235 r46 <- Arith(Add, r46, r21)
  236 r45 <- LoadMem { addr: r46, size: 8 }
  237 r22 <- Get(r45)
0x5ddff0:
  238 r46 <- Int { value: 48, size: 8 }
  239 r46 <- Arith(Add, r46, r12)
  240 r46 <- StoreMem { addr: r46, value: r20 }
0x5ddff5:
  241 r25 <- Get(r21)
0x5ddff8:
  242 r46 <- Int { value: 40, size: 8 }
  243 r46 <- Arith(Add, r46, r12)
  244 r46 <- StoreMem { addr: r46, value: r21 }
0x5ddffd:
  245 r14 <- Get(r22)
0x5de000:
  246 r46 <- Int { value: 8, size: 8 }
  247 r46 <- Arith(Add, r46, r12)
  248 r46 <- StoreMem { addr: r46, value: r22 }
0x5de005:
  249 r45 <- Int { value: 4199136, size: 8 }
  250 r47 <- Void
  251 r47 <- Get(r14)
  252 r46 <- CArg { value: r47, next_arg: None }
  253 r46 <- Call { callee: r45, first_arg: Some(r46) }
  254 r2 <- UndefinedBool
  255 r3 <- UndefinedBool
  256 r4 <- UndefinedBool
  257 r5 <- UndefinedBool
  258 r6 <- UndefinedBool
  259 r7 <- UndefinedBool
  260 r8 <- UndefinedBool
  261 r9 <- UndefinedBool
  262 r10 <- UndefinedBool
  263 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de00a:
  264 r46 <- Int { value: 8, size: 8 }
  265 r46 <- Arith(Add, r46, r12)
  266 r45 <- LoadMem { addr: r46, size: 8 }
  267 r15 <- Get(r45)
0x5de00f:
  268 r46 <- Int { value: 48, size: 8 }
  269 r46 <- Arith(Add, r46, r12)
  270 r45 <- LoadMem { addr: r46, size: 8 }
  271 r20 <- Get(r45)
0x5de014:
  272 r14 <- Get(r24)
0x5de017:
  273 r16 <- Arith(Sub, r16, r11)
  274 r10 <- OverflowOf(r16)
  275 r2 <- CarryOf(r16)
  276 r6 <- SignOf(r16)
  277 r5 <- IsZero(r16)
  278 r47 <- Part { src: r16, offset: 0, size: 1 }
  279 r3 <- Parity(r47)
0x5de01a:
  280 r45 <- SetJumpCondition(r5)
  281 r45 <- Control(JmpExtIf(6153171))
0x5de020:
  282 r45 <- Int { value: 1, size: 4 }
  283 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  284 r17 <- Get(r45)
0x5de025:
  285 r45 <- Int { value: 40, size: 8 }
  286 r45 <- Arith(Add, r45, r14)
  287 r24 <- Get(r45)
0x5de029:
  288 r46 <- Int { value: 8, size: 8 }
  289 r46 <- Arith(Add, r46, r24)
  290 r45 <- LoadMem { addr: r46, size: 8 }
  291 r23 <- Get(r45)
0x5de02e:
  292 r46 <- Int { value: 40, size: 8 }
  293 r46 <- Arith(Add, r46, r12)
  294 r46 <- StoreMem { addr: r46, value: r20 }
0x5de033:
  295 r25 <- Get(r24)
0x5de036:
  296 r14 <- Get(r23)
0x5de039:
  297 r46 <- Int { value: 8, size: 8 }
  298 r46 <- Arith(Add, r46, r12)
  299 r46 <- StoreMem { addr: r46, value: r23 }
0x5de03e:
  300 r45 <- Int { value: 4199136, size: 8 }
  301 r47 <- Void
  302 r47 <- Get(r14)
  303 r46 <- CArg { value: r47, next_arg: None }
  304 r46 <- Call { callee: r45, first_arg: Some(r46) }
  305 r2 <- UndefinedBool
  306 r3 <- UndefinedBool
  307 r4 <- UndefinedBool
  308 r5 <- UndefinedBool
  309 r6 <- UndefinedBool
  310 r7 <- UndefinedBool
  311 r8 <- UndefinedBool
  312 r9 <- UndefinedBool
  313 r10 <- UndefinedBool
  314 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de043:
  315 r46 <- Int { value: 8, size: 8 }
  316 r46 <- Arith(Add, r46, r12)
  317 r45 <- LoadMem { addr: r46, size: 8 }
  318 r15 <- Get(r45)
0x5de048:
  319 r46 <- Int { value: 40, size: 8 }
  320 r46 <- Arith(Add, r46, r12)
  321 r45 <- LoadMem { addr: r46, size: 8 }
  322 r20 <- Get(r45)
0x5de04d:
  323 r16 <- Arith(Sub, r16, r11)
  324 r10 <- OverflowOf(r16)
  325 r2 <- CarryOf(r16)
  326 r6 <- SignOf(r16)
  327 r5 <- IsZero(r16)
  328 r47 <- Part { src: r16, offset: 0, size: 1 }
  329 r3 <- Parity(r47)
0x5de050:
  330 r45 <- SetJumpCondition(r5)
  331 r45 <- Control(JmpExtIf(6153136))
0x5de056:
  332 r46 <- Int { value: 1, size: 8 }
  333 r17 <- Arith(Add, r17, r46)
  334 r17 <- Get(r17)
  335 r10 <- OverflowOf(r17)
  336 r2 <- CarryOf(r17)
  337 r6 <- SignOf(r17)
  338 r5 <- IsZero(r17)
  339 r47 <- Part { src: r17, offset: 0, size: 1 }
  340 r3 <- Parity(r47)
0x5de05a:
  341 r46 <- Int { value: 40, size: 8 }
  342 r24 <- Arith(Add, r24, r46)
  343 r24 <- Get(r24)
  344 r10 <- OverflowOf(r24)
  345 r2 <- CarryOf(r24)
  346 r6 <- SignOf(r24)
  347 r5 <- IsZero(r24)
  348 r47 <- Part { src: r24, offset: 0, size: 1 }
  349 r3 <- Parity(r47)
0x5de05e:
  350 r46 <- Int { value: 8, size: 8 }
  351 r46 <- Arith(Add, r46, r24)
  352 r45 <- LoadMem { addr: r46, size: 8 }
  353 r16 <- Get(r45)
0x5de063:
  354 r46 <- Int { value: 40, size: 8 }
  355 r46 <- Arith(Add, r46, r12)
  356 r46 <- StoreMem { addr: r46, value: r20 }
0x5de068:
  357 r25 <- Get(r24)
0x5de06b:
  358 r14 <- Get(r16)
0x5de06e:
  359 r46 <- Int { value: 8, size: 8 }
  360 r46 <- Arith(Add, r46, r12)
  361 r46 <- StoreMem { addr: r46, value: r16 }
0x5de073:
  362 r45 <- Int { value: 4199136, size: 8 }
  363 r47 <- Void
  364 r47 <- Get(r14)
  365 r46 <- CArg { value: r47, next_arg: None }
  366 r46 <- Call { callee: r45, first_arg: Some(r46) }
  367 r2 <- UndefinedBool
  368 r3 <- UndefinedBool
  369 r4 <- UndefinedBool
  370 r5 <- UndefinedBool
  371 r6 <- UndefinedBool
  372 r7 <- UndefinedBool
  373 r8 <- UndefinedBool
  374 r9 <- UndefinedBool
  375 r10 <- UndefinedBool
  376 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de078:
  377 r46 <- Int { value: 8, size: 8 }
  378 r46 <- Arith(Add, r46, r12)
  379 r45 <- LoadMem { addr: r46, size: 8 }
  380 r15 <- Get(r45)
0x5de07d:
  381 r46 <- Int { value: 40, size: 8 }
  382 r46 <- Arith(Add, r46, r12)
  383 r45 <- LoadMem { addr: r46, size: 8 }
  384 r20 <- Get(r45)
0x5de082:
  385 r16 <- Arith(Sub, r16, r11)
  386 r10 <- OverflowOf(r16)
  387 r2 <- CarryOf(r16)
  388 r6 <- SignOf(r16)
  389 r5 <- IsZero(r16)
  390 r47 <- Part { src: r16, offset: 0, size: 1 }
  391 r3 <- Parity(r47)
0x5de085:
  392 r45 <- SetJumpCondition(r5)
  393 r45 <- Control(JmpExtIf(6153096))
0x5de08b:
  394 r46 <- Int { value: 16, size: 8 }
  395 r46 <- Arith(Add, r46, r12)
  396 r45 <- LoadMem { addr: r46, size: 8 }
  397 r19 <- Get(r45)
0x5de090:
  398 r46 <- Int { value: 1, size: 8 }
  399 r17 <- Arith(Add, r17, r46)
  400 r17 <- Get(r17)
  401 r10 <- OverflowOf(r17)
  402 r2 <- CarryOf(r17)
  403 r6 <- SignOf(r17)
  404 r5 <- IsZero(r17)
  405 r47 <- Part { src: r17, offset: 0, size: 1 }
  406 r3 <- Parity(r47)
0x5de094:
  407 r46 <- Int { value: 40, size: 8 }
  408 r24 <- Arith(Add, r24, r46)
  409 r24 <- Get(r24)
  410 r10 <- OverflowOf(r24)
  411 r2 <- CarryOf(r24)
  412 r6 <- SignOf(r24)
  413 r5 <- IsZero(r24)
  414 r47 <- Part { src: r24, offset: 0, size: 1 }
  415 r3 <- Parity(r47)
0x5de098:
  416 r17 <- Arith(Sub, r17, r19)
  417 r10 <- OverflowOf(r17)
  418 r2 <- CarryOf(r17)
  419 r6 <- SignOf(r17)
  420 r5 <- IsZero(r17)
  421 r47 <- Part { src: r17, offset: 0, size: 1 }
  422 r3 <- Parity(r47)
0x5de09b:
  423 r45 <- SetJumpCondition(r5)
  424 r45 <- Control(JmpExtIf(6153008))
0x5de0a1:
  425 r46 <- Int { value: 56, size: 8 }
  426 r46 <- Arith(Add, r46, r12)
  427 r46 <- StoreMem { addr: r46, value: r26 }
0x5de0a6:
  428 r26 <- Get(r24)
0x5de0a9:
  429 r46 <- Int { value: 40, size: 8 }
  430 r46 <- Arith(Add, r46, r12)
  431 r46 <- StoreMem { addr: r46, value: r27 }
0x5de0ae:
  432 r46 <- Int { value: 48, size: 8 }
  433 r46 <- Arith(Add, r46, r12)
  434 r46 <- StoreMem { addr: r46, value: r20 }
0x5de0b3:
  435 r45 <- Control(JmpExt(6152538))
0x5de0c0:
  436 r46 <- Int { value: 48, size: 8 }
  437 r46 <- Arith(Add, r46, r26)
  438 r45 <- LoadMem { addr: r46, size: 8 }
  439 r21 <- Get(r45)
0x5de0c4:
  440 r45 <- Int { value: 40, size: 8 }
  441 r45 <- Arith(Add, r45, r26)
  442 r27 <- Get(r45)
0x5de0c8:
  443 r45 <- Int { value: 1, size: 8 }
  444 r45 <- Arith(Add, r45, r17)
  445 r25 <- Get(r45)
0x5de0cc:
  446 r17 <- Get(r25)
0x5de0cf:
  447 r26 <- Get(r27)
0x5de0d2:
  448 r24 <- Get(r27)
0x5de0d5:
  449 r14 <- Get(r21)
0x5de0d8:
  450 r46 <- Int { value: 8, size: 8 }
  451 r46 <- Arith(Add, r46, r12)
  452 r46 <- StoreMem { addr: r46, value: r21 }
0x5de0dd:
  453 r45 <- Int { value: 4199136, size: 8 }
  454 r47 <- Void
  455 r47 <- Get(r14)
  456 r46 <- CArg { value: r47, next_arg: None }
  457 r46 <- Call { callee: r45, first_arg: Some(r46) }
  458 r2 <- UndefinedBool
  459 r3 <- UndefinedBool
  460 r4 <- UndefinedBool
  461 r5 <- UndefinedBool
  462 r6 <- UndefinedBool
  463 r7 <- UndefinedBool
  464 r8 <- UndefinedBool
  465 r9 <- UndefinedBool
  466 r10 <- UndefinedBool
  467 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de0e2:
  468 r46 <- Int { value: 8, size: 8 }
  469 r46 <- Arith(Add, r46, r12)
  470 r45 <- LoadMem { addr: r46, size: 8 }
  471 r15 <- Get(r45)
0x5de0e7:
  472 r16 <- Arith(Sub, r16, r11)
  473 r10 <- OverflowOf(r16)
  474 r2 <- CarryOf(r16)
  475 r6 <- SignOf(r16)
  476 r5 <- IsZero(r16)
  477 r47 <- Part { src: r16, offset: 0, size: 1 }
  478 r3 <- Parity(r47)
0x5de0ea:
  479 r45 <- SetJumpCondition(r5)
  480 r45 <- Control(JmpExtIf(6152608))
0x5de0f0:
  481 r46 <- Int { value: 48, size: 8 }
  482 r46 <- Arith(Add, r46, r27)
  483 r45 <- LoadMem { addr: r46, size: 8 }
  484 r18 <- Get(r45)
0x5de0f4:
  485 r45 <- Int { value: 40, size: 8 }
  486 r45 <- Arith(Add, r45, r27)
  487 r26 <- Get(r45)
0x5de0f8:
  488 r45 <- Int { value: 1, size: 8 }
  489 r45 <- Arith(Add, r45, r25)
  490 r17 <- Get(r45)
0x5de0fc:
  491 r24 <- Get(r26)
0x5de0ff:
  492 r14 <- Get(r18)
0x5de102:
  493 r46 <- Int { value: 8, size: 8 }
  494 r46 <- Arith(Add, r46, r12)
  495 r46 <- StoreMem { addr: r46, value: r18 }
0x5de107:
  496 r45 <- Int { value: 4199136, size: 8 }
  497 r47 <- Void
  498 r47 <- Get(r14)
  499 r46 <- CArg { value: r47, next_arg: None }
  500 r46 <- Call { callee: r45, first_arg: Some(r46) }
  501 r2 <- UndefinedBool
  502 r3 <- UndefinedBool
  503 r4 <- UndefinedBool
  504 r5 <- UndefinedBool
  505 r6 <- UndefinedBool
  506 r7 <- UndefinedBool
  507 r8 <- UndefinedBool
  508 r9 <- UndefinedBool
  509 r10 <- UndefinedBool
  510 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de10c:
  511 r46 <- Int { value: 8, size: 8 }
  512 r46 <- Arith(Add, r46, r12)
  513 r45 <- LoadMem { addr: r46, size: 8 }
  514 r15 <- Get(r45)
0x5de111:
  515 r16 <- Arith(Sub, r16, r11)
  516 r10 <- OverflowOf(r16)
  517 r2 <- CarryOf(r16)
  518 r6 <- SignOf(r16)
  519 r5 <- IsZero(r16)
  520 r47 <- Part { src: r16, offset: 0, size: 1 }
  521 r3 <- Parity(r47)
0x5de114:
  522 r45 <- SetJumpCondition(r5)
  523 r45 <- Control(JmpExtIf(6152944))
0x5de11a:
  524 r46 <- Int { value: 88, size: 8 }
  525 r46 <- Arith(Add, r46, r27)
  526 r45 <- LoadMem { addr: r46, size: 8 }
  527 r15 <- Get(r45)
0x5de11e:
  528 r45 <- Int { value: 80, size: 8 }
  529 r45 <- Arith(Add, r45, r27)
  530 r26 <- Get(r45)
0x5de122:
  531 r45 <- Int { value: 2, size: 8 }
  532 r45 <- Arith(Add, r45, r25)
  533 r17 <- Get(r45)
0x5de126:
  534 r24 <- Get(r26)
0x5de129:
  535 r14 <- Get(r15)
0x5de12c:
  536 r46 <- Int { value: 8, size: 8 }
  537 r46 <- Arith(Add, r46, r12)
  538 r46 <- StoreMem { addr: r46, value: r15 }
0x5de131:
  539 r45 <- Int { value: 4199136, size: 8 }
  540 r47 <- Void
  541 r47 <- Get(r14)
  542 r46 <- CArg { value: r47, next_arg: None }
  543 r46 <- Call { callee: r45, first_arg: Some(r46) }
  544 r2 <- UndefinedBool
  545 r3 <- UndefinedBool
  546 r4 <- UndefinedBool
  547 r5 <- UndefinedBool
  548 r6 <- UndefinedBool
  549 r7 <- UndefinedBool
  550 r8 <- UndefinedBool
  551 r9 <- UndefinedBool
  552 r10 <- UndefinedBool
  553 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de136:
  554 r46 <- Int { value: 8, size: 8 }
  555 r46 <- Arith(Add, r46, r12)
  556 r45 <- LoadMem { addr: r46, size: 8 }
  557 r15 <- Get(r45)
0x5de13b:
  558 r16 <- Arith(Sub, r16, r11)
  559 r10 <- OverflowOf(r16)
  560 r2 <- CarryOf(r16)
  561 r6 <- SignOf(r16)
  562 r5 <- IsZero(r16)
  563 r47 <- Part { src: r16, offset: 0, size: 1 }
  564 r3 <- Parity(r47)
0x5de13e:
  565 r45 <- SetJumpCondition(r5)
  566 r45 <- Control(JmpExtIf(6152976))
0x5de144:
  567 r46 <- Int { value: 16, size: 8 }
  568 r46 <- Arith(Add, r46, r12)
  569 r45 <- LoadMem { addr: r46, size: 8 }
  570 r22 <- Get(r45)
0x5de149:
  571 r45 <- Int { value: 3, size: 8 }
  572 r45 <- Arith(Add, r45, r25)
  573 r17 <- Get(r45)
0x5de14d:
  574 r45 <- Int { value: 120, size: 8 }
  575 r45 <- Arith(Add, r45, r27)
  576 r26 <- Get(r45)
0x5de151:
  577 r17 <- Arith(Sub, r17, r22)
  578 r10 <- OverflowOf(r17)
  579 r2 <- CarryOf(r17)
  580 r6 <- SignOf(r17)
  581 r5 <- IsZero(r17)
  582 r47 <- Part { src: r17, offset: 0, size: 1 }
  583 r3 <- Parity(r47)
0x5de154:
  584 r45 <- SetJumpCondition(r5)
  585 r45 <- Control(JmpExtIf(6153008))
0x5de15a:
  586 r46 <- Int { value: 8, size: 8 }
  587 r46 <- Arith(Add, r46, r26)
  588 r45 <- LoadMem { addr: r46, size: 8 }
  589 r27 <- Get(r45)
0x5de15e:
  590 r24 <- Get(r26)
0x5de161:
  591 r14 <- Get(r27)
0x5de164:
  592 r45 <- Int { value: 4199136, size: 8 }
  593 r47 <- Void
  594 r47 <- Get(r14)
  595 r46 <- CArg { value: r47, next_arg: None }
  596 r46 <- Call { callee: r45, first_arg: Some(r46) }
  597 r2 <- UndefinedBool
  598 r3 <- UndefinedBool
  599 r4 <- UndefinedBool
  600 r5 <- UndefinedBool
  601 r6 <- UndefinedBool
  602 r7 <- UndefinedBool
  603 r8 <- UndefinedBool
  604 r9 <- UndefinedBool
  605 r10 <- UndefinedBool
  606 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de169:
  607 r16 <- Arith(Sub, r16, r11)
  608 r10 <- OverflowOf(r16)
  609 r2 <- CarryOf(r16)
  610 r6 <- SignOf(r16)
  611 r5 <- IsZero(r16)
  612 r47 <- Part { src: r16, offset: 0, size: 1 }
  613 r3 <- Parity(r47)
0x5de16c:
  614 r45 <- Not(r5)
  615 r46 <- SetJumpCondition(r45)
  616 r46 <- Control(JmpExtIf(6152384))
0x5de172:
  617 r46 <- Int { value: 0, size: 8 }
  618 r46 <- Arith(Add, r46, r12)
  619 r45 <- LoadMem { addr: r46, size: 8 }
  620 r14 <- Get(r45)
0x5de176:
  621 r19 <- Get(r11)
0x5de179:
  622 r15 <- Get(r27)
0x5de17c:
  623 r45 <- Int { value: 4199232, size: 8 }
  624 r47 <- Void
  625 r47 <- Get(r14)
  626 r48 <- Void
  627 r48 <- Get(r15)
  628 r49 <- Void
  629 r49 <- Get(r19)
  630 r46 <- CArg { value: r49, next_arg: None }
  631 r46 <- CArg { value: r48, next_arg: Some(r46) }
  632 r46 <- CArg { value: r47, next_arg: Some(r46) }
  633 r46 <- Call { callee: r45, first_arg: Some(r46) }
  634 r2 <- UndefinedBool
  635 r3 <- UndefinedBool
  636 r4 <- UndefinedBool
  637 r5 <- UndefinedBool
  638 r6 <- UndefinedBool
  639 r7 <- UndefinedBool
  640 r8 <- UndefinedBool
  641 r9 <- UndefinedBool
  642 r10 <- UndefinedBool
  643 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de181:
  644 r46 <- Part { src: r16, offset: 0, size: 4 }
  645 r48 <- Part { src: r16, offset: 0, size: 4 }
  646 r46 <- Arith(BitAnd, r46, r48)
  647 r6 <- SignOf(r46)
  648 r5 <- IsZero(r46)
  649 r49 <- Part { src: r46, offset: 0, size: 1 }
  650 r3 <- Parity(r46)
  651 r2 <- False
  652 r10 <- False
0x5de183:
  653 r45 <- Not(r5)
  654 r46 <- SetJumpCondition(r45)
  655 r46 <- Control(JmpExtIf(6152384))
0x5de189:
  656 r25 <- Get(r26)
0x5de18c:
  657 r46 <- Int { value: 40, size: 8 }
  658 r46 <- Arith(Add, r46, r12)
  659 r45 <- LoadMem { addr: r46, size: 8 }
  660 r27 <- Get(r45)
0x5de191:
  661 r46 <- Int { value: 48, size: 8 }
  662 r46 <- Arith(Add, r46, r12)
  663 r45 <- LoadMem { addr: r46, size: 8 }
  664 r20 <- Get(r45)
0x5de196:
  665 r46 <- Int { value: 56, size: 8 }
  666 r46 <- Arith(Add, r46, r12)
  667 r45 <- LoadMem { addr: r46, size: 8 }
  668 r26 <- Get(r45)
0x5de19b:
  669 r45 <- Control(JmpExt(6152649))
0x5de1a0:
  670 r46 <- Int { value: 0, size: 8 }
  671 r46 <- Arith(Add, r46, r12)
  672 r45 <- LoadMem { addr: r46, size: 8 }
  673 r14 <- Get(r45)
0x5de1a4:
  674 r19 <- Get(r11)
0x5de1a7:
  675 r45 <- Int { value: 4199232, size: 8 }
  676 r47 <- Void
  677 r47 <- Get(r14)
  678 r48 <- Void
  679 r48 <- Get(r15)
  680 r49 <- Void
  681 r49 <- Get(r19)
  682 r46 <- CArg { value: r49, next_arg: None }
  683 r46 <- CArg { value: r48, next_arg: Some(r46) }
  684 r46 <- CArg { value: r47, next_arg: Some(r46) }
  685 r46 <- Call { callee: r45, first_arg: Some(r46) }
  686 r2 <- UndefinedBool
  687 r3 <- UndefinedBool
  688 r4 <- UndefinedBool
  689 r5 <- UndefinedBool
  690 r6 <- UndefinedBool
  691 r7 <- UndefinedBool
  692 r8 <- UndefinedBool
  693 r9 <- UndefinedBool
  694 r10 <- UndefinedBool
  695 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de1ac:
  696 r46 <- Part { src: r16, offset: 0, size: 4 }
  697 r48 <- Part { src: r16, offset: 0, size: 4 }
  698 r46 <- Arith(BitAnd, r46, r48)
  699 r6 <- SignOf(r46)
  700 r5 <- IsZero(r46)
  701 r49 <- Part { src: r46, offset: 0, size: 1 }
  702 r3 <- Parity(r46)
  703 r2 <- False
  704 r10 <- False
0x5de1ae:
  705 r45 <- Not(r5)
  706 r46 <- SetJumpCondition(r45)
  707 r46 <- Control(JmpExtIf(6152432))
0x5de1b4:
  708 r25 <- Get(r24)
0x5de1b7:
  709 r46 <- Int { value: 40, size: 8 }
  710 r46 <- Arith(Add, r46, r12)
  711 r45 <- LoadMem { addr: r46, size: 8 }
  712 r27 <- Get(r45)
0x5de1bc:
  713 r24 <- Get(r26)
0x5de1bf:
  714 r46 <- Int { value: 48, size: 8 }
  715 r46 <- Arith(Add, r46, r12)
  716 r45 <- LoadMem { addr: r46, size: 8 }
  717 r20 <- Get(r45)
0x5de1c4:
  718 r46 <- Int { value: 56, size: 8 }
  719 r46 <- Arith(Add, r46, r12)
  720 r45 <- LoadMem { addr: r46, size: 8 }
  721 r26 <- Get(r45)
0x5de1c9:
  722 r46 <- Int { value: 32, size: 8 }
  723 r46 <- Arith(Add, r46, r12)
  724 r45 <- LoadMem { addr: r46, size: 8 }
  725 r11 <- Get(r45)
0x5de1ce:
  726 r46 <- Int { value: 0, size: 8 }
  727 r46 <- Arith(Add, r46, r11)
  728 r47 <- ArithK(Mul, r27, 8)
  729 r46 <- Arith(Add, r46, r47)
  730 r46 <- StoreMem { addr: r46, value: r17 }
0x5de1d3:
  731 r24 <- Arith(Sub, r24, r26)
  732 r10 <- OverflowOf(r24)
  733 r2 <- CarryOf(r24)
  734 r6 <- SignOf(r24)
  735 r5 <- IsZero(r24)
  736 r47 <- Part { src: r24, offset: 0, size: 1 }
  737 r3 <- Parity(r47)
0x5de1d6:
  738 r45 <- SetJumpCondition(r5)
  739 r45 <- Control(JmpExtIf(6153008))
0x5de1dc:
  740 r46 <- Int { value: 32, size: 8 }
  741 r46 <- Arith(Add, r46, r25)
  742 r45 <- LoadMem { addr: r46, size: 8 }
  743 r47 <- Int { value: 0, size: 8 }
  744 r45 <- Arith(Sub, r45, r47)
  745 r10 <- OverflowOf(r45)
  746 r2 <- CarryOf(r45)
  747 r6 <- SignOf(r45)
  748 r5 <- IsZero(r45)
  749 r48 <- Part { src: r45, offset: 0, size: 1 }
  750 r3 <- Parity(r48)
0x5de1e1:
  751 r46 <- Int { value: 0, size: 8 }
  752 r46 <- Arith(Add, r46, r20)
  753 r45 <- LoadMem { addr: r46, size: 1 }
  754 r45 <- Widen { reg: r45, target_size: 4, sign: false }
  755 r47 <- Part { src: r14, offset: 1, size: 7 }
  756 r14 <- Concat { lo: r45, hi: r47 }
0x5de1e5:
  757 r45 <- Not(r5)
  758 r46 <- SetJumpCondition(r45)
  759 r46 <- Control(JmpExtIf(6152886))
0x5de1eb:
  760 r46 <- Part { src: r14, offset: 0, size: 1 }
  761 r48 <- Part { src: r14, offset: 0, size: 1 }
  762 r46 <- Arith(BitAnd, r46, r48)
  763 r6 <- SignOf(r46)
  764 r5 <- IsZero(r46)
  765 r49 <- Part { src: r46, offset: 0, size: 1 }
  766 r3 <- Parity(r46)
  767 r2 <- False
  768 r10 <- False
0x5de1ee:
  769 r45 <- SetJumpCondition(r5)
  770 r45 <- Control(JmpExtIf(6153237))
0x5de1f4:
  771 r45 <- Int { value: 1, size: 8 }
  772 r45 <- Arith(Add, r45, r20)
  773 r14 <- Get(r45)
0x5de1f8:
  774 r45 <- Int { value: 46, size: 4 }
  775 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  776 r15 <- Get(r45)
0x5de1fd:
  777 r46 <- Int { value: 0, size: 8 }
  778 r46 <- Arith(Add, r46, r12)
  779 r46 <- StoreMem { addr: r46, value: r14 }
0x5de201:
  780 r45 <- Int { value: 4199040, size: 8 }
  781 r47 <- Void
  782 r47 <- Get(r14)
  783 r48 <- Void
  784 r48 <- Get(r15)
  785 r48 <- Part { src: r48, offset: 0, size: 4 }
  786 r46 <- CArg { value: r48, next_arg: None }
  787 r46 <- CArg { value: r47, next_arg: Some(r46) }
  788 r46 <- Call { callee: r45, first_arg: Some(r46) }
  789 r2 <- UndefinedBool
  790 r3 <- UndefinedBool
  791 r4 <- UndefinedBool
  792 r5 <- UndefinedBool
  793 r6 <- UndefinedBool
  794 r7 <- UndefinedBool
  795 r8 <- UndefinedBool
  796 r9 <- UndefinedBool
  797 r10 <- UndefinedBool
  798 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de206:
  799 r20 <- Get(r16)
0x5de209:
  800 r16 <- Arith(BitAnd, r16, r16)
  801 r6 <- SignOf(r16)
  802 r5 <- IsZero(r16)
  803 r47 <- Part { src: r16, offset: 0, size: 1 }
  804 r3 <- Parity(r16)
  805 r2 <- False
  806 r10 <- False
0x5de20c:
  807 r45 <- SetJumpCondition(r5)
  808 r45 <- Control(JmpExtIf(6153032))
0x5de212:
  809 r11 <- Get(r16)
0x5de215:
  810 r46 <- Int { value: 0, size: 8 }
  811 r46 <- Arith(Add, r46, r12)
  812 r45 <- LoadMem { addr: r46, size: 8 }
  813 r23 <- Get(r45)
0x5de219:
  814 r46 <- Int { value: 24, size: 8 }
  815 r46 <- Arith(Add, r46, r12)
  816 r45 <- LoadMem { addr: r46, size: 8 }
  817 r16 <- Get(r45)
0x5de21e:
  818 r46 <- Int { value: 1, size: 8 }
  819 r27 <- Arith(Add, r27, r46)
  820 r27 <- Get(r27)
  821 r10 <- OverflowOf(r27)
  822 r2 <- CarryOf(r27)
  823 r6 <- SignOf(r27)
  824 r5 <- IsZero(r27)
  825 r47 <- Part { src: r27, offset: 0, size: 1 }
  826 r3 <- Parity(r47)
0x5de222:
  827 r11 <- Arith(Sub, r11, r23)
  828 r11 <- Get(r11)
  829 r10 <- OverflowOf(r11)
  830 r2 <- CarryOf(r11)
  831 r6 <- SignOf(r11)
  832 r5 <- IsZero(r11)
  833 r47 <- Part { src: r11, offset: 0, size: 1 }
  834 r3 <- Parity(r47)
0x5de225:
  835 r47 <- Int { value: 0, size: 8 }
  836 r47 <- Arith(Add, r47, r16)
  837 r46 <- LoadMem { addr: r47, size: 8 }
  838 r27 <- Arith(Sub, r27, r46)
  839 r10 <- OverflowOf(r27)
  840 r2 <- CarryOf(r27)
  841 r6 <- SignOf(r27)
  842 r5 <- IsZero(r27)
  843 r48 <- Part { src: r27, offset: 0, size: 1 }
  844 r3 <- Parity(r48)
0x5de228:
  845 r45 <- Not(r2)
  846 r46 <- SetJumpCondition(r45)
  847 r46 <- Control(JmpExtIf(6153069))
0x5de22e:
  848 r26 <- Get(r25)
0x5de231:
  849 r46 <- Int { value: 24, size: 8 }
  850 r46 <- Arith(Add, r46, r26)
  851 r45 <- LoadMem { addr: r46, size: 8 }
  852 r21 <- Get(r45)
0x5de235:
  853 r46 <- Int { value: 0, size: 8 }
  854 r46 <- Arith(Add, r46, r21)
  855 r45 <- LoadMem { addr: r46, size: 1 }
  856 r47 <- Int { value: 0, size: 1 }
  857 r45 <- Arith(Sub, r45, r47)
  858 r10 <- OverflowOf(r45)
  859 r2 <- CarryOf(r45)
  860 r6 <- SignOf(r45)
  861 r5 <- IsZero(r45)
  862 r48 <- Part { src: r45, offset: 0, size: 1 }
  863 r3 <- Parity(r48)
0x5de239:
  864 r45 <- Not(r5)
  865 r46 <- SetJumpCondition(r45)
  866 r46 <- Control(JmpExtIf(6152128))
0x5de23f:
  867 r46 <- Int { value: 0, size: 8 }
  868 r46 <- Arith(Add, r46, r12)
  869 r45 <- LoadMem { addr: r46, size: 8 }
  870 r14 <- Get(r45)
0x5de243:
  871 r46 <- Part { src: r15, offset: 0, size: 4 }
  872 r48 <- Part { src: r15, offset: 0, size: 4 }
  873 r46 <- Arith(BitXor, r46, r48)
  874 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  875 r15 <- Get(r46)
  876 r10 <- False
  877 r2 <- False
  878 r6 <- SignOf(r46)
  879 r5 <- IsZero(r46)
  880 r49 <- Part { src: r46, offset: 0, size: 1 }
  881 r3 <- Parity(r49)
0x5de245:
  882 r45 <- Int { value: 10, size: 4 }
  883 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  884 r19 <- Get(r45)
0x5de24a:
  885 r46 <- Int { value: 8, size: 8 }
  886 r46 <- Arith(Add, r46, r12)
  887 r46 <- StoreMem { addr: r46, value: r20 }
0x5de24f:
  888 r45 <- Int { value: 6451424, size: 8 }
  889 r47 <- Void
  890 r47 <- Get(r14)
  891 r48 <- Void
  892 r48 <- Get(r15)
  893 r49 <- Void
  894 r49 <- Get(r19)
  895 r49 <- Part { src: r49, offset: 0, size: 4 }
  896 r46 <- CArg { value: r49, next_arg: None }
  897 r46 <- CArg { value: r48, next_arg: Some(r46) }
  898 r46 <- CArg { value: r47, next_arg: Some(r46) }
  899 r46 <- Call { callee: r45, first_arg: Some(r46) }
  900 r2 <- UndefinedBool
  901 r3 <- UndefinedBool
  902 r4 <- UndefinedBool
  903 r5 <- UndefinedBool
  904 r6 <- UndefinedBool
  905 r7 <- UndefinedBool
  906 r8 <- UndefinedBool
  907 r9 <- UndefinedBool
  908 r10 <- UndefinedBool
  909 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de254:
  910 r46 <- Int { value: 8, size: 8 }
  911 r46 <- Arith(Add, r46, r12)
  912 r45 <- LoadMem { addr: r46, size: 8 }
  913 r20 <- Get(r45)
0x5de259:
  914 r46 <- Int { value: -1, size: 8 }
  915 r16 <- Arith(Sub, r16, r46)
  916 r10 <- OverflowOf(r16)
  917 r2 <- CarryOf(r16)
  918 r6 <- SignOf(r16)
  919 r5 <- IsZero(r16)
  920 r47 <- Part { src: r16, offset: 0, size: 1 }
  921 r3 <- Parity(r47)
0x5de25d:
  922 r17 <- Get(r16)
0x5de260:
  923 r45 <- SetJumpCondition(r5)
  924 r45 <- Control(JmpExtIf(6153008))
0x5de266:
  925 r46 <- Int { value: 24, size: 8 }
  926 r46 <- Arith(Add, r46, r26)
  927 r45 <- LoadMem { addr: r46, size: 8 }
  928 r11 <- Get(r45)
0x5de26a:
  929 r46 <- Int { value: 0, size: 8 }
  930 r46 <- Arith(Add, r46, r12)
  931 r46 <- StoreMem { addr: r46, value: r20 }
0x5de26e:
  932 r46 <- Int { value: 0, size: 8 }
  933 r46 <- Arith(Add, r46, r11)
  934 r45 <- LoadMem { addr: r46, size: 1 }
  935 r47 <- Int { value: 0, size: 1 }
  936 r45 <- Arith(Sub, r45, r47)
  937 r10 <- OverflowOf(r45)
  938 r2 <- CarryOf(r45)
  939 r6 <- SignOf(r45)
  940 r5 <- IsZero(r45)
  941 r48 <- Part { src: r45, offset: 0, size: 1 }
  942 r3 <- Parity(r48)
0x5de272:
  943 r45 <- Not(r5)
  944 r46 <- SetJumpCondition(r45)
  945 r46 <- Control(JmpExtIf(4206915))
0x5de278:
  946 r46 <- Int { value: 24, size: 8 }
  947 r46 <- Arith(Add, r46, r12)
  948 r45 <- LoadMem { addr: r46, size: 8 }
  949 r18 <- Get(r45)
0x5de27d:
  950 r46 <- Int { value: 32, size: 8 }
  951 r46 <- Arith(Add, r46, r12)
  952 r45 <- LoadMem { addr: r46, size: 8 }
  953 r26 <- Get(r45)
0x5de282:
  954 r46 <- Int { value: 64, size: 8 }
  955 r46 <- Arith(Add, r46, r12)
  956 r45 <- LoadMem { addr: r46, size: 8 }
  957 r14 <- Get(r45)
0x5de287:
  958 r46 <- Int { value: 0, size: 8 }
  959 r46 <- Arith(Add, r46, r18)
  960 r45 <- LoadMem { addr: r46, size: 8 }
  961 r19 <- Get(r45)
0x5de28a:
  962 r15 <- Get(r26)
0x5de28d:
  963 r18 <- Get(r16)
0x5de290:
  964 r46 <- Int { value: 8, size: 8 }
  965 r46 <- Arith(Add, r46, r11)
  966 r45 <- LoadMem { addr: r46, size: 8 }
  967 r45 <- LoadMem { addr: r45, size: 8 }
  968 r47 <- CArg { value: r18, next_arg: None }
  969 r47 <- CArg { value: r19, next_arg: Some(r47) }
  970 r47 <- CArg { value: r15, next_arg: Some(r47) }
  971 r47 <- CArg { value: r14, next_arg: Some(r47) }
  972 r47 <- Call { callee: r45, first_arg: Some(r47) }
  973 r2 <- UndefinedBool
  974 r3 <- UndefinedBool
  975 r4 <- UndefinedBool
  976 r5 <- UndefinedBool
  977 r6 <- UndefinedBool
  978 r7 <- UndefinedBool
  979 r8 <- UndefinedBool
  980 r9 <- UndefinedBool
  981 r10 <- UndefinedBool
  982 r47 <- Get(r16)
0x5de293:
  983 r25 <- Get(r16)
0x5de296:
  984 r16 <- Arith(BitAnd, r16, r16)
  985 r6 <- SignOf(r16)
  986 r5 <- IsZero(r16)
  987 r47 <- Part { src: r16, offset: 0, size: 1 }
  988 r3 <- Parity(r16)
  989 r2 <- False
  990 r10 <- False
0x5de299:
  991 r45 <- SetJumpCondition(r5)
  992 r45 <- Control(JmpExtIf(6153008))
0x5de29f:
  993 r46 <- Int { value: 0, size: 8 }
  994 r46 <- Arith(Add, r46, r12)
  995 r45 <- LoadMem { addr: r46, size: 8 }
  996 r20 <- Get(r45)
0x5de2a3:
  997 r46 <- Int { value: 32, size: 8 }
  998 r46 <- Arith(Add, r46, r25)
  999 r45 <- LoadMem { addr: r46, size: 8 }
 1000 r47 <- Int { value: 0, size: 8 }
 1001 r45 <- Arith(Sub, r45, r47)
 1002 r10 <- OverflowOf(r45)
 1003 r2 <- CarryOf(r45)
 1004 r6 <- SignOf(r45)
 1005 r5 <- IsZero(r45)
 1006 r48 <- Part { src: r45, offset: 0, size: 1 }
 1007 r3 <- Parity(r48)
0x5de2a8:
 1008 r46 <- Int { value: 0, size: 8 }
 1009 r46 <- Arith(Add, r46, r26)
 1010 r47 <- ArithK(Mul, r27, 8)
 1011 r46 <- Arith(Add, r46, r47)
 1012 r46 <- StoreMem { addr: r46, value: r17 }
0x5de2ac:
 1013 r46 <- Int { value: 0, size: 8 }
 1014 r46 <- Arith(Add, r46, r20)
 1015 r45 <- LoadMem { addr: r46, size: 1 }
 1016 r45 <- Widen { reg: r45, target_size: 4, sign: false }
 1017 r47 <- Part { src: r14, offset: 1, size: 7 }
 1018 r14 <- Concat { lo: r45, hi: r47 }
0x5de2b0:
 1019 r45 <- SetJumpCondition(r5)
 1020 r45 <- Control(JmpExtIf(6152683))
0x5de2b6:
 1021 r46 <- Int { value: 72, size: 8 }
 1022 r46 <- Arith(Add, r46, r12)
 1023 r45 <- LoadMem { addr: r46, size: 8 }
 1024 r17 <- Get(r45)
0x5de2bb:
 1025 r46 <- Part { src: r14, offset: 0, size: 1 }
 1026 r48 <- Part { src: r14, offset: 0, size: 1 }
 1027 r46 <- Arith(BitAnd, r46, r48)
 1028 r6 <- SignOf(r46)
 1029 r5 <- IsZero(r46)
 1030 r49 <- Part { src: r46, offset: 0, size: 1 }
 1031 r3 <- Parity(r46)
 1032 r2 <- False
 1033 r10 <- False
0x5de2be:
 1034 r45 <- Not(r5)
 1035 r46 <- SetJumpCondition(r45)
 1036 r46 <- Control(JmpExtIf(6153008))
0x5de2c0:
 1037 r45 <- Int { value: 1, size: 8 }
 1038 r45 <- Arith(Add, r45, r27)
 1039 r20 <- Get(r45)
0x5de2c4:
 1040 r46 <- Int { value: 24, size: 8 }
 1041 r46 <- Arith(Add, r46, r12)
 1042 r45 <- LoadMem { addr: r46, size: 8 }
 1043 r27 <- Get(r45)
0x5de2c9:
 1044 r46 <- Int { value: 0, size: 8 }
 1045 r46 <- Arith(Add, r46, r27)
 1046 r46 <- StoreMem { addr: r46, value: r20 }
0x5de2cc:
 1047 r17 <- Arith(BitAnd, r17, r17)
 1048 r6 <- SignOf(r17)
 1049 r5 <- IsZero(r17)
 1050 r47 <- Part { src: r17, offset: 0, size: 1 }
 1051 r3 <- Parity(r17)
 1052 r2 <- False
 1053 r10 <- False
0x5de2cf:
 1054 r45 <- Not(r5)
 1055 r46 <- SetJumpCondition(r45)
 1056 r46 <- Control(JmpExtIf(6153083))
0x5de2d5:
 1057 r46 <- Part { src: r16, offset: 0, size: 4 }
 1058 r48 <- Part { src: r16, offset: 0, size: 4 }
 1059 r46 <- Arith(BitXor, r46, r48)
 1060 r46 <- Widen { reg: r46, target_size: 8, sign: false }
 1061 r16 <- Get(r46)
 1062 r10 <- False
 1063 r2 <- False
 1064 r6 <- SignOf(r46)
 1065 r5 <- IsZero(r46)
 1066 r49 <- Part { src: r46, offset: 0, size: 1 }
 1067 r3 <- Parity(r49)
0x5de2d7:
 1068 r46 <- Int { value: 88, size: 8 }
 1069 r12 <- Arith(Add, r12, r46)
 1070 r12 <- Get(r12)
 1071 r10 <- OverflowOf(r12)
 1072 r2 <- CarryOf(r12)
 1073 r6 <- SignOf(r12)
 1074 r5 <- IsZero(r12)
 1075 r47 <- Part { src: r12, offset: 0, size: 1 }
 1076 r3 <- Parity(r47)
0x5de2db:
 1077 r45 <- LoadMem { addr: r12, size: 8 }
 1078 r17 <- Get(r45)
 1079 r12 <- ArithK(Add, r12, 8)
0x5de2dc:
 1080 r45 <- LoadMem { addr: r12, size: 8 }
 1081 r11 <- Get(r45)
 1082 r12 <- ArithK(Add, r12, 8)
0x5de2dd:
 1083 r45 <- LoadMem { addr: r12, size: 8 }
 1084 r24 <- Get(r45)
 1085 r12 <- ArithK(Add, r12, 8)
0x5de2df:
 1086 r45 <- LoadMem { addr: r12, size: 8 }
 1087 r25 <- Get(r45)
 1088 r12 <- ArithK(Add, r12, 8)
0x5de2e1:
 1089 r45 <- LoadMem { addr: r12, size: 8 }
 1090 r26 <- Get(r45)
 1091 r12 <- ArithK(Add, r12, 8)
0x5de2e3:
 1092 r45 <- LoadMem { addr: r12, size: 8 }
 1093 r27 <- Get(r45)
 1094 r12 <- ArithK(Add, r12, 8)
0x5de2e5:
 1095 r45 <- SetReturnValue(r16)
 1096 r45 <- Control(Ret)
0x5de2f0:
 1097 r46 <- Int { value: 0, size: 8 }
 1098 r46 <- Arith(Add, r46, r12)
 1099 r45 <- LoadMem { addr: r46, size: 8 }
 1100 r14 <- Get(r45)
0x5de2f4:
 1101 r19 <- Get(r11)
0x5de2f7:
 1102 r45 <- Int { value: 4199232, size: 8 }
 1103 r47 <- Void
 1104 r47 <- Get(r14)
 1105 r48 <- Void
 1106 r48 <- Get(r15)
 1107 r49 <- Void
 1108 r49 <- Get(r19)
 1109 r46 <- CArg { value: r49, next_arg: None }
 1110 r46 <- CArg { value: r48, next_arg: Some(r46) }
 1111 r46 <- CArg { value: r47, next_arg: Some(r46) }
 1112 r46 <- Call { callee: r45, first_arg: Some(r46) }
 1113 r2 <- UndefinedBool
 1114 r3 <- UndefinedBool
 1115 r4 <- UndefinedBool
 1116 r5 <- UndefinedBool
 1117 r6 <- UndefinedBool
 1118 r7 <- UndefinedBool
 1119 r8 <- UndefinedBool
 1120 r9 <- UndefinedBool
 1121 r10 <- UndefinedBool
 1122 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de2fc:
 1123 r46 <- Part { src: r16, offset: 0, size: 4 }
 1124 r48 <- Part { src: r16, offset: 0, size: 4 }
 1125 r46 <- Arith(BitAnd, r46, r48)
 1126 r6 <- SignOf(r46)
 1127 r5 <- IsZero(r46)
 1128 r49 <- Part { src: r46, offset: 0, size: 1 }
 1129 r3 <- Parity(r46)
 1130 r2 <- False
 1131 r10 <- False
0x5de2fe:
 1132 r45 <- Not(r5)
 1133 r46 <- SetJumpCondition(r45)
 1134 r46 <- Control(JmpExtIf(6152474))
0x5de304:
 1135 r45 <- Control(JmpExt(6152628))
0x5de310:
 1136 r46 <- Int { value: 0, size: 8 }
 1137 r46 <- Arith(Add, r46, r12)
 1138 r45 <- LoadMem { addr: r46, size: 8 }
 1139 r14 <- Get(r45)
0x5de314:
 1140 r19 <- Get(r11)
0x5de317:
 1141 r45 <- Int { value: 4199232, size: 8 }
 1142 r47 <- Void
 1143 r47 <- Get(r14)
 1144 r48 <- Void
 1145 r48 <- Get(r15)
 1146 r49 <- Void
 1147 r49 <- Get(r19)
 1148 r46 <- CArg { value: r49, next_arg: None }
 1149 r46 <- CArg { value: r48, next_arg: Some(r46) }
 1150 r46 <- CArg { value: r47, next_arg: Some(r46) }
 1151 r46 <- Call { callee: r45, first_arg: Some(r46) }
 1152 r2 <- UndefinedBool
 1153 r3 <- UndefinedBool
 1154 r4 <- UndefinedBool
 1155 r5 <- UndefinedBool
 1156 r6 <- UndefinedBool
 1157 r7 <- UndefinedBool
 1158 r8 <- UndefinedBool
 1159 r9 <- UndefinedBool
 1160 r10 <- UndefinedBool
 1161 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de31c:
 1162 r46 <- Part { src: r16, offset: 0, size: 4 }
 1163 r48 <- Part { src: r16, offset: 0, size: 4 }
 1164 r46 <- Arith(BitAnd, r46, r48)
 1165 r6 <- SignOf(r46)
 1166 r5 <- IsZero(r46)
 1167 r49 <- Part { src: r46, offset: 0, size: 1 }
 1168 r3 <- Parity(r46)
 1169 r2 <- False
 1170 r10 <- False
0x5de31e:
 1171 r45 <- Not(r5)
 1172 r46 <- SetJumpCondition(r45)
 1173 r46 <- Control(JmpExtIf(6152516))
0x5de324:
 1174 r45 <- Control(JmpExt(6152628))
0x5de330:
 1175 r46 <- Int { value: 88, size: 8 }
 1176 r12 <- Arith(Add, r12, r46)
 1177 r12 <- Get(r12)
 1178 r10 <- OverflowOf(r12)
 1179 r2 <- CarryOf(r12)
 1180 r6 <- SignOf(r12)
 1181 r5 <- IsZero(r12)
 1182 r47 <- Part { src: r12, offset: 0, size: 1 }
 1183 r3 <- Parity(r47)
0x5de334:
 1184 r45 <- Int { value: 2, size: 4 }
 1185 r45 <- Widen { reg: r45, target_size: 8, sign: false }
 1186 r16 <- Get(r45)
0x5de339:
 1187 r45 <- LoadMem { addr: r12, size: 8 }
 1188 r17 <- Get(r45)
 1189 r12 <- ArithK(Add, r12, 8)
0x5de33a:
 1190 r45 <- LoadMem { addr: r12, size: 8 }
 1191 r11 <- Get(r45)
 1192 r12 <- ArithK(Add, r12, 8)
0x5de33b:
 1193 r45 <- LoadMem { addr: r12, size: 8 }
 1194 r24 <- Get(r45)
 1195 r12 <- ArithK(Add, r12, 8)
0x5de33d:
 1196 r45 <- LoadMem { addr: r12, size: 8 }
 1197 r25 <- Get(r45)
 1198 r12 <- ArithK(Add, r12, 8)
0x5de33f:
 1199 r45 <- LoadMem { addr: r12, size: 8 }
 1200 r26 <- Get(r45)
 1201 r12 <- ArithK(Add, r12, 8)
0x5de341:
 1202 r45 <- LoadMem { addr: r12, size: 8 }
 1203 r27 <- Get(r45)
 1204 r12 <- ArithK(Add, r12, 8)
0x5de343:
 1205 r45 <- SetReturnValue(r16)
 1206 r45 <- Control(Ret)
0x5de348:
 1207 r46 <- Int { value: 0, size: 8 }
 1208 r46 <- Arith(Add, r46, r12)
 1209 r45 <- LoadMem { addr: r46, size: 8 }
 1210 r24 <- Get(r45)
0x5de34c:
 1211 r46 <- Int { value: 1, size: 8 }
 1212 r27 <- Arith(Add, r27, r46)
 1213 r27 <- Get(r27)
 1214 r10 <- OverflowOf(r27)
 1215 r2 <- CarryOf(r27)
 1216 r6 <- SignOf(r27)
 1217 r5 <- IsZero(r27)
 1218 r47 <- Part { src: r27, offset: 0, size: 1 }
 1219 r3 <- Parity(r47)
0x5de350:
 1220 r14 <- Get(r24)
0x5de353:
 1221 r45 <- Int { value: 4199136, size: 8 }
 1222 r46 <- Call { callee: r45, first_arg: None }
 1223 r2 <- UndefinedBool
 1224 r3 <- UndefinedBool
 1225 r4 <- UndefinedBool
 1226 r5 <- UndefinedBool
 1227 r6 <- UndefinedBool
 1228 r7 <- UndefinedBool
 1229 r8 <- UndefinedBool
 1230 r9 <- UndefinedBool
 1231 r10 <- UndefinedBool
0x5de358:
 1232 r46 <- Int { value: 24, size: 8 }
 1233 r46 <- Arith(Add, r46, r12)
 1234 r45 <- LoadMem { addr: r46, size: 8 }
 1235 r19 <- Get(r45)
0x5de35d:
 1236 r11 <- Get(r16)
0x5de360:
 1237 r45 <- Int { value: 0, size: 8 }
 1238 r45 <- Arith(Add, r45, r24)
 1239 r46 <- ArithK(Mul, r16, 1)
 1240 r45 <- Arith(Add, r45, r46)
 1241 r20 <- Get(r45)
0x5de364:
 1242 r47 <- Int { value: 0, size: 8 }
 1243 r47 <- Arith(Add, r47, r19)
 1244 r46 <- LoadMem { addr: r47, size: 8 }
 1245 r27 <- Arith(Sub, r27, r46)
 1246 r10 <- OverflowOf(r27)
 1247 r2 <- CarryOf(r27)
 1248 r6 <- SignOf(r27)
 1249 r5 <- IsZero(r27)
 1250 r48 <- Part { src: r27, offset: 0, size: 1 }
 1251 r3 <- Parity(r48)
0x5de367:
 1252 r45 <- SetJumpCondition(r2)
 1253 r45 <- Control(JmpExtIf(6152750))
0x5de36d:
 1254 r46 <- Int { value: 72, size: 8 }
 1255 r46 <- Arith(Add, r46, r12)
 1256 r45 <- LoadMem { addr: r46, size: 8 }
 1257 r17 <- Get(r45)
0x5de372:
 1258 r17 <- Arith(BitAnd, r17, r17)
 1259 r6 <- SignOf(r17)
 1260 r5 <- IsZero(r17)
 1261 r47 <- Part { src: r17, offset: 0, size: 1 }
 1262 r3 <- Parity(r17)
 1263 r2 <- False
 1264 r10 <- False
0x5de375:
 1265 r45 <- SetJumpCondition(r5)
 1266 r45 <- Control(JmpExtIf(6152917))
0x5de37b:
 1267 r46 <- Int { value: 0, size: 8 }
 1268 r46 <- Arith(Add, r46, r17)
 1269 r46 <- StoreMem { addr: r46, value: r25 }
0x5de37e:
 1270 r46 <- Part { src: r16, offset: 0, size: 4 }
 1271 r48 <- Part { src: r16, offset: 0, size: 4 }
 1272 r46 <- Arith(BitXor, r46, r48)
 1273 r46 <- Widen { reg: r46, target_size: 8, sign: false }
 1274 r16 <- Get(r46)
 1275 r10 <- False
 1276 r2 <- False
 1277 r6 <- SignOf(r46)
 1278 r5 <- IsZero(r46)
 1279 r49 <- Part { src: r46, offset: 0, size: 1 }
 1280 r3 <- Parity(r49)
0x5de380:
 1281 r45 <- Control(JmpExt(6152919))
0x5de388:
 1282 r46 <- Int { value: 0, size: 8 }
 1283 r46 <- Arith(Add, r46, r12)
 1284 r45 <- LoadMem { addr: r46, size: 8 }
 1285 r14 <- Get(r45)
0x5de38c:
 1286 r19 <- Get(r11)
0x5de38f:
 1287 r46 <- Int { value: 8, size: 8 }
 1288 r46 <- Arith(Add, r46, r12)
 1289 r46 <- StoreMem { addr: r46, value: r20 }
0x5de394:
 1290 r45 <- Int { value: 4199232, size: 8 }
 1291 r47 <- Void
 1292 r47 <- Get(r14)
 1293 r48 <- Void
 1294 r48 <- Get(r15)
 1295 r49 <- Void
 1296 r49 <- Get(r19)
 1297 r46 <- CArg { value: r49, next_arg: None }
 1298 r46 <- CArg { value: r48, next_arg: Some(r46) }
 1299 r46 <- CArg { value: r47, next_arg: Some(r46) }
 1300 r46 <- Call { callee: r45, first_arg: Some(r46) }
 1301 r2 <- UndefinedBool
 1302 r3 <- UndefinedBool
 1303 r4 <- UndefinedBool
 1304 r5 <- UndefinedBool
 1305 r6 <- UndefinedBool
 1306 r7 <- UndefinedBool
 1307 r8 <- UndefinedBool
 1308 r9 <- UndefinedBool
 1309 r10 <- UndefinedBool
 1310 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de399:
 1311 r46 <- Int { value: 8, size: 8 }
 1312 r46 <- Arith(Add, r46, r12)
 1313 r45 <- LoadMem { addr: r46, size: 8 }
 1314 r20 <- Get(r45)
0x5de39e:
 1315 r46 <- Part { src: r16, offset: 0, size: 4 }
 1316 r48 <- Part { src: r16, offset: 0, size: 4 }
 1317 r46 <- Arith(BitAnd, r46, r48)
 1318 r6 <- SignOf(r46)
 1319 r5 <- IsZero(r46)
 1320 r49 <- Part { src: r46, offset: 0, size: 1 }
 1321 r3 <- Parity(r46)
 1322 r2 <- False
 1323 r10 <- False
0x5de3a0:
 1324 r45 <- Not(r5)
 1325 r46 <- SetJumpCondition(r45)
 1326 r46 <- Control(JmpExtIf(6152331))
0x5de3a6:
 1327 r45 <- Control(JmpExt(6152649))
0x5de3b0:
 1328 r46 <- Int { value: 0, size: 8 }
 1329 r46 <- Arith(Add, r46, r12)
 1330 r45 <- LoadMem { addr: r46, size: 8 }
 1331 r14 <- Get(r45)
0x5de3b4:
 1332 r19 <- Get(r11)
0x5de3b7:
 1333 r46 <- Int { value: 8, size: 8 }
 1334 r46 <- Arith(Add, r46, r12)
 1335 r46 <- StoreMem { addr: r46, value: r20 }
0x5de3bc:
 1336 r45 <- Int { value: 4199232, size: 8 }
 1337 r47 <- Void
 1338 r47 <- Get(r14)
 1339 r48 <- Void
 1340 r48 <- Get(r15)
 1341 r49 <- Void
 1342 r49 <- Get(r19)
 1343 r46 <- CArg { value: r49, next_arg: None }
 1344 r46 <- CArg { value: r48, next_arg: Some(r46) }
 1345 r46 <- CArg { value: r47, next_arg: Some(r46) }
 1346 r46 <- Call { callee: r45, first_arg: Some(r46) }
 1347 r2 <- UndefinedBool
 1348 r3 <- UndefinedBool
 1349 r4 <- UndefinedBool
 1350 r5 <- UndefinedBool
 1351 r6 <- UndefinedBool
 1352 r7 <- UndefinedBool
 1353 r8 <- UndefinedBool
 1354 r9 <- UndefinedBool
 1355 r10 <- UndefinedBool
 1356 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de3c1:
 1357 r46 <- Int { value: 8, size: 8 }
 1358 r46 <- Arith(Add, r46, r12)
 1359 r45 <- LoadMem { addr: r46, size: 8 }
 1360 r20 <- Get(r45)
0x5de3c6:
 1361 r46 <- Part { src: r16, offset: 0, size: 4 }
 1362 r48 <- Part { src: r16, offset: 0, size: 4 }
 1363 r46 <- Arith(BitAnd, r46, r48)
 1364 r6 <- SignOf(r46)
 1365 r5 <- IsZero(r46)
 1366 r49 <- Part { src: r46, offset: 0, size: 1 }
 1367 r3 <- Parity(r46)
 1368 r2 <- False
 1369 r10 <- False
0x5de3c8:
 1370 r45 <- Not(r5)
 1371 r46 <- SetJumpCondition(r45)
 1372 r46 <- Control(JmpExtIf(6152278))
0x5de3ce:
 1373 r45 <- Control(JmpExt(6152649))
0x5de3d3:
 1374 r46 <- Int { value: 0, size: 8 }
 1375 r46 <- Arith(Add, r46, r12)
 1376 r45 <- LoadMem { addr: r46, size: 8 }
 1377 r14 <- Get(r45)
0x5de3d7:
 1378 r19 <- Get(r11)
0x5de3da:
 1379 r46 <- Int { value: 40, size: 8 }
 1380 r46 <- Arith(Add, r46, r12)
 1381 r46 <- StoreMem { addr: r46, value: r20 }
0x5de3df:
 1382 r46 <- Int { value: 8, size: 8 }
 1383 r46 <- Arith(Add, r46, r12)
 1384 r46 <- StoreMem { addr: r46, value: r24 }
0x5de3e4:
 1385 r45 <- Int { value: 4199232, size: 8 }
 1386 r47 <- Void
 1387 r47 <- Get(r14)
 1388 r48 <- Void
 1389 r48 <- Get(r15)
 1390 r49 <- Void
 1391 r49 <- Get(r19)
 1392 r46 <- CArg { value: r49, next_arg: None }
 1393 r46 <- CArg { value: r48, next_arg: Some(r46) }
 1394 r46 <- CArg { value: r47, next_arg: Some(r46) }
 1395 r46 <- Call { callee: r45, first_arg: Some(r46) }
 1396 r2 <- UndefinedBool
 1397 r3 <- UndefinedBool
 1398 r4 <- UndefinedBool
 1399 r5 <- UndefinedBool
 1400 r6 <- UndefinedBool
 1401 r7 <- UndefinedBool
 1402 r8 <- UndefinedBool
 1403 r9 <- UndefinedBool
 1404 r10 <- UndefinedBool
 1405 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5de3e9:
 1406 r46 <- Int { value: 40, size: 8 }
 1407 r46 <- Arith(Add, r46, r12)
 1408 r45 <- LoadMem { addr: r46, size: 8 }
 1409 r20 <- Get(r45)
0x5de3ee:
 1410 r14 <- Get(r24)
0x5de3f1:
 1411 r46 <- Part { src: r16, offset: 0, size: 4 }
 1412 r48 <- Part { src: r16, offset: 0, size: 4 }
 1413 r46 <- Arith(BitAnd, r46, r48)
 1414 r6 <- SignOf(r46)
 1415 r5 <- IsZero(r46)
 1416 r49 <- Part { src: r46, offset: 0, size: 1 }
 1417 r3 <- Parity(r46)
 1418 r2 <- False
 1419 r10 <- False
0x5de3f3:
 1420 r45 <- Not(r5)
 1421 r46 <- SetJumpCondition(r45)
 1422 r46 <- Control(JmpExtIf(6152224))
0x5de3f9:
 1423 r45 <- Control(JmpExt(6152649))
0x5de400:
 1424 r46 <- Int { value: 0, size: 8 }
 1425 r46 <- Arith(Add, r46, r12)
 1426 r45 <- LoadMem { addr: r46, size: 8 }
 1427 r27 <- Get(r45)
0x5de404:
 1428 r14 <- Get(r27)
0x5de407:
 1429 r45 <- Int { value: 4199136, size: 8 }
 1430 r46 <- Call { callee: r45, first_arg: None }
 1431 r2 <- UndefinedBool
 1432 r3 <- UndefinedBool
 1433 r4 <- UndefinedBool
 1434 r5 <- UndefinedBool
 1435 r6 <- UndefinedBool
 1436 r7 <- UndefinedBool
 1437 r8 <- UndefinedBool
 1438 r9 <- UndefinedBool
 1439 r10 <- UndefinedBool
0x5de40c:
 1440 r45 <- Int { value: 0, size: 8 }
 1441 r45 <- Arith(Add, r45, r27)
 1442 r46 <- ArithK(Mul, r16, 1)
 1443 r45 <- Arith(Add, r45, r46)
 1444 r20 <- Get(r45)
0x5de410:
 1445 r45 <- Control(JmpExt(6152064))
0x5de415:
 1446 r46 <- Int { value: 72, size: 8 }
 1447 r46 <- Arith(Add, r46, r12)
 1448 r45 <- LoadMem { addr: r46, size: 8 }
 1449 r17 <- Get(r45)
0x5de41a:
 1450 r45 <- Control(JmpExt(6152896))
0x5de41f:
 1451 r25 <- Get(r26)
0x5de422:
 1452 r45 <- Control(JmpExt(6153074))


 --- ssa pre-xform
ssa program  1539 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r9: Bytes(8) <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10: Bytes(8) <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
         r12: Bytes(8) <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
  (  3)  r13: Bytes(8) <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
         r15: Bytes(8) <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
  (  4)  r16: Bytes(8) <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  (  3)  r17: Bytes(8) <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
         r18: Bytes(8) <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
         r19: Bytes(8) <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
         r22: Bytes(8) <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
  (  5)  r23: Bytes(8) <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
         r24: Bytes(8) <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
  (  3)  r25: Bytes(8) <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
  (  2)  r42: Bytes(16) <- ArithK(Add, r10, -8)
         r43: Effect <- StoreMem { addr: r42, value: r25 }
  (  2)  r44: Bytes(32) <- ArithK(Add, r42, -8)
         r45: Effect <- StoreMem { addr: r44, value: r24 }
         r47: Bytes(4) <- Int { value: 46, size: 4 }
  (  2)  r48: Bytes(8) <- Widen { reg: r47, target_size: 8, sign: false }
  (  2)  r50: Bytes(64) <- ArithK(Add, r44, -8)
         r51: Effect <- StoreMem { addr: r50, value: r23 }
  (  2)  r52: Bytes(128) <- ArithK(Add, r50, -8)
         r53: Effect <- StoreMem { addr: r52, value: r22 }
  (  2)  r54: Bytes(256) <- ArithK(Add, r52, -8)
         r55: Effect <- StoreMem { addr: r54, value: r9 }
  (  2)  r56: Bytes(512) <- ArithK(Add, r54, -8)
         r57: Effect <- StoreMem { addr: r56, value: r15 }
         r59: Bytes(8) <- Int { value: 88, size: 8 }
  ( 64)  r60: Error <- Arith(Sub, r56, r59)
         r68: Bytes(8) <- Int { value: 64, size: 8 }
         r69: Error <- Arith(Add, r68, r60)
         r70: Effect <- StoreMem { addr: r69, value: r12 }
         r72: Bytes(8) <- Int { value: 32, size: 8 }
         r73: Error <- Arith(Add, r72, r60)
         r74: Effect <- StoreMem { addr: r73, value: r18 }
         r75: Bytes(8) <- Int { value: 0, size: 8 }
         r76: Error <- Arith(Add, r75, r60)
         r77: Effect <- StoreMem { addr: r76, value: r17 }
         r78: Bytes(8) <- Int { value: 24, size: 8 }
         r79: Error <- Arith(Add, r78, r60)
         r80: Effect <- StoreMem { addr: r79, value: r19 }
         r81: Bytes(8) <- Int { value: 4199040, size: 8 }
         r86: Bytes(4) <- Part { src: r48, offset: 0, size: 4 }
         r87: Bytes(4) <- CArg { value: r86, next_arg: None }
         r88: Bytes(8) <- CArg { value: r17, next_arg: Some(r87) }
         r89: Bytes(8) <- Call { callee: r81, first_arg: Some(r88) }
  (  3)  r99: Bytes(8) <- Part { src: r89, offset: 0, size: 8 }
  (  2)  r101: Bytes(16) <- Arith(BitAnd, r99, r99)
         r103: Bool <- IsZero(r101)
         r108: Effect <- SetJumpCondition(r103)
         r1477: Effect <- Upsilon { value: r99, phi_ref: r1453 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1424: Bytes(8) <- Int { value: 0, size: 8 }
         r1425: Error <- Arith(Add, r1424, r60)
         r1426: Bytes(8) <- LoadMem { addr: r1425, size: 8 }
         r1429: Bytes(8) <- Int { value: 4199136, size: 8 }
         r1430: Bytes(8) <- Call { callee: r1429, first_arg: None }
         r1440: Bytes(8) <- Int { value: 0, size: 8 }
         r1441: Bytes(16) <- Arith(Add, r1440, r1426)
         r1442: Bytes(32) <- ArithK(Mul, r101, 1)
         r1443: Error <- Arith(Add, r1441, r1442)
         r1478: Effect <- Upsilon { value: r1443, phi_ref: r1453 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  8)  r1453: Error <- Phi
         r110: Bytes(8) <- Int { value: 0, size: 8 }
         r111: Error <- Arith(Add, r110, r60)
  (  5)  r112: Bytes(8) <- LoadMem { addr: r111, size: 8 }
  ( 15)  r115: Error <- Arith(Sub, r1453, r112)
         r120: Bool <- IsZero(r115)
         r123: Effect <- SetJumpCondition(r120)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r125: Bytes(8) <- Int { value: 24, size: 8 }
         r126: Error <- Arith(Add, r125, r60)
         r127: Bytes(8) <- LoadMem { addr: r126, size: 8 }
         r129: Bytes(8) <- Int { value: 0, size: 8 }
         r130: Bytes(16) <- Arith(Add, r129, r127)
         r131: Bytes(8) <- LoadMem { addr: r130, size: 8 }
         r132: Bytes(8) <- Int { value: 0, size: 8 }
         r133: Bytes(16) <- Arith(Sub, r131, r132)
         r137: Bool <- IsZero(r133)
         r140: Effect <- SetJumpCondition(r137)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r142: Bytes(8) <- Int { value: 24, size: 8 }
         r143: Bytes(16) <- Arith(Add, r142, r13)
  ( 10)  r144: Bytes(8) <- LoadMem { addr: r143, size: 8 }
         r146: Bytes(4) <- Part { src: r25, offset: 0, size: 4 }
         r147: Bytes(4) <- Part { src: r25, offset: 0, size: 4 }
         r148: Bytes(8) <- Arith(BitXor, r146, r147)
  (  8)  r149: Bytes(8) <- Widen { reg: r148, target_size: 8, sign: false }
         r157: Bytes(8) <- Int { value: 72, size: 8 }
         r158: Error <- Arith(Add, r157, r60)
         r159: Effect <- StoreMem { addr: r158, value: r16 }
         r160: Bytes(8) <- Int { value: 0, size: 8 }
         r161: Bytes(16) <- Arith(Add, r160, r144)
         r162: Bytes(1) <- LoadMem { addr: r161, size: 1 }
         r163: Bytes(1) <- Int { value: 0, size: 1 }
         r164: Bytes(2) <- Arith(Sub, r162, r163)
         r168: Bool <- IsZero(r164)
         r171: Effect <- SetJumpCondition(r168)
         r1483: Effect <- Upsilon { value: r48, phi_ref: r1470 }
         r1484: Effect <- Upsilon { value: r1453, phi_ref: r1471 }
         r1485: Effect <- Upsilon { value: r13, phi_ref: r1454 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  5)  r1454: Bytes(8) <- Phi
         r173: Bytes(8) <- Int { value: 16, size: 8 }
         r174: Bytes(16) <- Arith(Add, r173, r1454)
  (  3)  r175: Bytes(8) <- LoadMem { addr: r174, size: 8 }
         r177: Bytes(8) <- Int { value: 16, size: 8 }
         r178: Error <- Arith(Add, r177, r60)
         r179: Effect <- StoreMem { addr: r178, value: r175 }
  (  2)  r180: Bytes(16) <- Arith(BitAnd, r175, r175)
         r182: Bool <- IsZero(r180)
         r187: Effect <- SetJumpCondition(r182)
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r190: Bytes(4) <- Part { src: r16, offset: 0, size: 4 }
         r191: Bytes(4) <- Part { src: r16, offset: 0, size: 4 }
         r192: Bytes(8) <- Arith(BitXor, r190, r191)
  (  6)  r193: Bytes(8) <- Widen { reg: r192, target_size: 8, sign: false }
         r201: Bytes(4) <- Part { src: r180, offset: 0, size: 4 }
         r202: Bytes(4) <- Int { value: 3, size: 4 }
         r203: Bytes(8) <- Arith(BitAnd, r201, r202)
  (  2)  r204: Bytes(8) <- Widen { reg: r203, target_size: 8, sign: false }
         r209: Bool <- IsZero(r204)
         r212: Effect <- SetJumpCondition(r209)
         r1495: Effect <- Upsilon { value: r1453, phi_ref: r1460 }
         r1496: Effect <- Upsilon { value: r144, phi_ref: r1461 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r214: Bytes(8) <- Int { value: 1, size: 8 }
  (  2)  r215: Bytes(16) <- Arith(Sub, r204, r214)
         r219: Bool <- IsZero(r215)
         r222: Effect <- SetJumpCondition(r219)
         r1515: Effect <- Upsilon { value: r1453, phi_ref: r1458 }
         r1516: Effect <- Upsilon { value: r144, phi_ref: r1459 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r224: Bytes(8) <- Int { value: 2, size: 8 }
         r225: Error <- Arith(Sub, r215, r224)
         r229: Bool <- IsZero(r225)
         r232: Effect <- SetJumpCondition(r229)
         r1523: Effect <- Upsilon { value: r1453, phi_ref: r1456 }
         r1524: Effect <- Upsilon { value: r144, phi_ref: r1457 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r234: Bytes(8) <- Int { value: 8, size: 8 }
         r235: Bytes(16) <- Arith(Add, r234, r144)
  (  2)  r236: Bytes(8) <- LoadMem { addr: r235, size: 8 }
         r238: Bytes(8) <- Int { value: 48, size: 8 }
         r239: Error <- Arith(Add, r238, r60)
         r240: Effect <- StoreMem { addr: r239, value: r1453 }
         r242: Bytes(8) <- Int { value: 40, size: 8 }
         r243: Error <- Arith(Add, r242, r60)
         r244: Effect <- StoreMem { addr: r243, value: r144 }
         r246: Bytes(8) <- Int { value: 8, size: 8 }
         r247: Error <- Arith(Add, r246, r60)
         r248: Effect <- StoreMem { addr: r247, value: r236 }
         r249: Bytes(8) <- Int { value: 4199136, size: 8 }
         r252: Bytes(8) <- CArg { value: r236, next_arg: None }
         r253: Bytes(8) <- Call { callee: r249, first_arg: Some(r252) }
         r263: Bytes(8) <- Part { src: r253, offset: 0, size: 8 }
         r264: Bytes(8) <- Int { value: 8, size: 8 }
         r265: Error <- Arith(Add, r264, r60)
         r266: Bytes(8) <- LoadMem { addr: r265, size: 8 }
         r268: Bytes(8) <- Int { value: 48, size: 8 }
         r269: Error <- Arith(Add, r268, r60)
  (  2)  r270: Bytes(8) <- LoadMem { addr: r269, size: 8 }
         r273: Error <- Arith(Sub, r263, r115)
         r277: Bool <- IsZero(r273)
         r280: Effect <- SetJumpCondition(r277)
         r1531: Effect <- Upsilon { value: r144, phi_ref: r1455 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1374: Bytes(8) <- Int { value: 0, size: 8 }
         r1375: Error <- Arith(Add, r1374, r60)
         r1376: Bytes(8) <- LoadMem { addr: r1375, size: 8 }
         r1379: Bytes(8) <- Int { value: 40, size: 8 }
         r1380: Error <- Arith(Add, r1379, r60)
         r1381: Effect <- StoreMem { addr: r1380, value: r270 }
         r1382: Bytes(8) <- Int { value: 8, size: 8 }
         r1383: Error <- Arith(Add, r1382, r60)
         r1384: Effect <- StoreMem { addr: r1383, value: r144 }
         r1385: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1392: Error <- CArg { value: r115, next_arg: None }
         r1393: Bytes(8) <- CArg { value: r266, next_arg: Some(r1392) }
         r1394: Bytes(8) <- CArg { value: r1376, next_arg: Some(r1393) }
         r1395: Bytes(8) <- Call { callee: r1385, first_arg: Some(r1394) }
  (  2)  r1405: Bytes(8) <- Part { src: r1395, offset: 0, size: 8 }
         r1411: Bytes(4) <- Part { src: r1405, offset: 0, size: 4 }
         r1412: Bytes(4) <- Part { src: r1405, offset: 0, size: 4 }
         r1413: Bytes(8) <- Arith(BitAnd, r1411, r1412)
         r1415: Bool <- IsZero(r1413)
         r1420: Bool <- Not(r1415)
         r1421: Effect <- SetJumpCondition(r1420)
         r1532: Effect <- Upsilon { value: r144, phi_ref: r1455 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1533: Effect <- Upsilon { value: r193, phi_ref: r1465 }
         r1534: Effect <- Upsilon { value: r144, phi_ref: r1466 }
         r1535: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1536: Effect <- Upsilon { value: r149, phi_ref: r1468 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1455: Bytes(8) <- Phi
         r285: Bytes(8) <- Int { value: 40, size: 8 }
         r286: Bytes(16) <- Arith(Add, r285, r1455)
         r1537: Effect <- Upsilon { value: r270, phi_ref: r1456 }
         r1538: Effect <- Upsilon { value: r286, phi_ref: r1457 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1457: Error <- Phi
         r1456: Error <- Phi
         r288: Bytes(8) <- Int { value: 8, size: 8 }
         r289: Error <- Arith(Add, r288, r1457)
  (  2)  r290: Bytes(8) <- LoadMem { addr: r289, size: 8 }
         r292: Bytes(8) <- Int { value: 40, size: 8 }
         r293: Error <- Arith(Add, r292, r60)
         r294: Effect <- StoreMem { addr: r293, value: r1456 }
         r297: Bytes(8) <- Int { value: 8, size: 8 }
         r298: Error <- Arith(Add, r297, r60)
         r299: Effect <- StoreMem { addr: r298, value: r290 }
         r300: Bytes(8) <- Int { value: 4199136, size: 8 }
         r303: Bytes(8) <- CArg { value: r290, next_arg: None }
         r304: Bytes(8) <- Call { callee: r300, first_arg: Some(r303) }
         r314: Bytes(8) <- Part { src: r304, offset: 0, size: 8 }
         r315: Bytes(8) <- Int { value: 8, size: 8 }
         r316: Error <- Arith(Add, r315, r60)
         r317: Bytes(8) <- LoadMem { addr: r316, size: 8 }
         r319: Bytes(8) <- Int { value: 40, size: 8 }
         r320: Error <- Arith(Add, r319, r60)
  (  2)  r321: Bytes(8) <- LoadMem { addr: r320, size: 8 }
         r323: Error <- Arith(Sub, r314, r115)
         r327: Bool <- IsZero(r323)
         r330: Effect <- SetJumpCondition(r327)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1328: Bytes(8) <- Int { value: 0, size: 8 }
         r1329: Error <- Arith(Add, r1328, r60)
         r1330: Bytes(8) <- LoadMem { addr: r1329, size: 8 }
         r1333: Bytes(8) <- Int { value: 8, size: 8 }
         r1334: Error <- Arith(Add, r1333, r60)
         r1335: Effect <- StoreMem { addr: r1334, value: r321 }
         r1336: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1343: Error <- CArg { value: r115, next_arg: None }
         r1344: Bytes(8) <- CArg { value: r317, next_arg: Some(r1343) }
         r1345: Bytes(8) <- CArg { value: r1330, next_arg: Some(r1344) }
         r1346: Bytes(8) <- Call { callee: r1336, first_arg: Some(r1345) }
  (  2)  r1356: Bytes(8) <- Part { src: r1346, offset: 0, size: 8 }
         r1361: Bytes(4) <- Part { src: r1356, offset: 0, size: 4 }
         r1362: Bytes(4) <- Part { src: r1356, offset: 0, size: 4 }
         r1363: Bytes(8) <- Arith(BitAnd, r1361, r1362)
         r1365: Bool <- IsZero(r1363)
         r1370: Bool <- Not(r1365)
         r1371: Effect <- SetJumpCondition(r1370)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1525: Effect <- Upsilon { value: r193, phi_ref: r1465 }
         r1526: Effect <- Upsilon { value: r1457, phi_ref: r1466 }
         r1527: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1528: Effect <- Upsilon { value: r149, phi_ref: r1468 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r341: Bytes(8) <- Int { value: 40, size: 8 }
         r342: Error <- Arith(Add, r1457, r341)
         r1529: Effect <- Upsilon { value: r321, phi_ref: r1458 }
         r1530: Effect <- Upsilon { value: r342, phi_ref: r1459 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1459: Error <- Phi
         r1458: Error <- Phi
         r350: Bytes(8) <- Int { value: 8, size: 8 }
         r351: Error <- Arith(Add, r350, r1459)
  (  2)  r352: Bytes(8) <- LoadMem { addr: r351, size: 8 }
         r354: Bytes(8) <- Int { value: 40, size: 8 }
         r355: Error <- Arith(Add, r354, r60)
         r356: Effect <- StoreMem { addr: r355, value: r1458 }
         r359: Bytes(8) <- Int { value: 8, size: 8 }
         r360: Error <- Arith(Add, r359, r60)
         r361: Effect <- StoreMem { addr: r360, value: r352 }
         r362: Bytes(8) <- Int { value: 4199136, size: 8 }
         r365: Bytes(8) <- CArg { value: r352, next_arg: None }
         r366: Bytes(8) <- Call { callee: r362, first_arg: Some(r365) }
         r376: Bytes(8) <- Part { src: r366, offset: 0, size: 8 }
         r377: Bytes(8) <- Int { value: 8, size: 8 }
         r378: Error <- Arith(Add, r377, r60)
         r379: Bytes(8) <- LoadMem { addr: r378, size: 8 }
         r381: Bytes(8) <- Int { value: 40, size: 8 }
         r382: Error <- Arith(Add, r381, r60)
  (  2)  r383: Bytes(8) <- LoadMem { addr: r382, size: 8 }
         r385: Error <- Arith(Sub, r376, r115)
         r389: Bool <- IsZero(r385)
         r392: Effect <- SetJumpCondition(r389)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1282: Bytes(8) <- Int { value: 0, size: 8 }
         r1283: Error <- Arith(Add, r1282, r60)
         r1284: Bytes(8) <- LoadMem { addr: r1283, size: 8 }
         r1287: Bytes(8) <- Int { value: 8, size: 8 }
         r1288: Error <- Arith(Add, r1287, r60)
         r1289: Effect <- StoreMem { addr: r1288, value: r383 }
         r1290: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1297: Error <- CArg { value: r115, next_arg: None }
         r1298: Bytes(8) <- CArg { value: r379, next_arg: Some(r1297) }
         r1299: Bytes(8) <- CArg { value: r1284, next_arg: Some(r1298) }
         r1300: Bytes(8) <- Call { callee: r1290, first_arg: Some(r1299) }
  (  2)  r1310: Bytes(8) <- Part { src: r1300, offset: 0, size: 8 }
         r1315: Bytes(4) <- Part { src: r1310, offset: 0, size: 4 }
         r1316: Bytes(4) <- Part { src: r1310, offset: 0, size: 4 }
         r1317: Bytes(8) <- Arith(BitAnd, r1315, r1316)
         r1319: Bool <- IsZero(r1317)
         r1324: Bool <- Not(r1319)
         r1325: Effect <- SetJumpCondition(r1324)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1517: Effect <- Upsilon { value: r193, phi_ref: r1465 }
         r1518: Effect <- Upsilon { value: r1459, phi_ref: r1466 }
         r1519: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1520: Effect <- Upsilon { value: r149, phi_ref: r1468 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r394: Bytes(8) <- Int { value: 16, size: 8 }
         r395: Error <- Arith(Add, r394, r60)
         r396: Bytes(8) <- LoadMem { addr: r395, size: 8 }
         r398: Bytes(8) <- Int { value: 1, size: 8 }
         r399: Bytes(16) <- Arith(Add, r193, r398)
         r407: Bytes(8) <- Int { value: 40, size: 8 }
         r408: Error <- Arith(Add, r1459, r407)
         r416: Error <- Arith(Sub, r399, r396)
         r420: Bool <- IsZero(r416)
         r423: Effect <- SetJumpCondition(r420)
         r1521: Effect <- Upsilon { value: r383, phi_ref: r1460 }
         r1522: Effect <- Upsilon { value: r408, phi_ref: r1461 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1461: Error <- Phi
         r1460: Error <- Phi
         r425: Bytes(8) <- Int { value: 56, size: 8 }
         r426: Error <- Arith(Add, r425, r60)
         r427: Effect <- StoreMem { addr: r426, value: r1454 }
         r429: Bytes(8) <- Int { value: 40, size: 8 }
         r430: Error <- Arith(Add, r429, r60)
         r431: Effect <- StoreMem { addr: r430, value: r149 }
         r432: Bytes(8) <- Int { value: 48, size: 8 }
         r433: Error <- Arith(Add, r432, r60)
         r434: Effect <- StoreMem { addr: r433, value: r1460 }
         r1499: Effect <- Upsilon { value: r1461, phi_ref: r1462 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  4)  r1462: Error <- Phi
         r586: Bytes(8) <- Int { value: 8, size: 8 }
         r587: Error <- Arith(Add, r586, r1462)
  (  2)  r588: Bytes(8) <- LoadMem { addr: r587, size: 8 }
         r592: Bytes(8) <- Int { value: 4199136, size: 8 }
         r595: Bytes(8) <- CArg { value: r588, next_arg: None }
         r596: Bytes(8) <- Call { callee: r592, first_arg: Some(r595) }
         r606: Bytes(8) <- Part { src: r596, offset: 0, size: 8 }
         r607: Error <- Arith(Sub, r606, r115)
         r611: Bool <- IsZero(r607)
         r614: Bool <- Not(r611)
         r615: Effect <- SetJumpCondition(r614)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r617: Bytes(8) <- Int { value: 0, size: 8 }
         r618: Error <- Arith(Add, r617, r60)
         r619: Bytes(8) <- LoadMem { addr: r618, size: 8 }
         r623: Bytes(8) <- Int { value: 4199232, size: 8 }
         r630: Error <- CArg { value: r115, next_arg: None }
         r631: Bytes(8) <- CArg { value: r588, next_arg: Some(r630) }
         r632: Bytes(8) <- CArg { value: r619, next_arg: Some(r631) }
         r633: Bytes(8) <- Call { callee: r623, first_arg: Some(r632) }
  (  2)  r643: Bytes(8) <- Part { src: r633, offset: 0, size: 8 }
         r644: Bytes(4) <- Part { src: r643, offset: 0, size: 4 }
         r645: Bytes(4) <- Part { src: r643, offset: 0, size: 4 }
         r646: Bytes(8) <- Arith(BitAnd, r644, r645)
         r648: Bool <- IsZero(r646)
         r653: Bool <- Not(r648)
         r654: Effect <- SetJumpCondition(r653)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r657: Bytes(8) <- Int { value: 40, size: 8 }
         r658: Error <- Arith(Add, r657, r60)
         r659: Bytes(8) <- LoadMem { addr: r658, size: 8 }
         r665: Bytes(8) <- Int { value: 56, size: 8 }
         r666: Error <- Arith(Add, r665, r60)
         r667: Bytes(8) <- LoadMem { addr: r666, size: 8 }
         r1500: Effect <- Upsilon { value: r193, phi_ref: r1465 }
         r1501: Effect <- Upsilon { value: r1462, phi_ref: r1466 }
         r1502: Effect <- Upsilon { value: r667, phi_ref: r1467 }
         r1503: Effect <- Upsilon { value: r659, phi_ref: r1468 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r436: Bytes(8) <- Int { value: 48, size: 8 }
         r437: Error <- Arith(Add, r436, r1462)
  (  2)  r438: Bytes(8) <- LoadMem { addr: r437, size: 8 }
         r440: Bytes(8) <- Int { value: 40, size: 8 }
  (  6)  r441: Error <- Arith(Add, r440, r1462)
         r443: Bytes(8) <- Int { value: 1, size: 8 }
  (  2)  r444: Bytes(16) <- Arith(Add, r443, r193)
         r450: Bytes(8) <- Int { value: 8, size: 8 }
         r451: Error <- Arith(Add, r450, r60)
         r452: Effect <- StoreMem { addr: r451, value: r438 }
         r453: Bytes(8) <- Int { value: 4199136, size: 8 }
         r456: Bytes(8) <- CArg { value: r438, next_arg: None }
         r457: Bytes(8) <- Call { callee: r453, first_arg: Some(r456) }
         r467: Bytes(8) <- Part { src: r457, offset: 0, size: 8 }
         r468: Bytes(8) <- Int { value: 8, size: 8 }
         r469: Error <- Arith(Add, r468, r60)
         r470: Bytes(8) <- LoadMem { addr: r469, size: 8 }
         r472: Error <- Arith(Sub, r467, r115)
         r476: Bool <- IsZero(r472)
         r479: Effect <- SetJumpCondition(r476)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r670: Bytes(8) <- Int { value: 0, size: 8 }
         r671: Error <- Arith(Add, r670, r60)
         r672: Bytes(8) <- LoadMem { addr: r671, size: 8 }
         r675: Bytes(8) <- Int { value: 4199232, size: 8 }
         r682: Error <- CArg { value: r115, next_arg: None }
         r683: Bytes(8) <- CArg { value: r470, next_arg: Some(r682) }
         r684: Bytes(8) <- CArg { value: r672, next_arg: Some(r683) }
         r685: Bytes(8) <- Call { callee: r675, first_arg: Some(r684) }
  (  2)  r695: Bytes(8) <- Part { src: r685, offset: 0, size: 8 }
         r696: Bytes(4) <- Part { src: r695, offset: 0, size: 4 }
         r697: Bytes(4) <- Part { src: r695, offset: 0, size: 4 }
         r698: Bytes(8) <- Arith(BitAnd, r696, r697)
         r700: Bool <- IsZero(r698)
         r705: Bool <- Not(r700)
         r706: Effect <- SetJumpCondition(r705)
         r1509: Effect <- Upsilon { value: r441, phi_ref: r1464 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r481: Bytes(8) <- Int { value: 48, size: 8 }
         r482: Error <- Arith(Add, r481, r441)
  (  2)  r483: Bytes(8) <- LoadMem { addr: r482, size: 8 }
         r485: Bytes(8) <- Int { value: 40, size: 8 }
         r486: Error <- Arith(Add, r485, r441)
         r493: Bytes(8) <- Int { value: 8, size: 8 }
         r494: Error <- Arith(Add, r493, r60)
         r495: Effect <- StoreMem { addr: r494, value: r483 }
         r496: Bytes(8) <- Int { value: 4199136, size: 8 }
         r499: Bytes(8) <- CArg { value: r483, next_arg: None }
         r500: Bytes(8) <- Call { callee: r496, first_arg: Some(r499) }
         r510: Bytes(8) <- Part { src: r500, offset: 0, size: 8 }
         r511: Bytes(8) <- Int { value: 8, size: 8 }
         r512: Error <- Arith(Add, r511, r60)
         r513: Bytes(8) <- LoadMem { addr: r512, size: 8 }
         r515: Error <- Arith(Sub, r510, r115)
         r519: Bool <- IsZero(r515)
         r522: Effect <- SetJumpCondition(r519)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1097: Bytes(8) <- Int { value: 0, size: 8 }
         r1098: Error <- Arith(Add, r1097, r60)
         r1099: Bytes(8) <- LoadMem { addr: r1098, size: 8 }
         r1102: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1109: Error <- CArg { value: r115, next_arg: None }
         r1110: Bytes(8) <- CArg { value: r513, next_arg: Some(r1109) }
         r1111: Bytes(8) <- CArg { value: r1099, next_arg: Some(r1110) }
         r1112: Bytes(8) <- Call { callee: r1102, first_arg: Some(r1111) }
  (  2)  r1122: Bytes(8) <- Part { src: r1112, offset: 0, size: 8 }
         r1123: Bytes(4) <- Part { src: r1122, offset: 0, size: 4 }
         r1124: Bytes(4) <- Part { src: r1122, offset: 0, size: 4 }
         r1125: Bytes(8) <- Arith(BitAnd, r1123, r1124)
         r1127: Bool <- IsZero(r1125)
         r1132: Bool <- Not(r1127)
         r1133: Effect <- SetJumpCondition(r1132)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1511: Effect <- Upsilon { value: r486, phi_ref: r1464 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r524: Bytes(8) <- Int { value: 88, size: 8 }
         r525: Error <- Arith(Add, r524, r441)
  (  2)  r526: Bytes(8) <- LoadMem { addr: r525, size: 8 }
         r528: Bytes(8) <- Int { value: 80, size: 8 }
         r529: Error <- Arith(Add, r528, r441)
         r536: Bytes(8) <- Int { value: 8, size: 8 }
         r537: Error <- Arith(Add, r536, r60)
         r538: Effect <- StoreMem { addr: r537, value: r526 }
         r539: Bytes(8) <- Int { value: 4199136, size: 8 }
         r542: Bytes(8) <- CArg { value: r526, next_arg: None }
         r543: Bytes(8) <- Call { callee: r539, first_arg: Some(r542) }
         r553: Bytes(8) <- Part { src: r543, offset: 0, size: 8 }
         r554: Bytes(8) <- Int { value: 8, size: 8 }
         r555: Error <- Arith(Add, r554, r60)
         r556: Bytes(8) <- LoadMem { addr: r555, size: 8 }
         r558: Error <- Arith(Sub, r553, r115)
         r562: Bool <- IsZero(r558)
         r565: Effect <- SetJumpCondition(r562)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1136: Bytes(8) <- Int { value: 0, size: 8 }
         r1137: Error <- Arith(Add, r1136, r60)
         r1138: Bytes(8) <- LoadMem { addr: r1137, size: 8 }
         r1141: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1148: Error <- CArg { value: r115, next_arg: None }
         r1149: Bytes(8) <- CArg { value: r556, next_arg: Some(r1148) }
         r1150: Bytes(8) <- CArg { value: r1138, next_arg: Some(r1149) }
         r1151: Bytes(8) <- Call { callee: r1141, first_arg: Some(r1150) }
  (  2)  r1161: Bytes(8) <- Part { src: r1151, offset: 0, size: 8 }
         r1162: Bytes(4) <- Part { src: r1161, offset: 0, size: 4 }
         r1163: Bytes(4) <- Part { src: r1161, offset: 0, size: 4 }
         r1164: Bytes(8) <- Arith(BitAnd, r1162, r1163)
         r1166: Bool <- IsZero(r1164)
         r1171: Bool <- Not(r1166)
         r1172: Effect <- SetJumpCondition(r1171)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1513: Effect <- Upsilon { value: r529, phi_ref: r1464 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1464: Error <- Phi
         r709: Bytes(8) <- Int { value: 40, size: 8 }
         r710: Error <- Arith(Add, r709, r60)
         r711: Bytes(8) <- LoadMem { addr: r710, size: 8 }
         r718: Bytes(8) <- Int { value: 56, size: 8 }
         r719: Error <- Arith(Add, r718, r60)
         r720: Bytes(8) <- LoadMem { addr: r719, size: 8 }
         r1504: Effect <- Upsilon { value: r444, phi_ref: r1465 }
         r1505: Effect <- Upsilon { value: r1464, phi_ref: r1466 }
         r1506: Effect <- Upsilon { value: r720, phi_ref: r1467 }
         r1507: Effect <- Upsilon { value: r711, phi_ref: r1468 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1468: Bytes(8) <- Phi
         r1467: Bytes(8) <- Phi
         r1466: Error <- Phi
         r1465: Error <- Phi
         r722: Bytes(8) <- Int { value: 32, size: 8 }
         r723: Error <- Arith(Add, r722, r60)
         r724: Bytes(8) <- LoadMem { addr: r723, size: 8 }
         r726: Bytes(8) <- Int { value: 0, size: 8 }
         r727: Bytes(16) <- Arith(Add, r726, r724)
         r728: Bytes(16) <- ArithK(Mul, r1468, 8)
         r729: Bytes(32) <- Arith(Add, r727, r728)
         r730: Effect <- StoreMem { addr: r729, value: r1465 }
         r731: Error <- Arith(Sub, r1466, r1467)
         r735: Bool <- IsZero(r731)
         r738: Effect <- SetJumpCondition(r735)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r740: Bytes(8) <- Int { value: 32, size: 8 }
         r741: Bytes(16) <- Arith(Add, r740, r23)
         r742: Bytes(8) <- LoadMem { addr: r741, size: 8 }
         r743: Bytes(8) <- Int { value: 0, size: 8 }
         r744: Bytes(16) <- Arith(Sub, r742, r743)
         r748: Bool <- IsZero(r744)
         r751: Bytes(8) <- Int { value: 0, size: 8 }
         r752: Error <- Arith(Add, r751, r1453)
         r753: Bytes(1) <- LoadMem { addr: r752, size: 1 }
         r754: Bytes(4) <- Widen { reg: r753, target_size: 4, sign: false }
         r755: Bytes(7) <- Part { src: r17, offset: 1, size: 7 }
  (  2)  r756: Bytes(11) <- Concat { lo: r754, hi: r755 }
         r757: Bool <- Not(r748)
         r758: Effect <- SetJumpCondition(r757)
         r1497: Effect <- Upsilon { value: r756, phi_ref: r1472 }
         r1498: Effect <- Upsilon { value: r756, phi_ref: r1469 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1469: Error <- Phi
         r760: Bytes(1) <- Part { src: r1469, offset: 0, size: 1 }
         r761: Bytes(1) <- Part { src: r1469, offset: 0, size: 1 }
         r762: Bytes(2) <- Arith(BitAnd, r760, r761)
         r764: Bool <- IsZero(r762)
         r769: Effect <- SetJumpCondition(r764)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
         r771: Bytes(8) <- Int { value: 1, size: 8 }
  (  2)  r772: Error <- Arith(Add, r771, r1453)
         r774: Bytes(4) <- Int { value: 46, size: 4 }
  (  2)  r775: Bytes(8) <- Widen { reg: r774, target_size: 8, sign: false }
         r777: Bytes(8) <- Int { value: 0, size: 8 }
         r778: Error <- Arith(Add, r777, r60)
         r779: Effect <- StoreMem { addr: r778, value: r772 }
         r780: Bytes(8) <- Int { value: 4199040, size: 8 }
         r785: Bytes(4) <- Part { src: r775, offset: 0, size: 4 }
         r786: Bytes(4) <- CArg { value: r785, next_arg: None }
         r787: Error <- CArg { value: r772, next_arg: Some(r786) }
         r788: Bytes(8) <- Call { callee: r780, first_arg: Some(r787) }
  (  3)  r798: Bytes(8) <- Part { src: r788, offset: 0, size: 8 }
         r800: Bytes(16) <- Arith(BitAnd, r798, r798)
         r802: Bool <- IsZero(r800)
         r807: Effect <- SetJumpCondition(r802)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r814: Bytes(8) <- Int { value: 24, size: 8 }
         r815: Error <- Arith(Add, r814, r60)
         r816: Bytes(8) <- LoadMem { addr: r815, size: 8 }
         r818: Bytes(8) <- Int { value: 1, size: 8 }
         r819: Bytes(16) <- Arith(Add, r149, r818)
         r835: Bytes(8) <- Int { value: 0, size: 8 }
         r836: Bytes(16) <- Arith(Add, r835, r816)
         r837: Bytes(8) <- LoadMem { addr: r836, size: 8 }
         r838: Error <- Arith(Sub, r819, r837)
         r840: Bool <- CarryOf(r838)
         r845: Bool <- Not(r840)
         r846: Effect <- SetJumpCondition(r845)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1211: Bytes(8) <- Int { value: 1, size: 8 }
         r1212: Bytes(16) <- Arith(Add, r149, r1211)
         r1221: Bytes(8) <- Int { value: 4199136, size: 8 }
         r1222: Bytes(8) <- Call { callee: r1221, first_arg: None }
         r1232: Bytes(8) <- Int { value: 24, size: 8 }
         r1233: Error <- Arith(Add, r1232, r60)
         r1234: Bytes(8) <- LoadMem { addr: r1233, size: 8 }
         r1242: Bytes(8) <- Int { value: 0, size: 8 }
         r1243: Bytes(16) <- Arith(Add, r1242, r1234)
         r1244: Bytes(8) <- LoadMem { addr: r1243, size: 8 }
         r1245: Error <- Arith(Sub, r1212, r1244)
         r1247: Bool <- CarryOf(r1245)
         r1252: Effect <- SetJumpCondition(r1247)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1254: Bytes(8) <- Int { value: 72, size: 8 }
         r1255: Error <- Arith(Add, r1254, r60)
         r1256: Bytes(8) <- LoadMem { addr: r1255, size: 8 }
         r1491: Effect <- Upsilon { value: r1256, phi_ref: r1475 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r849: Bytes(8) <- Int { value: 24, size: 8 }
         r850: Bytes(16) <- Arith(Add, r849, r23)
         r851: Bytes(8) <- LoadMem { addr: r850, size: 8 }
         r853: Bytes(8) <- Int { value: 0, size: 8 }
         r854: Bytes(16) <- Arith(Add, r853, r851)
         r855: Bytes(1) <- LoadMem { addr: r854, size: 1 }
         r856: Bytes(1) <- Int { value: 0, size: 1 }
         r857: Bytes(2) <- Arith(Sub, r855, r856)
         r861: Bool <- IsZero(r857)
         r864: Bool <- Not(r861)
         r865: Effect <- SetJumpCondition(r864)
         r1492: Effect <- Upsilon { value: r23, phi_ref: r1454 }
         r1493: Effect <- Upsilon { value: r775, phi_ref: r1470 }
         r1494: Effect <- Upsilon { value: r798, phi_ref: r1471 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1446: Bytes(8) <- Int { value: 72, size: 8 }
         r1447: Error <- Arith(Add, r1446, r60)
         r1448: Bytes(8) <- LoadMem { addr: r1447, size: 8 }
         r1490: Effect <- Upsilon { value: r1448, phi_ref: r1473 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r567: Bytes(8) <- Int { value: 16, size: 8 }
         r568: Error <- Arith(Add, r567, r60)
         r569: Bytes(8) <- LoadMem { addr: r568, size: 8 }
         r571: Bytes(8) <- Int { value: 3, size: 8 }
         r572: Error <- Arith(Add, r571, r444)
         r574: Bytes(8) <- Int { value: 120, size: 8 }
         r575: Error <- Arith(Add, r574, r441)
         r577: Error <- Arith(Sub, r572, r569)
         r581: Bool <- IsZero(r577)
         r584: Effect <- SetJumpCondition(r581)
         r1514: Effect <- Upsilon { value: r575, phi_ref: r1462 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1471: Error <- Phi
  (  2)  r1470: Bytes(8) <- Phi
         r867: Bytes(8) <- Int { value: 0, size: 8 }
         r868: Error <- Arith(Add, r867, r60)
         r869: Bytes(8) <- LoadMem { addr: r868, size: 8 }
         r871: Bytes(4) <- Part { src: r1470, offset: 0, size: 4 }
         r872: Bytes(4) <- Part { src: r1470, offset: 0, size: 4 }
         r873: Bytes(8) <- Arith(BitXor, r871, r872)
         r874: Bytes(8) <- Widen { reg: r873, target_size: 8, sign: false }
         r882: Bytes(4) <- Int { value: 10, size: 4 }
         r883: Bytes(8) <- Widen { reg: r882, target_size: 8, sign: false }
         r885: Bytes(8) <- Int { value: 8, size: 8 }
         r886: Error <- Arith(Add, r885, r60)
         r887: Effect <- StoreMem { addr: r886, value: r1471 }
         r888: Bytes(8) <- Int { value: 6451424, size: 8 }
         r895: Bytes(4) <- Part { src: r883, offset: 0, size: 4 }
         r896: Bytes(4) <- CArg { value: r895, next_arg: None }
         r897: Bytes(8) <- CArg { value: r874, next_arg: Some(r896) }
         r898: Bytes(8) <- CArg { value: r869, next_arg: Some(r897) }
         r899: Bytes(8) <- Call { callee: r888, first_arg: Some(r898) }
         r909: Bytes(8) <- Part { src: r899, offset: 0, size: 8 }
         r910: Bytes(8) <- Int { value: 8, size: 8 }
         r911: Error <- Arith(Add, r910, r60)
         r912: Bytes(8) <- LoadMem { addr: r911, size: 8 }
         r914: Bytes(8) <- Int { value: -1, size: 8 }
  (  6)  r915: Bytes(16) <- Arith(Sub, r909, r914)
         r919: Bool <- IsZero(r915)
         r923: Effect <- SetJumpCondition(r919)
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r925: Bytes(8) <- Int { value: 24, size: 8 }
         r926: Bytes(16) <- Arith(Add, r925, r13)
  (  2)  r927: Bytes(8) <- LoadMem { addr: r926, size: 8 }
         r929: Bytes(8) <- Int { value: 0, size: 8 }
         r930: Error <- Arith(Add, r929, r60)
         r931: Effect <- StoreMem { addr: r930, value: r912 }
         r932: Bytes(8) <- Int { value: 0, size: 8 }
         r933: Bytes(16) <- Arith(Add, r932, r927)
         r934: Bytes(1) <- LoadMem { addr: r933, size: 1 }
         r935: Bytes(1) <- Int { value: 0, size: 1 }
         r936: Bytes(2) <- Arith(Sub, r934, r935)
         r940: Bool <- IsZero(r936)
         r943: Bool <- Not(r940)
         r944: Effect <- SetJumpCondition(r943)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r946: Bytes(8) <- Int { value: 24, size: 8 }
         r947: Error <- Arith(Add, r946, r60)
         r948: Bytes(8) <- LoadMem { addr: r947, size: 8 }
         r950: Bytes(8) <- Int { value: 32, size: 8 }
         r951: Error <- Arith(Add, r950, r60)
  (  2)  r952: Bytes(8) <- LoadMem { addr: r951, size: 8 }
         r954: Bytes(8) <- Int { value: 64, size: 8 }
         r955: Error <- Arith(Add, r954, r60)
  (  2)  r956: Bytes(8) <- LoadMem { addr: r955, size: 8 }
         r958: Bytes(8) <- Int { value: 0, size: 8 }
         r959: Bytes(16) <- Arith(Add, r958, r948)
         r960: Bytes(8) <- LoadMem { addr: r959, size: 8 }
         r964: Bytes(8) <- Int { value: 8, size: 8 }
         r965: Bytes(16) <- Arith(Add, r964, r927)
         r966: Bytes(8) <- LoadMem { addr: r965, size: 8 }
         r967: Bytes(8) <- LoadMem { addr: r966, size: 8 }
         r968: Bytes(16) <- CArg { value: r915, next_arg: None }
         r969: Bytes(8) <- CArg { value: r960, next_arg: Some(r968) }
         r970: Bytes(8) <- CArg { value: r952, next_arg: Some(r969) }
         r971: Bytes(8) <- CArg { value: r956, next_arg: Some(r970) }
         r972: Bytes(8) <- Call { callee: r967, first_arg: Some(r971) }
         r984: Bytes(32) <- Arith(BitAnd, r915, r915)
         r986: Bool <- IsZero(r984)
         r991: Effect <- SetJumpCondition(r986)
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r993: Bytes(8) <- Int { value: 0, size: 8 }
         r994: Error <- Arith(Add, r993, r60)
         r995: Bytes(8) <- LoadMem { addr: r994, size: 8 }
         r997: Bytes(8) <- Int { value: 32, size: 8 }
         r998: Error <- Arith(Add, r997, r915)
         r999: Bytes(8) <- LoadMem { addr: r998, size: 8 }
         r1000: Bytes(8) <- Int { value: 0, size: 8 }
         r1001: Bytes(16) <- Arith(Sub, r999, r1000)
         r1005: Bool <- IsZero(r1001)
         r1008: Bytes(8) <- Int { value: 0, size: 8 }
         r1009: Bytes(16) <- Arith(Add, r1008, r952)
         r1010: Bytes(16) <- ArithK(Mul, r149, 8)
         r1011: Bytes(32) <- Arith(Add, r1009, r1010)
         r1012: Effect <- StoreMem { addr: r1011, value: r915 }
         r1013: Bytes(8) <- Int { value: 0, size: 8 }
         r1014: Bytes(16) <- Arith(Add, r1013, r995)
         r1015: Bytes(1) <- LoadMem { addr: r1014, size: 1 }
         r1016: Bytes(4) <- Widen { reg: r1015, target_size: 4, sign: false }
         r1017: Bytes(7) <- Part { src: r956, offset: 1, size: 7 }
  (  2)  r1018: Bytes(11) <- Concat { lo: r1016, hi: r1017 }
         r1019: Effect <- SetJumpCondition(r1005)
         r1488: Effect <- Upsilon { value: r1018, phi_ref: r1469 }
         r1489: Effect <- Upsilon { value: r1018, phi_ref: r1472 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1472: Bytes(11) <- Phi
         r1021: Bytes(8) <- Int { value: 72, size: 8 }
         r1022: Error <- Arith(Add, r1021, r60)
         r1023: Bytes(8) <- LoadMem { addr: r1022, size: 8 }
         r1025: Bytes(1) <- Part { src: r1472, offset: 0, size: 1 }
         r1026: Bytes(1) <- Part { src: r1472, offset: 0, size: 1 }
         r1027: Bytes(2) <- Arith(BitAnd, r1025, r1026)
         r1029: Bool <- IsZero(r1027)
         r1034: Bool <- Not(r1029)
         r1035: Effect <- SetJumpCondition(r1034)
         r1487: Effect <- Upsilon { value: r1023, phi_ref: r1473 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1473: Bytes(8) <- Phi
         r1037: Bytes(8) <- Int { value: 1, size: 8 }
         r1038: Bytes(16) <- Arith(Add, r1037, r149)
         r1040: Bytes(8) <- Int { value: 24, size: 8 }
         r1041: Error <- Arith(Add, r1040, r60)
         r1042: Bytes(8) <- LoadMem { addr: r1041, size: 8 }
         r1044: Bytes(8) <- Int { value: 0, size: 8 }
         r1045: Bytes(16) <- Arith(Add, r1044, r1042)
         r1046: Effect <- StoreMem { addr: r1045, value: r1038 }
  (  2)  r1047: Bytes(16) <- Arith(BitAnd, r1473, r1473)
         r1049: Bool <- IsZero(r1047)
         r1054: Bool <- Not(r1049)
         r1055: Effect <- SetJumpCondition(r1054)
         r1486: Effect <- Upsilon { value: r1047, phi_ref: r1476 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1479: Effect <- Upsilon { value: r16, phi_ref: r1475 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1475: Bytes(8) <- Phi
  (  2)  r1258: Bytes(16) <- Arith(BitAnd, r1475, r1475)
         r1260: Bool <- IsZero(r1258)
         r1265: Effect <- SetJumpCondition(r1260)
         r1481: Effect <- Upsilon { value: r1258, phi_ref: r1476 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1476: Bytes(16) <- Phi
         r1267: Bytes(8) <- Int { value: 0, size: 8 }
         r1268: Error <- Arith(Add, r1267, r1476)
         r1269: Effect <- StoreMem { addr: r1268, value: r23 }
         r1270: Bytes(4) <- Part { src: r112, offset: 0, size: 4 }
         r1271: Bytes(4) <- Part { src: r112, offset: 0, size: 4 }
         r1272: Bytes(8) <- Arith(BitXor, r1270, r1271)
         r1273: Bytes(8) <- Widen { reg: r1272, target_size: 8, sign: false }
         r1480: Effect <- Upsilon { value: r1273, phi_ref: r1474 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1057: Bytes(4) <- Part { src: r112, offset: 0, size: 4 }
         r1058: Bytes(4) <- Part { src: r112, offset: 0, size: 4 }
         r1059: Bytes(8) <- Arith(BitXor, r1057, r1058)
         r1060: Bytes(8) <- Widen { reg: r1059, target_size: 8, sign: false }
         r1482: Effect <- Upsilon { value: r1060, phi_ref: r1474 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1474: Bytes(8) <- Phi
         r1095: Effect <- SetReturnValue(r1474)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1184: Bytes(4) <- Int { value: 2, size: 4 }
         r1185: Bytes(8) <- Widen { reg: r1184, target_size: 8, sign: false }
         r1205: Effect <- SetReturnValue(r1185)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) } [r9, r10, r12, r13, r15, r16, r17, r18, r19, r22, r23, r24, r25, r42, r43, r44, r45, r48, r50, r51, r52, r53, r54, r55, r56, r57, r69, r70, r73, r74, r76, r77, r79, r80, r81, r86, r87, r88, r89, r103, r108, r1477]
  BlockID(1) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) } [r1453, r115, r120, r123]
  BlockID(2) -> Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) } [r131, r137, r140]
  BlockID(3) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) } [r143, r144, r146, r147, r148, r158, r159, r162, r168, r171, r1483, r1484, r1485]
  BlockID(4) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) } [r1454, r174, r175, r178, r179, r182, r187]
  BlockID(5) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) } [r190, r191, r192, r201, r203, r209, r212, r1495, r1496]
  BlockID(6) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) } [r215, r219, r222, r1515, r1516]
  BlockID(7) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) } [r225, r229, r232, r1523, r1524]
  BlockID(8) -> Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) } [r235, r236, r239, r240, r243, r244, r247, r248, r249, r252, r253, r269, r270, r273, r277, r280, r1531]
  BlockID(9) -> Always(Block(BlockID(10))) [r1455, r286, r1537, r1538]
  BlockID(10) -> Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) } [r1457, r1456, r289, r290, r293, r294, r298, r299, r300, r303, r304, r320, r321, r323, r327, r330]
  BlockID(11) -> Always(Block(BlockID(12))) [r342, r1529, r1530]
  BlockID(12) -> Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) } [r1459, r1458, r351, r352, r355, r356, r360, r361, r362, r365, r366, r382, r383, r385, r389, r392]
  BlockID(13) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) } [r399, r408, r416, r420, r423, r1521, r1522]
  BlockID(14) -> Always(Block(BlockID(19))) [r1461, r1460, r426, r427, r430, r431, r433, r434, r1499]
  BlockID(15) -> Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) } [r437, r438, r441, r444, r451, r452, r453, r456, r457, r472, r476, r479]
  BlockID(16) -> Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) } [r482, r483, r486, r494, r495, r496, r499, r500, r515, r519, r522]
  BlockID(17) -> Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) } [r525, r526, r529, r537, r538, r539, r542, r543, r558, r562, r565]
  BlockID(18) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) } [r572, r575, r577, r581, r584, r1514]
  BlockID(19) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) } [r1462, r587, r588, r592, r595, r596, r607, r611, r614, r615]
  BlockID(20) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) } [r623, r630, r631, r632, r633, r648, r653, r654]
  BlockID(21) -> Always(Block(BlockID(24))) [r1500, r1501, r1502, r1503]
  BlockID(22) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) } [r675, r682, r683, r684, r685, r700, r705, r706, r1509]
  BlockID(23) -> Always(Block(BlockID(24))) [r1464, r1504, r1505, r1506, r1507]
  BlockID(24) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) } [r1468, r1467, r1466, r1465, r728, r729, r730, r731, r735, r738]
  BlockID(25) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) } [r741, r742, r748, r753, r754, r755, r756, r757, r758, r1497, r1498]
  BlockID(26) -> Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) } [r1469, r760, r761, r762, r764, r769]
  BlockID(27) -> Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) } [r772, r775, r778, r779, r780, r785, r786, r787, r788, r802, r807]
  BlockID(28) -> Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) } [r819, r837, r838, r840, r845, r846]
  BlockID(29) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) } [r850, r851, r855, r861, r864, r865, r1492, r1493, r1494]
  BlockID(30) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) } [r1471, r1470, r871, r872, r873, r886, r887, r888, r895, r896, r897, r898, r899, r911, r912, r915, r919, r923]
  BlockID(31) -> Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) } [r926, r927, r930, r931, r934, r940, r943, r944]
  BlockID(32) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) } [r960, r965, r966, r967, r968, r969, r970, r971, r972, r986, r991]
  BlockID(33) -> Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) } [r998, r999, r1005, r1010, r1011, r1012, r1015, r1016, r1017, r1018, r1019, r1488, r1489]
  BlockID(34) -> Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) } [r1472, r1025, r1026, r1027, r1029, r1034, r1035, r1487]
  BlockID(35) -> Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) } [r1473, r1038, r1046, r1049, r1054, r1055, r1486]
  BlockID(36) -> Always(Block(BlockID(37))) [r1057, r1058, r1059, r1482]
  BlockID(37) -> Always(Return) [r1474, r1095]
  BlockID(38) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) } [r1102, r1109, r1110, r1111, r1112, r1127, r1132, r1133]
  BlockID(39) -> Always(Block(BlockID(23))) [r1511]
  BlockID(40) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) } [r1141, r1148, r1149, r1150, r1151, r1166, r1171, r1172]
  BlockID(41) -> Always(Block(BlockID(23))) [r1513]
  BlockID(42) -> Always(Return) [r1185, r1205]
  BlockID(43) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) } [r1212, r1221, r1222, r1244, r1245, r1247, r1252]
  BlockID(44) -> Always(Block(BlockID(45))) [r1491]
  BlockID(45) -> Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) } [r1475, r1260, r1265, r1481]
  BlockID(46) -> Always(Block(BlockID(37))) [r1476, r1269, r1270, r1271, r1272, r1480]
  BlockID(47) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) } [r1288, r1289, r1290, r1297, r1298, r1299, r1300, r1319, r1324, r1325]
  BlockID(48) -> Always(Block(BlockID(24))) [r1517, r1518, r1519, r1520]
  BlockID(49) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) } [r1334, r1335, r1336, r1343, r1344, r1345, r1346, r1365, r1370, r1371]
  BlockID(50) -> Always(Block(BlockID(24))) [r1525, r1526, r1527, r1528]
  BlockID(51) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) } [r1380, r1381, r1383, r1384, r1385, r1392, r1393, r1394, r1395, r1415, r1420, r1421, r1532]
  BlockID(52) -> Always(Block(BlockID(24))) [r1533, r1534, r1535, r1536]
  BlockID(53) -> Always(Block(BlockID(1))) [r1429, r1430, r1443, r1478]
  BlockID(54) -> Always(Block(BlockID(35))) [r1490]
  BlockID(55) -> Always(Block(BlockID(45))) [r1479]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  |  |  |  BlockID(5)
|  |  |  |  |  |  BlockID(6)
|  |  |  |  |  |  |  BlockID(7)
|  |  |  |  |  |  |  |  BlockID(8)
|  |  |  |  |  |  |  |  |  BlockID(9)
|  |  |  |  |  |  |  |  |  BlockID(51)
|  |  |  |  |  |  |  |  |  |  BlockID(52)
|  |  |  |  |  |  |  |  BlockID(10)
|  |  |  |  |  |  |  |  |  BlockID(11)
|  |  |  |  |  |  |  |  |  BlockID(49)
|  |  |  |  |  |  |  |  |  |  BlockID(50)
|  |  |  |  |  |  |  BlockID(12)
|  |  |  |  |  |  |  |  BlockID(13)
|  |  |  |  |  |  |  |  BlockID(47)
|  |  |  |  |  |  |  |  |  BlockID(48)
|  |  |  |  |  |  BlockID(14)
|  |  |  |  |  |  |  BlockID(19)
|  |  |  |  |  |  |  |  BlockID(15)
|  |  |  |  |  |  |  |  |  BlockID(16)
|  |  |  |  |  |  |  |  |  |  BlockID(17)
|  |  |  |  |  |  |  |  |  |  |  BlockID(18)
|  |  |  |  |  |  |  |  |  |  |  BlockID(40)
|  |  |  |  |  |  |  |  |  |  |  |  BlockID(41)
|  |  |  |  |  |  |  |  |  |  BlockID(38)
|  |  |  |  |  |  |  |  |  |  |  BlockID(39)
|  |  |  |  |  |  |  |  |  BlockID(22)
|  |  |  |  |  |  |  |  |  BlockID(23)
|  |  |  |  |  |  |  |  BlockID(20)
|  |  |  |  |  |  |  |  |  BlockID(21)
|  |  |  |  |  |  BlockID(24)
|  |  |  |  |  |  |  BlockID(25)
|  |  |  |  BlockID(26)
|  |  |  |  |  BlockID(27)
|  |  |  |  |  |  BlockID(28)
|  |  |  |  |  |  BlockID(29)
|  |  |  |  |  |  BlockID(43)
|  |  |  |  |  |  BlockID(44)
|  |  |  |  |  BlockID(54)
|  |  |  |  BlockID(30)
|  |  |  |  |  BlockID(31)
|  |  |  |  |  |  BlockID(32)
|  |  |  |  |  |  |  BlockID(33)
|  |  |  |  BlockID(34)
|  |  |  |  BlockID(35)
|  |  |  BlockID(36)
|  |  |  BlockID(37)
|  |  |  BlockID(45)
|  |  |  BlockID(46)
|  |  |  BlockID(55)
|  |  BlockID(42)
|  BlockID(53)

 --- ssa
ssa program  1709 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(53)), neg: Block(BlockID(1)) }.
         r9: Bytes(8) <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
  ( 36)  r10: Bytes(8) <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r12: Bytes(8) <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
  (  3)  r13: Bytes(8) <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
         r15: Bytes(8) <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
  (  7)  r16: Bytes(8) <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  ( 17)  r17: Bytes(8) <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
  (  4)  r18: Bytes(8) <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
  (  6)  r19: Bytes(8) <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
         r22: Bytes(8) <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
  (  5)  r23: Bytes(8) <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
         r24: Bytes(8) <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
  (  3)  r25: Bytes(8) <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
         r42: Bytes(16) <- ArithK(Add, r10, -8)
         r43: Effect <- StoreMem { addr: r42, value: r25 }
         r44: Bytes(16) <- ArithK(Add, r10, -16)
         r45: Effect <- StoreMem { addr: r44, value: r24 }
         r48: Bytes(8) <- Int { value: 46, size: 8 }
         r50: Bytes(16) <- ArithK(Add, r10, -24)
         r51: Effect <- StoreMem { addr: r50, value: r23 }
         r52: Bytes(16) <- ArithK(Add, r10, -32)
         r53: Effect <- StoreMem { addr: r52, value: r22 }
         r54: Bytes(16) <- ArithK(Add, r10, -40)
         r55: Effect <- StoreMem { addr: r54, value: r9 }
         r56: Bytes(16) <- ArithK(Add, r10, -48)
         r57: Effect <- StoreMem { addr: r56, value: r15 }
         r69: Bytes(16) <- ArithK(Add, r10, -72)
         r70: Effect <- StoreMem { addr: r69, value: r12 }
         r73: Bytes(16) <- ArithK(Add, r10, -104)
         r74: Effect <- StoreMem { addr: r73, value: r18 }
         r76: Bytes(16) <- ArithK(Add, r10, -136)
         r77: Effect <- StoreMem { addr: r76, value: r17 }
         r79: Bytes(16) <- ArithK(Add, r10, -112)
         r80: Effect <- StoreMem { addr: r79, value: r19 }
         r81: Bytes(8) <- Int { value: 4199040, size: 8 }
         r86: Bytes(4) <- Int { value: 46, size: 4 }
         r87: Bytes(4) <- CArg { value: r86, next_arg: None }
         r88: Bytes(8) <- CArg { value: r17, next_arg: Some(r87) }
  (  3)  r89: Bytes(8) <- Call { callee: r81, first_arg: Some(r88) }
         r103: Bool <- IsZero(r89)
         r108: Effect <- SetJumpCondition(r103)
         r1477: Effect <- Upsilon { value: r89, phi_ref: r1453 }
.B53:    ;; preds:B0  → Always(Block(BlockID(1))).
         r1429: Bytes(8) <- Int { value: 4199136, size: 8 }
         r1430: Bytes(8) <- Call { callee: r1429, first_arg: None }
         r1443: Bytes(16) <- Arith(Add, r17, r89)
         r1478: Effect <- Upsilon { value: r1443, phi_ref: r1453 }
.B1:    ;; preds:B0,B53  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(2)) }.
  (  8)  r1453: Error <- Phi
  ( 15)  r115: Error <- Arith(Sub, r1453, r17)
         r120: Bool <- IsZero(r115)
         r123: Effect <- SetJumpCondition(r120)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(55)), neg: Block(BlockID(3)) }.
         r131: Bytes(8) <- LoadMem { addr: r19, size: 8 }
         r137: Bool <- IsZero(r131)
         r140: Effect <- SetJumpCondition(r137)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(4)) }.
         r143: Bytes(16) <- ArithK(Add, r13, 24)
  ( 10)  r144: Bytes(8) <- LoadMem { addr: r143, size: 8 }
         r146: Bytes(4) <- Part { src: r25, offset: 0, size: 4 }
         r147: Bytes(4) <- Part { src: r25, offset: 0, size: 4 }
  ( 10)  r148: Bytes(8) <- Arith(BitXor, r146, r147)
         r158: Bytes(16) <- ArithK(Add, r10, -64)
         r159: Effect <- StoreMem { addr: r158, value: r16 }
         r162: Bytes(1) <- LoadMem { addr: r144, size: 1 }
         r168: Bool <- IsZero(r162)
         r171: Effect <- SetJumpCondition(r168)
         r1483: Effect <- Upsilon { value: r48, phi_ref: r1470 }
         r1484: Effect <- Upsilon { value: r1453, phi_ref: r1471 }
         r1485: Effect <- Upsilon { value: r13, phi_ref: r1454 }
.B4:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(5)) }.
  (  7)  r1454: Bytes(8) <- Phi
         r174: Bytes(16) <- ArithK(Add, r1454, 16)
  (  5)  r175: Bytes(8) <- LoadMem { addr: r174, size: 8 }
         r178: Bytes(16) <- ArithK(Add, r10, -120)
         r179: Effect <- StoreMem { addr: r178, value: r175 }
         r182: Bool <- IsZero(r175)
         r187: Effect <- SetJumpCondition(r182)
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(6)) }.
         r190: Bytes(4) <- Part { src: r16, offset: 0, size: 4 }
         r191: Bytes(4) <- Part { src: r16, offset: 0, size: 4 }
  (  7)  r192: Bytes(8) <- Arith(BitXor, r190, r191)
         r201: Bytes(4) <- Part { src: r175, offset: 0, size: 4 }
  (  3)  r203: Bytes(8) <- ArithK(BitAnd, r201, 3)
         r209: Bool <- IsZero(r203)
         r212: Effect <- SetJumpCondition(r209)
         r1495: Effect <- Upsilon { value: r1453, phi_ref: r1460 }
         r1496: Effect <- Upsilon { value: r144, phi_ref: r1461 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(7)) }.
         r215: Bytes(16) <- ArithK(Add, r203, -1)
         r219: Bool <- IsZero(r215)
         r222: Effect <- SetJumpCondition(r219)
         r1515: Effect <- Upsilon { value: r1453, phi_ref: r1458 }
         r1516: Effect <- Upsilon { value: r144, phi_ref: r1459 }
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(8)) }.
         r225: Bytes(16) <- ArithK(Add, r203, -3)
         r229: Bool <- IsZero(r225)
         r232: Effect <- SetJumpCondition(r229)
         r1523: Effect <- Upsilon { value: r1453, phi_ref: r1456 }
         r1524: Effect <- Upsilon { value: r144, phi_ref: r1457 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(51)), neg: Block(BlockID(9)) }.
         r235: Bytes(16) <- ArithK(Add, r144, 8)
  (  3)  r236: Bytes(8) <- LoadMem { addr: r235, size: 8 }
         r239: Bytes(16) <- ArithK(Add, r10, -88)
         r240: Effect <- StoreMem { addr: r239, value: r1453 }
         r243: Bytes(16) <- ArithK(Add, r10, -96)
         r244: Effect <- StoreMem { addr: r243, value: r144 }
         r247: Bytes(16) <- ArithK(Add, r10, -128)
         r248: Effect <- StoreMem { addr: r247, value: r236 }
         r249: Bytes(8) <- Int { value: 4199136, size: 8 }
         r252: Bytes(8) <- CArg { value: r236, next_arg: None }
         r253: Bytes(8) <- Call { callee: r249, first_arg: Some(r252) }
         r269: Bytes(16) <- ArithK(Add, r10, -88)
  (  2)  r270: Bytes(8) <- LoadMem { addr: r269, size: 8 }
         r273: Error <- Arith(Sub, r253, r115)
         r277: Bool <- IsZero(r273)
         r280: Effect <- SetJumpCondition(r277)
         r1531: Effect <- Upsilon { value: r144, phi_ref: r1455 }
.B51:    ;; preds:B8  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(52)) }.
         r1380: Bytes(16) <- ArithK(Add, r10, -96)
         r1381: Effect <- StoreMem { addr: r1380, value: r270 }
         r1383: Bytes(16) <- ArithK(Add, r10, -128)
         r1384: Effect <- StoreMem { addr: r1383, value: r144 }
         r1385: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1392: Error <- CArg { value: r115, next_arg: None }
         r1393: Bytes(8) <- CArg { value: r236, next_arg: Some(r1392) }
         r1394: Bytes(8) <- CArg { value: r17, next_arg: Some(r1393) }
         r1395: Bytes(8) <- Call { callee: r1385, first_arg: Some(r1394) }
         r1415: Bool <- IsZero(r1395)
         r1420: Bool <- Not(r1415)
         r1421: Effect <- SetJumpCondition(r1420)
         r1532: Effect <- Upsilon { value: r144, phi_ref: r1455 }
.B52:    ;; preds:B51  → Always(Block(BlockID(24))).
         r1533: Effect <- Upsilon { value: r192, phi_ref: r1465 }
         r1534: Effect <- Upsilon { value: r144, phi_ref: r1466 }
         r1535: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1536: Effect <- Upsilon { value: r148, phi_ref: r1468 }
.B9:    ;; preds:B8,B51  → Always(Block(BlockID(10))).
         r1455: Bytes(8) <- Phi
         r286: Bytes(16) <- ArithK(Add, r1455, 40)
         r1537: Effect <- Upsilon { value: r270, phi_ref: r1456 }
         r1538: Effect <- Upsilon { value: r286, phi_ref: r1457 }
.B10:    ;; preds:B7,B9  → Conditional { pos: Block(BlockID(49)), neg: Block(BlockID(11)) }.
  (  3)  r1457: Error <- Phi
         r1456: Error <- Phi
         r289: Error <- ArithK(Add, r1457, 8)
  (  3)  r290: Bytes(8) <- LoadMem { addr: r289, size: 8 }
         r293: Bytes(16) <- ArithK(Add, r10, -96)
         r294: Effect <- StoreMem { addr: r293, value: r1456 }
         r298: Bytes(16) <- ArithK(Add, r10, -128)
         r299: Effect <- StoreMem { addr: r298, value: r290 }
         r300: Bytes(8) <- Int { value: 4199136, size: 8 }
         r303: Bytes(8) <- CArg { value: r290, next_arg: None }
         r304: Bytes(8) <- Call { callee: r300, first_arg: Some(r303) }
         r320: Bytes(16) <- ArithK(Add, r10, -96)
  (  2)  r321: Bytes(8) <- LoadMem { addr: r320, size: 8 }
         r323: Error <- Arith(Sub, r304, r115)
         r327: Bool <- IsZero(r323)
         r330: Effect <- SetJumpCondition(r327)
.B49:    ;; preds:B10  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(50)) }.
         r1334: Bytes(16) <- ArithK(Add, r10, -128)
         r1335: Effect <- StoreMem { addr: r1334, value: r321 }
         r1336: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1343: Error <- CArg { value: r115, next_arg: None }
         r1344: Bytes(8) <- CArg { value: r290, next_arg: Some(r1343) }
         r1345: Bytes(8) <- CArg { value: r17, next_arg: Some(r1344) }
         r1346: Bytes(8) <- Call { callee: r1336, first_arg: Some(r1345) }
         r1365: Bool <- IsZero(r1346)
         r1370: Bool <- Not(r1365)
         r1371: Effect <- SetJumpCondition(r1370)
.B50:    ;; preds:B49  → Always(Block(BlockID(24))).
         r1525: Effect <- Upsilon { value: r192, phi_ref: r1465 }
         r1526: Effect <- Upsilon { value: r1457, phi_ref: r1466 }
         r1527: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1528: Effect <- Upsilon { value: r148, phi_ref: r1468 }
.B11:    ;; preds:B10,B49  → Always(Block(BlockID(12))).
         r342: Error <- ArithK(Add, r1457, 40)
         r1529: Effect <- Upsilon { value: r321, phi_ref: r1458 }
         r1530: Effect <- Upsilon { value: r342, phi_ref: r1459 }
.B12:    ;; preds:B6,B11  → Conditional { pos: Block(BlockID(47)), neg: Block(BlockID(13)) }.
  (  3)  r1459: Error <- Phi
         r1458: Error <- Phi
         r351: Error <- ArithK(Add, r1459, 8)
  (  3)  r352: Bytes(8) <- LoadMem { addr: r351, size: 8 }
         r355: Bytes(16) <- ArithK(Add, r10, -96)
         r356: Effect <- StoreMem { addr: r355, value: r1458 }
         r360: Bytes(16) <- ArithK(Add, r10, -128)
         r361: Effect <- StoreMem { addr: r360, value: r352 }
         r362: Bytes(8) <- Int { value: 4199136, size: 8 }
         r365: Bytes(8) <- CArg { value: r352, next_arg: None }
         r366: Bytes(8) <- Call { callee: r362, first_arg: Some(r365) }
         r382: Bytes(16) <- ArithK(Add, r10, -96)
  (  2)  r383: Bytes(8) <- LoadMem { addr: r382, size: 8 }
         r385: Error <- Arith(Sub, r366, r115)
         r389: Bool <- IsZero(r385)
         r392: Effect <- SetJumpCondition(r389)
.B47:    ;; preds:B12  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(48)) }.
         r1288: Bytes(16) <- ArithK(Add, r10, -128)
         r1289: Effect <- StoreMem { addr: r1288, value: r383 }
         r1290: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1297: Error <- CArg { value: r115, next_arg: None }
         r1298: Bytes(8) <- CArg { value: r352, next_arg: Some(r1297) }
         r1299: Bytes(8) <- CArg { value: r17, next_arg: Some(r1298) }
         r1300: Bytes(8) <- Call { callee: r1290, first_arg: Some(r1299) }
         r1319: Bool <- IsZero(r1300)
         r1324: Bool <- Not(r1319)
         r1325: Effect <- SetJumpCondition(r1324)
.B48:    ;; preds:B47  → Always(Block(BlockID(24))).
         r1517: Effect <- Upsilon { value: r192, phi_ref: r1465 }
         r1518: Effect <- Upsilon { value: r1459, phi_ref: r1466 }
         r1519: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1520: Effect <- Upsilon { value: r148, phi_ref: r1468 }
.B13:    ;; preds:B12,B47  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(14)) }.
         r399: Bytes(16) <- ArithK(Add, r192, 1)
         r408: Error <- ArithK(Add, r1459, 40)
         r416: Error <- Arith(Sub, r399, r175)
         r420: Bool <- IsZero(r416)
         r423: Effect <- SetJumpCondition(r420)
         r1521: Effect <- Upsilon { value: r383, phi_ref: r1460 }
         r1522: Effect <- Upsilon { value: r408, phi_ref: r1461 }
.B14:    ;; preds:B5,B13  → Always(Block(BlockID(19))).
         r1461: Error <- Phi
         r1460: Error <- Phi
         r426: Bytes(16) <- ArithK(Add, r10, -80)
         r427: Effect <- StoreMem { addr: r426, value: r1454 }
         r430: Bytes(16) <- ArithK(Add, r10, -96)
         r431: Effect <- StoreMem { addr: r430, value: r148 }
         r433: Bytes(16) <- ArithK(Add, r10, -88)
         r434: Effect <- StoreMem { addr: r433, value: r1460 }
         r1499: Effect <- Upsilon { value: r1461, phi_ref: r1462 }
.B19:    ;; preds:B14,B18  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(20)) }.
  (  9)  r1462: Error <- Phi
         r587: Error <- ArithK(Add, r1462, 8)
  (  2)  r588: Bytes(8) <- LoadMem { addr: r587, size: 8 }
         r592: Bytes(8) <- Int { value: 4199136, size: 8 }
         r595: Bytes(8) <- CArg { value: r588, next_arg: None }
         r596: Bytes(8) <- Call { callee: r592, first_arg: Some(r595) }
         r607: Error <- Arith(Sub, r596, r115)
         r611: Bool <- IsZero(r607)
         r614: Bool <- Not(r611)
         r615: Effect <- SetJumpCondition(r614)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(21)) }.
         r623: Bytes(8) <- Int { value: 4199232, size: 8 }
         r630: Error <- CArg { value: r115, next_arg: None }
         r631: Bytes(8) <- CArg { value: r588, next_arg: Some(r630) }
         r632: Bytes(8) <- CArg { value: r17, next_arg: Some(r631) }
         r633: Bytes(8) <- Call { callee: r623, first_arg: Some(r632) }
         r648: Bool <- IsZero(r633)
         r653: Bool <- Not(r648)
         r654: Effect <- SetJumpCondition(r653)
.B21:    ;; preds:B20  → Always(Block(BlockID(24))).
         r1500: Effect <- Upsilon { value: r192, phi_ref: r1465 }
         r1501: Effect <- Upsilon { value: r1462, phi_ref: r1466 }
         r1502: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1503: Effect <- Upsilon { value: r148, phi_ref: r1468 }
.B15:    ;; preds:B19,B20  → Conditional { pos: Block(BlockID(22)), neg: Block(BlockID(16)) }.
         r437: Error <- ArithK(Add, r1462, 48)
  (  3)  r438: Bytes(8) <- LoadMem { addr: r437, size: 8 }
         r441: Error <- ArithK(Add, r1462, 40)
         r444: Bytes(16) <- ArithK(Add, r192, 1)
         r451: Bytes(16) <- ArithK(Add, r10, -128)
         r452: Effect <- StoreMem { addr: r451, value: r438 }
         r453: Bytes(8) <- Int { value: 4199136, size: 8 }
         r456: Bytes(8) <- CArg { value: r438, next_arg: None }
         r457: Bytes(8) <- Call { callee: r453, first_arg: Some(r456) }
         r472: Error <- Arith(Sub, r457, r115)
         r476: Bool <- IsZero(r472)
         r479: Effect <- SetJumpCondition(r476)
.B22:    ;; preds:B15  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(23)) }.
         r675: Bytes(8) <- Int { value: 4199232, size: 8 }
         r682: Error <- CArg { value: r115, next_arg: None }
         r683: Bytes(8) <- CArg { value: r438, next_arg: Some(r682) }
         r684: Bytes(8) <- CArg { value: r17, next_arg: Some(r683) }
         r685: Bytes(8) <- Call { callee: r675, first_arg: Some(r684) }
         r700: Bool <- IsZero(r685)
         r705: Bool <- Not(r700)
         r706: Effect <- SetJumpCondition(r705)
         r1509: Effect <- Upsilon { value: r441, phi_ref: r1464 }
.B16:    ;; preds:B15,B22  → Conditional { pos: Block(BlockID(38)), neg: Block(BlockID(17)) }.
         r482: Error <- ArithK(Add, r1462, 88)
  (  3)  r483: Bytes(8) <- LoadMem { addr: r482, size: 8 }
         r486: Error <- ArithK(Add, r1462, 80)
         r494: Bytes(16) <- ArithK(Add, r10, -128)
         r495: Effect <- StoreMem { addr: r494, value: r483 }
         r496: Bytes(8) <- Int { value: 4199136, size: 8 }
         r499: Bytes(8) <- CArg { value: r483, next_arg: None }
         r500: Bytes(8) <- Call { callee: r496, first_arg: Some(r499) }
         r515: Error <- Arith(Sub, r500, r115)
         r519: Bool <- IsZero(r515)
         r522: Effect <- SetJumpCondition(r519)
.B38:    ;; preds:B16  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(39)) }.
         r1102: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1109: Error <- CArg { value: r115, next_arg: None }
         r1110: Bytes(8) <- CArg { value: r483, next_arg: Some(r1109) }
         r1111: Bytes(8) <- CArg { value: r17, next_arg: Some(r1110) }
         r1112: Bytes(8) <- Call { callee: r1102, first_arg: Some(r1111) }
         r1127: Bool <- IsZero(r1112)
         r1132: Bool <- Not(r1127)
         r1133: Effect <- SetJumpCondition(r1132)
.B39:    ;; preds:B38  → Always(Block(BlockID(23))).
         r1511: Effect <- Upsilon { value: r486, phi_ref: r1464 }
.B17:    ;; preds:B16,B38  → Conditional { pos: Block(BlockID(40)), neg: Block(BlockID(18)) }.
         r525: Error <- ArithK(Add, r1462, 128)
  (  3)  r526: Bytes(8) <- LoadMem { addr: r525, size: 8 }
         r529: Error <- ArithK(Add, r1462, 120)
         r537: Bytes(16) <- ArithK(Add, r10, -128)
         r538: Effect <- StoreMem { addr: r537, value: r526 }
         r539: Bytes(8) <- Int { value: 4199136, size: 8 }
         r542: Bytes(8) <- CArg { value: r526, next_arg: None }
         r543: Bytes(8) <- Call { callee: r539, first_arg: Some(r542) }
         r558: Error <- Arith(Sub, r543, r115)
         r562: Bool <- IsZero(r558)
         r565: Effect <- SetJumpCondition(r562)
.B40:    ;; preds:B17  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(41)) }.
         r1141: Bytes(8) <- Int { value: 4199232, size: 8 }
         r1148: Error <- CArg { value: r115, next_arg: None }
         r1149: Bytes(8) <- CArg { value: r526, next_arg: Some(r1148) }
         r1150: Bytes(8) <- CArg { value: r17, next_arg: Some(r1149) }
         r1151: Bytes(8) <- Call { callee: r1141, first_arg: Some(r1150) }
         r1166: Bool <- IsZero(r1151)
         r1171: Bool <- Not(r1166)
         r1172: Effect <- SetJumpCondition(r1171)
.B41:    ;; preds:B40  → Always(Block(BlockID(23))).
         r1513: Effect <- Upsilon { value: r529, phi_ref: r1464 }
.B23:    ;; preds:B22,B39,B41  → Always(Block(BlockID(24))).
         r1464: Error <- Phi
         r1504: Effect <- Upsilon { value: r444, phi_ref: r1465 }
         r1505: Effect <- Upsilon { value: r1464, phi_ref: r1466 }
         r1506: Effect <- Upsilon { value: r1454, phi_ref: r1467 }
         r1507: Effect <- Upsilon { value: r148, phi_ref: r1468 }
.B24:    ;; preds:B21,B23,B48,B50,B52  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(25)) }.
         r1468: Bytes(8) <- Phi
         r1467: Bytes(8) <- Phi
         r1466: Error <- Phi
         r1465: Error <- Phi
         r728: Bytes(16) <- ArithK(Mul, r1468, 8)
         r729: Error <- Arith(Add, r18, r728)
         r730: Effect <- StoreMem { addr: r729, value: r1465 }
         r731: Error <- Arith(Sub, r1466, r1467)
         r735: Bool <- IsZero(r731)
         r738: Effect <- SetJumpCondition(r735)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(26)) }.
         r741: Bytes(16) <- ArithK(Add, r23, 32)
         r742: Bytes(8) <- LoadMem { addr: r741, size: 8 }
         r748: Bool <- IsZero(r742)
         r753: Bytes(1) <- LoadMem { addr: r1453, size: 1 }
         r754: Bytes(4) <- Widen { reg: r753, target_size: 4, sign: false }
         r755: Bytes(7) <- Part { src: r17, offset: 1, size: 7 }
  (  2)  r756: Bytes(11) <- Concat { lo: r754, hi: r755 }
         r757: Bool <- Not(r748)
         r758: Effect <- SetJumpCondition(r757)
         r1497: Effect <- Upsilon { value: r756, phi_ref: r1472 }
         r1498: Effect <- Upsilon { value: r756, phi_ref: r1469 }
.B26:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(54)), neg: Block(BlockID(27)) }.
  (  2)  r1469: Bytes(11) <- Phi
         r760: Bytes(1) <- Part { src: r1469, offset: 0, size: 1 }
         r761: Bytes(1) <- Part { src: r1469, offset: 0, size: 1 }
         r762: Bytes(2) <- Arith(BitAnd, r760, r761)
         r764: Bool <- IsZero(r762)
         r769: Effect <- SetJumpCondition(r764)
.B27:    ;; preds:B26  → Conditional { pos: Block(BlockID(43)), neg: Block(BlockID(28)) }.
  (  2)  r772: Error <- ArithK(Add, r1453, 1)
         r775: Bytes(8) <- Int { value: 46, size: 8 }
         r778: Bytes(16) <- ArithK(Add, r10, -136)
         r779: Effect <- StoreMem { addr: r778, value: r772 }
         r780: Bytes(8) <- Int { value: 4199040, size: 8 }
         r785: Bytes(4) <- Int { value: 46, size: 4 }
         r786: Bytes(4) <- CArg { value: r785, next_arg: None }
         r787: Error <- CArg { value: r772, next_arg: Some(r786) }
  (  2)  r788: Bytes(8) <- Call { callee: r780, first_arg: Some(r787) }
         r802: Bool <- IsZero(r788)
         r807: Effect <- SetJumpCondition(r802)
.B28:    ;; preds:B27  → Conditional { pos: Block(BlockID(44)), neg: Block(BlockID(29)) }.
         r819: Bytes(16) <- ArithK(Add, r148, 1)
         r837: Bytes(8) <- LoadMem { addr: r19, size: 8 }
         r838: Error <- Arith(Sub, r819, r837)
         r840: Bool <- CarryOf(r838)
         r845: Bool <- Not(r840)
         r846: Effect <- SetJumpCondition(r845)
.B43:    ;; preds:B27  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(44)) }.
         r1212: Bytes(16) <- ArithK(Add, r148, 1)
         r1221: Bytes(8) <- Int { value: 4199136, size: 8 }
         r1222: Bytes(8) <- Call { callee: r1221, first_arg: None }
         r1244: Bytes(8) <- LoadMem { addr: r19, size: 8 }
         r1245: Error <- Arith(Sub, r1212, r1244)
         r1247: Bool <- CarryOf(r1245)
         r1252: Effect <- SetJumpCondition(r1247)
.B44:    ;; preds:B28,B43  → Always(Block(BlockID(45))).
         r1491: Effect <- Upsilon { value: r16, phi_ref: r1475 }
.B29:    ;; preds:B28,B43  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(30)) }.
         r850: Bytes(16) <- ArithK(Add, r23, 24)
         r851: Bytes(8) <- LoadMem { addr: r850, size: 8 }
         r855: Bytes(1) <- LoadMem { addr: r851, size: 1 }
         r861: Bool <- IsZero(r855)
         r864: Bool <- Not(r861)
         r865: Effect <- SetJumpCondition(r864)
         r1492: Effect <- Upsilon { value: r23, phi_ref: r1454 }
         r1493: Effect <- Upsilon { value: r775, phi_ref: r1470 }
         r1494: Effect <- Upsilon { value: r788, phi_ref: r1471 }
.B54:    ;; preds:B26  → Always(Block(BlockID(35))).
         r1490: Effect <- Upsilon { value: r16, phi_ref: r1473 }
.B18:    ;; preds:B17,B40  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(19)) }.
         r572: Bytes(16) <- ArithK(Add, r192, 4)
         r575: Error <- ArithK(Add, r1462, 160)
         r577: Error <- Arith(Sub, r572, r175)
         r581: Bool <- IsZero(r577)
         r584: Effect <- SetJumpCondition(r581)
         r1514: Effect <- Upsilon { value: r575, phi_ref: r1462 }
.B30:    ;; preds:B3,B29  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(31)) }.
         r1471: Error <- Phi
  (  2)  r1470: Bytes(8) <- Phi
         r871: Bytes(4) <- Part { src: r1470, offset: 0, size: 4 }
         r872: Bytes(4) <- Part { src: r1470, offset: 0, size: 4 }
         r873: Bytes(8) <- Arith(BitXor, r871, r872)
         r886: Bytes(16) <- ArithK(Add, r10, -128)
         r887: Effect <- StoreMem { addr: r886, value: r1471 }
         r888: Bytes(8) <- Int { value: 6451424, size: 8 }
         r895: Bytes(4) <- Int { value: 10, size: 4 }
         r896: Bytes(4) <- CArg { value: r895, next_arg: None }
         r897: Bytes(8) <- CArg { value: r873, next_arg: Some(r896) }
         r898: Bytes(8) <- CArg { value: r17, next_arg: Some(r897) }
  (  2)  r899: Bytes(8) <- Call { callee: r888, first_arg: Some(r898) }
         r911: Bytes(16) <- ArithK(Add, r10, -128)
  (  2)  r912: Bytes(8) <- LoadMem { addr: r911, size: 8 }
  (  4)  r915: Bytes(16) <- ArithK(Add, r899, 1)
         r919: Bool <- IsZero(r915)
         r923: Effect <- SetJumpCondition(r919)
.B31:    ;; preds:B30  → Conditional { pos: Ext(4206915), neg: Block(BlockID(32)) }.
         r926: Bytes(16) <- ArithK(Add, r13, 24)
  (  2)  r927: Bytes(8) <- LoadMem { addr: r926, size: 8 }
         r930: Bytes(16) <- ArithK(Add, r10, -136)
         r931: Effect <- StoreMem { addr: r930, value: r912 }
         r934: Bytes(1) <- LoadMem { addr: r927, size: 1 }
         r940: Bool <- IsZero(r934)
         r943: Bool <- Not(r940)
         r944: Effect <- SetJumpCondition(r943)
.B32:    ;; preds:B31  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(33)) }.
         r960: Bytes(8) <- LoadMem { addr: r19, size: 8 }
         r965: Bytes(16) <- ArithK(Add, r927, 8)
         r966: Bytes(8) <- LoadMem { addr: r965, size: 8 }
         r967: Bytes(8) <- LoadMem { addr: r966, size: 8 }
         r968: Bytes(16) <- CArg { value: r915, next_arg: None }
         r969: Bytes(8) <- CArg { value: r960, next_arg: Some(r968) }
         r970: Bytes(8) <- CArg { value: r18, next_arg: Some(r969) }
         r971: Bytes(8) <- CArg { value: r12, next_arg: Some(r970) }
         r972: Bytes(8) <- Call { callee: r967, first_arg: Some(r971) }
         r986: Bool <- IsZero(r915)
         r991: Effect <- SetJumpCondition(r986)
.B33:    ;; preds:B32  → Conditional { pos: Block(BlockID(26)), neg: Block(BlockID(34)) }.
         r998: Bytes(16) <- ArithK(Add, r899, 33)
         r999: Bytes(8) <- LoadMem { addr: r998, size: 8 }
         r1005: Bool <- IsZero(r999)
         r1010: Bytes(16) <- ArithK(Mul, r148, 8)
         r1011: Error <- Arith(Add, r18, r1010)
         r1012: Effect <- StoreMem { addr: r1011, value: r915 }
         r1015: Bytes(1) <- LoadMem { addr: r912, size: 1 }
         r1016: Bytes(4) <- Widen { reg: r1015, target_size: 4, sign: false }
         r1017: Bytes(7) <- Part { src: r12, offset: 1, size: 7 }
  (  2)  r1018: Bytes(11) <- Concat { lo: r1016, hi: r1017 }
         r1019: Effect <- SetJumpCondition(r1005)
         r1488: Effect <- Upsilon { value: r1018, phi_ref: r1469 }
         r1489: Effect <- Upsilon { value: r1018, phi_ref: r1472 }
.B34:    ;; preds:B25,B33  → Conditional { pos: Block(BlockID(42)), neg: Block(BlockID(35)) }.
  (  2)  r1472: Bytes(11) <- Phi
         r1025: Bytes(1) <- Part { src: r1472, offset: 0, size: 1 }
         r1026: Bytes(1) <- Part { src: r1472, offset: 0, size: 1 }
         r1027: Bytes(2) <- Arith(BitAnd, r1025, r1026)
         r1029: Bool <- IsZero(r1027)
         r1034: Bool <- Not(r1029)
         r1035: Effect <- SetJumpCondition(r1034)
         r1487: Effect <- Upsilon { value: r16, phi_ref: r1473 }
.B35:    ;; preds:B34,B54  → Conditional { pos: Block(BlockID(46)), neg: Block(BlockID(36)) }.
  (  2)  r1473: Bytes(8) <- Phi
         r1038: Bytes(16) <- ArithK(Add, r148, 1)
         r1046: Effect <- StoreMem { addr: r19, value: r1038 }
         r1049: Bool <- IsZero(r1473)
         r1054: Bool <- Not(r1049)
         r1055: Effect <- SetJumpCondition(r1054)
         r1486: Effect <- Upsilon { value: r1473, phi_ref: r1476 }
.B55:    ;; preds:B2  → Always(Block(BlockID(45))).
         r1479: Effect <- Upsilon { value: r16, phi_ref: r1475 }
.B45:    ;; preds:B44,B55  → Conditional { pos: Block(BlockID(36)), neg: Block(BlockID(46)) }.
  (  2)  r1475: Bytes(8) <- Phi
         r1260: Bool <- IsZero(r1475)
         r1265: Effect <- SetJumpCondition(r1260)
         r1481: Effect <- Upsilon { value: r1475, phi_ref: r1476 }
.B46:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1476: Bytes(8) <- Phi
         r1269: Effect <- StoreMem { addr: r1476, value: r23 }
         r1270: Bytes(4) <- Part { src: r17, offset: 0, size: 4 }
         r1271: Bytes(4) <- Part { src: r17, offset: 0, size: 4 }
         r1272: Bytes(8) <- Arith(BitXor, r1270, r1271)
         r1480: Effect <- Upsilon { value: r1272, phi_ref: r1474 }
.B36:    ;; preds:B35,B45  → Always(Block(BlockID(37))).
         r1057: Bytes(4) <- Part { src: r17, offset: 0, size: 4 }
         r1058: Bytes(4) <- Part { src: r17, offset: 0, size: 4 }
         r1059: Bytes(8) <- Arith(BitXor, r1057, r1058)
         r1482: Effect <- Upsilon { value: r1059, phi_ref: r1474 }
.B37:    ;; preds:B36,B46  → Always(Return).
         r1474: Bytes(8) <- Phi
         r1095: Effect <- SetReturnValue(r1474)
.B42:    ;; preds:B1,B4,B13,B18,B24,B30,B32,B34  → Always(Return).
         r1185: Bytes(8) <- Int { value: 2, size: 8 }
         r1205: Effect <- SetReturnValue(r1185)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:R15;
  [pre:RSP - 16]:* := pre:R14;
  [pre:RSP - 24]:* := pre:R13;
  [pre:RSP - 32]:* := pre:R12;
  [pre:RSP - 40]:* := pre:RBP;
  [pre:RSP - 48]:* := pre:RBX;
  [pre:RSP - 72]:* := pre:RDI;
  [pre:RSP - 104]:* := pre:R8;
  [pre:RSP - 136]:* := pre:RDX;
  [pre:RSP - 112]:* := pre:R9;
  let r89: Bytes(8) = strchr(pre:RDX,
                             46);
  ;
  r1453 := strchr(pre:RDX,
                  46);
  if IsZero (r89) {
    __builtin_strlen();
    r1453 := pre:RDX + r89;
    goto T1
  }
  goto T1
  T1: {
    let mut r1453: Error;
    let r115: Error = r1453 - pre:RDX;
    ;
    if IsZero (r115) {
      goto T42
    }
    ;
    if IsZero ([pre:R9]:8) {
      r1475 := pre:RCX;
      goto T45
    }
    let r144: Bytes(8) = [pre:RSI + 24]:8;
    let r148: Bytes(8) = pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
    [pre:RSP - 64]:* := pre:RCX;
    ;
    r1470 := 46;
    r1471 := phi ();
    r1454 := pre:RSI;
    if IsZero ([r144]:1) {
      goto T30
    }
    goto T4
    T4: {
      let mut r1454: Bytes(8);
      let r175: Bytes(8) = [r1454 + 16]:8;
      [pre:RSP - 120]:* := r175;
      ;
      if IsZero (r175) {
        goto T42
      }
      let r192: Bytes(8) = pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0];
      let r203: Bytes(8) = r175[4 .. 0] & 3;
      ;
      r1460 := phi ();
      r1461 := [pre:RSI + 24]:8;
      if IsZero (r203) {
        goto T14
      }
      ;
      r1458 := phi ();
      r1459 := [pre:RSI + 24]:8;
      if IsZero (r203 - 1) {
        goto T12
      }
      ;
      r1456 := phi ();
      r1457 := [pre:RSI + 24]:8;
      if IsZero (r203 - 3) {
        goto T10
      }
      let r236: Bytes(8) = [r144 + 8]:8;
      [pre:RSP - 88]:* := r1453;
      [pre:RSP - 96]:* := r144;
      [pre:RSP - 128]:* := r236;
      strlen(r236);
      let r270: Bytes(8) = [pre:RSP - 88]:8;
      ;
      r1455 := [pre:RSI + 24]:8;
      if IsZero (strlen(r236) - r115) {
        [pre:RSP - 96]:* := r270;
        [pre:RSP - 128]:* := r144;
        strncmp(pre:RDX,
                r236,
                r115);
        ;
        r1455 := [pre:RSI + 24]:8;
        if ! IsZero (strncmp(pre:RDX,
                             r236,
                             r115)) {
          goto T9
        }
        r1465 := pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0];
        r1466 := [pre:RSI + 24]:8;
        r1467 := phi ();
        r1468 := pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
        goto T24
      }
      goto T9
      T9: {
        let mut r1455: Bytes(8);
        r1456 := [pre:RSP - 88]:8;
        r1457 := r1455 + 40;
        goto T10
      }
      
      T10: {
        let mut r1457: Error;
        let mut r1456: Error;
        let r290: Bytes(8) = [r1457 + 8]:8;
        [pre:RSP - 96]:* := r1456;
        [pre:RSP - 128]:* := r290;
        strlen(r290);
        let r321: Bytes(8) = [pre:RSP - 96]:8;
        ;
        if IsZero (strlen(r290) - r115) {
          [pre:RSP - 128]:* := r321;
          strncmp(pre:RDX,
                  r290,
                  r115);
          ;
          if ! IsZero (strncmp(pre:RDX,
                               r290,
                               r115)) {
            goto T11
          }
          r1465 := pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0];
          r1466 := phi ();
          r1467 := phi ();
          r1468 := pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
          goto T24
        }
        goto T11
        T11: {
          r1458 := [pre:RSP - 96]:8;
          r1459 := r1457 + 40;
          goto T12
        }
      
      }
      
      T12: {
        let mut r1459: Error;
        let mut r1458: Error;
        let r352: Bytes(8) = [r1459 + 8]:8;
        [pre:RSP - 96]:* := r1458;
        [pre:RSP - 128]:* := r352;
        strlen(r352);
        let r383: Bytes(8) = [pre:RSP - 96]:8;
        ;
        if IsZero (strlen(r352) - r115) {
          [pre:RSP - 128]:* := r383;
          strncmp(pre:RDX,
                  r352,
                  r115);
          ;
          if ! IsZero (strncmp(pre:RDX,
                               r352,
                               r115)) {
            goto T13
          }
          r1465 := pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0];
          r1466 := phi ();
          r1467 := phi ();
          r1468 := pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
          goto T24
        }
        goto T13
        T13: {
          ;
          r1460 := [pre:RSP - 96]:8;
          r1461 := r1459 + 40;
          if IsZero (r192 + 1 as i16 - r175 as i8) {
            goto T42
          }
          goto T14
        }
      
      }
      
      T14: {
        let mut r1461: Error;
        let mut r1460: Error;
        [pre:RSP - 80]:* := r1454;
        [pre:RSP - 96]:* := r148;
        [pre:RSP - 88]:* := r1460;
        r1462 := phi ();
        goto T19
        T19: {
          let mut r1462: Error;
          let r588: Bytes(8) = [r1462 + 8]:8;
          strlen(r588);
          ;
          if ! IsZero (strlen(r588) - r115) {
            goto T15
          }
          strncmp(pre:RDX,
                  r588,
                  r115);
          ;
          if ! IsZero (strncmp(pre:RDX,
                               r588,
                               r115)) {
            goto T15
          }
          r1465 := pre:RCX[4 .. 0] ^ pre:RCX[4 .. 0];
          r1466 := phi ();
          r1467 := phi ();
          r1468 := pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
          goto T24
          T15: {
            let r438: Bytes(8) = [r1462 + 48]:8;
            [pre:RSP - 128]:* := r438;
            strlen(r438);
            ;
            if IsZero (strlen(r438) - r115) {
              strncmp(pre:RDX,
                      r438,
                      r115);
              ;
              r1464 := r1462 + 40;
              if ! IsZero (strncmp(pre:RDX,
                                   r438,
                                   r115)) {
                goto T16
              }
              goto T23
            }
            goto T16
            T16: {
              let r483: Bytes(8) = [r1462 + 88]:8;
              [pre:RSP - 128]:* := r483;
              strlen(r483);
              ;
              if IsZero (strlen(r483) - r115) {
                strncmp(pre:RDX,
                        r483,
                        r115);
                ;
                if ! IsZero (strncmp(pre:RDX,
                                     r483,
                                     r115)) {
                  goto T17
                }
                r1464 := r1462 + 80;
                goto T23
              }
              goto T17
              T17: {
                let r526: Bytes(8) = [r1462 + 128]:8;
                [pre:RSP - 128]:* := r526;
                strlen(r526);
                ;
                if IsZero (strlen(r526) - r115) {
                  strncmp(pre:RDX,
                          r526,
                          r115);
                  ;
                  if ! IsZero (strncmp(pre:RDX,
                                       r526,
                                       r115)) {
                    goto T18
                  }
                  r1464 := r1462 + 120;
                  goto T23
                }
                goto T18
                T18: {
                  ;
                  r1462 := r1462 + 160;
                  if IsZero (r192 + 4 as i16 - r175 as i8) {
                    goto T42
                  }
                  loop T19
                }
              
              }
            
            }
            
            T23: {
              let mut r1464: Error;
              r1465 := r192 + 1;
              r1466 := phi ();
              r1467 := phi ();
              r1468 := pre:R15[4 .. 0] ^ pre:R15[4 .. 0];
              goto T24
            }
          
          }
        
        }
      
      }
      
      T24: {
        let mut r1468: Bytes(8);
        let mut r1467: Bytes(8);
        let mut r1466: Error;
        let mut r1465: Error;
        [pre:R8 as i8 + r1468 * 8 as i16]:* := r1465;
        ;
        if IsZero (r1466 - r1467) {
          goto T42
        }
        let r756: Bytes(11) = pre:RDX[8 .. 1] as i7 ++ ([r1453]:1 as u32) as i4;
        ;
        r1472 := pre:RDX[8 .. 1] as i7 ++ ([r1453]:1 as u32) as i4;
        r1469 := pre:RDX[8 .. 1] as i7 ++ ([r1453]:1 as u32) as i4;
        if ! IsZero ([pre:R13 + 32]:8) {
          goto T34
        }
        goto T26
      }
    
    }
    
    T26: {
      let mut r1469: Bytes(11);
      ;
      if IsZero (r1469[1 .. 0] & r1469[1 .. 0]) {
        r1473 := pre:RCX;
        goto T35
      }
      let r772: Error = r1453 + 1;
      [pre:RSP - 136]:* := r772;
      let r788: Bytes(8) = strchr(r772,
                                  46);
      ;
      if IsZero (r788) {
        __builtin_strlen();
        ;
        if CarryOf (r148 + 1 as i16 - [pre:R9]:8 as i8) {
          goto T29
        }
        goto T44
      }
      ;
      if ! CarryOf (r148 + 1 as i16 - [pre:R9]:8 as i8) {
        goto T44
      }
      goto T29
      T29: {
        ;
        r1454 := pre:R13;
        r1470 := 46;
        r1471 := strchr(r772,
                        46);
        if ! IsZero ([[pre:R13 + 24]:8]:1) {
          goto T4
        }
        goto T30
      }
      
      T44: {
        r1475 := pre:RCX;
        goto T45
      }
    
    }
    
    T30: {
      let mut r1471: Error;
      let mut r1470: Bytes(8);
      [pre:RSP - 128]:* := r1471;
      let r899: Bytes(8) = je_malloc_strtoumax(pre:RDX,
                                               (r1470[4 .. 0] ^ r1470[4 .. 0]),
                                               10);
      let r912: Bytes(8) = [pre:RSP - 128]:8;
      let r915: Bytes(16) = r899 + 1;
      ;
      if IsZero (r915) {
        goto T42
      }
      let r927: Bytes(8) = [pre:RSI + 24]:8;
      [pre:RSP - 136]:* := r912;
      ;
      if ! IsZero ([r927]:1) {
        goto ext 0x403143
      }
      [[r927 + 8]:8]:8(pre:RDI,
                       pre:R8,
                       [pre:R9]:8,
                       r915);
      ;
      if IsZero (r915) {
        goto T42
      }
      [pre:R8 as i8 + r148 * 8 as i16]:* := r915;
      let r1018: Bytes(11) = pre:RDI[8 .. 1] as i7 ++ ([r912]:1 as u32) as i4;
      ;
      r1469 := pre:RDI[8 .. 1] as i7 ++ ([r912]:1 as u32) as i4;
      r1472 := pre:RDI[8 .. 1] as i7 ++ ([r912]:1 as u32) as i4;
      if IsZero ([r899 + 33]:8) {
        goto T26
      }
      goto T34
    }
    
    T34: {
      let mut r1472: Bytes(11);
      ;
      r1473 := pre:RCX;
      if ! IsZero (r1472[1 .. 0] & r1472[1 .. 0]) {
        goto T42
      }
      goto T35
    }
    
    T35: {
      let mut r1473: Bytes(8);
      [pre:R9]:* := r148 + 1;
      ;
      r1476 := phi ();
      if ! IsZero (r1473) {
        goto T46
      }
      goto T36
    }
    
    T36: {
      r1474 := pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0];
      goto T37
    }
    
    T37: {
      let mut r1474: Bytes(8);
      ;
      return r1474
    }
    
    T45: {
      let mut r1475: Bytes(8);
      ;
      r1476 := phi ();
      if IsZero (r1475) {
        goto T36
      }
      goto T46
    }
    
    T46: {
      let mut r1476: Bytes(8);
      [r1476]:* := pre:R13;
      r1474 := pre:RDX[4 .. 0] ^ pre:RDX[4 .. 0];
      goto T37
    }
    
    T42: {
      ;
      return 2
    }
  
  }

}
