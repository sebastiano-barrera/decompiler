---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  586 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
   45 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   46 r15: TypeID(2v1) <- Get(r46)
   47 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
   48 r48: TypeID(2v1) <- Widen { reg: r47, target_size: 8, sign: false }
   49 r19: TypeID(2v1) <- Get(r48)
0x50b3e0:
   50 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   51 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x50b3e1:
   52 r11: TypeID(2v1) <- Get(r12)
0x50b3e4:
   53 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   54 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r27 }
0x50b3e6:
   55 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   56 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r26 }
0x50b3e8:
   57 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   58 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r25 }
0x50b3ea:
   59 r25: TypeID(2v1) <- Get(r15)
0x50b3ed:
   60 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   61 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x50b3ef:
   62 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
   63 r47: TypeID(2v1) <- Part { src: r24, offset: 4, size: 4 }
   64 r24: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x50b3f2:
   65 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   66 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x50b3f3:
   67 r17: TypeID(2v1) <- Get(r14)
0x50b3f6:
   68 r46: TypeID(2v1) <- Const { value: 1064, size: 8 }
   69 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   70 r12: TypeID(2v1) <- Get(r12)
   71 r10: TypeID(2v1) <- OverflowOf(r12)
   72 r2: TypeID(2v1) <- CarryOf(r12)
   73 r6: TypeID(2v1) <- SignOf(r12)
   74 r5: TypeID(2v1) <- IsZero(r12)
   75 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   76 r3: TypeID(2v1) <- Parity(r47)
0x50b3fd:
   77 r45: TypeID(2v1) <- Void
   78 r45: TypeID(2v1) <- Get(r14)
   79 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
   80 r47: TypeID(107563v1) <- Const { value: 4201696, size: 8 }
   81 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
   82 r2: TypeID(2v1) <- Undefined
   83 r3: TypeID(2v1) <- Undefined
   84 r4: TypeID(2v1) <- Undefined
   85 r5: TypeID(2v1) <- Undefined
   86 r6: TypeID(2v1) <- Undefined
   87 r7: TypeID(2v1) <- Undefined
   88 r8: TypeID(2v1) <- Undefined
   89 r9: TypeID(2v1) <- Undefined
   90 r10: TypeID(2v1) <- Undefined
   91 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b402:
   92 r45: TypeID(2v1) <- Const { value: -1072, size: 8 }
   93 r45: TypeID(2v1) <- Arith(Add, r45, r11)
   94 r14: TypeID(2v1) <- Get(r45)
0x50b409:
   95 r19: TypeID(2v1) <- Get(r17)
0x50b40c:
   96 r45: TypeID(2v1) <- Const { value: 1024, size: 4 }
   97 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   98 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b411:
   99 r46: TypeID(2v1) <- Const { value: 7968376, size: 8 }
  100 r46: TypeID(2v1) <- Arith(Add, r46, r13)
  101 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x50b418:
  102 r46: TypeID(107564v1) <- Const { value: 4201776, size: 8 }
  103 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  104 r2: TypeID(2v1) <- Undefined
  105 r3: TypeID(2v1) <- Undefined
  106 r4: TypeID(2v1) <- Undefined
  107 r5: TypeID(2v1) <- Undefined
  108 r6: TypeID(2v1) <- Undefined
  109 r7: TypeID(2v1) <- Undefined
  110 r8: TypeID(2v1) <- Undefined
  111 r9: TypeID(2v1) <- Undefined
  112 r10: TypeID(2v1) <- Undefined
  113 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x50b41d:
  114 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  115 r6: TypeID(2v1) <- SignOf(r16)
  116 r5: TypeID(2v1) <- IsZero(r16)
  117 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  118 r3: TypeID(2v1) <- Parity(r16)
  119 r2: TypeID(2v1) <- False
  120 r10: TypeID(2v1) <- False
0x50b420:
  121 r45: TypeID(2v1) <- SetJumpCondition(r5)
  122 r45: TypeID(2v1) <- Control(JmpIf(404))
0x50b426:
  123 r46: TypeID(2v1) <- Const { value: 7967296, size: 8 }
  124 r46: TypeID(2v1) <- Arith(Add, r46, r13)
  125 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  126 r27: TypeID(2v1) <- Get(r45)
0x50b42d:
  127 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  128 r46: TypeID(2v1) <- Part { src: r26, offset: 4, size: 4 }
  129 r26: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b433:
  130 r27: TypeID(2v1) <- Arith(BitAnd, r27, r27)
  131 r6: TypeID(2v1) <- SignOf(r27)
  132 r5: TypeID(2v1) <- IsZero(r27)
  133 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  134 r3: TypeID(2v1) <- Parity(r27)
  135 r2: TypeID(2v1) <- False
  136 r10: TypeID(2v1) <- False
0x50b436:
  137 r45: TypeID(2v1) <- SetJumpCondition(r5)
  138 r45: TypeID(2v1) <- Control(JmpIf(152))
0x50b438:
  139 r46: TypeID(2v1) <- Const { value: -1072, size: 8 }
  140 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  141 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  142 r47: TypeID(2v1) <- Const { value: 978539555, size: 4 }
  143 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  144 r10: TypeID(2v1) <- OverflowOf(r45)
  145 r2: TypeID(2v1) <- CarryOf(r45)
  146 r6: TypeID(2v1) <- SignOf(r45)
  147 r5: TypeID(2v1) <- IsZero(r45)
  148 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  149 r3: TypeID(2v1) <- Parity(r48)
0x50b442:
  150 r45: TypeID(2v1) <- SetJumpCondition(r5)
  151 r45: TypeID(2v1) <- Control(JmpIf(187))
0x50b444:
  152 r46: TypeID(2v1) <- Const { value: 1064, size: 8 }
  153 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  154 r12: TypeID(2v1) <- Get(r12)
  155 r10: TypeID(2v1) <- OverflowOf(r12)
  156 r2: TypeID(2v1) <- CarryOf(r12)
  157 r6: TypeID(2v1) <- SignOf(r12)
  158 r5: TypeID(2v1) <- IsZero(r12)
  159 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  160 r3: TypeID(2v1) <- Parity(r47)
0x50b44b:
  161 r46: TypeID(2v1) <- Part { src: r26, offset: 0, size: 4 }
  162 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  163 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x50b44e:
  164 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  165 r17: TypeID(2v1) <- Get(r45)
  166 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b44f:
  167 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  168 r24: TypeID(2v1) <- Get(r45)
  169 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b451:
  170 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  171 r25: TypeID(2v1) <- Get(r45)
  172 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b453:
  173 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  174 r26: TypeID(2v1) <- Get(r45)
  175 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b455:
  176 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  177 r27: TypeID(2v1) <- Get(r45)
  178 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b457:
  179 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  180 r11: TypeID(2v1) <- Get(r45)
  181 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x50b458:
  182 r45: TypeID(2v1) <- Void
  183 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  184 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  185 r47: TypeID(2v1) <- SetReturnValue(r45)
  186 r47: TypeID(2v1) <- Control(Ret)
0x50b460:
  187 r46: TypeID(107419v1) <- Const { value: 4198464, size: 8 }
  188 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  189 r2: TypeID(2v1) <- Undefined
  190 r3: TypeID(2v1) <- Undefined
  191 r4: TypeID(2v1) <- Undefined
  192 r5: TypeID(2v1) <- Undefined
  193 r6: TypeID(2v1) <- Undefined
  194 r7: TypeID(2v1) <- Undefined
  195 r8: TypeID(2v1) <- Undefined
  196 r9: TypeID(2v1) <- Undefined
  197 r10: TypeID(2v1) <- Undefined
  198 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x50b465:
  199 r45: TypeID(2v1) <- Const { value: -1080, size: 8 }
  200 r45: TypeID(2v1) <- Arith(Add, r45, r11)
  201 r15: TypeID(2v1) <- Get(r45)
0x50b46c:
  202 r45: TypeID(2v1) <- Const { value: 10, size: 4 }
  203 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  204 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b471:
  205 r45: TypeID(2v1) <- Const { value: -1068, size: 8 }
  206 r45: TypeID(2v1) <- Arith(Add, r45, r11)
  207 r14: TypeID(2v1) <- Get(r45)
0x50b478:
  208 r45: TypeID(2v1) <- Const { value: 0, size: 4 }
  209 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  210 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  211 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x50b47e:
  212 r26: TypeID(2v1) <- Get(r16)
0x50b481:
  213 r46: TypeID(107565v1) <- Const { value: 4202480, size: 8 }
  214 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  215 r2: TypeID(2v1) <- Undefined
  216 r3: TypeID(2v1) <- Undefined
  217 r4: TypeID(2v1) <- Undefined
  218 r5: TypeID(2v1) <- Undefined
  219 r6: TypeID(2v1) <- Undefined
  220 r7: TypeID(2v1) <- Undefined
  221 r8: TypeID(2v1) <- Undefined
  222 r9: TypeID(2v1) <- Undefined
  223 r10: TypeID(2v1) <- Undefined
  224 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x50b486:
  225 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  226 r46: TypeID(2v1) <- Arith(Add, r46, r26)
  227 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  228 r47: TypeID(2v1) <- Part { src: r26, offset: 4, size: 4 }
  229 r26: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x50b489:
  230 r46: TypeID(2v1) <- Part { src: r26, offset: 0, size: 4 }
  231 r48: TypeID(2v1) <- Part { src: r26, offset: 0, size: 4 }
  232 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  233 r6: TypeID(2v1) <- SignOf(r46)
  234 r5: TypeID(2v1) <- IsZero(r46)
  235 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  236 r3: TypeID(2v1) <- Parity(r46)
  237 r2: TypeID(2v1) <- False
  238 r10: TypeID(2v1) <- False
0x50b48c:
  239 r45: TypeID(2v1) <- Not(r5)
  240 r46: TypeID(2v1) <- SetJumpCondition(r45)
  241 r46: TypeID(2v1) <- Control(JmpIf(441))
0x50b492:
  242 r46: TypeID(2v1) <- Const { value: -1080, size: 8 }
  243 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  244 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  245 r19: TypeID(2v1) <- Get(r45)
0x50b499:
  246 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  247 r46: TypeID(2v1) <- Arith(Add, r46, r19)
  248 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  249 r47: TypeID(2v1) <- Const { value: 13, size: 1 }
  250 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  251 r10: TypeID(2v1) <- OverflowOf(r45)
  252 r2: TypeID(2v1) <- CarryOf(r45)
  253 r6: TypeID(2v1) <- SignOf(r45)
  254 r5: TypeID(2v1) <- IsZero(r45)
  255 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  256 r3: TypeID(2v1) <- Parity(r48)
0x50b49c:
  257 r45: TypeID(2v1) <- Not(r5)
  258 r46: TypeID(2v1) <- SetJumpCondition(r45)
  259 r46: TypeID(2v1) <- Control(JmpIf(441))
0x50b4a2:
  260 r27: TypeID(2v1) <- Arith(Sub, r27, r16)
  261 r10: TypeID(2v1) <- OverflowOf(r27)
  262 r2: TypeID(2v1) <- CarryOf(r27)
  263 r6: TypeID(2v1) <- SignOf(r27)
  264 r5: TypeID(2v1) <- IsZero(r27)
  265 r47: TypeID(2v1) <- Part { src: r27, offset: 0, size: 1 }
  266 r3: TypeID(2v1) <- Parity(r47)
0x50b4a5:
  267 r45: TypeID(2v1) <- Cmp(EQ, r6, r10)
  268 r46: TypeID(2v1) <- SetJumpCondition(r45)
  269 r46: TypeID(2v1) <- Control(JmpIf(400))
0x50b4a7:
  270 r46: TypeID(2v1) <- Const { value: 7968376, size: 8 }
  271 r46: TypeID(2v1) <- Arith(Add, r46, r13)
  272 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  273 r15: TypeID(2v1) <- Get(r45)
0x50b4ae:
  274 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  275 r6: TypeID(2v1) <- SignOf(r15)
  276 r5: TypeID(2v1) <- IsZero(r15)
  277 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  278 r3: TypeID(2v1) <- Parity(r15)
  279 r2: TypeID(2v1) <- False
  280 r10: TypeID(2v1) <- False
0x50b4b1:
  281 r45: TypeID(2v1) <- SetJumpCondition(r5)
  282 r45: TypeID(2v1) <- Control(JmpIf(473))
0x50b4b7:
  283 r46: TypeID(2v1) <- Part { src: r24, offset: 0, size: 4 }
  284 r48: TypeID(2v1) <- Part { src: r24, offset: 0, size: 4 }
  285 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  286 r6: TypeID(2v1) <- SignOf(r46)
  287 r5: TypeID(2v1) <- IsZero(r46)
  288 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  289 r3: TypeID(2v1) <- Parity(r46)
  290 r2: TypeID(2v1) <- False
  291 r10: TypeID(2v1) <- False
0x50b4ba:
  292 r45: TypeID(2v1) <- SetJumpCondition(r5)
  293 r45: TypeID(2v1) <- Control(JmpIf(522))
0x50b4c0:
  294 r14: TypeID(2v1) <- Get(r17)
0x50b4c3:
  295 r46: TypeID(2v1) <- Const { value: -1096, size: 8 }
  296 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  297 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r15 }
0x50b4ca:
  298 r45: TypeID(2v1) <- Void
  299 r45: TypeID(2v1) <- Get(r14)
  300 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  301 r47: TypeID(107650v1) <- Const { value: 4200480, size: 8 }
  302 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  303 r2: TypeID(2v1) <- Undefined
  304 r3: TypeID(2v1) <- Undefined
  305 r4: TypeID(2v1) <- Undefined
  306 r5: TypeID(2v1) <- Undefined
  307 r6: TypeID(2v1) <- Undefined
  308 r7: TypeID(2v1) <- Undefined
  309 r8: TypeID(2v1) <- Undefined
  310 r9: TypeID(2v1) <- Undefined
  311 r10: TypeID(2v1) <- Undefined
  312 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b4cf:
  313 r46: TypeID(2v1) <- Const { value: -1096, size: 8 }
  314 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  315 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  316 r15: TypeID(2v1) <- Get(r45)
0x50b4d6:
  317 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  318 r47: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  319 r14: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x50b4d8:
  320 r45: TypeID(2v1) <- Void
  321 r45: TypeID(2v1) <- Get(r14)
  322 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  323 r46: TypeID(2v1) <- Void
  324 r46: TypeID(2v1) <- Get(r15)
  325 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  326 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  327 r48: TypeID(107651v1) <- Const { value: 4199184, size: 8 }
  328 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  329 r2: TypeID(2v1) <- Undefined
  330 r3: TypeID(2v1) <- Undefined
  331 r4: TypeID(2v1) <- Undefined
  332 r5: TypeID(2v1) <- Undefined
  333 r6: TypeID(2v1) <- Undefined
  334 r7: TypeID(2v1) <- Undefined
  335 r8: TypeID(2v1) <- Undefined
  336 r9: TypeID(2v1) <- Undefined
  337 r10: TypeID(2v1) <- Undefined
  338 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x50b4dd:
  339 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  340 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  341 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  342 r10: TypeID(2v1) <- OverflowOf(r46)
  343 r2: TypeID(2v1) <- CarryOf(r46)
  344 r6: TypeID(2v1) <- SignOf(r46)
  345 r5: TypeID(2v1) <- IsZero(r46)
  346 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  347 r3: TypeID(2v1) <- Parity(r48)
0x50b4e0:
  348 r45: TypeID(2v1) <- Not(r5)
  349 r46: TypeID(2v1) <- SetJumpCondition(r45)
  350 r46: TypeID(2v1) <- Control(JmpIf(152))
0x50b4e6:
  351 r45: TypeID(2v1) <- Const { value: 7162352, size: 4 }
  352 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  353 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b4eb:
  354 r19: TypeID(2v1) <- Get(r27)
0x50b4ee:
  355 r15: TypeID(2v1) <- Get(r25)
0x50b4f1:
  356 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  357 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  358 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  359 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  360 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  361 r10: TypeID(2v1) <- False
  362 r2: TypeID(2v1) <- False
  363 r6: TypeID(2v1) <- SignOf(r46)
  364 r5: TypeID(2v1) <- IsZero(r46)
  365 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  366 r3: TypeID(2v1) <- Parity(r50)
0x50b4f3:
  367 r45: TypeID(2v1) <- Void
  368 r45: TypeID(2v1) <- Get(r14)
  369 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  370 r47: TypeID(107439v1) <- Const { value: 4198480, size: 8 }
  371 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  372 r2: TypeID(2v1) <- Undefined
  373 r3: TypeID(2v1) <- Undefined
  374 r4: TypeID(2v1) <- Undefined
  375 r5: TypeID(2v1) <- Undefined
  376 r6: TypeID(2v1) <- Undefined
  377 r7: TypeID(2v1) <- Undefined
  378 r8: TypeID(2v1) <- Undefined
  379 r9: TypeID(2v1) <- Undefined
  380 r10: TypeID(2v1) <- Undefined
  381 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b4f8:
  382 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  383 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  384 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b4fd:
  385 r45: TypeID(2v1) <- Void
  386 r45: TypeID(2v1) <- Get(r14)
  387 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  388 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  389 r47: TypeID(107479v1) <- Const { value: 4200816, size: 8 }
  390 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  391 r2: TypeID(2v1) <- Undefined
  392 r3: TypeID(2v1) <- Undefined
  393 r4: TypeID(2v1) <- Undefined
  394 r5: TypeID(2v1) <- Undefined
  395 r6: TypeID(2v1) <- Undefined
  396 r7: TypeID(2v1) <- Undefined
  397 r8: TypeID(2v1) <- Undefined
  398 r9: TypeID(2v1) <- Undefined
  399 r10: TypeID(2v1) <- Undefined
0x50b508:
  400 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  401 r46: TypeID(2v1) <- Part { src: r26, offset: 4, size: 4 }
  402 r26: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b50e:
  403 r45: TypeID(2v1) <- Control(Jmp(152))
0x50b513:
  404 r45: TypeID(2v1) <- Const { value: 7161960, size: 4 }
  405 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  406 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b518:
  407 r15: TypeID(2v1) <- Get(r25)
0x50b51b:
  408 r45: TypeID(2v1) <- Void
  409 r45: TypeID(2v1) <- Get(r14)
  410 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  411 r47: TypeID(107439v1) <- Const { value: 4198480, size: 8 }
  412 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  413 r2: TypeID(2v1) <- Undefined
  414 r3: TypeID(2v1) <- Undefined
  415 r4: TypeID(2v1) <- Undefined
  416 r5: TypeID(2v1) <- Undefined
  417 r6: TypeID(2v1) <- Undefined
  418 r7: TypeID(2v1) <- Undefined
  419 r8: TypeID(2v1) <- Undefined
  420 r9: TypeID(2v1) <- Undefined
  421 r10: TypeID(2v1) <- Undefined
  422 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b520:
  423 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  424 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  425 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b525:
  426 r45: TypeID(2v1) <- Void
  427 r45: TypeID(2v1) <- Get(r14)
  428 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  429 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  430 r47: TypeID(107479v1) <- Const { value: 4200816, size: 8 }
  431 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  432 r2: TypeID(2v1) <- Undefined
  433 r3: TypeID(2v1) <- Undefined
  434 r4: TypeID(2v1) <- Undefined
  435 r5: TypeID(2v1) <- Undefined
  436 r6: TypeID(2v1) <- Undefined
  437 r7: TypeID(2v1) <- Undefined
  438 r8: TypeID(2v1) <- Undefined
  439 r9: TypeID(2v1) <- Undefined
  440 r10: TypeID(2v1) <- Undefined
0x50b52a:
  441 r45: TypeID(2v1) <- Const { value: 6995992, size: 4 }
  442 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  443 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b52f:
  444 r46: TypeID(112371v1) <- Const { value: 4201744, size: 8 }
  445 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  446 r2: TypeID(2v1) <- Undefined
  447 r3: TypeID(2v1) <- Undefined
  448 r4: TypeID(2v1) <- Undefined
  449 r5: TypeID(2v1) <- Undefined
  450 r6: TypeID(2v1) <- Undefined
  451 r7: TypeID(2v1) <- Undefined
  452 r8: TypeID(2v1) <- Undefined
  453 r9: TypeID(2v1) <- Undefined
  454 r10: TypeID(2v1) <- Undefined
0x50b534:
  455 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  456 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  457 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b539:
  458 r45: TypeID(2v1) <- Void
  459 r45: TypeID(2v1) <- Get(r14)
  460 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  461 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  462 r47: TypeID(107479v1) <- Const { value: 4200816, size: 8 }
  463 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  464 r2: TypeID(2v1) <- Undefined
  465 r3: TypeID(2v1) <- Undefined
  466 r4: TypeID(2v1) <- Undefined
  467 r5: TypeID(2v1) <- Undefined
  468 r6: TypeID(2v1) <- Undefined
  469 r7: TypeID(2v1) <- Undefined
  470 r8: TypeID(2v1) <- Undefined
  471 r9: TypeID(2v1) <- Undefined
  472 r10: TypeID(2v1) <- Undefined
0x50b53e:
  473 r45: TypeID(2v1) <- Const { value: 7162016, size: 4 }
  474 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  475 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b543:
  476 r19: TypeID(2v1) <- Get(r27)
0x50b546:
  477 r15: TypeID(2v1) <- Get(r25)
0x50b549:
  478 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  479 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  480 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  481 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  482 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  483 r10: TypeID(2v1) <- False
  484 r2: TypeID(2v1) <- False
  485 r6: TypeID(2v1) <- SignOf(r46)
  486 r5: TypeID(2v1) <- IsZero(r46)
  487 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  488 r3: TypeID(2v1) <- Parity(r50)
0x50b54b:
  489 r45: TypeID(2v1) <- Void
  490 r45: TypeID(2v1) <- Get(r14)
  491 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  492 r47: TypeID(107439v1) <- Const { value: 4198480, size: 8 }
  493 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  494 r2: TypeID(2v1) <- Undefined
  495 r3: TypeID(2v1) <- Undefined
  496 r4: TypeID(2v1) <- Undefined
  497 r5: TypeID(2v1) <- Undefined
  498 r6: TypeID(2v1) <- Undefined
  499 r7: TypeID(2v1) <- Undefined
  500 r8: TypeID(2v1) <- Undefined
  501 r9: TypeID(2v1) <- Undefined
  502 r10: TypeID(2v1) <- Undefined
  503 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b550:
  504 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  505 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  506 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b555:
  507 r45: TypeID(2v1) <- Void
  508 r45: TypeID(2v1) <- Get(r14)
  509 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  510 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  511 r47: TypeID(107479v1) <- Const { value: 4200816, size: 8 }
  512 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  513 r2: TypeID(2v1) <- Undefined
  514 r3: TypeID(2v1) <- Undefined
  515 r4: TypeID(2v1) <- Undefined
  516 r5: TypeID(2v1) <- Undefined
  517 r6: TypeID(2v1) <- Undefined
  518 r7: TypeID(2v1) <- Undefined
  519 r8: TypeID(2v1) <- Undefined
  520 r9: TypeID(2v1) <- Undefined
  521 r10: TypeID(2v1) <- Undefined
0x50b55a:
  522 r18: TypeID(2v1) <- Get(r15)
0x50b55d:
  523 r19: TypeID(2v1) <- Get(r27)
0x50b560:
  524 r15: TypeID(2v1) <- Get(r25)
0x50b563:
  525 r45: TypeID(2v1) <- Const { value: 7162072, size: 4 }
  526 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  527 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b568:
  528 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  529 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  530 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  531 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  532 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  533 r10: TypeID(2v1) <- False
  534 r2: TypeID(2v1) <- False
  535 r6: TypeID(2v1) <- SignOf(r46)
  536 r5: TypeID(2v1) <- IsZero(r46)
  537 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  538 r3: TypeID(2v1) <- Parity(r50)
0x50b56a:
  539 r45: TypeID(2v1) <- Void
  540 r45: TypeID(2v1) <- Get(r14)
  541 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  542 r47: TypeID(107439v1) <- Const { value: 4198480, size: 8 }
  543 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  544 r2: TypeID(2v1) <- Undefined
  545 r3: TypeID(2v1) <- Undefined
  546 r4: TypeID(2v1) <- Undefined
  547 r5: TypeID(2v1) <- Undefined
  548 r6: TypeID(2v1) <- Undefined
  549 r7: TypeID(2v1) <- Undefined
  550 r8: TypeID(2v1) <- Undefined
  551 r9: TypeID(2v1) <- Undefined
  552 r10: TypeID(2v1) <- Undefined
  553 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x50b56f:
  554 r45: TypeID(2v1) <- Const { value: 7162168, size: 4 }
  555 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  556 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b574:
  557 r46: TypeID(112371v1) <- Const { value: 4201744, size: 8 }
  558 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  559 r2: TypeID(2v1) <- Undefined
  560 r3: TypeID(2v1) <- Undefined
  561 r4: TypeID(2v1) <- Undefined
  562 r5: TypeID(2v1) <- Undefined
  563 r6: TypeID(2v1) <- Undefined
  564 r7: TypeID(2v1) <- Undefined
  565 r8: TypeID(2v1) <- Undefined
  566 r9: TypeID(2v1) <- Undefined
  567 r10: TypeID(2v1) <- Undefined
0x50b579:
  568 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
  569 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  570 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x50b57e:
  571 r45: TypeID(2v1) <- Void
  572 r45: TypeID(2v1) <- Get(r14)
  573 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  574 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  575 r47: TypeID(107479v1) <- Const { value: 4200816, size: 8 }
  576 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  577 r2: TypeID(2v1) <- Undefined
  578 r3: TypeID(2v1) <- Undefined
  579 r4: TypeID(2v1) <- Undefined
  580 r5: TypeID(2v1) <- Undefined
  581 r6: TypeID(2v1) <- Undefined
  582 r7: TypeID(2v1) <- Undefined
  583 r8: TypeID(2v1) <- Undefined
  584 r9: TypeID(2v1) <- Undefined
  585 r10: TypeID(2v1) <- Undefined


 --- ssa pre-xform
ssa program  621 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r23: ? <- Ancestral(AncestralName("R12"))
         r24: ? <- Ancestral(AncestralName("R13"))
  (  2)  r25: ? <- Ancestral(AncestralName("R14"))
         r26: ? <- Ancestral(AncestralName("R15"))
  (  3)  r43: ? <- Ancestral(AncestralName("arg0"))
         r47: ? <- Ancestral(AncestralName("arg2"))
         r48: ? <- Widen { reg: r47, target_size: 8, sign: false }
  (  8)  r50: ? <- ArithK(Add, r11, -8)
         r51: ? <- StoreMem { addr: r50, value: r10 }
  (  2)  r53: ? <- ArithK(Add, r50, -8)
         r54: ? <- StoreMem { addr: r53, value: r26 }
  (  2)  r55: ? <- ArithK(Add, r53, -8)
         r56: ? <- StoreMem { addr: r55, value: r25 }
  (  2)  r57: ? <- ArithK(Add, r55, -8)
         r58: ? <- StoreMem { addr: r57, value: r24 }
  (  2)  r60: ? <- ArithK(Add, r57, -8)
         r61: ? <- StoreMem { addr: r60, value: r23 }
         r62: ? <- Part { src: r48, offset: 0, size: 4 }
         r63: ? <- Part { src: r23, offset: 4, size: 4 }
  (  2)  r64: ? <- Concat { lo: r62, hi: r63 }
         r65: ? <- ArithK(Add, r60, -8)
         r66: ? <- StoreMem { addr: r65, value: r16 }
         r79: ? <- CArg { value: r43, next_arg: None }
         r80: ftello <TypeID(207375v1)> <- Const { value: 4201696, size: 8 }
         r81: ? <- Call { callee: r80, first_arg: Some(r79) }
         r91: ? <- Part { src: r81, offset: 0, size: 8 }
         r92: ? <- Const { value: -1072, size: 8 }
         r93: ? <- Arith(Add, r92, r50)
         r99: ? <- Const { value: 7968376, size: 8 }
         r100: ? <- Arith(Add, r99, r12)
         r101: ? <- StoreMem { addr: r100, value: r91 }
         r102: fgets <TypeID(170351v1)> <- Const { value: 4201776, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
  (  2)  r113: ? <- Part { src: r103, offset: 0, size: 8 }
  (  3)  r114: ? <- Arith(BitAnd, r113, r113)
         r116: ? <- IsZero(r114)
         r121: ? <- SetJumpCondition(r116)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r123: ? <- Const { value: 7967296, size: 8 }
         r124: ? <- Arith(Add, r123, r12)
  (  2)  r125: ? <- LoadMem { addr: r124, size: 8 }
         r127: ? <- Const { value: 1, size: 4 }
         r128: ? <- Part { src: r25, offset: 4, size: 4 }
  (  2)  r129: ? <- Concat { lo: r127, hi: r128 }
  (  2)  r130: ? <- Arith(BitAnd, r125, r125)
         r132: ? <- IsZero(r130)
         r137: ? <- SetJumpCondition(r132)
         r604: ? <- Upsilon { value: r114, phi_ref: r586 }
         r605: ? <- Upsilon { value: r129, phi_ref: r587 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) }.
         r139: ? <- Const { value: -1072, size: 8 }
         r140: ? <- Arith(Add, r139, r50)
         r141: ? <- LoadMem { addr: r140, size: 4 }
         r142: ? <- Const { value: 978539555, size: 4 }
         r143: ? <- Arith(Sub, r141, r142)
         r147: ? <- IsZero(r143)
         r150: ? <- SetJumpCondition(r147)
         r606: ? <- Upsilon { value: r114, phi_ref: r586 }
         r607: ? <- Upsilon { value: r129, phi_ref: r587 }
.B4:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) }.
         r187: __errno_location <TypeID(164595v1)> <- Const { value: 4198464, size: 8 }
         r188: ? <- Call { callee: r187, first_arg: None }
  (  3)  r198: ? <- Part { src: r188, offset: 0, size: 8 }
         r205: ? <- Const { value: -1068, size: 8 }
  (  4)  r206: ? <- Arith(Add, r205, r50)
         r208: ? <- Const { value: 0, size: 4 }
         r209: ? <- Const { value: 0, size: 8 }
         r210: ? <- Arith(Add, r209, r198)
         r211: ? <- StoreMem { addr: r210, value: r208 }
         r213: strtol <TypeID(170363v1)> <- Const { value: 4202480, size: 8 }
         r214: ? <- Call { callee: r213, first_arg: None }
  (  2)  r224: ? <- Part { src: r214, offset: 0, size: 8 }
         r225: ? <- Const { value: 0, size: 8 }
         r226: ? <- Arith(Add, r225, r198)
         r227: ? <- LoadMem { addr: r226, size: 4 }
         r228: ? <- Part { src: r198, offset: 4, size: 4 }
  (  4)  r229: ? <- Concat { lo: r227, hi: r228 }
         r230: ? <- Part { src: r229, offset: 0, size: 4 }
         r231: ? <- Part { src: r229, offset: 0, size: 4 }
         r232: ? <- Arith(BitAnd, r230, r231)
         r234: ? <- IsZero(r232)
         r239: ? <- Not(r234)
         r240: ? <- SetJumpCondition(r239)
         r608: ? <- Upsilon { value: r206, phi_ref: r588 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) }.
         r242: ? <- Const { value: -1080, size: 8 }
         r243: ? <- Arith(Add, r242, r50)
         r244: ? <- LoadMem { addr: r243, size: 8 }
         r246: ? <- Const { value: 0, size: 8 }
         r247: ? <- Arith(Add, r246, r244)
         r248: ? <- LoadMem { addr: r247, size: 1 }
         r249: ? <- Const { value: 13, size: 1 }
         r250: ? <- Arith(Sub, r248, r249)
         r254: ? <- IsZero(r250)
         r257: ? <- Not(r254)
         r258: ? <- SetJumpCondition(r257)
         r609: ? <- Upsilon { value: r206, phi_ref: r588 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) }.
  (  2)  r260: ? <- Arith(Sub, r130, r224)
         r261: ? <- OverflowOf(r260)
         r263: ? <- SignOf(r260)
         r267: ? <- Cmp(EQ, r263, r261)
         r268: ? <- SetJumpCondition(r267)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) }.
         r270: ? <- Const { value: 7968376, size: 8 }
         r271: ? <- Arith(Add, r270, r12)
  (  2)  r272: ? <- LoadMem { addr: r271, size: 8 }
  (  2)  r274: ? <- Arith(BitAnd, r272, r272)
         r276: ? <- IsZero(r274)
         r281: ? <- SetJumpCondition(r276)
         r612: ? <- Upsilon { value: r206, phi_ref: r589 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) }.
         r283: ? <- Part { src: r64, offset: 0, size: 4 }
         r284: ? <- Part { src: r64, offset: 0, size: 4 }
         r285: ? <- Arith(BitAnd, r283, r284)
         r287: ? <- IsZero(r285)
         r292: ? <- SetJumpCondition(r287)
         r615: ? <- Upsilon { value: r206, phi_ref: r592 }
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) }.
         r295: ? <- Const { value: -1096, size: 8 }
         r296: ? <- Arith(Add, r295, r50)
         r297: ? <- StoreMem { addr: r296, value: r274 }
         r300: ? <- CArg { value: r43, next_arg: None }
         r301: fileno <TypeID(169798v1)> <- Const { value: 4200480, size: 8 }
         r302: ? <- Call { callee: r301, first_arg: Some(r300) }
         r312: ? <- Part { src: r302, offset: 0, size: 8 }
         r313: ? <- Const { value: -1096, size: 8 }
         r314: ? <- Arith(Add, r313, r50)
         r315: ? <- LoadMem { addr: r314, size: 8 }
         r317: ? <- Part { src: r312, offset: 0, size: 4 }
         r318: ? <- Part { src: r43, offset: 4, size: 4 }
  (  2)  r319: ? <- Concat { lo: r317, hi: r318 }
         r322: ? <- Part { src: r319, offset: 0, size: 4 }
         r325: ? <- CArg { value: r315, next_arg: None }
         r326: ? <- CArg { value: r322, next_arg: Some(r325) }
         r327: ftruncate <TypeID(185390v1)> <- Const { value: 4199184, size: 8 }
         r328: ? <- Call { callee: r327, first_arg: Some(r326) }
  (  2)  r338: ? <- Part { src: r328, offset: 0, size: 8 }
         r339: ? <- Part { src: r338, offset: 0, size: 4 }
         r340: ? <- Const { value: -1, size: 4 }
         r341: ? <- Arith(Sub, r339, r340)
         r345: ? <- IsZero(r341)
         r348: ? <- Not(r345)
         r349: ? <- SetJumpCondition(r348)
         r619: ? <- Upsilon { value: r338, phi_ref: r586 }
         r620: ? <- Upsilon { value: r229, phi_ref: r587 }
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r351: ? <- Const { value: 7162352, size: 4 }
         r352: ? <- Part { src: r319, offset: 4, size: 4 }
  (  2)  r353: ? <- Concat { lo: r351, hi: r352 }
         r369: ? <- CArg { value: r353, next_arg: None }
         r370: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r371: ? <- Call { callee: r370, first_arg: Some(r369) }
         r382: ? <- Const { value: 1, size: 4 }
         r383: ? <- Part { src: r353, offset: 4, size: 4 }
         r384: ? <- Concat { lo: r382, hi: r383 }
         r387: ? <- Part { src: r384, offset: 0, size: 4 }
         r388: ? <- CArg { value: r387, next_arg: None }
         r389: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r390: ? <- Call { callee: r389, first_arg: Some(r388) }
.B11:    ;; preds:B6,B10  → Always(Block(BlockID(3))).
         r400: ? <- Const { value: 1, size: 4 }
         r401: ? <- Part { src: r229, offset: 4, size: 4 }
         r402: ? <- Concat { lo: r400, hi: r401 }
         r610: ? <- Upsilon { value: r224, phi_ref: r586 }
         r611: ? <- Upsilon { value: r402, phi_ref: r587 }
.B3:    ;; preds:B1,B2,B9,B11  → Always(Return).
         r587: ? <- Phi
         r586: ? <- Phi
         r161: ? <- Part { src: r587, offset: 0, size: 4 }
         r162: ? <- Part { src: r586, offset: 4, size: 4 }
         r163: ? <- Concat { lo: r161, hi: r162 }
         r183: ? <- Concat { lo: r182, hi: r163 }
         r184: ? <- Part { src: r183, offset: 0, size: 4 }
         r185: ? <- SetReturnValue(r184)
.B12:    ;; preds:B0  → Always(Block(BlockID(13))).
         r404: ? <- Const { value: 7161960, size: 4 }
         r405: ? <- Part { src: r93, offset: 4, size: 4 }
  (  2)  r406: ? <- Concat { lo: r404, hi: r405 }
         r410: ? <- CArg { value: r406, next_arg: None }
         r411: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r412: ? <- Call { callee: r411, first_arg: Some(r410) }
         r423: ? <- Const { value: 1, size: 4 }
         r424: ? <- Part { src: r406, offset: 4, size: 4 }
  (  2)  r425: ? <- Concat { lo: r423, hi: r424 }
         r428: ? <- Part { src: r425, offset: 0, size: 4 }
         r429: ? <- CArg { value: r428, next_arg: None }
         r430: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r431: ? <- Call { callee: r430, first_arg: Some(r429) }
         r603: ? <- Upsilon { value: r425, phi_ref: r588 }
.B13:    ;; preds:B4,B5,B12  → Always(Block(BlockID(14))).
         r588: ? <- Phi
         r441: ? <- Const { value: 6995992, size: 4 }
         r442: ? <- Part { src: r588, offset: 4, size: 4 }
         r443: ? <- Concat { lo: r441, hi: r442 }
         r444: __builtin_puts <TypeID(112371v1)> <- Const { value: 4201744, size: 8 }
         r445: ? <- Call { callee: r444, first_arg: None }
         r455: ? <- Const { value: 1, size: 4 }
         r456: ? <- Part { src: r443, offset: 4, size: 4 }
  (  2)  r457: ? <- Concat { lo: r455, hi: r456 }
         r460: ? <- Part { src: r457, offset: 0, size: 4 }
         r461: ? <- CArg { value: r460, next_arg: None }
         r462: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r463: ? <- Call { callee: r462, first_arg: Some(r461) }
         r600: ? <- Upsilon { value: r457, phi_ref: r589 }
.B14:    ;; preds:B7,B13  → Always(Block(BlockID(15))).
         r589: ? <- Phi
         r473: ? <- Const { value: 7162016, size: 4 }
         r474: ? <- Part { src: r589, offset: 4, size: 4 }
  (  2)  r475: ? <- Concat { lo: r473, hi: r474 }
         r491: ? <- CArg { value: r475, next_arg: None }
         r492: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r493: ? <- Call { callee: r492, first_arg: Some(r491) }
         r504: ? <- Const { value: 1, size: 4 }
         r505: ? <- Part { src: r475, offset: 4, size: 4 }
  (  2)  r506: ? <- Concat { lo: r504, hi: r505 }
         r509: ? <- Part { src: r506, offset: 0, size: 4 }
         r510: ? <- CArg { value: r509, next_arg: None }
         r511: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r512: ? <- Call { callee: r511, first_arg: Some(r510) }
         r596: ? <- Upsilon { value: r506, phi_ref: r592 }
.B15:    ;; preds:B8,B14  → Always(Undefined).
         r592: ? <- Phi
         r525: ? <- Const { value: 7162072, size: 4 }
         r526: ? <- Part { src: r592, offset: 4, size: 4 }
  (  2)  r527: ? <- Concat { lo: r525, hi: r526 }
         r541: ? <- CArg { value: r527, next_arg: None }
         r542: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r543: ? <- Call { callee: r542, first_arg: Some(r541) }
         r554: ? <- Const { value: 7162168, size: 4 }
         r555: ? <- Part { src: r527, offset: 4, size: 4 }
         r556: ? <- Concat { lo: r554, hi: r555 }
         r557: __builtin_puts <TypeID(112371v1)> <- Const { value: 4201744, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: None }
         r568: ? <- Const { value: 1, size: 4 }
         r569: ? <- Part { src: r556, offset: 4, size: 4 }
         r570: ? <- Concat { lo: r568, hi: r569 }
         r573: ? <- Part { src: r570, offset: 0, size: 4 }
         r574: ? <- CArg { value: r573, next_arg: None }
         r575: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r576: ? <- Call { callee: r575, first_arg: Some(r574) }


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) } [r10, r11, r12, r16, r23, r24, r25, r26, r43, r47, r50, r51, r53, r54, r55, r56, r57, r58, r60, r61, r65, r66, r79, r80, r81, r93, r100, r101, r102, r103, r116, r121]
  BlockID(1) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) } [r124, r125, r127, r128, r129, r132, r137, r605]
  BlockID(2) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) } [r140, r141, r143, r147, r150, r607]
  BlockID(3) -> Always(Return) [r587, r184, r185]
  BlockID(4) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) } [r187, r188, r206, r208, r211, r213, r214, r227, r228, r229, r234, r239, r240, r608]
  BlockID(5) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) } [r243, r244, r248, r250, r254, r257, r258, r609]
  BlockID(6) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) } [r260, r261, r263, r267, r268]
  BlockID(7) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) } [r271, r272, r276, r281, r612]
  BlockID(8) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) } [r287, r292, r615]
  BlockID(9) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) } [r296, r297, r300, r301, r302, r322, r325, r326, r327, r328, r339, r341, r345, r348, r349, r620]
  BlockID(10) -> Always(Block(BlockID(11))) [r351, r352, r353, r369, r370, r371, r382, r388, r389, r390]
  BlockID(11) -> Always(Block(BlockID(3))) [r400, r401, r402, r611]
  BlockID(12) -> Always(Block(BlockID(13))) [r404, r405, r406, r410, r411, r412, r423, r424, r425, r429, r430, r431, r603]
  BlockID(13) -> Always(Block(BlockID(14))) [r588, r444, r445, r455, r456, r457, r461, r462, r463, r600]
  BlockID(14) -> Always(Block(BlockID(15))) [r589, r473, r474, r475, r491, r492, r493, r504, r505, r506, r510, r511, r512, r596]
  BlockID(15) -> Always(Undefined) [r592, r525, r526, r527, r541, r542, r543, r557, r558, r568, r574, r575, r576]
  domtree:
    
 --- ssa
ssa program  626 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  ( 11)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r16: ? <- Ancestral(AncestralName("RBX"))
         r23: ? <- Ancestral(AncestralName("R12"))
         r24: ? <- Ancestral(AncestralName("R13"))
  (  2)  r25: ? <- Ancestral(AncestralName("R14"))
         r26: ? <- Ancestral(AncestralName("R15"))
  (  3)  r43: ? <- Ancestral(AncestralName("arg0"))
         r47: ? <- Ancestral(AncestralName("arg2"))
         r50: ? <- ArithK(Add, r11, -8)
         r51: ? <- StoreMem { addr: r50, value: r10 }
         r53: ? <- ArithK(Add, r11, -16)
         r54: ? <- StoreMem { addr: r53, value: r26 }
         r55: ? <- ArithK(Add, r11, -24)
         r56: ? <- StoreMem { addr: r55, value: r25 }
         r57: ? <- ArithK(Add, r11, -32)
         r58: ? <- StoreMem { addr: r57, value: r24 }
         r60: ? <- ArithK(Add, r11, -40)
         r61: ? <- StoreMem { addr: r60, value: r23 }
         r65: ? <- ArithK(Add, r11, -48)
         r66: ? <- StoreMem { addr: r65, value: r16 }
         r79: ? <- CArg { value: r43, next_arg: None }
         r80: ftello <TypeID(207375v1)> <- Const { value: 4201696, size: 8 }
         r81: ? <- Call { callee: r80, first_arg: Some(r79) }
  (  2)  r93: ? <- ArithK(Add, r11, -1080)
         r100: ? <- ArithK(Add, r12, 7968376)
         r101: ? <- StoreMem { addr: r100, value: r81 }
         r102: fgets <TypeID(170351v1)> <- Const { value: 4201776, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
         r116: ? <- IsZero(r103)
         r121: ? <- SetJumpCondition(r116)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r124: ? <- ArithK(Add, r12, 7967296)
  (  2)  r125: ? <- LoadMem { addr: r124, size: 8 }
         r127: ? <- Const { value: 1, size: 4 }
         r128: ? <- Part { src: r25, offset: 4, size: 4 }
  (  2)  r129: ? <- Concat { lo: r127, hi: r128 }
         r132: ? <- IsZero(r125)
         r137: ? <- SetJumpCondition(r132)
         r605: ? <- Upsilon { value: r129, phi_ref: r587 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) }.
         r140: ? <- ArithK(Add, r11, -1080)
         r141: ? <- LoadMem { addr: r140, size: 4 }
         r143: ? <- ArithK(Add, r141, -978539555)
         r147: ? <- IsZero(r143)
         r150: ? <- SetJumpCondition(r147)
         r607: ? <- Upsilon { value: r129, phi_ref: r587 }
.B4:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) }.
         r187: __errno_location <TypeID(164595v1)> <- Const { value: 4198464, size: 8 }
  (  4)  r188: ? <- Call { callee: r187, first_arg: None }
  (  4)  r206: ? <- ArithK(Add, r11, -1076)
         r208: ? <- Const { value: 0, size: 4 }
         r211: ? <- StoreMem { addr: r188, value: r208 }
         r213: strtol <TypeID(170363v1)> <- Const { value: 4202480, size: 8 }
         r214: ? <- Call { callee: r213, first_arg: None }
  (  2)  r227: ? <- LoadMem { addr: r188, size: 4 }
         r228: ? <- Part { src: r188, offset: 4, size: 4 }
         r229: ? <- Concat { lo: r227, hi: r228 }
         r234: ? <- IsZero(r227)
         r239: ? <- Not(r234)
         r240: ? <- SetJumpCondition(r239)
         r608: ? <- Upsilon { value: r206, phi_ref: r588 }
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) }.
         r243: ? <- ArithK(Add, r11, -1088)
         r244: ? <- LoadMem { addr: r243, size: 8 }
         r248: ? <- LoadMem { addr: r244, size: 1 }
         r250: ? <- ArithK(Add, r248, -13)
         r254: ? <- IsZero(r250)
         r257: ? <- Not(r254)
         r258: ? <- SetJumpCondition(r257)
         r609: ? <- Upsilon { value: r206, phi_ref: r588 }
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) }.
  (  2)  r260: ? <- Arith(Sub, r125, r214)
         r261: ? <- OverflowOf(r260)
         r263: ? <- SignOf(r260)
         r267: ? <- Cmp(EQ, r263, r261)
         r268: ? <- SetJumpCondition(r267)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) }.
         r271: ? <- ArithK(Add, r12, 7968376)
  (  3)  r272: ? <- LoadMem { addr: r271, size: 8 }
         r276: ? <- IsZero(r272)
         r281: ? <- SetJumpCondition(r276)
         r612: ? <- Upsilon { value: r206, phi_ref: r589 }
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) }.
         r287: ? <- IsZero(r47)
         r292: ? <- SetJumpCondition(r287)
         r615: ? <- Upsilon { value: r206, phi_ref: r592 }
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) }.
         r296: ? <- ArithK(Add, r11, -1104)
         r297: ? <- StoreMem { addr: r296, value: r272 }
         r300: ? <- CArg { value: r43, next_arg: None }
         r301: fileno <TypeID(169798v1)> <- Const { value: 4200480, size: 8 }
         r302: ? <- Call { callee: r301, first_arg: Some(r300) }
         r322: ? <- Part { src: r302, offset: 0, size: 4 }
         r325: ? <- CArg { value: r272, next_arg: None }
         r326: ? <- CArg { value: r322, next_arg: Some(r325) }
         r327: ftruncate <TypeID(185390v1)> <- Const { value: 4199184, size: 8 }
         r328: ? <- Call { callee: r327, first_arg: Some(r326) }
         r339: ? <- Part { src: r328, offset: 0, size: 4 }
         r341: ? <- ArithK(Add, r339, 1)
         r345: ? <- IsZero(r341)
         r348: ? <- Not(r345)
         r349: ? <- SetJumpCondition(r348)
         r620: ? <- Upsilon { value: r229, phi_ref: r587 }
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r351: ? <- Const { value: 7162352, size: 4 }
         r352: ? <- Part { src: r43, offset: 4, size: 4 }
         r353: ? <- Concat { lo: r351, hi: r352 }
         r369: ? <- CArg { value: r353, next_arg: None }
         r370: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r371: ? <- Call { callee: r370, first_arg: Some(r369) }
         r382: ? <- Const { value: 1, size: 4 }
         r388: ? <- CArg { value: r382, next_arg: None }
         r389: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r390: ? <- Call { callee: r389, first_arg: Some(r388) }
.B11:    ;; preds:B6,B10  → Always(Block(BlockID(3))).
         r400: ? <- Const { value: 1, size: 4 }
         r401: ? <- Part { src: r188, offset: 4, size: 4 }
         r402: ? <- Concat { lo: r400, hi: r401 }
         r611: ? <- Upsilon { value: r402, phi_ref: r587 }
.B3:    ;; preds:B1,B2,B9,B11  → Always(Return).
         r587: ? <- Phi
         r184: ? <- Part { src: r587, offset: 0, size: 4 }
         r185: ? <- SetReturnValue(r184)
.B12:    ;; preds:B0  → Always(Block(BlockID(13))).
         r404: ? <- Const { value: 7161960, size: 4 }
         r405: ? <- Part { src: r93, offset: 4, size: 4 }
         r406: ? <- Concat { lo: r404, hi: r405 }
         r410: ? <- CArg { value: r406, next_arg: None }
         r411: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r412: ? <- Call { callee: r411, first_arg: Some(r410) }
  (  2)  r423: ? <- Const { value: 1, size: 4 }
         r424: ? <- Part { src: r93, offset: 4, size: 4 }
         r425: ? <- Concat { lo: r423, hi: r424 }
         r429: ? <- CArg { value: r423, next_arg: None }
         r430: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r431: ? <- Call { callee: r430, first_arg: Some(r429) }
         r603: ? <- Upsilon { value: r425, phi_ref: r588 }
.B13:    ;; preds:B4,B5,B12  → Always(Block(BlockID(14))).
         r588: ? <- Phi
         r444: __builtin_puts <TypeID(112371v1)> <- Const { value: 4201744, size: 8 }
         r445: ? <- Call { callee: r444, first_arg: None }
  (  2)  r455: ? <- Const { value: 1, size: 4 }
         r456: ? <- Part { src: r588, offset: 4, size: 4 }
         r457: ? <- Concat { lo: r455, hi: r456 }
         r461: ? <- CArg { value: r455, next_arg: None }
         r462: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r463: ? <- Call { callee: r462, first_arg: Some(r461) }
         r600: ? <- Upsilon { value: r457, phi_ref: r589 }
.B14:    ;; preds:B7,B13  → Always(Block(BlockID(15))).
  (  2)  r589: ? <- Phi
         r473: ? <- Const { value: 7162016, size: 4 }
         r474: ? <- Part { src: r589, offset: 4, size: 4 }
         r475: ? <- Concat { lo: r473, hi: r474 }
         r491: ? <- CArg { value: r475, next_arg: None }
         r492: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r493: ? <- Call { callee: r492, first_arg: Some(r491) }
  (  2)  r504: ? <- Const { value: 1, size: 4 }
         r505: ? <- Part { src: r589, offset: 4, size: 4 }
         r506: ? <- Concat { lo: r504, hi: r505 }
         r510: ? <- CArg { value: r504, next_arg: None }
         r511: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r512: ? <- Call { callee: r511, first_arg: Some(r510) }
         r596: ? <- Upsilon { value: r506, phi_ref: r592 }
.B15:    ;; preds:B8,B14  → Always(Undefined).
         r592: ? <- Phi
         r525: ? <- Const { value: 7162072, size: 4 }
         r526: ? <- Part { src: r592, offset: 4, size: 4 }
         r527: ? <- Concat { lo: r525, hi: r526 }
         r541: ? <- CArg { value: r527, next_arg: None }
         r542: printf <TypeID(163986v1)> <- Const { value: 4198480, size: 8 }
         r543: ? <- Call { callee: r542, first_arg: Some(r541) }
         r557: __builtin_puts <TypeID(112371v1)> <- Const { value: 4201744, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: None }
         r568: ? <- Const { value: 1, size: 4 }
         r574: ? <- CArg { value: r568, next_arg: None }
         r575: exit <TypeID(170485v1)> <- Const { value: 4200816, size: 8 }
         r576: ? <- Call { callee: r575, first_arg: Some(r574) }


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R15;
  [pre:RSP - 24]:* := pre:R14;
  [pre:RSP - 32]:* := pre:R13;
  [pre:RSP - 40]:* := pre:R12;
  [pre:RSP - 48]:* := pre:RBX;
  ftello(pre:arg0);
  let r93: Bytes(8) = pre:RSP - 1080;
  [pre:RIP + 7968376]:* := ftello(pre:arg0);
  fgets();
  ;
  if IsZero (fgets()) {
    printf(r93[8 .. 4] ++ 7161960);
    exit(1);
    r588 := r93[8 .. 4] ++ 1;
    goto T13
  }
  let r125: Bytes(8) = [pre:RIP + 7967296]:8;
  let r129: Bytes(8) = pre:R14[8 .. 4] ++ 1;
  ;
  r587 := pre:R14[8 .. 4] ++ 1;
  if IsZero (r125) {
    goto T3
  }
  ;
  r587 := pre:R14[8 .. 4] ++ 1;
  if IsZero ([pre:RSP - 1080]:4 - 978539555) {
    let r188: Bytes(8) = __errno_location();
    let r206: Bytes(8) = pre:RSP - 1076;
    [r188]:* := 0;
    strtol();
    let r227: Bytes(4) = [r188]:4;
    ;
    r588 := pre:RSP - 1076;
    if ! IsZero (r227) {
      goto T13
    }
    ;
    r588 := pre:RSP - 1076;
    if ! IsZero ([[pre:RSP - 1088]:8]:1 - 13) {
      goto T13
    }
    let r260: Bytes(8) = r125 - strtol();
    ;
    if SignOf (r260) EQ OverflowOf (r260) {
      goto T11
    }
    let r272: Bytes(8) = [pre:RIP + 7968376]:8;
    ;
    r589 := pre:RSP - 1076;
    if IsZero (r272) {
      goto T14
    }
    ;
    r592 := pre:RSP - 1076;
    if IsZero (pre:arg2) {
      goto T15
    }
    [pre:RSP - 1104]:* := r272;
    fileno(pre:arg0);
    ftruncate((fileno(pre:arg0))[4 .. 0],
              r272);
    ;
    r587 := r188[8 .. 4] ++ r227;
    if ! IsZero ((ftruncate((fileno(pre:arg0))[4 .. 0],
                            r272))[4 .. 0] + 1) {
      goto T3
    }
    printf(pre:arg0[8 .. 4] ++ 7162352);
    exit(1);
    goto T11
    T11: {
      r587 := r188[8 .. 4] ++ 1;
      goto T3
    }
  
  }
  goto T3
  T3: {
    let mut r587: Bytes(8);
    ;
    return r587[4 .. 0]
  }
  
  T13: {
    let mut r588: Bytes(8);
    __builtin_puts();
    exit(1);
    r589 := r588[8 .. 4] ++ 1;
    goto T14
  }
  
  T14: {
    let mut r589: Bytes(8);
    printf(r589[8 .. 4] ++ 7162016);
    exit(1);
    r592 := r589[8 .. 4] ++ 1;
    goto T15
  }
  
  T15: {
    let mut r592: Bytes(8);
    printf(r592[8 .. 4] ++ 7162072);
    __builtin_puts();
    exit(1);
    goto undefined /* warning: due to decompiler bug or limitation */
  }

}
