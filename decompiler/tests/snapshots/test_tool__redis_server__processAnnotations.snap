---
source: decompiler/tests/test_tool.rs
expression: out
---
processAnnotations 0x50b3e0+419 (file 0x10b3e0)
          50b3e0: 55                      push rbp
          50b3e1: 48 89 e5                mov rbp,rsp
          50b3e4: 41 57                   push r15
          50b3e6: 41 56                   push r14
          50b3e8: 41 55                   push r13
          50b3ea: 49 89 f5                mov r13,rsi
          50b3ed: 41 54                   push r12
          50b3ef: 41 89 d4                mov r12d,edx
          50b3f2: 53                      push rbx
          50b3f3: 48 89 fb                mov rbx,rdi
          50b3f6: 48 81 ec 28 04 00 00    sub rsp,428h
          50b3fd: e8 de 68 ef ff          call 0000000000401CE0h
          50b402: 48 8d bd d0 fb ff ff    lea rdi,[rbp-430h]
          50b409: 48 89 da                mov rdx,rbx
          50b40c: be 00 04 00 00          mov esi,400h
          50b411: 48 89 05 60 e2 28 00    mov [799678h],rax
          50b418: e8 13 69 ef ff          call 0000000000401D30h
          50b41d: 48 85 c0                test rax,rax
          50b420: 0f 84 ed 00 00 00       je 000000000050B513h
          50b426: 4c 8b 3d 13 de 28 00    mov r15,[799240h]
          50b42d: 41 be 01 00 00 00       mov r14d,1
          50b433: 4d 85 ff                test r15,r15
          50b436: 74 0c                   je short 000000000050B444h
          50b438: 81 bd d0 fb ff ff 23 54 cmp dword ptr [rbp-430h],3A535423h
          50b442: 74 1c                   je short 000000000050B460h
          50b444: 48 81 c4 28 04 00 00    add rsp,428h
          50b44b: 44 89 f0                mov eax,r14d
          50b44e: 5b                      pop rbx
          50b44f: 41 5c                   pop r12
          50b451: 41 5d                   pop r13
          50b453: 41 5e                   pop r14
          50b455: 41 5f                   pop r15
          50b457: 5d                      pop rbp
          50b458: c3                      ret
          50b459: 0f 1f 80 00 00 00 00    nop [rax]
          50b460: e8 db 5b ef ff          call 0000000000401040h
          50b465: 48 8d b5 c8 fb ff ff    lea rsi,[rbp-438h]
          50b46c: ba 0a 00 00 00          mov edx,0Ah
          50b471: 48 8d bd d4 fb ff ff    lea rdi,[rbp-42Ch]
          50b478: c7 00 00 00 00 00       mov dword ptr [rax],0
          50b47e: 49 89 c6                mov r14,rax
          50b481: e8 6a 6b ef ff          call 0000000000401FF0h
          50b486: 45 8b 36                mov r14d,[r14]
          50b489: 45 85 f6                test r14d,r14d
          50b48c: 0f 85 98 00 00 00       jne 000000000050B52Ah
          50b492: 48 8b 95 c8 fb ff ff    mov rdx,[rbp-438h]
          50b499: 80 3a 0d                cmp byte ptr [rdx],0Dh
          50b49c: 0f 85 88 00 00 00       jne 000000000050B52Ah
          50b4a2: 49 39 c7                cmp r15,rax
          50b4a5: 7d 61                   jge short 000000000050B508h
          50b4a7: 48 8b 35 ca e1 28 00    mov rsi,[799678h]
          50b4ae: 48 85 f6                test rsi,rsi
          50b4b1: 0f 84 87 00 00 00       je 000000000050B53Eh
          50b4b7: 45 85 e4                test r12d,r12d
          50b4ba: 0f 84 9a 00 00 00       je 000000000050B55Ah
          50b4c0: 48 89 df                mov rdi,rbx
          50b4c3: 48 89 b5 b8 fb ff ff    mov [rbp-448h],rsi
          50b4ca: e8 51 63 ef ff          call 0000000000401820h
          50b4cf: 48 8b b5 b8 fb ff ff    mov rsi,[rbp-448h]
          50b4d6: 89 c7                   mov edi,eax
          50b4d8: e8 33 5e ef ff          call 0000000000401310h
          50b4dd: 83 f8 ff                cmp eax,0FFFFFFFFh
          50b4e0: 0f 85 5e ff ff ff       jne 000000000050B444h
          50b4e6: bf f0 49 6d 00          mov edi,6D49F0h
          50b4eb: 4c 89 fa                mov rdx,r15
          50b4ee: 4c 89 ee                mov rsi,r13
          50b4f1: 31 c0                   xor eax,eax
          50b4f3: e8 58 5b ef ff          call 0000000000401050h
          50b4f8: bf 01 00 00 00          mov edi,1
          50b4fd: e8 6e 64 ef ff          call 0000000000401970h
          50b502: 66 0f 1f 44 00 00       nop [rax+rax]
          50b508: 41 be 01 00 00 00       mov r14d,1
          50b50e: e9 31 ff ff ff          jmp 000000000050B444h
          50b513: bf 68 48 6d 00          mov edi,6D4868h
          50b518: 4c 89 ee                mov rsi,r13
          50b51b: e8 30 5b ef ff          call 0000000000401050h
          50b520: bf 01 00 00 00          mov edi,1
          50b525: e8 46 64 ef ff          call 0000000000401970h
          50b52a: bf 18 c0 6a 00          mov edi,6AC018h
          50b52f: e8 dc 67 ef ff          call 0000000000401D10h
          50b534: bf 01 00 00 00          mov edi,1
          50b539: e8 32 64 ef ff          call 0000000000401970h
          50b53e: bf a0 48 6d 00          mov edi,6D48A0h
          50b543: 4c 89 fa                mov rdx,r15
          50b546: 4c 89 ee                mov rsi,r13
          50b549: 31 c0                   xor eax,eax
          50b54b: e8 00 5b ef ff          call 0000000000401050h
          50b550: bf 01 00 00 00          mov edi,1
          50b555: e8 16 64 ef ff          call 0000000000401970h
          50b55a: 48 89 f1                mov rcx,rsi
          50b55d: 4c 89 fa                mov rdx,r15
          50b560: 4c 89 ee                mov rsi,r13
          50b563: bf d8 48 6d 00          mov edi,6D48D8h
          50b568: 31 c0                   xor eax,eax
          50b56a: e8 e1 5a ef ff          call 0000000000401050h
          50b56f: bf 38 49 6d 00          mov edi,6D4938h
          50b574: e8 97 67 ef ff          call 0000000000401D10h
          50b579: bf 01 00 00 00          mov edi,1
          50b57e: e8 ed 63 ef ff          call 0000000000401970h

function type: "processAnnotations" func (fp *FILE <TypeID(244702v1)>,
                                          filename *char <TypeID(244644v1)>,
                                          last_file int <TypeID(244625v1)>) int <TypeID(244625v1)>
2 warnings:
  #   0: call: call resolved but only packed 0/3 params
  #   1: call: call resolved but only packed 0/3 params


mil program = 
program  626 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r45 <- Undefined
                44 r46 <- Undefined
                45 r47 <- Undefined
                46 r48 <- Undefined
                47 r49 <- Undefined
                48 r50 <- Undefined
                49 r51 <- Undefined
                50 r52 <- Undefined
                51 r53 <- Undefined
                52 r54 <- Undefined
                53 r55 <- Undefined
                54 r56 <- Undefined
                55 r57 <- Undefined
                56 r58 <- Undefined
                57 r59 <- Undefined
                58 r60 <- Undefined
                59 r61 <- Undefined
                60 r62 <- Undefined
                61 r63 <- Undefined
                62 r64 <- Undefined
                63 r65 <- Undefined
                64 r45 <- Ancestral(AncestralName("arg0"))
                65 r14 <- Get(r45)
                66 r46 <- Ancestral(AncestralName("arg1"))
                67 r15 <- Get(r46)
                68 r47 <- Ancestral(AncestralName("arg2"))
                69 r48 <- Widen { reg: r47, target_size: 8, sign: false }
                70 r19 <- Get(r48)
0x50b3e0:
                71 r12 <- ArithK(Add, r12, -8)
                72 r46 <- StoreMem { addr: r12, value: r11 }
0x50b3e1:
                73 r11 <- Get(r12)
0x50b3e4:
                74 r12 <- ArithK(Add, r12, -8)
                75 r46 <- StoreMem { addr: r12, value: r27 }
0x50b3e6:
                76 r12 <- ArithK(Add, r12, -8)
                77 r46 <- StoreMem { addr: r12, value: r26 }
0x50b3e8:
                78 r12 <- ArithK(Add, r12, -8)
                79 r46 <- StoreMem { addr: r12, value: r25 }
0x50b3ea:
                80 r25 <- Get(r15)
0x50b3ed:
                81 r12 <- ArithK(Add, r12, -8)
                82 r46 <- StoreMem { addr: r12, value: r24 }
0x50b3ef:
                83 r46 <- Part { src: r19, offset: 0, size: 4 }
                84 r47 <- Part { src: r24, offset: 4, size: 4 }
                85 r24 <- Concat { lo: r46, hi: r47 }
0x50b3f2:
                86 r12 <- ArithK(Add, r12, -8)
                87 r46 <- StoreMem { addr: r12, value: r17 }
0x50b3f3:
                88 r17 <- Get(r14)
0x50b3f6:
                89 r46 <- Const { value: 1064, size: 8 }
                90 r12 <- Arith(Sub, r12, r46)
                91 r12 <- Get(r12)
                92 r10 <- OverflowOf(r12)
                93 r2 <- CarryOf(r12)
                94 r6 <- SignOf(r12)
                95 r5 <- IsZero(r12)
                96 r47 <- Part { src: r12, offset: 0, size: 1 }
                97 r3 <- Parity(r47)
0x50b3fd:
                98 r46 <- Ancestral(AncestralName("arg0"))
                99 r46 <- Void
               100 r46 <- Get(r14)
               101 r47 <- CArg { value: r45, next_arg: None }
               102 r48: TypeID(107562v1) <- Const { value: 4201696, size: 8 }
               103 r47 <- Call { callee: r48, first_arg: Some(r47) }
               104 r2 <- Undefined
               105 r3 <- Undefined
               106 r4 <- Undefined
               107 r5 <- Undefined
               108 r6 <- Undefined
               109 r7 <- Undefined
               110 r8 <- Undefined
               111 r9 <- Undefined
               112 r10 <- Undefined
               113 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b402:
               114 r45 <- Const { value: -1072, size: 8 }
               115 r45 <- Arith(Add, r45, r11)
               116 r14 <- Get(r45)
0x50b409:
               117 r19 <- Get(r17)
0x50b40c:
               118 r45 <- Const { value: 1024, size: 4 }
               119 r46 <- Part { src: r15, offset: 4, size: 4 }
               120 r15 <- Concat { lo: r45, hi: r46 }
0x50b411:
               121 r46 <- Const { value: 7968376, size: 8 }
               122 r46 <- Arith(Add, r46, r13)
               123 r46 <- StoreMem { addr: r46, value: r16 }
0x50b418:
               124 r48 <- CArg { value: r47, next_arg: None }
               125 r48 <- CArg { value: r46, next_arg: Some(r48) }
               126 r48 <- CArg { value: r45, next_arg: Some(r48) }
               127 r49: TypeID(107563v1) <- Const { value: 4201776, size: 8 }
               128 r48 <- Call { callee: r49, first_arg: Some(r48) }
               129 r2 <- Undefined
               130 r3 <- Undefined
               131 r4 <- Undefined
               132 r5 <- Undefined
               133 r6 <- Undefined
               134 r7 <- Undefined
               135 r8 <- Undefined
               136 r9 <- Undefined
               137 r10 <- Undefined
               138 r16 <- Part { src: r48, offset: 0, size: 8 }
0x50b41d:
               139 r16 <- Arith(BitAnd, r16, r16)
               140 r6 <- SignOf(r16)
               141 r5 <- IsZero(r16)
               142 r47 <- Part { src: r16, offset: 0, size: 1 }
               143 r3 <- Parity(r16)
               144 r2 <- False
               145 r10 <- False
0x50b420:
               146 r45 <- SetJumpCondition(r5)
               147 r45 <- Control(JmpIf(437))
0x50b426:
               148 r46 <- Const { value: 7967296, size: 8 }
               149 r46 <- Arith(Add, r46, r13)
               150 r45 <- LoadMem { addr: r46, size: 8 }
               151 r27 <- Get(r45)
0x50b42d:
               152 r45 <- Const { value: 1, size: 4 }
               153 r46 <- Part { src: r26, offset: 4, size: 4 }
               154 r26 <- Concat { lo: r45, hi: r46 }
0x50b433:
               155 r27 <- Arith(BitAnd, r27, r27)
               156 r6 <- SignOf(r27)
               157 r5 <- IsZero(r27)
               158 r47 <- Part { src: r27, offset: 0, size: 1 }
               159 r3 <- Parity(r27)
               160 r2 <- False
               161 r10 <- False
0x50b436:
               162 r45 <- SetJumpCondition(r5)
               163 r45 <- Control(JmpIf(177))
0x50b438:
               164 r46 <- Const { value: -1072, size: 8 }
               165 r46 <- Arith(Add, r46, r11)
               166 r45 <- LoadMem { addr: r46, size: 4 }
               167 r47 <- Const { value: 978539555, size: 4 }
               168 r45 <- Arith(Sub, r45, r47)
               169 r10 <- OverflowOf(r45)
               170 r2 <- CarryOf(r45)
               171 r6 <- SignOf(r45)
               172 r5 <- IsZero(r45)
               173 r48 <- Part { src: r45, offset: 0, size: 1 }
               174 r3 <- Parity(r48)
0x50b442:
               175 r45 <- SetJumpCondition(r5)
               176 r45 <- Control(JmpIf(212))
0x50b444:
               177 r46 <- Const { value: 1064, size: 8 }
               178 r12 <- Arith(Add, r12, r46)
               179 r12 <- Get(r12)
               180 r10 <- OverflowOf(r12)
               181 r2 <- CarryOf(r12)
               182 r6 <- SignOf(r12)
               183 r5 <- IsZero(r12)
               184 r47 <- Part { src: r12, offset: 0, size: 1 }
               185 r3 <- Parity(r47)
0x50b44b:
               186 r46 <- Part { src: r26, offset: 0, size: 4 }
               187 r47 <- Part { src: r16, offset: 4, size: 4 }
               188 r16 <- Concat { lo: r46, hi: r47 }
0x50b44e:
               189 r45 <- LoadMem { addr: r12, size: 8 }
               190 r17 <- Get(r45)
               191 r12 <- ArithK(Add, r12, 8)
0x50b44f:
               192 r45 <- LoadMem { addr: r12, size: 8 }
               193 r24 <- Get(r45)
               194 r12 <- ArithK(Add, r12, 8)
0x50b451:
               195 r45 <- LoadMem { addr: r12, size: 8 }
               196 r25 <- Get(r45)
               197 r12 <- ArithK(Add, r12, 8)
0x50b453:
               198 r45 <- LoadMem { addr: r12, size: 8 }
               199 r26 <- Get(r45)
               200 r12 <- ArithK(Add, r12, 8)
0x50b455:
               201 r45 <- LoadMem { addr: r12, size: 8 }
               202 r27 <- Get(r45)
               203 r12 <- ArithK(Add, r12, 8)
0x50b457:
               204 r45 <- LoadMem { addr: r12, size: 8 }
               205 r11 <- Get(r45)
               206 r12 <- ArithK(Add, r12, 8)
0x50b458:
               207 r45 <- Void
               208 r45 <- Concat { lo: r45, hi: r16 }
               209 r45 <- Part { src: r45, offset: 0, size: 4 }
               210 r47 <- SetReturnValue(r45)
               211 r47 <- Control(Ret)
0x50b460:
               212 r46: TypeID(107418v1) <- Const { value: 4198464, size: 8 }
               213 r45 <- Call { callee: r46, first_arg: None }
               214 r2 <- Undefined
               215 r3 <- Undefined
               216 r4 <- Undefined
               217 r5 <- Undefined
               218 r6 <- Undefined
               219 r7 <- Undefined
               220 r8 <- Undefined
               221 r9 <- Undefined
               222 r10 <- Undefined
               223 r16 <- Part { src: r45, offset: 0, size: 8 }
0x50b465:
               224 r45 <- Const { value: -1080, size: 8 }
               225 r45 <- Arith(Add, r45, r11)
               226 r15 <- Get(r45)
0x50b46c:
               227 r45 <- Const { value: 10, size: 4 }
               228 r46 <- Part { src: r19, offset: 4, size: 4 }
               229 r19 <- Concat { lo: r45, hi: r46 }
0x50b471:
               230 r45 <- Const { value: -1068, size: 8 }
               231 r45 <- Arith(Add, r45, r11)
               232 r14 <- Get(r45)
0x50b478:
               233 r45 <- Const { value: 0, size: 4 }
               234 r46 <- Const { value: 0, size: 8 }
               235 r46 <- Arith(Add, r46, r16)
               236 r46 <- StoreMem { addr: r46, value: r45 }
0x50b47e:
               237 r26 <- Get(r16)
0x50b481:
               238 r48 <- CArg { value: r47, next_arg: None }
               239 r48 <- CArg { value: r46, next_arg: Some(r48) }
               240 r48 <- CArg { value: r45, next_arg: Some(r48) }
               241 r49: TypeID(107564v1) <- Const { value: 4202480, size: 8 }
               242 r48 <- Call { callee: r49, first_arg: Some(r48) }
               243 r2 <- Undefined
               244 r3 <- Undefined
               245 r4 <- Undefined
               246 r5 <- Undefined
               247 r6 <- Undefined
               248 r7 <- Undefined
               249 r8 <- Undefined
               250 r9 <- Undefined
               251 r10 <- Undefined
               252 r16 <- Part { src: r48, offset: 0, size: 8 }
0x50b486:
               253 r46 <- Const { value: 0, size: 8 }
               254 r46 <- Arith(Add, r46, r26)
               255 r45 <- LoadMem { addr: r46, size: 4 }
               256 r47 <- Part { src: r26, offset: 4, size: 4 }
               257 r26 <- Concat { lo: r45, hi: r47 }
0x50b489:
               258 r46 <- Part { src: r26, offset: 0, size: 4 }
               259 r48 <- Part { src: r26, offset: 0, size: 4 }
               260 r46 <- Arith(BitAnd, r46, r48)
               261 r6 <- SignOf(r46)
               262 r5 <- IsZero(r46)
               263 r49 <- Part { src: r46, offset: 0, size: 1 }
               264 r3 <- Parity(r46)
               265 r2 <- False
               266 r10 <- False
0x50b48c:
               267 r45 <- Not(r5)
               268 r46 <- SetJumpCondition(r45)
               269 r46 <- Control(JmpIf(476))
0x50b492:
               270 r46 <- Const { value: -1080, size: 8 }
               271 r46 <- Arith(Add, r46, r11)
               272 r45 <- LoadMem { addr: r46, size: 8 }
               273 r19 <- Get(r45)
0x50b499:
               274 r46 <- Const { value: 0, size: 8 }
               275 r46 <- Arith(Add, r46, r19)
               276 r45 <- LoadMem { addr: r46, size: 1 }
               277 r47 <- Const { value: 13, size: 1 }
               278 r45 <- Arith(Sub, r45, r47)
               279 r10 <- OverflowOf(r45)
               280 r2 <- CarryOf(r45)
               281 r6 <- SignOf(r45)
               282 r5 <- IsZero(r45)
               283 r48 <- Part { src: r45, offset: 0, size: 1 }
               284 r3 <- Parity(r48)
0x50b49c:
               285 r45 <- Not(r5)
               286 r46 <- SetJumpCondition(r45)
               287 r46 <- Control(JmpIf(476))
0x50b4a2:
               288 r27 <- Arith(Sub, r27, r16)
               289 r10 <- OverflowOf(r27)
               290 r2 <- CarryOf(r27)
               291 r6 <- SignOf(r27)
               292 r5 <- IsZero(r27)
               293 r47 <- Part { src: r27, offset: 0, size: 1 }
               294 r3 <- Parity(r47)
0x50b4a5:
               295 r45 <- Cmp(EQ, r6, r10)
               296 r46 <- SetJumpCondition(r45)
               297 r46 <- Control(JmpIf(433))
0x50b4a7:
               298 r46 <- Const { value: 7968376, size: 8 }
               299 r46 <- Arith(Add, r46, r13)
               300 r45 <- LoadMem { addr: r46, size: 8 }
               301 r15 <- Get(r45)
0x50b4ae:
               302 r15 <- Arith(BitAnd, r15, r15)
               303 r6 <- SignOf(r15)
               304 r5 <- IsZero(r15)
               305 r47 <- Part { src: r15, offset: 0, size: 1 }
               306 r3 <- Parity(r15)
               307 r2 <- False
               308 r10 <- False
0x50b4b1:
               309 r45 <- SetJumpCondition(r5)
               310 r45 <- Control(JmpIf(509))
0x50b4b7:
               311 r46 <- Part { src: r24, offset: 0, size: 4 }
               312 r48 <- Part { src: r24, offset: 0, size: 4 }
               313 r46 <- Arith(BitAnd, r46, r48)
               314 r6 <- SignOf(r46)
               315 r5 <- IsZero(r46)
               316 r49 <- Part { src: r46, offset: 0, size: 1 }
               317 r3 <- Parity(r46)
               318 r2 <- False
               319 r10 <- False
0x50b4ba:
               320 r45 <- SetJumpCondition(r5)
               321 r45 <- Control(JmpIf(560))
0x50b4c0:
               322 r14 <- Get(r17)
0x50b4c3:
               323 r46 <- Const { value: -1096, size: 8 }
               324 r46 <- Arith(Add, r46, r11)
               325 r46 <- StoreMem { addr: r46, value: r15 }
0x50b4ca:
               326 r46 <- Ancestral(AncestralName("arg0"))
               327 r46 <- Void
               328 r46 <- Get(r14)
               329 r47 <- CArg { value: r45, next_arg: None }
               330 r48: TypeID(107649v1) <- Const { value: 4200480, size: 8 }
               331 r47 <- Call { callee: r48, first_arg: Some(r47) }
               332 r2 <- Undefined
               333 r3 <- Undefined
               334 r4 <- Undefined
               335 r5 <- Undefined
               336 r6 <- Undefined
               337 r7 <- Undefined
               338 r8 <- Undefined
               339 r9 <- Undefined
               340 r10 <- Undefined
               341 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b4cf:
               342 r46 <- Const { value: -1096, size: 8 }
               343 r46 <- Arith(Add, r46, r11)
               344 r45 <- LoadMem { addr: r46, size: 8 }
               345 r15 <- Get(r45)
0x50b4d6:
               346 r46 <- Part { src: r16, offset: 0, size: 4 }
               347 r47 <- Part { src: r14, offset: 4, size: 4 }
               348 r14 <- Concat { lo: r46, hi: r47 }
0x50b4d8:
               349 r47 <- Ancestral(AncestralName("arg0"))
               350 r47 <- Void
               351 r47 <- Get(r14)
               352 r47 <- Part { src: r47, offset: 0, size: 4 }
               353 r48 <- Ancestral(AncestralName("arg1"))
               354 r48 <- Void
               355 r48 <- Get(r15)
               356 r49 <- CArg { value: r46, next_arg: None }
               357 r49 <- CArg { value: r45, next_arg: Some(r49) }
               358 r50: TypeID(107650v1) <- Const { value: 4199184, size: 8 }
               359 r49 <- Call { callee: r50, first_arg: Some(r49) }
               360 r2 <- Undefined
               361 r3 <- Undefined
               362 r4 <- Undefined
               363 r5 <- Undefined
               364 r6 <- Undefined
               365 r7 <- Undefined
               366 r8 <- Undefined
               367 r9 <- Undefined
               368 r10 <- Undefined
               369 r16 <- Part { src: r49, offset: 0, size: 8 }
0x50b4dd:
               370 r46 <- Part { src: r16, offset: 0, size: 4 }
               371 r47 <- Const { value: -1, size: 4 }
               372 r46 <- Arith(Sub, r46, r47)
               373 r10 <- OverflowOf(r46)
               374 r2 <- CarryOf(r46)
               375 r6 <- SignOf(r46)
               376 r5 <- IsZero(r46)
               377 r48 <- Part { src: r46, offset: 0, size: 1 }
               378 r3 <- Parity(r48)
0x50b4e0:
               379 r45 <- Not(r5)
               380 r46 <- SetJumpCondition(r45)
               381 r46 <- Control(JmpIf(177))
0x50b4e6:
               382 r45 <- Const { value: 7162352, size: 4 }
               383 r46 <- Part { src: r14, offset: 4, size: 4 }
               384 r14 <- Concat { lo: r45, hi: r46 }
0x50b4eb:
               385 r19 <- Get(r27)
0x50b4ee:
               386 r15 <- Get(r25)
0x50b4f1:
               387 r46 <- Part { src: r16, offset: 0, size: 4 }
               388 r48 <- Part { src: r16, offset: 0, size: 4 }
               389 r46 <- Arith(BitXor, r46, r48)
               390 r49 <- Part { src: r16, offset: 4, size: 4 }
               391 r16 <- Concat { lo: r46, hi: r49 }
               392 r10 <- False
               393 r2 <- False
               394 r6 <- SignOf(r46)
               395 r5 <- IsZero(r46)
               396 r50 <- Part { src: r46, offset: 0, size: 1 }
               397 r3 <- Parity(r50)
0x50b4f3:
               398 r46 <- Ancestral(AncestralName("arg0"))
               399 r46 <- Void
               400 r46 <- Get(r14)
               401 r47 <- CArg { value: r45, next_arg: None }
               402 r48: TypeID(107438v1) <- Const { value: 4198480, size: 8 }
               403 r47 <- Call { callee: r48, first_arg: Some(r47) }
               404 r2 <- Undefined
               405 r3 <- Undefined
               406 r4 <- Undefined
               407 r5 <- Undefined
               408 r6 <- Undefined
               409 r7 <- Undefined
               410 r8 <- Undefined
               411 r9 <- Undefined
               412 r10 <- Undefined
               413 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b4f8:
               414 r45 <- Const { value: 1, size: 4 }
               415 r46 <- Part { src: r14, offset: 4, size: 4 }
               416 r14 <- Concat { lo: r45, hi: r46 }
0x50b4fd:
               417 r46 <- Ancestral(AncestralName("arg0"))
               418 r46 <- Void
               419 r46 <- Get(r14)
               420 r46 <- Part { src: r46, offset: 0, size: 4 }
               421 r47 <- CArg { value: r45, next_arg: None }
               422 r48: TypeID(107478v1) <- Const { value: 4200816, size: 8 }
               423 r47 <- Call { callee: r48, first_arg: Some(r47) }
               424 r2 <- Undefined
               425 r3 <- Undefined
               426 r4 <- Undefined
               427 r5 <- Undefined
               428 r6 <- Undefined
               429 r7 <- Undefined
               430 r8 <- Undefined
               431 r9 <- Undefined
               432 r10 <- Undefined
0x50b508:
               433 r45 <- Const { value: 1, size: 4 }
               434 r46 <- Part { src: r26, offset: 4, size: 4 }
               435 r26 <- Concat { lo: r45, hi: r46 }
0x50b50e:
               436 r45 <- Control(Jmp(177))
0x50b513:
               437 r45 <- Const { value: 7161960, size: 4 }
               438 r46 <- Part { src: r14, offset: 4, size: 4 }
               439 r14 <- Concat { lo: r45, hi: r46 }
0x50b518:
               440 r15 <- Get(r25)
0x50b51b:
               441 r46 <- Ancestral(AncestralName("arg0"))
               442 r46 <- Void
               443 r46 <- Get(r14)
               444 r47 <- CArg { value: r45, next_arg: None }
               445 r48: TypeID(107438v1) <- Const { value: 4198480, size: 8 }
               446 r47 <- Call { callee: r48, first_arg: Some(r47) }
               447 r2 <- Undefined
               448 r3 <- Undefined
               449 r4 <- Undefined
               450 r5 <- Undefined
               451 r6 <- Undefined
               452 r7 <- Undefined
               453 r8 <- Undefined
               454 r9 <- Undefined
               455 r10 <- Undefined
               456 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b520:
               457 r45 <- Const { value: 1, size: 4 }
               458 r46 <- Part { src: r14, offset: 4, size: 4 }
               459 r14 <- Concat { lo: r45, hi: r46 }
0x50b525:
               460 r46 <- Ancestral(AncestralName("arg0"))
               461 r46 <- Void
               462 r46 <- Get(r14)
               463 r46 <- Part { src: r46, offset: 0, size: 4 }
               464 r47 <- CArg { value: r45, next_arg: None }
               465 r48: TypeID(107478v1) <- Const { value: 4200816, size: 8 }
               466 r47 <- Call { callee: r48, first_arg: Some(r47) }
               467 r2 <- Undefined
               468 r3 <- Undefined
               469 r4 <- Undefined
               470 r5 <- Undefined
               471 r6 <- Undefined
               472 r7 <- Undefined
               473 r8 <- Undefined
               474 r9 <- Undefined
               475 r10 <- Undefined
0x50b52a:
               476 r45 <- Const { value: 6995992, size: 4 }
               477 r46 <- Part { src: r14, offset: 4, size: 4 }
               478 r14 <- Concat { lo: r45, hi: r46 }
0x50b52f:
               479 r46: TypeID(112370v1) <- Const { value: 4201744, size: 8 }
               480 r45 <- Call { callee: r46, first_arg: None }
               481 r2 <- Undefined
               482 r3 <- Undefined
               483 r4 <- Undefined
               484 r5 <- Undefined
               485 r6 <- Undefined
               486 r7 <- Undefined
               487 r8 <- Undefined
               488 r9 <- Undefined
               489 r10 <- Undefined
0x50b534:
               490 r45 <- Const { value: 1, size: 4 }
               491 r46 <- Part { src: r14, offset: 4, size: 4 }
               492 r14 <- Concat { lo: r45, hi: r46 }
0x50b539:
               493 r46 <- Ancestral(AncestralName("arg0"))
               494 r46 <- Void
               495 r46 <- Get(r14)
               496 r46 <- Part { src: r46, offset: 0, size: 4 }
               497 r47 <- CArg { value: r45, next_arg: None }
               498 r48: TypeID(107478v1) <- Const { value: 4200816, size: 8 }
               499 r47 <- Call { callee: r48, first_arg: Some(r47) }
               500 r2 <- Undefined
               501 r3 <- Undefined
               502 r4 <- Undefined
               503 r5 <- Undefined
               504 r6 <- Undefined
               505 r7 <- Undefined
               506 r8 <- Undefined
               507 r9 <- Undefined
               508 r10 <- Undefined
0x50b53e:
               509 r45 <- Const { value: 7162016, size: 4 }
               510 r46 <- Part { src: r14, offset: 4, size: 4 }
               511 r14 <- Concat { lo: r45, hi: r46 }
0x50b543:
               512 r19 <- Get(r27)
0x50b546:
               513 r15 <- Get(r25)
0x50b549:
               514 r46 <- Part { src: r16, offset: 0, size: 4 }
               515 r48 <- Part { src: r16, offset: 0, size: 4 }
               516 r46 <- Arith(BitXor, r46, r48)
               517 r49 <- Part { src: r16, offset: 4, size: 4 }
               518 r16 <- Concat { lo: r46, hi: r49 }
               519 r10 <- False
               520 r2 <- False
               521 r6 <- SignOf(r46)
               522 r5 <- IsZero(r46)
               523 r50 <- Part { src: r46, offset: 0, size: 1 }
               524 r3 <- Parity(r50)
0x50b54b:
               525 r46 <- Ancestral(AncestralName("arg0"))
               526 r46 <- Void
               527 r46 <- Get(r14)
               528 r47 <- CArg { value: r45, next_arg: None }
               529 r48: TypeID(107438v1) <- Const { value: 4198480, size: 8 }
               530 r47 <- Call { callee: r48, first_arg: Some(r47) }
               531 r2 <- Undefined
               532 r3 <- Undefined
               533 r4 <- Undefined
               534 r5 <- Undefined
               535 r6 <- Undefined
               536 r7 <- Undefined
               537 r8 <- Undefined
               538 r9 <- Undefined
               539 r10 <- Undefined
               540 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b550:
               541 r45 <- Const { value: 1, size: 4 }
               542 r46 <- Part { src: r14, offset: 4, size: 4 }
               543 r14 <- Concat { lo: r45, hi: r46 }
0x50b555:
               544 r46 <- Ancestral(AncestralName("arg0"))
               545 r46 <- Void
               546 r46 <- Get(r14)
               547 r46 <- Part { src: r46, offset: 0, size: 4 }
               548 r47 <- CArg { value: r45, next_arg: None }
               549 r48: TypeID(107478v1) <- Const { value: 4200816, size: 8 }
               550 r47 <- Call { callee: r48, first_arg: Some(r47) }
               551 r2 <- Undefined
               552 r3 <- Undefined
               553 r4 <- Undefined
               554 r5 <- Undefined
               555 r6 <- Undefined
               556 r7 <- Undefined
               557 r8 <- Undefined
               558 r9 <- Undefined
               559 r10 <- Undefined
0x50b55a:
               560 r18 <- Get(r15)
0x50b55d:
               561 r19 <- Get(r27)
0x50b560:
               562 r15 <- Get(r25)
0x50b563:
               563 r45 <- Const { value: 7162072, size: 4 }
               564 r46 <- Part { src: r14, offset: 4, size: 4 }
               565 r14 <- Concat { lo: r45, hi: r46 }
0x50b568:
               566 r46 <- Part { src: r16, offset: 0, size: 4 }
               567 r48 <- Part { src: r16, offset: 0, size: 4 }
               568 r46 <- Arith(BitXor, r46, r48)
               569 r49 <- Part { src: r16, offset: 4, size: 4 }
               570 r16 <- Concat { lo: r46, hi: r49 }
               571 r10 <- False
               572 r2 <- False
               573 r6 <- SignOf(r46)
               574 r5 <- IsZero(r46)
               575 r50 <- Part { src: r46, offset: 0, size: 1 }
               576 r3 <- Parity(r50)
0x50b56a:
               577 r46 <- Ancestral(AncestralName("arg0"))
               578 r46 <- Void
               579 r46 <- Get(r14)
               580 r47 <- CArg { value: r45, next_arg: None }
               581 r48: TypeID(107438v1) <- Const { value: 4198480, size: 8 }
               582 r47 <- Call { callee: r48, first_arg: Some(r47) }
               583 r2 <- Undefined
               584 r3 <- Undefined
               585 r4 <- Undefined
               586 r5 <- Undefined
               587 r6 <- Undefined
               588 r7 <- Undefined
               589 r8 <- Undefined
               590 r9 <- Undefined
               591 r10 <- Undefined
               592 r16 <- Part { src: r47, offset: 0, size: 8 }
0x50b56f:
               593 r45 <- Const { value: 7162168, size: 4 }
               594 r46 <- Part { src: r14, offset: 4, size: 4 }
               595 r14 <- Concat { lo: r45, hi: r46 }
0x50b574:
               596 r46: TypeID(112370v1) <- Const { value: 4201744, size: 8 }
               597 r45 <- Call { callee: r46, first_arg: None }
               598 r2 <- Undefined
               599 r3 <- Undefined
               600 r4 <- Undefined
               601 r5 <- Undefined
               602 r6 <- Undefined
               603 r7 <- Undefined
               604 r8 <- Undefined
               605 r9 <- Undefined
               606 r10 <- Undefined
0x50b579:
               607 r45 <- Const { value: 1, size: 4 }
               608 r46 <- Part { src: r14, offset: 4, size: 4 }
               609 r14 <- Concat { lo: r45, hi: r46 }
0x50b57e:
               610 r46 <- Ancestral(AncestralName("arg0"))
               611 r46 <- Void
               612 r46 <- Get(r14)
               613 r46 <- Part { src: r46, offset: 0, size: 4 }
               614 r47 <- CArg { value: r45, next_arg: None }
               615 r48: TypeID(107478v1) <- Const { value: 4200816, size: 8 }
               616 r47 <- Call { callee: r48, first_arg: Some(r47) }
               617 r2 <- Undefined
               618 r3 <- Undefined
               619 r4 <- Undefined
               620 r5 <- Undefined
               621 r6 <- Undefined
               622 r7 <- Undefined
               623 r8 <- Undefined
               624 r9 <- Undefined
               625 r10 <- Undefined


ssa pre-xform:
ssa program  661 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r12 <- Ancestral(AncestralName("RIP"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r23 <- Ancestral(AncestralName("R12"))
         r24 <- Ancestral(AncestralName("R13"))
  (  2)  r25 <- Ancestral(AncestralName("R14"))
         r26 <- Ancestral(AncestralName("R15"))
         r64 <- Ancestral(AncestralName("arg0"))
         r68 <- Ancestral(AncestralName("arg2"))
         r69 <- Widen { reg: r68, target_size: 8, sign: false }
  (  6)  r71 <- ArithK(Add, r11, -8)
         r72 <- StoreMem { addr: r71, value: r10 }
  (  2)  r74 <- ArithK(Add, r71, -8)
         r75 <- StoreMem { addr: r74, value: r26 }
  (  2)  r76 <- ArithK(Add, r74, -8)
         r77 <- StoreMem { addr: r76, value: r25 }
  (  2)  r78 <- ArithK(Add, r76, -8)
         r79 <- StoreMem { addr: r78, value: r24 }
  (  2)  r81 <- ArithK(Add, r78, -8)
         r82 <- StoreMem { addr: r81, value: r23 }
         r83 <- Part { src: r69, offset: 0, size: 4 }
         r84 <- Part { src: r23, offset: 4, size: 4 }
  (  2)  r85 <- Concat { lo: r83, hi: r84 }
         r86 <- ArithK(Add, r81, -8)
         r87 <- StoreMem { addr: r86, value: r16 }
         r101 <- CArg { value: r64, next_arg: None }
         r102: ftello <TypeID(207374v1)> <- Const { value: 4201696, size: 8 }
  (  2)  r103 <- Call { callee: r102, first_arg: Some(r101) }
         r113 <- Part { src: r103, offset: 0, size: 8 }
         r118 <- Const { value: 1024, size: 4 }
         r121 <- Const { value: 7968376, size: 8 }
         r122 <- Arith(Add, r121, r12)
         r123 <- StoreMem { addr: r122, value: r113 }
         r124 <- CArg { value: r103, next_arg: None }
         r125 <- CArg { value: r123, next_arg: Some(r124) }
         r126 <- CArg { value: r118, next_arg: Some(r125) }
         r127: fgets <TypeID(170350v1)> <- Const { value: 4201776, size: 8 }
         r128 <- Call { callee: r127, first_arg: Some(r126) }
  (  2)  r138 <- Part { src: r128, offset: 0, size: 8 }
  (  3)  r139 <- Arith(BitAnd, r138, r138)
         r141 <- IsZero(r139)
         r146 <- SetJumpCondition(r141)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r148 <- Const { value: 7967296, size: 8 }
         r149 <- Arith(Add, r148, r12)
  (  2)  r150 <- LoadMem { addr: r149, size: 8 }
         r152 <- Const { value: 1, size: 4 }
         r153 <- Part { src: r25, offset: 4, size: 4 }
  (  2)  r154 <- Concat { lo: r152, hi: r153 }
  (  2)  r155 <- Arith(BitAnd, r150, r150)
         r157 <- IsZero(r155)
         r162 <- SetJumpCondition(r157)
         r644 <- Upsilon { value: r139, phi_ref: r626 }
         r645 <- Upsilon { value: r154, phi_ref: r627 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) }.
         r164 <- Const { value: -1072, size: 8 }
         r165 <- Arith(Add, r164, r71)
         r166 <- LoadMem { addr: r165, size: 4 }
  (  2)  r167 <- Const { value: 978539555, size: 4 }
         r168 <- Arith(Sub, r166, r167)
         r172 <- IsZero(r168)
         r175 <- SetJumpCondition(r172)
         r646 <- Upsilon { value: r139, phi_ref: r626 }
         r647 <- Upsilon { value: r154, phi_ref: r627 }
.B4:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) }.
         r212: __errno_location <TypeID(164594v1)> <- Const { value: 4198464, size: 8 }
         r213 <- Call { callee: r212, first_arg: None }
  (  3)  r223 <- Part { src: r213, offset: 0, size: 8 }
  (  2)  r233 <- Const { value: 0, size: 4 }
         r234 <- Const { value: 0, size: 8 }
         r235 <- Arith(Add, r234, r223)
         r236 <- StoreMem { addr: r235, value: r233 }
         r238 <- CArg { value: r167, next_arg: None }
         r239 <- CArg { value: r236, next_arg: Some(r238) }
         r240 <- CArg { value: r233, next_arg: Some(r239) }
         r241: strtol <TypeID(170362v1)> <- Const { value: 4202480, size: 8 }
         r242 <- Call { callee: r241, first_arg: Some(r240) }
  (  2)  r252 <- Part { src: r242, offset: 0, size: 8 }
         r253 <- Const { value: 0, size: 8 }
         r254 <- Arith(Add, r253, r223)
         r255 <- LoadMem { addr: r254, size: 4 }
         r256 <- Part { src: r223, offset: 4, size: 4 }
  (  4)  r257 <- Concat { lo: r255, hi: r256 }
         r258 <- Part { src: r257, offset: 0, size: 4 }
         r259 <- Part { src: r257, offset: 0, size: 4 }
         r260 <- Arith(BitAnd, r258, r259)
         r262 <- IsZero(r260)
         r267 <- Not(r262)
         r268 <- SetJumpCondition(r267)
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) }.
         r270 <- Const { value: -1080, size: 8 }
         r271 <- Arith(Add, r270, r71)
         r272 <- LoadMem { addr: r271, size: 8 }
         r274 <- Const { value: 0, size: 8 }
         r275 <- Arith(Add, r274, r272)
         r276 <- LoadMem { addr: r275, size: 1 }
         r277 <- Const { value: 13, size: 1 }
         r278 <- Arith(Sub, r276, r277)
         r282 <- IsZero(r278)
         r285 <- Not(r282)
         r286 <- SetJumpCondition(r285)
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) }.
  (  2)  r288 <- Arith(Sub, r155, r252)
         r289 <- OverflowOf(r288)
         r291 <- SignOf(r288)
         r295 <- Cmp(EQ, r291, r289)
         r296 <- SetJumpCondition(r295)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) }.
         r298 <- Const { value: 7968376, size: 8 }
         r299 <- Arith(Add, r298, r12)
  (  2)  r300 <- LoadMem { addr: r299, size: 8 }
  (  2)  r302 <- Arith(BitAnd, r300, r300)
         r304 <- IsZero(r302)
         r309 <- SetJumpCondition(r304)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) }.
         r311 <- Part { src: r85, offset: 0, size: 4 }
         r312 <- Part { src: r85, offset: 0, size: 4 }
         r313 <- Arith(BitAnd, r311, r312)
         r315 <- IsZero(r313)
         r320 <- SetJumpCondition(r315)
         r321 <- Control(JmpIf(560))
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) }.
         r323 <- Const { value: -1096, size: 8 }
         r324 <- Arith(Add, r323, r71)
         r325 <- StoreMem { addr: r324, value: r302 }
         r329 <- CArg { value: r321, next_arg: None }
         r330: fileno <TypeID(169797v1)> <- Const { value: 4200480, size: 8 }
         r331 <- Call { callee: r330, first_arg: Some(r329) }
         r341 <- Part { src: r331, offset: 0, size: 8 }
         r342 <- Const { value: -1096, size: 8 }
         r343 <- Arith(Add, r342, r71)
         r344 <- LoadMem { addr: r343, size: 8 }
         r346 <- Part { src: r341, offset: 0, size: 4 }
         r356 <- CArg { value: r346, next_arg: None }
         r357 <- CArg { value: r344, next_arg: Some(r356) }
         r358: ftruncate <TypeID(185389v1)> <- Const { value: 4199184, size: 8 }
         r359 <- Call { callee: r358, first_arg: Some(r357) }
  (  2)  r369 <- Part { src: r359, offset: 0, size: 8 }
         r370 <- Part { src: r369, offset: 0, size: 4 }
         r371 <- Const { value: -1, size: 4 }
         r372 <- Arith(Sub, r370, r371)
         r376 <- IsZero(r372)
         r379 <- Not(r376)
         r380 <- SetJumpCondition(r379)
         r659 <- Upsilon { value: r369, phi_ref: r626 }
         r660 <- Upsilon { value: r257, phi_ref: r627 }
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r382 <- Const { value: 7162352, size: 4 }
         r401 <- CArg { value: r382, next_arg: None }
         r402: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r403 <- Call { callee: r402, first_arg: Some(r401) }
         r414 <- Const { value: 1, size: 4 }
         r421 <- CArg { value: r414, next_arg: None }
         r422: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r423 <- Call { callee: r422, first_arg: Some(r421) }
.B11:    ;; preds:B6,B10  → Always(Block(BlockID(3))).
         r433 <- Const { value: 1, size: 4 }
         r434 <- Part { src: r257, offset: 4, size: 4 }
         r435 <- Concat { lo: r433, hi: r434 }
         r650 <- Upsilon { value: r252, phi_ref: r626 }
         r651 <- Upsilon { value: r435, phi_ref: r627 }
.B3:    ;; preds:B1,B2,B9,B11  → Always(Return).
         r627 <- Phi
         r626 <- Phi
         r186 <- Part { src: r627, offset: 0, size: 4 }
         r187 <- Part { src: r626, offset: 4, size: 4 }
         r188 <- Concat { lo: r186, hi: r187 }
         r208 <- Concat { lo: r207, hi: r188 }
         r209 <- Part { src: r208, offset: 0, size: 4 }
         r210 <- SetReturnValue(r209)
.B12:    ;; preds:B0  → Always(Block(BlockID(13))).
         r437 <- Const { value: 7161960, size: 4 }
         r444 <- CArg { value: r437, next_arg: None }
         r445: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r446 <- Call { callee: r445, first_arg: Some(r444) }
         r457 <- Const { value: 1, size: 4 }
         r464 <- CArg { value: r457, next_arg: None }
         r465: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r466 <- Call { callee: r465, first_arg: Some(r464) }
.B13:    ;; preds:B4,B5,B12  → Always(Block(BlockID(14))).
         r479: __builtin_puts <TypeID(112370v1)> <- Const { value: 4201744, size: 8 }
         r480 <- Call { callee: r479, first_arg: None }
         r490 <- Const { value: 1, size: 4 }
         r497 <- CArg { value: r490, next_arg: None }
         r498: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r499 <- Call { callee: r498, first_arg: Some(r497) }
.B14:    ;; preds:B7,B13  → Always(Block(BlockID(15))).
         r509 <- Const { value: 7162016, size: 4 }
         r528 <- CArg { value: r509, next_arg: None }
         r529: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r530 <- Call { callee: r529, first_arg: Some(r528) }
         r541 <- Const { value: 1, size: 4 }
         r548 <- CArg { value: r541, next_arg: None }
         r549: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r550 <- Call { callee: r549, first_arg: Some(r548) }
.B15:    ;; preds:B8,B14  → Always(Undefined).
         r563 <- Const { value: 7162072, size: 4 }
         r580 <- CArg { value: r563, next_arg: None }
         r581: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r582 <- Call { callee: r581, first_arg: Some(r580) }
         r596: __builtin_puts <TypeID(112370v1)> <- Const { value: 4201744, size: 8 }
         r597 <- Call { callee: r596, first_arg: None }
         r607 <- Const { value: 1, size: 4 }
         r614 <- CArg { value: r607, next_arg: None }
         r615: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r616 <- Call { callee: r615, first_arg: Some(r614) }


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) } [r10, r11, r12, r16, r23, r24, r25, r26, r64, r68, r69, r71, r72, r74, r75, r76, r77, r78, r79, r81, r82, r83, r84, r85, r86, r87, r101, r102, r103, r113, r118, r121, r122, r123, r124, r125, r126, r127, r128, r138, r139, r141, r146]
  BlockID(1) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) } [r148, r149, r150, r152, r153, r154, r155, r157, r162, r644, r645]
  BlockID(2) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) } [r164, r165, r166, r167, r168, r172, r175, r646, r647]
  BlockID(3) -> Always(Return) [r627, r626, r186, r187, r188, r207, r208, r209, r210]
  BlockID(4) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) } [r212, r213, r223, r233, r234, r235, r236, r238, r239, r240, r241, r242, r252, r253, r254, r255, r256, r257, r258, r259, r260, r262, r267, r268]
  BlockID(5) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) } [r270, r271, r272, r274, r275, r276, r277, r278, r282, r285, r286]
  BlockID(6) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) } [r288, r289, r291, r295, r296]
  BlockID(7) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) } [r298, r299, r300, r302, r304, r309]
  BlockID(8) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) } [r311, r312, r313, r315, r320, r321]
  BlockID(9) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) } [r323, r324, r325, r329, r330, r331, r341, r342, r343, r344, r346, r356, r357, r358, r359, r369, r370, r371, r372, r376, r379, r380, r659, r660]
  BlockID(10) -> Always(Block(BlockID(11))) [r382, r401, r402, r403, r414, r421, r422, r423]
  BlockID(11) -> Always(Block(BlockID(3))) [r433, r434, r435, r650, r651]
  BlockID(12) -> Always(Block(BlockID(13))) [r437, r444, r445, r446, r457, r464, r465, r466]
  BlockID(13) -> Always(Block(BlockID(14))) [r479, r480, r490, r497, r498, r499]
  BlockID(14) -> Always(Block(BlockID(15))) [r509, r528, r529, r530, r541, r548, r549, r550]
  BlockID(15) -> Always(Undefined) [r563, r580, r581, r582, r596, r597, r607, r614, r615, r616]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(4)
    |  |  |  |  BlockID(5)
    |  |  |  |  |  BlockID(6)
    |  |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  BlockID(11)
    |  |  BlockID(3)
    |  BlockID(12)
    |  BlockID(13)
    |  BlockID(14)
    |  BlockID(15)

ssa post-xform:
ssa program  666 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(12)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
  (  9)  r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r12 <- Ancestral(AncestralName("RIP"))
         r16 <- Ancestral(AncestralName("RBX"))
         r23 <- Ancestral(AncestralName("R12"))
         r24 <- Ancestral(AncestralName("R13"))
  (  2)  r25 <- Ancestral(AncestralName("R14"))
         r26 <- Ancestral(AncestralName("R15"))
         r64 <- Ancestral(AncestralName("arg0"))
         r68 <- Ancestral(AncestralName("arg2"))
         r71 <- ArithK(Add, r11, -8)
         r72 <- StoreMem { addr: r71, value: r10 }
         r74 <- ArithK(Add, r11, -16)
         r75 <- StoreMem { addr: r74, value: r26 }
         r76 <- ArithK(Add, r11, -24)
         r77 <- StoreMem { addr: r76, value: r25 }
         r78 <- ArithK(Add, r11, -32)
         r79 <- StoreMem { addr: r78, value: r24 }
         r81 <- ArithK(Add, r11, -40)
         r82 <- StoreMem { addr: r81, value: r23 }
         r86 <- ArithK(Add, r11, -48)
         r87 <- StoreMem { addr: r86, value: r16 }
         r101 <- CArg { value: r64, next_arg: None }
         r102: ftello <TypeID(207374v1)> <- Const { value: 4201696, size: 8 }
  (  2)  r103 <- Call { callee: r102, first_arg: Some(r101) }
         r118 <- Const { value: 1024, size: 4 }
         r122 <- ArithK(Add, r12, 7968376)
         r123 <- StoreMem { addr: r122, value: r103 }
         r124 <- CArg { value: r103, next_arg: None }
         r125 <- CArg { value: r123, next_arg: Some(r124) }
         r126 <- CArg { value: r118, next_arg: Some(r125) }
         r127: fgets <TypeID(170350v1)> <- Const { value: 4201776, size: 8 }
         r128 <- Call { callee: r127, first_arg: Some(r126) }
         r141 <- IsZero(r128)
         r146 <- SetJumpCondition(r141)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r149 <- ArithK(Add, r12, 7967296)
  (  2)  r150 <- LoadMem { addr: r149, size: 8 }
         r152 <- Const { value: 1, size: 4 }
         r153 <- Part { src: r25, offset: 4, size: 4 }
  (  2)  r154 <- Concat { lo: r152, hi: r153 }
         r157 <- IsZero(r150)
         r162 <- SetJumpCondition(r157)
         r645 <- Upsilon { value: r154, phi_ref: r627 }
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(3)) }.
         r165 <- ArithK(Add, r11, -1080)
         r166 <- LoadMem { addr: r165, size: 4 }
         r167 <- Const { value: 978539555, size: 4 }
         r168 <- ArithK(Add, r166, -978539555)
         r172 <- IsZero(r168)
         r175 <- SetJumpCondition(r172)
         r647 <- Upsilon { value: r154, phi_ref: r627 }
.B4:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(5)) }.
         r212: __errno_location <TypeID(164594v1)> <- Const { value: 4198464, size: 8 }
  (  4)  r213 <- Call { callee: r212, first_arg: None }
  (  2)  r233 <- Const { value: 0, size: 4 }
         r236 <- StoreMem { addr: r213, value: r233 }
         r238 <- CArg { value: r167, next_arg: None }
         r239 <- CArg { value: r236, next_arg: Some(r238) }
         r240 <- CArg { value: r233, next_arg: Some(r239) }
         r241: strtol <TypeID(170362v1)> <- Const { value: 4202480, size: 8 }
         r242 <- Call { callee: r241, first_arg: Some(r240) }
  (  2)  r255 <- LoadMem { addr: r213, size: 4 }
         r256 <- Part { src: r213, offset: 4, size: 4 }
         r257 <- Concat { lo: r255, hi: r256 }
         r262 <- IsZero(r255)
         r267 <- Not(r262)
         r268 <- SetJumpCondition(r267)
.B5:    ;; preds:B4  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(6)) }.
         r271 <- ArithK(Add, r11, -1088)
         r272 <- LoadMem { addr: r271, size: 8 }
         r276 <- LoadMem { addr: r272, size: 1 }
         r278 <- ArithK(Add, r276, -13)
         r282 <- IsZero(r278)
         r285 <- Not(r282)
         r286 <- SetJumpCondition(r285)
.B6:    ;; preds:B5  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(7)) }.
  (  2)  r288 <- Arith(Sub, r150, r242)
         r289 <- OverflowOf(r288)
         r291 <- SignOf(r288)
         r295 <- Cmp(EQ, r291, r289)
         r296 <- SetJumpCondition(r295)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(8)) }.
         r299 <- ArithK(Add, r12, 7968376)
  (  3)  r300 <- LoadMem { addr: r299, size: 8 }
         r304 <- IsZero(r300)
         r309 <- SetJumpCondition(r304)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(9)) }.
         r315 <- IsZero(r68)
         r320 <- SetJumpCondition(r315)
         r321 <- Control(JmpIf(560))
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(10)) }.
         r324 <- ArithK(Add, r11, -1104)
         r325 <- StoreMem { addr: r324, value: r300 }
         r329 <- CArg { value: r321, next_arg: None }
         r330: fileno <TypeID(169797v1)> <- Const { value: 4200480, size: 8 }
         r331 <- Call { callee: r330, first_arg: Some(r329) }
         r346 <- Part { src: r331, offset: 0, size: 4 }
         r356 <- CArg { value: r346, next_arg: None }
         r357 <- CArg { value: r300, next_arg: Some(r356) }
         r358: ftruncate <TypeID(185389v1)> <- Const { value: 4199184, size: 8 }
         r359 <- Call { callee: r358, first_arg: Some(r357) }
         r370 <- Part { src: r359, offset: 0, size: 4 }
         r372 <- ArithK(Add, r370, 1)
         r376 <- IsZero(r372)
         r379 <- Not(r376)
         r380 <- SetJumpCondition(r379)
         r660 <- Upsilon { value: r257, phi_ref: r627 }
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r382 <- Const { value: 7162352, size: 4 }
         r401 <- CArg { value: r382, next_arg: None }
         r402: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r403 <- Call { callee: r402, first_arg: Some(r401) }
         r414 <- Const { value: 1, size: 4 }
         r421 <- CArg { value: r414, next_arg: None }
         r422: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r423 <- Call { callee: r422, first_arg: Some(r421) }
.B11:    ;; preds:B6,B10  → Always(Block(BlockID(3))).
         r433 <- Const { value: 1, size: 4 }
         r434 <- Part { src: r213, offset: 4, size: 4 }
         r435 <- Concat { lo: r433, hi: r434 }
         r651 <- Upsilon { value: r435, phi_ref: r627 }
.B3:    ;; preds:B1,B2,B9,B11  → Always(Return).
         r627 <- Phi
         r209 <- Part { src: r627, offset: 0, size: 4 }
         r210 <- SetReturnValue(r209)
.B12:    ;; preds:B0  → Always(Block(BlockID(13))).
         r437 <- Const { value: 7161960, size: 4 }
         r444 <- CArg { value: r437, next_arg: None }
         r445: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r446 <- Call { callee: r445, first_arg: Some(r444) }
         r457 <- Const { value: 1, size: 4 }
         r464 <- CArg { value: r457, next_arg: None }
         r465: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r466 <- Call { callee: r465, first_arg: Some(r464) }
.B13:    ;; preds:B4,B5,B12  → Always(Block(BlockID(14))).
         r479: __builtin_puts <TypeID(112370v1)> <- Const { value: 4201744, size: 8 }
         r480 <- Call { callee: r479, first_arg: None }
         r490 <- Const { value: 1, size: 4 }
         r497 <- CArg { value: r490, next_arg: None }
         r498: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r499 <- Call { callee: r498, first_arg: Some(r497) }
.B14:    ;; preds:B7,B13  → Always(Block(BlockID(15))).
         r509 <- Const { value: 7162016, size: 4 }
         r528 <- CArg { value: r509, next_arg: None }
         r529: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r530 <- Call { callee: r529, first_arg: Some(r528) }
         r541 <- Const { value: 1, size: 4 }
         r548 <- CArg { value: r541, next_arg: None }
         r549: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r550 <- Call { callee: r549, first_arg: Some(r548) }
.B15:    ;; preds:B8,B14  → Always(Undefined).
         r563 <- Const { value: 7162072, size: 4 }
         r580 <- CArg { value: r563, next_arg: None }
         r581: printf <TypeID(163985v1)> <- Const { value: 4198480, size: 8 }
         r582 <- Call { callee: r581, first_arg: Some(r580) }
         r596: __builtin_puts <TypeID(112370v1)> <- Const { value: 4201744, size: 8 }
         r597 <- Call { callee: r596, first_arg: None }
         r607 <- Const { value: 1, size: 4 }
         r614 <- CArg { value: r607, next_arg: None }
         r615: exit <TypeID(170484v1)> <- Const { value: 4200816, size: 8 }
         r616 <- Call { callee: r615, first_arg: Some(r614) }



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R15;
  [pre:RSP - 24]:* := pre:R14;
  [pre:RSP - 32]:* := pre:R13;
  [pre:RSP - 40]:* := pre:R12;
  [pre:RSP - 48]:* := pre:RBX;
  let r103: Bytes(8) = ftello(pre:arg0);
  [pre:RIP + 7968376]:* := r103;
  fgets(1024,
        ([pre:RIP + 7968376]:* := r103),
        r103);
  ;
  if IsZero (fgets(1024,
                   ([pre:RIP + 7968376]:* := r103),
                   r103)) {
    printf(7161960);
    exit(1);
    goto T13
  }
  let r150: Bytes(8) = [pre:RIP + 7967296]:8;
  let r154: Bytes(8) = pre:R14[8 .. 4] ++ 1;
  ;
  r627 := pre:R14[8 .. 4] ++ 1;
  if IsZero (r150) {
    goto T3
  }
  ;
  r627 := pre:R14[8 .. 4] ++ 1;
  if IsZero ([pre:RSP - 1080]:4 - 978539555) {
    let r213: Bytes(8) = __errno_location();
    [r213]:* := 0;
    strtol(0,
           ([r213]:* := 0),
           978539555);
    let r255: Bytes(4) = [r213]:4;
    ;
    if ! IsZero (r255) {
      goto T13
    }
    ;
    if ! IsZero ([[pre:RSP - 1088]:8]:1 - 13) {
      goto T13
    }
    let r288: Bytes(8) = r150 - strtol(0,
                                       ([r213]:* := 0),
                                       978539555);
    ;
    if SignOf (r288) EQ OverflowOf (r288) {
      goto T11
    }
    let r300: Bytes(8) = [pre:RIP + 7968376]:8;
    ;
    if IsZero (r300) {
      goto T14
    }
    ;
    if IsZero (pre:arg2) {
      goto T15
    }
    [pre:RSP - 1104]:* := r300;
    fileno((/* warning: unexpected Control */ JmpIf(560)));
    ftruncate(r300,
              (fileno((/* warning: unexpected Control */ JmpIf(560))))[4 .. 0]);
    ;
    r627 := r213[8 .. 4] ++ r255;
    if ! IsZero ((ftruncate(r300,
                            (fileno((/* warning: unexpected Control */ JmpIf(560))))[4 .. 0]))[4 .. 0] + 1) {
      goto T3
    }
    printf(7162352);
    exit(1);
    goto T11
    T11: {
      r627 := r213[8 .. 4] ++ 1;
      goto T3
    }
  
  }
  goto T3
  T3: {
    let mut r627: Bytes(8);
    ;
    return r627[4 .. 0]
  }
  
  T13: {
    __builtin_puts();
    exit(1);
    goto T14
  }
  
  T14: {
    printf(7162016);
    exit(1);
    goto T15
  }
  
  T15: {
    printf(7162072);
    __builtin_puts();
    exit(1);
    goto undefined /* warning: due to decompiler bug or limitation */
  }

}
