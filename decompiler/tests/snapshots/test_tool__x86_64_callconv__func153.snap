---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  82 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(8) }
   43 r14 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), reg_type: Bytes(8) }
   45 r15 <- Get(r46)
   46 r47 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(8) }
   47 r19 <- Get(r47)
   48 r48 <- Ancestral { anc_name: AncestralName("arg3"), reg_type: Bytes(8) }
   49 r18 <- Get(r48)
   50 r49 <- Ancestral { anc_name: AncestralName("arg4"), reg_type: Bytes(8) }
   51 r20 <- Get(r49)
   52 r50 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(16) }
   53 r52 <- Part { src: r50, offset: 0, size: 8 }
   54 r51 <- ArithK(Add, r12, 8)
   55 r51 <- StoreMem { addr: r51, value: r52 }
   56 r52 <- Part { src: r50, offset: 8, size: 8 }
   57 r51 <- ArithK(Add, r12, 16)
   58 r51 <- StoreMem { addr: r51, value: r52 }
   59 r53 <- Ancestral { anc_name: AncestralName("arg6"), reg_type: Bytes(32) }
   60 r55 <- Part { src: r53, offset: 0, size: 8 }
   61 r54 <- ArithK(Add, r12, 24)
   62 r54 <- StoreMem { addr: r54, value: r55 }
   63 r55 <- Part { src: r53, offset: 8, size: 8 }
   64 r54 <- ArithK(Add, r12, 32)
   65 r54 <- StoreMem { addr: r54, value: r55 }
   66 r55 <- Part { src: r53, offset: 16, size: 8 }
   67 r54 <- ArithK(Add, r12, 40)
   68 r54 <- StoreMem { addr: r54, value: r55 }
   69 r55 <- Part { src: r53, offset: 24, size: 8 }
   70 r54 <- ArithK(Add, r12, 48)
   71 r54 <- StoreMem { addr: r54, value: r55 }
0x40142d:
   72 r46 <- Const { value: 51, size: 8 }
   73 r46 <- Arith(Add, r46, r12)
   74 r45 <- LoadMem { addr: r46, size: 1 }
   75 r47 <- Part { src: r16, offset: 1, size: 7 }
   76 r16 <- Concat { lo: r45, hi: r47 }
0x401431:
   77 r45 <- Void
   78 r45 <- Concat { lo: r45, hi: r16 }
   79 r45 <- Part { src: r45, offset: 0, size: 1 }
   80 r47 <- SetReturnValue(r45)
   81 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  82 instrs
.B0:    ;;  → Always(Return).
  (  7)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
         r14 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
  (  2)  r52 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(16) }
         r53 <- Part { src: r52, offset: 0, size: 8 }
         r54 <- ArithK(Add, r10, 8)
         r55 <- StoreMem { addr: r54, value: r53 }
         r56 <- Part { src: r52, offset: 8, size: 8 }
         r57 <- ArithK(Add, r10, 16)
         r58 <- StoreMem { addr: r57, value: r56 }
  (  4)  r59 <- Ancestral { anc_name: AncestralName("arg6"), reg_type: Bytes(32) }
         r60 <- Part { src: r59, offset: 0, size: 8 }
         r61 <- ArithK(Add, r10, 24)
         r62 <- StoreMem { addr: r61, value: r60 }
         r63 <- Part { src: r59, offset: 8, size: 8 }
         r64 <- ArithK(Add, r10, 32)
         r65 <- StoreMem { addr: r64, value: r63 }
         r66 <- Part { src: r59, offset: 16, size: 8 }
         r67 <- ArithK(Add, r10, 40)
         r68 <- StoreMem { addr: r67, value: r66 }
         r69 <- Part { src: r59, offset: 24, size: 8 }
         r70 <- ArithK(Add, r10, 48)
         r71 <- StoreMem { addr: r70, value: r69 }
         r72 <- Const { value: 51, size: 8 }
         r73 <- Arith(Add, r72, r10)
         r74 <- LoadMem { addr: r73, size: 1 }
         r75 <- Part { src: r14, offset: 1, size: 7 }
         r76 <- Concat { lo: r74, hi: r75 }
         r78 <- Concat { lo: r77, hi: r76 }
         r79 <- Part { src: r78, offset: 0, size: 1 }
         r80 <- SetReturnValue(r79)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r52, r53, r54, r55, r56, r57, r58, r59, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r83, r80]
  domtree:
    BlockID(0)

 --- ssa
ssa program  87 instrs
.B0:    ;;  → Always(Return).
  (  6)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  2)  r52 <- Ancestral { anc_name: AncestralName("arg5"), reg_type: Bytes(16) }
         r53 <- StructGetMember { struct_value: r52, name: "member0", size: 16 }
         r54 <- ArithK(Add, r10, 8)
         r55 <- StoreMem { addr: r54, value: r53 }
         r56 <- Part { src: r52, offset: 8, size: 8 }
         r57 <- ArithK(Add, r10, 16)
         r58 <- StoreMem { addr: r57, value: r56 }
  (  5)  r59 <- Ancestral { anc_name: AncestralName("arg6"), reg_type: Bytes(32) }
         r61 <- ArithK(Add, r10, 24)
         r62 <- StoreMem { addr: r61, value: r59 }
         r63 <- StructGetMember { struct_value: r59, name: "member1", size: 32 }
         r64 <- ArithK(Add, r10, 32)
         r65 <- StoreMem { addr: r64, value: r63 }
         r66 <- Part { src: r59, offset: 16, size: 8 }
         r67 <- ArithK(Add, r10, 40)
         r68 <- StoreMem { addr: r67, value: r66 }
         r69 <- Part { src: r59, offset: 24, size: 8 }
         r70 <- ArithK(Add, r10, 48)
         r71 <- StoreMem { addr: r70, value: r69 }
         r83 <- Part { src: r59, offset: 27, size: 1 }
         r80 <- SetReturnValue(r83)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg5.member0;
  [pre:RSP + 16]:* := pre:arg5[16 .. 8];
  [pre:RSP + 24]:* := pre:arg6;
  [pre:RSP + 32]:* := pre:arg6.member1;
  [pre:RSP + 40]:* := pre:arg6[24 .. 16];
  [pre:RSP + 48]:* := pre:arg6[32 .. 24];
  ;
  return pre:arg6[28 .. 27]
}
