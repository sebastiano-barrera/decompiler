---
source: decompiler/tests/test_tool.rs
expression: out
---
list_len 0x1120+28 (file 0x1120)
            1120: 31 c0                   xor eax,eax
            1122: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1127: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1130: ff c0                   inc eax
            1132: 48 8b 49 10             mov rcx,[rcx+10h]
            1136: 48 85 c9                test rcx,rcx
            1139: 75 f5                   jne short 0000000000001130h
            113b: c3                      ret

function type: "list_len" func (p point <TypeID(18v1)>) int <TypeID(16v1)>
0 warnings.


mil program = 
program  96 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r47: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
   45 r46: TypeID(2v1) <- ArithK(Add, r12, 8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r47 }
   47 r47: TypeID(2v1) <- Part { src: r45, offset: 8, size: 8 }
   48 r46: TypeID(2v1) <- ArithK(Add, r12, 16)
   49 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r47 }
   50 r47: TypeID(2v1) <- Part { src: r45, offset: 16, size: 8 }
   51 r46: TypeID(2v1) <- ArithK(Add, r12, 24)
   52 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r47 }
0x1120:
   53 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   54 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   55 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
   56 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
   57 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
   58 r10: TypeID(2v1) <- False
   59 r2: TypeID(2v1) <- False
   60 r6: TypeID(2v1) <- SignOf(r46)
   61 r5: TypeID(2v1) <- IsZero(r46)
   62 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   63 r3: TypeID(2v1) <- Parity(r50)
0x1122:
   64 r45: TypeID(2v1) <- Const { value: 8, size: 8 }
   65 r45: TypeID(2v1) <- Arith(Add, r45, r12)
   66 r18: TypeID(2v1) <- Get(r45)
0x1130:
   67 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   68 r46: TypeID(2v1) <- ArithK(Add, r46, 1)
   69 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
   70 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
   71 r10: TypeID(2v1) <- False
   72 r2: TypeID(2v1) <- False
   73 r6: TypeID(2v1) <- SignOf(r46)
   74 r5: TypeID(2v1) <- IsZero(r46)
   75 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   76 r3: TypeID(2v1) <- Parity(r48)
0x1132:
   77 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
   78 r46: TypeID(2v1) <- Arith(Add, r46, r18)
   79 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   80 r18: TypeID(2v1) <- Get(r45)
0x1136:
   81 r18: TypeID(2v1) <- Arith(BitAnd, r18, r18)
   82 r6: TypeID(2v1) <- SignOf(r18)
   83 r5: TypeID(2v1) <- IsZero(r18)
   84 r47: TypeID(2v1) <- Part { src: r18, offset: 0, size: 1 }
   85 r3: TypeID(2v1) <- Parity(r18)
   86 r2: TypeID(2v1) <- False
   87 r10: TypeID(2v1) <- False
0x1139:
   88 r45: TypeID(2v1) <- Not(r5)
   89 r46: TypeID(2v1) <- SetJumpCondition(r45)
   90 r46: TypeID(2v1) <- Control(JmpIf(67))
0x113b:
   91 r45: TypeID(2v1) <- Void
   92 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   93 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
   94 r47: TypeID(2v1) <- SetReturnValue(r45)
   95 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  102 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  3)  r43: ? <- Ancestral(AncestralName("arg0"))
         r44: ? <- Part { src: r43, offset: 0, size: 8 }
         r45: ? <- ArithK(Add, r11, 8)
         r46: ? <- StoreMem { addr: r45, value: r44 }
         r47: ? <- Part { src: r43, offset: 8, size: 8 }
         r48: ? <- ArithK(Add, r11, 16)
         r49: ? <- StoreMem { addr: r48, value: r47 }
         r50: ? <- Part { src: r43, offset: 16, size: 8 }
         r51: ? <- ArithK(Add, r11, 24)
         r52: ? <- StoreMem { addr: r51, value: r50 }
         r53: ? <- Part { src: r15, offset: 0, size: 4 }
         r54: ? <- Part { src: r15, offset: 0, size: 4 }
         r55: ? <- Arith(BitXor, r53, r54)
         r56: ? <- Part { src: r15, offset: 4, size: 4 }
         r57: ? <- Concat { lo: r55, hi: r56 }
         r64: ? <- Const { value: 8, size: 8 }
         r65: ? <- Arith(Add, r64, r11)
         r98: ? <- Upsilon { value: r57, phi_ref: r96 }
         r99: ? <- Upsilon { value: r65, phi_ref: r97 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r97: ? <- Phi
  (  2)  r96: ? <- Phi
         r67: ? <- Part { src: r96, offset: 0, size: 4 }
         r68: ? <- ArithK(Add, r67, 1)
         r69: ? <- Part { src: r96, offset: 4, size: 4 }
  (  2)  r70: ? <- Concat { lo: r68, hi: r69 }
         r77: ? <- Const { value: 16, size: 8 }
         r78: ? <- Arith(Add, r77, r97)
  (  2)  r79: ? <- LoadMem { addr: r78, size: 8 }
  (  2)  r81: ? <- Arith(BitAnd, r79, r79)
         r83: ? <- IsZero(r81)
         r88: ? <- Not(r83)
         r89: ? <- SetJumpCondition(r88)
         r100: ? <- Upsilon { value: r70, phi_ref: r96 }
         r101: ? <- Upsilon { value: r81, phi_ref: r97 }
.B2:    ;; preds:B1  → Always(Return).
         r92: ? <- Concat { lo: r91, hi: r70 }
         r93: ? <- Part { src: r92, offset: 0, size: 4 }
         r94: ? <- SetReturnValue(r93)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Block(BlockID(1))) [r11, r15, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r64, r65, r98, r99]
  BlockID(1) -> Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) } [r97, r96, r67, r68, r69, r70, r77, r78, r79, r81, r83, r88, r89, r100, r101]
  BlockID(2) -> Always(Return) [r91, r92, r93, r94]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)

ssa post-xform:
ssa program  102 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  3)  r43: ? <- Ancestral(AncestralName("arg0"))
         r44: ? <- Part { src: r43, offset: 0, size: 8 }
         r45: ? <- ArithK(Add, r11, 8)
         r46: ? <- StoreMem { addr: r45, value: r44 }
         r47: ? <- Part { src: r43, offset: 8, size: 8 }
         r48: ? <- ArithK(Add, r11, 16)
         r49: ? <- StoreMem { addr: r48, value: r47 }
         r50: ? <- Part { src: r43, offset: 16, size: 8 }
         r51: ? <- ArithK(Add, r11, 24)
         r52: ? <- StoreMem { addr: r51, value: r50 }
         r53: ? <- Part { src: r15, offset: 0, size: 4 }
         r54: ? <- Part { src: r15, offset: 0, size: 4 }
         r55: ? <- Arith(BitXor, r53, r54)
         r56: ? <- Part { src: r15, offset: 4, size: 4 }
         r57: ? <- Concat { lo: r55, hi: r56 }
         r65: ? <- ArithK(Add, r11, 8)
         r98: ? <- Upsilon { value: r57, phi_ref: r96 }
         r99: ? <- Upsilon { value: r65, phi_ref: r97 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r97: ? <- Phi
  (  2)  r96: ? <- Phi
         r67: ? <- Part { src: r96, offset: 0, size: 4 }
  (  2)  r68: ? <- ArithK(Add, r67, 1)
         r69: ? <- Part { src: r96, offset: 4, size: 4 }
         r70: ? <- Concat { lo: r68, hi: r69 }
         r78: ? <- ArithK(Add, r97, 16)
  (  2)  r79: ? <- LoadMem { addr: r78, size: 8 }
         r83: ? <- IsZero(r79)
         r88: ? <- Not(r83)
         r89: ? <- SetJumpCondition(r88)
         r100: ? <- Upsilon { value: r70, phi_ref: r96 }
         r101: ? <- Upsilon { value: r79, phi_ref: r97 }
.B2:    ;; preds:B1  → Always(Return).
         r94: ? <- SetReturnValue(r68)



T0: {
  [pre:RSP + 8]:* := pre:arg0[8 .. 0];
  [pre:RSP + 16]:* := pre:arg0[16 .. 8];
  [pre:RSP + 24]:* := pre:arg0[24 .. 16];
  r96 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] ^ pre:RAX[4 .. 0]);
  r97 := pre:RSP + 8;
  goto T1
  T1: {
    let mut r97: Bytes(8);
    let mut r96: Bytes(8);
    let r68: Bytes(4) = r96[4 .. 0] + 1;
    let r79: Bytes(8) = [r97 + 16]:8;
    ;
    r96 := r96[8 .. 4] ++ r68;
    r97 := [r97 + 16]:8;
    if ! IsZero (r79) {
      goto T1
    }
    ;
    return r68
  }

}
