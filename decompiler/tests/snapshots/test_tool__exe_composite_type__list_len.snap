---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  95 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- FuncArgument { index: 0, reg_type: Bytes(24) }
   43 r47 <- Part { src: r45, offset: 0, size: 8 }
   44 r46 <- ArithK(Add, r12, 8)
   45 r46 <- StoreMem { addr: r46, value: r47 }
   46 r47 <- Part { src: r45, offset: 8, size: 8 }
   47 r46 <- ArithK(Add, r12, 16)
   48 r46 <- StoreMem { addr: r46, value: r47 }
   49 r47 <- Part { src: r45, offset: 16, size: 8 }
   50 r46 <- ArithK(Add, r12, 24)
   51 r46 <- StoreMem { addr: r46, value: r47 }
0x1120:
   52 r46 <- Part { src: r16, offset: 0, size: 4 }
   53 r48 <- Part { src: r16, offset: 0, size: 4 }
   54 r46 <- Arith(BitXor, r46, r48)
   55 r49 <- Part { src: r16, offset: 4, size: 4 }
   56 r16 <- Concat { lo: r46, hi: r49 }
   57 r10 <- False
   58 r2 <- False
   59 r6 <- SignOf(r46)
   60 r5 <- IsZero(r46)
   61 r50 <- Part { src: r46, offset: 0, size: 1 }
   62 r3 <- Parity(r50)
0x1122:
   63 r45 <- Const { value: 8, size: 8 }
   64 r45 <- Arith(Add, r45, r12)
   65 r18 <- Get(r45)
0x1130:
   66 r46 <- Part { src: r16, offset: 0, size: 4 }
   67 r46 <- ArithK(Add, r46, 1)
   68 r47 <- Part { src: r16, offset: 4, size: 4 }
   69 r16 <- Concat { lo: r46, hi: r47 }
   70 r10 <- False
   71 r2 <- False
   72 r6 <- SignOf(r46)
   73 r5 <- IsZero(r46)
   74 r48 <- Part { src: r46, offset: 0, size: 1 }
   75 r3 <- Parity(r48)
0x1132:
   76 r46 <- Const { value: 16, size: 8 }
   77 r46 <- Arith(Add, r46, r18)
   78 r45 <- LoadMem { addr: r46, size: 8 }
   79 r18 <- Get(r45)
0x1136:
   80 r18 <- Arith(BitAnd, r18, r18)
   81 r6 <- SignOf(r18)
   82 r5 <- IsZero(r18)
   83 r47 <- Part { src: r18, offset: 0, size: 1 }
   84 r3 <- Parity(r18)
   85 r2 <- False
   86 r10 <- False
0x1139:
   87 r45 <- Not(r5)
   88 r46 <- SetJumpCondition(r45)
   89 r46 <- Control(JmpExtIf(4400))
0x113b:
   90 r45 <- Void
   91 r45 <- Concat { lo: r45, hi: r16 }
   92 r45 <- Part { src: r45, offset: 0, size: 4 }
   93 r47 <- SetReturnValue(r45)
   94 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  101 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r14 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
  (  3)  r42 <- FuncArgument { index: 0, reg_type: Bytes(24) }
         r43 <- Part { src: r42, offset: 0, size: 8 }
         r44 <- ArithK(Add, r10, 8)
         r45 <- StoreMem { addr: r44, value: r43 }
         r46 <- Part { src: r42, offset: 8, size: 8 }
         r47 <- ArithK(Add, r10, 16)
         r48 <- StoreMem { addr: r47, value: r46 }
         r49 <- Part { src: r42, offset: 16, size: 8 }
         r50 <- ArithK(Add, r10, 24)
         r51 <- StoreMem { addr: r50, value: r49 }
         r52 <- Part { src: r14, offset: 0, size: 4 }
         r53 <- Part { src: r14, offset: 0, size: 4 }
         r54 <- Arith(BitXor, r52, r53)
         r55 <- Part { src: r14, offset: 4, size: 4 }
         r56 <- Concat { lo: r54, hi: r55 }
         r63 <- Const { value: 8, size: 8 }
         r64 <- Arith(Add, r63, r10)
         r97 <- Upsilon { value: r56, phi_ref: r95 }
         r98 <- Upsilon { value: r64, phi_ref: r96 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r96 <- Phi
  (  2)  r95 <- Phi
         r66 <- Part { src: r95, offset: 0, size: 4 }
         r67 <- ArithK(Add, r66, 1)
         r68 <- Part { src: r95, offset: 4, size: 4 }
  (  2)  r69 <- Concat { lo: r67, hi: r68 }
         r76 <- Const { value: 16, size: 8 }
         r77 <- Arith(Add, r76, r96)
  (  2)  r78 <- LoadMem { addr: r77, size: 8 }
  (  2)  r80 <- Arith(BitAnd, r78, r78)
         r82 <- IsZero(r80)
         r87 <- Not(r82)
         r88 <- SetJumpCondition(r87)
         r99 <- Upsilon { value: r69, phi_ref: r95 }
         r100 <- Upsilon { value: r80, phi_ref: r96 }
.B2:    ;; preds:B1  → Always(Return).
         r91 <- Concat { lo: r90, hi: r69 }
         r92 <- Part { src: r91, offset: 0, size: 4 }
         r93 <- SetReturnValue(r92)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Block(BlockID(1))) [r10, r14, r42, r43, r44, r45, r101, r47, r48, r102, r50, r51, r52, r53, r54, r55, r56, r64, r97, r98]
  BlockID(1) -> Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) } [r96, r95, r66, r67, r68, r69, r77, r78, r82, r87, r88, r99, r100]
  BlockID(2) -> Always(Return) [r93]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)

 --- ssa
ssa program  103 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r14 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
  (  3)  r42 <- FuncArgument { index: 0, reg_type: Bytes(24) }
         r43 <- Part { src: r42, offset: 0, size: 8 }
         r44 <- ArithK(Add, r10, 8)
         r45 <- StoreMem { addr: r44, value: r43 }
         r101 <- StructGetMember { struct_value: r42, name: "prev", size: 8 }
         r47 <- ArithK(Add, r10, 16)
         r48 <- StoreMem { addr: r47, value: r101 }
         r102 <- StructGetMember { struct_value: r42, name: "next", size: 8 }
         r50 <- ArithK(Add, r10, 24)
         r51 <- StoreMem { addr: r50, value: r102 }
         r52 <- Part { src: r14, offset: 0, size: 4 }
         r53 <- Part { src: r14, offset: 0, size: 4 }
         r54 <- Arith(BitXor, r52, r53)
         r55 <- Part { src: r14, offset: 4, size: 4 }
         r56 <- Concat { lo: r54, hi: r55 }
         r64 <- ArithK(Add, r10, 8)
         r97 <- Upsilon { value: r56, phi_ref: r95 }
         r98 <- Upsilon { value: r64, phi_ref: r96 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r96 <- Phi
  (  2)  r95 <- Phi
         r66 <- Part { src: r95, offset: 0, size: 4 }
  (  2)  r67 <- ArithK(Add, r66, 1)
         r68 <- Part { src: r95, offset: 4, size: 4 }
         r69 <- Concat { lo: r67, hi: r68 }
         r77 <- ArithK(Add, r96, 16)
  (  2)  r78 <- LoadMem { addr: r77, size: 8 }
         r82 <- IsZero(r78)
         r87 <- Not(r82)
         r88 <- SetJumpCondition(r87)
         r99 <- Upsilon { value: r69, phi_ref: r95 }
         r100 <- Upsilon { value: r78, phi_ref: r96 }
.B2:    ;; preds:B1  → Always(Return).
         r93 <- SetReturnValue(r67)


 --- ast

T0: {
  let r42: Bytes(24) = $arg0;
  [pre:RSP + 8]:* := r42[8 .. 0];
  [pre:RSP + 16]:* := r42.prev;
  [pre:RSP + 24]:* := r42.next;
  r95 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] ^ pre:RAX[4 .. 0]);
  r96 := pre:RSP + 8;
  goto T1
  T1: {
    let mut r96: Bytes(8);
    let mut r95: Bytes(8);
    let r67: Bytes(4) = r95[4 .. 0] + 1;
    let r78: Bytes(8) = [r96 + 16]:8;
    ;
    r95 := r95[8 .. 4] ++ r67;
    r96 := [r96 + 16]:8;
    if ! IsZero (r78) {
      goto T1
    }
    ;
    return r67
  }

}
