---
source: decompiler/tests/test_tool.rs
expression: out
---
list_len 0x1120+28 (file 0x1120)
            1120: 31 c0                   xor eax,eax
            1122: 48 8d 4c 24 08          lea rcx,[rsp+8]
            1127: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
            1130: ff c0                   inc eax
            1132: 48 8b 49 10             mov rcx,[rcx+10h]
            1136: 48 85 c9                test rcx,rcx
            1139: 75 f5                   jne short 0000000000001130h
            113b: c3                      ret

function type: "list_len" func (p point <TypeID(17v1)>) int <TypeID(15v1)>
0 warnings.


mil program = 
program  117 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r45 <- Undefined
                44 r46 <- Undefined
                45 r47 <- Undefined
                46 r48 <- Undefined
                47 r49 <- Undefined
                48 r50 <- Undefined
                49 r51 <- Undefined
                50 r52 <- Undefined
                51 r53 <- Undefined
                52 r54 <- Undefined
                53 r55 <- Undefined
                54 r56 <- Undefined
                55 r57 <- Undefined
                56 r58 <- Undefined
                57 r59 <- Undefined
                58 r60 <- Undefined
                59 r61 <- Undefined
                60 r62 <- Undefined
                61 r63 <- Undefined
                62 r64 <- Undefined
                63 r65 <- Undefined
                64 r45 <- Ancestral(AncestralName("arg0"))
                65 r47 <- Part { src: r45, offset: 0, size: 8 }
                66 r46 <- ArithK(Add, r12, 8)
                67 r46 <- StoreMem { addr: r46, value: r47 }
                68 r47 <- Part { src: r45, offset: 8, size: 8 }
                69 r46 <- ArithK(Add, r12, 16)
                70 r46 <- StoreMem { addr: r46, value: r47 }
                71 r47 <- Part { src: r45, offset: 16, size: 8 }
                72 r46 <- ArithK(Add, r12, 24)
                73 r46 <- StoreMem { addr: r46, value: r47 }
0x1120:
                74 r46 <- Part { src: r16, offset: 0, size: 4 }
                75 r48 <- Part { src: r16, offset: 0, size: 4 }
                76 r46 <- Arith(BitXor, r46, r48)
                77 r49 <- Part { src: r16, offset: 4, size: 4 }
                78 r16 <- Concat { lo: r46, hi: r49 }
                79 r10 <- False
                80 r2 <- False
                81 r6 <- SignOf(r46)
                82 r5 <- IsZero(r46)
                83 r50 <- Part { src: r46, offset: 0, size: 1 }
                84 r3 <- Parity(r50)
0x1122:
                85 r45 <- Const { value: 8, size: 8 }
                86 r45 <- Arith(Add, r45, r12)
                87 r18 <- Get(r45)
0x1130:
                88 r46 <- Part { src: r16, offset: 0, size: 4 }
                89 r46 <- ArithK(Add, r46, 1)
                90 r47 <- Part { src: r16, offset: 4, size: 4 }
                91 r16 <- Concat { lo: r46, hi: r47 }
                92 r10 <- False
                93 r2 <- False
                94 r6 <- SignOf(r46)
                95 r5 <- IsZero(r46)
                96 r48 <- Part { src: r46, offset: 0, size: 1 }
                97 r3 <- Parity(r48)
0x1132:
                98 r46 <- Const { value: 16, size: 8 }
                99 r46 <- Arith(Add, r46, r18)
               100 r45 <- LoadMem { addr: r46, size: 8 }
               101 r18 <- Get(r45)
0x1136:
               102 r18 <- Arith(BitAnd, r18, r18)
               103 r6 <- SignOf(r18)
               104 r5 <- IsZero(r18)
               105 r47 <- Part { src: r18, offset: 0, size: 1 }
               106 r3 <- Parity(r18)
               107 r2 <- False
               108 r10 <- False
0x1139:
               109 r45 <- Not(r5)
               110 r46 <- SetJumpCondition(r45)
               111 r46 <- Control(JmpIf(88))
0x113b:
               112 r45 <- Void
               113 r45 <- Concat { lo: r45, hi: r16 }
               114 r45 <- Part { src: r45, offset: 0, size: 4 }
               115 r47 <- SetReturnValue(r45)
               116 r47 <- Control(Ret)


ssa pre-xform:
ssa program  123 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r15 <- Ancestral(AncestralName("RAX"))
  (  3)  r64 <- Ancestral(AncestralName("arg0"))
         r65 <- Part { src: r64, offset: 0, size: 8 }
         r66 <- ArithK(Add, r11, 8)
         r67 <- StoreMem { addr: r66, value: r65 }
         r68 <- Part { src: r64, offset: 8, size: 8 }
         r69 <- ArithK(Add, r11, 16)
         r70 <- StoreMem { addr: r69, value: r68 }
         r71 <- Part { src: r64, offset: 16, size: 8 }
         r72 <- ArithK(Add, r11, 24)
         r73 <- StoreMem { addr: r72, value: r71 }
         r74 <- Part { src: r15, offset: 0, size: 4 }
         r75 <- Part { src: r15, offset: 0, size: 4 }
         r76 <- Arith(BitXor, r74, r75)
         r77 <- Part { src: r15, offset: 4, size: 4 }
         r78 <- Concat { lo: r76, hi: r77 }
         r85 <- Const { value: 8, size: 8 }
         r86 <- Arith(Add, r85, r11)
         r119 <- Upsilon { value: r78, phi_ref: r117 }
         r120 <- Upsilon { value: r86, phi_ref: r118 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r118 <- Phi
  (  2)  r117 <- Phi
         r88 <- Part { src: r117, offset: 0, size: 4 }
         r89 <- ArithK(Add, r88, 1)
         r90 <- Part { src: r117, offset: 4, size: 4 }
  (  2)  r91 <- Concat { lo: r89, hi: r90 }
         r98 <- Const { value: 16, size: 8 }
         r99 <- Arith(Add, r98, r118)
  (  2)  r100 <- LoadMem { addr: r99, size: 8 }
  (  2)  r102 <- Arith(BitAnd, r100, r100)
         r104 <- IsZero(r102)
         r109 <- Not(r104)
         r110 <- SetJumpCondition(r109)
         r121 <- Upsilon { value: r91, phi_ref: r117 }
         r122 <- Upsilon { value: r102, phi_ref: r118 }
.B2:    ;; preds:B1  → Always(Return).
         r113 <- Concat { lo: r112, hi: r91 }
         r114 <- Part { src: r113, offset: 0, size: 4 }
         r115 <- SetReturnValue(r114)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Block(BlockID(1))) [r11, r15, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r85, r86, r119, r120]
  BlockID(1) -> Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) } [r118, r117, r88, r89, r90, r91, r98, r99, r100, r102, r104, r109, r110, r121, r122]
  BlockID(2) -> Always(Return) [r112, r113, r114, r115]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)

ssa post-xform:
ssa program  123 instrs
.B0:    ;;  → Always(Block(BlockID(1))).
  (  4)  r11 <- Ancestral(AncestralName("RSP"))
  (  3)  r15 <- Ancestral(AncestralName("RAX"))
  (  3)  r64 <- Ancestral(AncestralName("arg0"))
         r65 <- Part { src: r64, offset: 0, size: 8 }
         r66 <- ArithK(Add, r11, 8)
         r67 <- StoreMem { addr: r66, value: r65 }
         r68 <- Part { src: r64, offset: 8, size: 8 }
         r69 <- ArithK(Add, r11, 16)
         r70 <- StoreMem { addr: r69, value: r68 }
         r71 <- Part { src: r64, offset: 16, size: 8 }
         r72 <- ArithK(Add, r11, 24)
         r73 <- StoreMem { addr: r72, value: r71 }
         r74 <- Part { src: r15, offset: 0, size: 4 }
         r75 <- Part { src: r15, offset: 0, size: 4 }
         r76 <- Arith(BitXor, r74, r75)
         r77 <- Part { src: r15, offset: 4, size: 4 }
         r78 <- Concat { lo: r76, hi: r77 }
         r86 <- ArithK(Add, r11, 8)
         r119 <- Upsilon { value: r78, phi_ref: r117 }
         r120 <- Upsilon { value: r86, phi_ref: r118 }
.B1:    ;; preds:B0,B1  → Conditional { pos: Block(BlockID(1)), neg: Block(BlockID(2)) }.
         r118 <- Phi
  (  2)  r117 <- Phi
         r88 <- Part { src: r117, offset: 0, size: 4 }
  (  2)  r89 <- ArithK(Add, r88, 1)
         r90 <- Part { src: r117, offset: 4, size: 4 }
         r91 <- Concat { lo: r89, hi: r90 }
         r99 <- ArithK(Add, r118, 16)
  (  2)  r100 <- LoadMem { addr: r99, size: 8 }
         r104 <- IsZero(r100)
         r109 <- Not(r104)
         r110 <- SetJumpCondition(r109)
         r121 <- Upsilon { value: r91, phi_ref: r117 }
         r122 <- Upsilon { value: r100, phi_ref: r118 }
.B2:    ;; preds:B1  → Always(Return).
         r115 <- SetReturnValue(r89)



T0: {
  [pre:RSP + 8]:* := pre:arg0[8 .. 0];
  [pre:RSP + 16]:* := pre:arg0[16 .. 8];
  [pre:RSP + 24]:* := pre:arg0[24 .. 16];
  r117 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] ^ pre:RAX[4 .. 0]);
  r118 := pre:RSP + 8;
  goto T1
  T1: {
    let mut r118: Bytes(8);
    let mut r117: Bytes(8);
    let r89: Bytes(4) = r117[4 .. 0] + 1;
    let r100: Bytes(8) = [r118 + 16]:8;
    ;
    r117 := r117[8 .. 4] ++ r89;
    r118 := [r118 + 16]:8;
    if ! IsZero (r100) {
      goto T1
    }
    ;
    return r89
  }

}
