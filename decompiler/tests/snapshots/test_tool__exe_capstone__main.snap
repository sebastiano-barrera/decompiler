---
source: decompiler/tests/test_tool.rs
expression: out
---
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

function type: "main" func () int <TypeID(16v1)>
4 warnings:
  #   0: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   1: while applying calling convention for return value in call site
           <- type has no alignment?
  #   2: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   3: while applying calling convention for return value in call site
           <- type has no alignment?


mil program = 
program  387 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
0x401090:
                65 r12 <- ArithK(Add, r12, -8)
                66 r44 <- StoreMem { mem: r44, addr: r12, value: r24 }
0x401092:
                67 r45 <- Const { value: 8, size: 4 }
                68 r46 <- Part { src: r15, offset: 4, size: 4 }
                69 r15 <- Concat { lo: r45, hi: r46 }
0x401097:
                70 r45 <- Const { value: 3, size: 4 }
                71 r46 <- Part { src: r14, offset: 4, size: 4 }
                72 r14 <- Concat { lo: r45, hi: r46 }
0x40109c:
                73 r12 <- ArithK(Add, r12, -8)
                74 r44 <- StoreMem { mem: r44, addr: r12, value: r11 }
0x40109d:
                75 r12 <- ArithK(Add, r12, -8)
                76 r44 <- StoreMem { mem: r44, addr: r12, value: r17 }
0x40109e:
                77 r46 <- Const { value: 16, size: 8 }
                78 r12 <- Arith(Sub, r12, r46)
                79 r12 <- Get(r12)
                80 r10 <- OverflowOf(r12)
                81 r2 <- CarryOf(r12)
                82 r6 <- SignOf(r12)
                83 r5 <- IsZero(r12)
                84 r47 <- Part { src: r12, offset: 0, size: 1 }
                85 r3 <- Parity(r47)
0x4010a2:
                86 r19 <- Get(r12)
0x4010a5:
                87 r48 <- CArg { value: r18, next_arg: None }
                88 r48 <- CArg { value: r19, next_arg: Some(r48) }
                89 r48 <- CArg { value: r15, next_arg: Some(r48) }
                90 r48 <- CArg { value: r14, next_arg: Some(r48) }
                91 r49: TypeID(3337v1) <- Const { value: 4198512, size: 8 }
                92 r48 <- Call { callee: r49, first_arg: Some(r48) }
                93 r2 <- Undefined
                94 r3 <- Undefined
                95 r4 <- Undefined
                96 r5 <- Undefined
                97 r6 <- Undefined
                98 r7 <- Undefined
                99 r8 <- Undefined
               100 r9 <- Undefined
               101 r10 <- Undefined
               102 r48 <- Get(r16)
0x4010aa:
               103 r46 <- Part { src: r16, offset: 0, size: 4 }
               104 r48 <- Part { src: r16, offset: 0, size: 4 }
               105 r46 <- Arith(BitAnd, r46, r48)
               106 r6 <- SignOf(r46)
               107 r5 <- IsZero(r46)
               108 r49 <- Part { src: r46, offset: 0, size: 1 }
               109 r3 <- Parity(r46)
               110 r2 <- False
               111 r10 <- False
0x4010ac:
               112 r45 <- Not(r5)
               113 r46 <- SetJumpCondition(r45)
               114 r46 <- Control(JmpIf(375))
0x4010b2:
               115 r46 <- Const { value: 0, size: 8 }
               116 r46 <- Arith(Add, r46, r12)
               117 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               118 r14 <- Get(r45)
0x4010b6:
               119 r45 <- Const { value: 8, size: 8 }
               120 r45 <- Arith(Add, r45, r12)
               121 r21 <- Get(r45)
0x4010bb:
               122 r46 <- Part { src: r20, offset: 0, size: 4 }
               123 r48 <- Part { src: r20, offset: 0, size: 4 }
               124 r46 <- Arith(BitXor, r46, r48)
               125 r49 <- Part { src: r20, offset: 4, size: 4 }
               126 r20 <- Concat { lo: r46, hi: r49 }
               127 r10 <- False
               128 r2 <- False
               129 r6 <- SignOf(r46)
               130 r5 <- IsZero(r46)
               131 r50 <- Part { src: r46, offset: 0, size: 1 }
               132 r3 <- Parity(r50)
0x4010be:
               133 r24 <- Get(r12)
0x4010c1:
               134 r45 <- Const { value: 4096, size: 4 }
               135 r46 <- Part { src: r18, offset: 4, size: 4 }
               136 r18 <- Concat { lo: r45, hi: r46 }
0x4010c6:
               137 r45 <- Const { value: 8, size: 4 }
               138 r46 <- Part { src: r19, offset: 4, size: 4 }
               139 r19 <- Concat { lo: r45, hi: r46 }
0x4010cb:
               140 r45 <- Const { value: 4203184, size: 4 }
               141 r46 <- Part { src: r15, offset: 4, size: 4 }
               142 r15 <- Concat { lo: r45, hi: r46 }
0x4010d0:
               143 r51 <- Ancestral(AncestralName("arg0"))
               144 r51 <- Void
               145 r51 <- Get(r14)
               146 r52 <- Ancestral(AncestralName("arg1"))
               147 r52 <- Void
               148 r52 <- Get(r15)
               149 r53 <- Ancestral(AncestralName("arg2"))
               150 r53 <- Void
               151 r53 <- Get(r19)
               152 r54 <- Ancestral(AncestralName("arg3"))
               153 r54 <- Void
               154 r54 <- Get(r18)
               155 r55 <- Ancestral(AncestralName("arg4"))
               156 r55 <- Void
               157 r55 <- Get(r20)
               158 r56 <- Ancestral(AncestralName("arg5"))
               159 r56 <- Void
               160 r56 <- Get(r21)
               161 r57 <- CArg { value: r50, next_arg: None }
               162 r57 <- CArg { value: r49, next_arg: Some(r57) }
               163 r57 <- CArg { value: r48, next_arg: Some(r57) }
               164 r57 <- CArg { value: r47, next_arg: Some(r57) }
               165 r57 <- CArg { value: r46, next_arg: Some(r57) }
               166 r57 <- CArg { value: r45, next_arg: Some(r57) }
               167 r58: TypeID(3329v1) <- Const { value: 4198496, size: 8 }
               168 r57 <- Call { callee: r58, first_arg: Some(r57) }
               169 r2 <- Undefined
               170 r3 <- Undefined
               171 r4 <- Undefined
               172 r5 <- Undefined
               173 r6 <- Undefined
               174 r7 <- Undefined
               175 r8 <- Undefined
               176 r9 <- Undefined
               177 r10 <- Undefined
               178 r16 <- Part { src: r57, offset: 0, size: 8 }
0x4010d5:
               179 r11 <- Get(r16)
0x4010d8:
               180 r16 <- Arith(BitAnd, r16, r16)
               181 r6 <- SignOf(r16)
               182 r5 <- IsZero(r16)
               183 r47 <- Part { src: r16, offset: 0, size: 1 }
               184 r3 <- Parity(r16)
               185 r2 <- False
               186 r10 <- False
0x4010db:
               187 r45 <- SetJumpCondition(r5)
               188 r45 <- Control(JmpIf(360))
0x4010dd:
               189 r46 <- Part { src: r17, offset: 0, size: 4 }
               190 r48 <- Part { src: r17, offset: 0, size: 4 }
               191 r46 <- Arith(BitXor, r46, r48)
               192 r49 <- Part { src: r17, offset: 4, size: 4 }
               193 r17 <- Concat { lo: r46, hi: r49 }
               194 r10 <- False
               195 r2 <- False
               196 r6 <- SignOf(r46)
               197 r5 <- IsZero(r46)
               198 r50 <- Part { src: r46, offset: 0, size: 1 }
               199 r3 <- Parity(r50)
0x4010e0:
               200 r16 <- Get(r17)
0x4010e3:
               201 r46 <- Const { value: 8, size: 8 }
               202 r46 <- Arith(Add, r46, r12)
               203 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               204 r19 <- Get(r45)
0x4010e8:
               205 r45 <- Const { value: 4203193, size: 4 }
               206 r46 <- Part { src: r14, offset: 4, size: 4 }
               207 r14 <- Concat { lo: r45, hi: r46 }
0x4010ed:
               208 r46 <- Const { value: 5, size: 1 }
               209 r46 <- Widen { reg: r46, target_size: 8, sign: false }
               210 r16 <- Arith(Shl, r16, r46)
               211 r16 <- Get(r16)
               212 r6 <- SignOf(r16)
               213 r5 <- IsZero(r16)
               214 r47 <- Part { src: r16, offset: 0, size: 1 }
               215 r3 <- Parity(r47)
0x4010f1:
               216 r16 <- Arith(Sub, r16, r17)
               217 r16 <- Get(r16)
               218 r10 <- OverflowOf(r16)
               219 r2 <- CarryOf(r16)
               220 r6 <- SignOf(r16)
               221 r5 <- IsZero(r16)
               222 r47 <- Part { src: r16, offset: 0, size: 1 }
               223 r3 <- Parity(r47)
0x4010f4:
               224 r46 <- Const { value: 1, size: 8 }
               225 r17 <- Arith(Add, r17, r46)
               226 r17 <- Get(r17)
               227 r10 <- OverflowOf(r17)
               228 r2 <- CarryOf(r17)
               229 r6 <- SignOf(r17)
               230 r5 <- IsZero(r17)
               231 r47 <- Part { src: r17, offset: 0, size: 1 }
               232 r3 <- Parity(r47)
0x4010f8:
               233 r45 <- Const { value: 0, size: 8 }
               234 r45 <- Arith(Add, r45, r19)
               235 r46 <- ArithK(Mul, r16, 8)
               236 r45 <- Arith(Add, r45, r46)
               237 r16 <- Get(r45)
0x4010fc:
               238 r46 <- Const { value: 8, size: 8 }
               239 r46 <- Arith(Add, r46, r16)
               240 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               241 r15 <- Get(r45)
0x401100:
               242 r45 <- Const { value: 74, size: 8 }
               243 r45 <- Arith(Add, r45, r16)
               244 r18 <- Get(r45)
0x401104:
               245 r45 <- Const { value: 42, size: 8 }
               246 r45 <- Arith(Add, r45, r16)
               247 r19 <- Get(r45)
0x401108:
               248 r46 <- Part { src: r16, offset: 0, size: 4 }
               249 r48 <- Part { src: r16, offset: 0, size: 4 }
               250 r46 <- Arith(BitXor, r46, r48)
               251 r49 <- Part { src: r16, offset: 4, size: 4 }
               252 r16 <- Concat { lo: r46, hi: r49 }
               253 r10 <- False
               254 r2 <- False
               255 r6 <- SignOf(r46)
               256 r5 <- IsZero(r46)
               257 r50 <- Part { src: r46, offset: 0, size: 1 }
               258 r3 <- Parity(r50)
0x40110a:
               259 r46 <- Ancestral(AncestralName("arg0"))
               260 r46 <- Void
               261 r46 <- Get(r14)
               262 r47 <- CArg { value: r45, next_arg: None }
               263 r48: TypeID(3326v1) <- Const { value: 4198480, size: 8 }
               264 r47 <- Call { callee: r48, first_arg: Some(r47) }
               265 r2 <- Undefined
               266 r3 <- Undefined
               267 r4 <- Undefined
               268 r5 <- Undefined
               269 r6 <- Undefined
               270 r7 <- Undefined
               271 r8 <- Undefined
               272 r9 <- Undefined
               273 r10 <- Undefined
               274 r16 <- Part { src: r47, offset: 0, size: 8 }
0x40110f:
               275 r11 <- Arith(Sub, r11, r17)
               276 r10 <- OverflowOf(r11)
               277 r2 <- CarryOf(r11)
               278 r6 <- SignOf(r11)
               279 r5 <- IsZero(r11)
               280 r47 <- Part { src: r11, offset: 0, size: 1 }
               281 r3 <- Parity(r47)
0x401112:
               282 r45 <- Not(r5)
               283 r46 <- SetJumpCondition(r45)
               284 r46 <- Control(JmpIf(200))
0x401114:
               285 r46 <- Const { value: 8, size: 8 }
               286 r46 <- Arith(Add, r46, r12)
               287 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               288 r14 <- Get(r45)
0x401119:
               289 r15 <- Get(r11)
0x40111c:
               290 r47 <- Ancestral(AncestralName("arg0"))
               291 r47 <- Void
               292 r47 <- Get(r14)
               293 r48 <- Ancestral(AncestralName("arg1"))
               294 r48 <- Void
               295 r48 <- Get(r15)
               296 r49 <- CArg { value: r46, next_arg: None }
               297 r49 <- CArg { value: r45, next_arg: Some(r49) }
               298 r50: TypeID(3322v1) <- Const { value: 4198464, size: 8 }
               299 r49 <- Call { callee: r50, first_arg: Some(r49) }
               300 r2 <- Undefined
               301 r3 <- Undefined
               302 r4 <- Undefined
               303 r5 <- Undefined
               304 r6 <- Undefined
               305 r7 <- Undefined
               306 r8 <- Undefined
               307 r9 <- Undefined
               308 r10 <- Undefined
0x401121:
               309 r14 <- Get(r24)
0x401124:
               310 r46 <- CArg { value: r18, next_arg: None }
               311 r46 <- CArg { value: r19, next_arg: Some(r46) }
               312 r46 <- CArg { value: r15, next_arg: Some(r46) }
               313 r46 <- CArg { value: r14, next_arg: Some(r46) }
               314 r47: TypeID(3319v1) <- Const { value: 4198528, size: 8 }
               315 r46 <- Call { callee: r47, first_arg: Some(r46) }
               316 r2 <- Undefined
               317 r3 <- Undefined
               318 r4 <- Undefined
               319 r5 <- Undefined
               320 r6 <- Undefined
               321 r7 <- Undefined
               322 r8 <- Undefined
               323 r9 <- Undefined
               324 r10 <- Undefined
               325 r46 <- Get(r16)
0x401129:
               326 r46 <- Part { src: r16, offset: 0, size: 4 }
               327 r48 <- Part { src: r16, offset: 0, size: 4 }
               328 r46 <- Arith(BitXor, r46, r48)
               329 r49 <- Part { src: r16, offset: 4, size: 4 }
               330 r16 <- Concat { lo: r46, hi: r49 }
               331 r10 <- False
               332 r2 <- False
               333 r6 <- SignOf(r46)
               334 r5 <- IsZero(r46)
               335 r50 <- Part { src: r46, offset: 0, size: 1 }
               336 r3 <- Parity(r50)
0x40112b:
               337 r46 <- Const { value: 16, size: 8 }
               338 r12 <- Arith(Add, r12, r46)
               339 r12 <- Get(r12)
               340 r10 <- OverflowOf(r12)
               341 r2 <- CarryOf(r12)
               342 r6 <- SignOf(r12)
               343 r5 <- IsZero(r12)
               344 r47 <- Part { src: r12, offset: 0, size: 1 }
               345 r3 <- Parity(r47)
0x40112f:
               346 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               347 r17 <- Get(r45)
               348 r12 <- ArithK(Add, r12, 8)
0x401130:
               349 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               350 r11 <- Get(r45)
               351 r12 <- ArithK(Add, r12, 8)
0x401131:
               352 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               353 r24 <- Get(r45)
               354 r12 <- ArithK(Add, r12, 8)
0x401133:
               355 r45 <- Void
               356 r45 <- Concat { lo: r45, hi: r16 }
               357 r45 <- Part { src: r45, offset: 0, size: 4 }
               358 r47 <- SetReturnValue(r45)
               359 r47 <- Control(Ret)
0x401134:
               360 r45 <- Const { value: 4203208, size: 4 }
               361 r46 <- Part { src: r14, offset: 4, size: 4 }
               362 r14 <- Concat { lo: r45, hi: r46 }
0x401139:
               363 r46: TypeID(3365v1) <- Const { value: 4198448, size: 8 }
               364 r45 <- Call { callee: r46, first_arg: None }
               365 r2 <- Undefined
               366 r3 <- Undefined
               367 r4 <- Undefined
               368 r5 <- Undefined
               369 r6 <- Undefined
               370 r7 <- Undefined
               371 r8 <- Undefined
               372 r9 <- Undefined
               373 r10 <- Undefined
0x40113e:
               374 r45 <- Control(Jmp(309))
0x401140:
               375 r46 <- Part { src: r16, offset: 0, size: 4 }
               376 r47 <- Const { value: -1, size: 4 }
               377 r46 <- Arith(BitOr, r46, r47)
               378 r48 <- Part { src: r16, offset: 4, size: 4 }
               379 r16 <- Concat { lo: r46, hi: r48 }
               380 r10 <- False
               381 r2 <- False
               382 r6 <- SignOf(r46)
               383 r5 <- IsZero(r46)
               384 r49 <- Part { src: r46, offset: 0, size: 1 }
               385 r3 <- Parity(r49)
0x401143:
               386 r45 <- Control(Jmp(337))


ssa pre-xform:
ssa program  411 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
         r14 <- Ancestral(AncestralName("RSI"))
  (  4)  r15 <- Ancestral(AncestralName("RAX"))
  (  4)  r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r17 <- Ancestral(AncestralName("RCX"))
  (  3)  r19 <- Ancestral(AncestralName("R8"))
         r23 <- Ancestral(AncestralName("R12"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r23 }
         r67 <- Const { value: 8, size: 4 }
         r68 <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r69 <- Concat { lo: r67, hi: r68 }
         r70 <- Const { value: 3, size: 4 }
         r71 <- Part { src: r13, offset: 4, size: 4 }
         r72 <- Concat { lo: r70, hi: r71 }
  (  2)  r73 <- ArithK(Add, r65, -8)
         r74 <- StoreMem { mem: r66, addr: r73, value: r10 }
  (  2)  r75 <- ArithK(Add, r73, -8)
  (  2)  r76 <- StoreMem { mem: r74, addr: r75, value: r16 }
         r77 <- Const { value: 16, size: 8 }
  (  6)  r78 <- Arith(Sub, r75, r77)
         r84 <- Part { src: r78, offset: 0, size: 1 }
         r87 <- CArg { value: r17, next_arg: None }
         r88 <- CArg { value: r78, next_arg: Some(r87) }
         r89 <- CArg { value: r69, next_arg: Some(r88) }
         r90 <- CArg { value: r72, next_arg: Some(r89) }
         r91: cs_open <TypeID(3337v1)> <- Const { value: 4198512, size: 8 }
         r92 <- Call { callee: r91, first_arg: Some(r90) }
         r103 <- Part { src: r15, offset: 0, size: 4 }
         r104 <- Part { src: r15, offset: 0, size: 4 }
         r105 <- Arith(BitAnd, r103, r104)
         r107 <- IsZero(r105)
         r112 <- Not(r107)
         r113 <- SetJumpCondition(r112)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r122 <- Part { src: r19, offset: 0, size: 4 }
  (  2)  r123 <- Part { src: r19, offset: 0, size: 4 }
         r124 <- Arith(BitXor, r122, r123)
         r125 <- Part { src: r19, offset: 4, size: 4 }
         r131 <- Part { src: r124, offset: 0, size: 1 }
         r134 <- Const { value: 4096, size: 4 }
         r135 <- Part { src: r17, offset: 4, size: 4 }
         r136 <- Concat { lo: r134, hi: r135 }
         r137 <- Const { value: 8, size: 4 }
         r138 <- Part { src: r78, offset: 4, size: 4 }
         r139 <- Concat { lo: r137, hi: r138 }
  (  2)  r140 <- Const { value: 4203184, size: 4 }
  (  2)  r141 <- Part { src: r69, offset: 4, size: 4 }
         r142 <- Concat { lo: r140, hi: r141 }
         r161 <- CArg { value: r131, next_arg: None }
         r162 <- CArg { value: r125, next_arg: Some(r161) }
         r163 <- CArg { value: r123, next_arg: Some(r162) }
         r164 <- CArg { value: r84, next_arg: Some(r163) }
         r165 <- CArg { value: r141, next_arg: Some(r164) }
         r166 <- CArg { value: r140, next_arg: Some(r165) }
         r167: cs_disasm <TypeID(3329v1)> <- Const { value: 4198496, size: 8 }
         r168 <- Call { callee: r167, first_arg: Some(r166) }
  (  3)  r178 <- Part { src: r168, offset: 0, size: 8 }
  (  2)  r180 <- Arith(BitAnd, r178, r178)
         r182 <- IsZero(r180)
         r187 <- SetJumpCondition(r182)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r189 <- Part { src: r16, offset: 0, size: 4 }
         r190 <- Part { src: r16, offset: 0, size: 4 }
         r191 <- Arith(BitXor, r189, r190)
         r192 <- Part { src: r16, offset: 4, size: 4 }
         r193 <- Concat { lo: r191, hi: r192 }
         r401 <- Upsilon { value: r178, phi_ref: r387 }
         r403 <- Upsilon { value: r193, phi_ref: r389 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r389 <- Phi
         r387 <- Phi
         r201 <- Const { value: 8, size: 8 }
         r202 <- Arith(Add, r201, r78)
         r203 <- LoadMem { mem: r76, addr: r202, size: 8 }
         r208 <- Const { value: 5, size: 1 }
         r209 <- Widen { reg: r208, target_size: 8, sign: false }
         r210 <- Arith(Shl, r389, r209)
         r216 <- Arith(Sub, r210, r389)
         r224 <- Const { value: 1, size: 8 }
  (  2)  r225 <- Arith(Add, r389, r224)
         r233 <- Const { value: 0, size: 8 }
         r234 <- Arith(Add, r233, r203)
         r235 <- ArithK(Mul, r216, 8)
  (  2)  r236 <- Arith(Add, r234, r235)
         r242 <- Const { value: 74, size: 8 }
         r243 <- Arith(Add, r242, r236)
         r245 <- Const { value: 42, size: 8 }
  (  2)  r246 <- Arith(Add, r245, r236)
         r262 <- CArg { value: r246, next_arg: None }
         r263: printf <TypeID(3326v1)> <- Const { value: 4198480, size: 8 }
         r264 <- Call { callee: r263, first_arg: Some(r262) }
         r274 <- Part { src: r264, offset: 0, size: 8 }
  (  3)  r275 <- Arith(Sub, r387, r225)
         r279 <- IsZero(r275)
         r282 <- Not(r279)
         r283 <- SetJumpCondition(r282)
         r404 <- Upsilon { value: r275, phi_ref: r387 }
         r406 <- Upsilon { value: r225, phi_ref: r389 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r285 <- Const { value: 8, size: 8 }
  (  2)  r286 <- Arith(Add, r285, r78)
         r287 <- LoadMem { mem: r76, addr: r286, size: 8 }
         r296 <- CArg { value: r286, next_arg: None }
         r297 <- CArg { value: r287, next_arg: Some(r296) }
         r298: cs_free <TypeID(3322v1)> <- Const { value: 4198464, size: 8 }
         r299 <- Call { callee: r298, first_arg: Some(r297) }
         r407 <- Upsilon { value: r275, phi_ref: r390 }
         r408 <- Upsilon { value: r274, phi_ref: r391 }
         r409 <- Upsilon { value: r243, phi_ref: r392 }
         r410 <- Upsilon { value: r246, phi_ref: r393 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r363: __builtin_puts <TypeID(3365v1)> <- Const { value: 4198448, size: 8 }
         r364 <- Call { callee: r363, first_arg: None }
         r396 <- Upsilon { value: r142, phi_ref: r390 }
         r397 <- Upsilon { value: r180, phi_ref: r391 }
         r398 <- Upsilon { value: r136, phi_ref: r392 }
         r399 <- Upsilon { value: r139, phi_ref: r393 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r393 <- Phi
         r392 <- Phi
  (  3)  r391 <- Phi
         r390 <- Phi
         r310 <- CArg { value: r392, next_arg: None }
         r311 <- CArg { value: r393, next_arg: Some(r310) }
         r312 <- CArg { value: r390, next_arg: Some(r311) }
         r313 <- CArg { value: r78, next_arg: Some(r312) }
         r314: cs_close <TypeID(3319v1)> <- Const { value: 4198528, size: 8 }
         r315 <- Call { callee: r314, first_arg: Some(r313) }
         r326 <- Part { src: r391, offset: 0, size: 4 }
         r327 <- Part { src: r391, offset: 0, size: 4 }
         r328 <- Arith(BitXor, r326, r327)
         r329 <- Part { src: r391, offset: 4, size: 4 }
         r330 <- Concat { lo: r328, hi: r329 }
         r400 <- Upsilon { value: r330, phi_ref: r394 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r375 <- Part { src: r15, offset: 0, size: 4 }
         r376 <- Const { value: -1, size: 4 }
         r377 <- Arith(BitOr, r375, r376)
         r378 <- Part { src: r15, offset: 4, size: 4 }
         r379 <- Concat { lo: r377, hi: r378 }
         r395 <- Upsilon { value: r379, phi_ref: r394 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r394 <- Phi
         r356 <- Concat { lo: r355, hi: r394 }
         r357 <- Part { src: r356, offset: 0, size: 4 }
         r358 <- SetReturnValue(r357)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r19, r23, r43, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r84, r87, r88, r89, r90, r91, r92, r103, r104, r105, r107, r112, r113]
  BlockID(1) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) } [r122, r123, r124, r125, r131, r134, r135, r136, r137, r138, r139, r140, r141, r142, r161, r162, r163, r164, r165, r166, r167, r168, r178, r180, r182, r187]
  BlockID(2) -> Always(Block(BlockID(3))) [r189, r190, r191, r192, r193, r401, r403]
  BlockID(3) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) } [r389, r387, r201, r202, r203, r208, r209, r210, r216, r224, r225, r233, r234, r235, r236, r242, r243, r245, r246, r262, r263, r264, r274, r275, r279, r282, r283, r404, r406]
  BlockID(4) -> Always(Block(BlockID(5))) [r285, r286, r287, r296, r297, r298, r299, r407, r408, r409, r410]
  BlockID(5) -> Always(Block(BlockID(6))) [r393, r392, r391, r390, r310, r311, r312, r313, r314, r315, r326, r327, r328, r329, r330, r400]
  BlockID(6) -> Always(Return) [r394, r355, r356, r357, r358]
  BlockID(7) -> Always(Block(BlockID(5))) [r363, r364, r396, r397, r398, r399]
  BlockID(8) -> Always(Block(BlockID(6))) [r375, r376, r377, r378, r379, r395]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  BlockID(5)
    |  |  BlockID(7)
    |  BlockID(6)
    |  BlockID(8)

ssa post-xform:
ssa program  411 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
  (  6)  r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
  (  2)  r14 <- Ancestral(AncestralName("RSI"))
  (  4)  r15 <- Ancestral(AncestralName("RAX"))
  (  4)  r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r17 <- Ancestral(AncestralName("RCX"))
  (  3)  r19 <- Ancestral(AncestralName("R8"))
         r23 <- Ancestral(AncestralName("R12"))
         r43 <- Ancestral(AncestralName("memory"))
         r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r23 }
         r67 <- Const { value: 8, size: 4 }
         r68 <- Part { src: r14, offset: 4, size: 4 }
         r69 <- Concat { lo: r67, hi: r68 }
         r70 <- Const { value: 3, size: 4 }
         r71 <- Part { src: r13, offset: 4, size: 4 }
         r72 <- Concat { lo: r70, hi: r71 }
         r73 <- ArithK(Add, r11, -16)
         r74 <- StoreMem { mem: r66, addr: r73, value: r10 }
         r75 <- ArithK(Add, r11, -24)
  (  2)  r76 <- StoreMem { mem: r74, addr: r75, value: r16 }
         r77 <- Const { value: 16, size: 8 }
  (  4)  r78 <- ArithK(Add, r11, -40)
         r84 <- Part { src: r78, offset: 0, size: 1 }
         r87 <- CArg { value: r17, next_arg: None }
         r88 <- CArg { value: r78, next_arg: Some(r87) }
         r89 <- CArg { value: r69, next_arg: Some(r88) }
         r90 <- CArg { value: r72, next_arg: Some(r89) }
         r91: cs_open <TypeID(3337v1)> <- Const { value: 4198512, size: 8 }
         r92 <- Call { callee: r91, first_arg: Some(r90) }
         r103 <- Part { src: r15, offset: 0, size: 4 }
         r104 <- Part { src: r15, offset: 0, size: 4 }
         r105 <- Arith(BitAnd, r103, r104)
         r107 <- IsZero(r105)
         r112 <- Not(r107)
         r113 <- SetJumpCondition(r112)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r122 <- Part { src: r19, offset: 0, size: 4 }
  (  2)  r123 <- Part { src: r19, offset: 0, size: 4 }
         r124 <- Arith(BitXor, r122, r123)
         r125 <- Part { src: r19, offset: 4, size: 4 }
         r131 <- Part { src: r124, offset: 0, size: 1 }
         r134 <- Const { value: 4096, size: 4 }
         r135 <- Part { src: r17, offset: 4, size: 4 }
         r136 <- Concat { lo: r134, hi: r135 }
         r137 <- Const { value: 8, size: 4 }
         r138 <- Part { src: r78, offset: 4, size: 4 }
         r139 <- Concat { lo: r137, hi: r138 }
  (  2)  r140 <- Const { value: 4203184, size: 4 }
  (  2)  r141 <- Part { src: r14, offset: 4, size: 4 }
         r142 <- Concat { lo: r140, hi: r141 }
         r161 <- CArg { value: r131, next_arg: None }
         r162 <- CArg { value: r125, next_arg: Some(r161) }
         r163 <- CArg { value: r123, next_arg: Some(r162) }
         r164 <- CArg { value: r84, next_arg: Some(r163) }
         r165 <- CArg { value: r141, next_arg: Some(r164) }
         r166 <- CArg { value: r140, next_arg: Some(r165) }
         r167: cs_disasm <TypeID(3329v1)> <- Const { value: 4198496, size: 8 }
  (  5)  r168 <- Call { callee: r167, first_arg: Some(r166) }
         r178 <- Get(r168)
         r180 <- Get(r168)
         r182 <- IsZero(r168)
         r187 <- SetJumpCondition(r182)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r189 <- Part { src: r16, offset: 0, size: 4 }
         r190 <- Part { src: r16, offset: 0, size: 4 }
         r191 <- Arith(BitXor, r189, r190)
         r192 <- Part { src: r16, offset: 4, size: 4 }
         r193 <- Concat { lo: r191, hi: r192 }
         r401 <- Upsilon { value: r168, phi_ref: r387 }
         r403 <- Upsilon { value: r193, phi_ref: r389 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r389 <- Phi
         r387 <- Phi
         r201 <- Const { value: 8, size: 8 }
         r202 <- ArithK(Add, r11, -32)
  (  2)  r203 <- LoadMem { mem: r76, addr: r202, size: 8 }
         r208 <- Const { value: 5, size: 1 }
         r209 <- Widen { reg: r208, target_size: 8, sign: false }
         r210 <- Arith(Shl, r389, r209)
         r216 <- Arith(Sub, r210, r389)
         r224 <- Const { value: 1, size: 8 }
  (  2)  r225 <- ArithK(Add, r389, 1)
         r233 <- Const { value: 0, size: 8 }
         r234 <- Get(r203)
         r235 <- ArithK(Mul, r216, 8)
  (  2)  r236 <- Arith(Add, r203, r235)
         r242 <- Const { value: 74, size: 8 }
         r243 <- ArithK(Add, r236, 74)
         r245 <- Const { value: 42, size: 8 }
  (  2)  r246 <- ArithK(Add, r236, 42)
         r262 <- CArg { value: r246, next_arg: None }
         r263: printf <TypeID(3326v1)> <- Const { value: 4198480, size: 8 }
  (  2)  r264 <- Call { callee: r263, first_arg: Some(r262) }
         r274 <- Get(r264)
  (  3)  r275 <- Arith(Sub, r387, r225)
         r279 <- IsZero(r275)
         r282 <- Not(r279)
         r283 <- SetJumpCondition(r282)
         r404 <- Upsilon { value: r275, phi_ref: r387 }
         r406 <- Upsilon { value: r225, phi_ref: r389 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r285 <- Const { value: 8, size: 8 }
  (  2)  r286 <- ArithK(Add, r11, -32)
         r287 <- LoadMem { mem: r76, addr: r286, size: 8 }
         r296 <- CArg { value: r286, next_arg: None }
         r297 <- CArg { value: r287, next_arg: Some(r296) }
         r298: cs_free <TypeID(3322v1)> <- Const { value: 4198464, size: 8 }
         r299 <- Call { callee: r298, first_arg: Some(r297) }
         r407 <- Upsilon { value: r275, phi_ref: r390 }
         r408 <- Upsilon { value: r264, phi_ref: r391 }
         r409 <- Upsilon { value: r243, phi_ref: r392 }
         r410 <- Upsilon { value: r246, phi_ref: r393 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r363: __builtin_puts <TypeID(3365v1)> <- Const { value: 4198448, size: 8 }
         r364 <- Call { callee: r363, first_arg: None }
         r396 <- Upsilon { value: r142, phi_ref: r390 }
         r397 <- Upsilon { value: r168, phi_ref: r391 }
         r398 <- Upsilon { value: r136, phi_ref: r392 }
         r399 <- Upsilon { value: r139, phi_ref: r393 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r393 <- Phi
         r392 <- Phi
  (  3)  r391 <- Phi
         r390 <- Phi
         r310 <- CArg { value: r392, next_arg: None }
         r311 <- CArg { value: r393, next_arg: Some(r310) }
         r312 <- CArg { value: r390, next_arg: Some(r311) }
         r313 <- CArg { value: r78, next_arg: Some(r312) }
         r314: cs_close <TypeID(3319v1)> <- Const { value: 4198528, size: 8 }
         r315 <- Call { callee: r314, first_arg: Some(r313) }
         r326 <- Part { src: r391, offset: 0, size: 4 }
         r327 <- Part { src: r391, offset: 0, size: 4 }
         r328 <- Arith(BitXor, r326, r327)
         r329 <- Part { src: r391, offset: 4, size: 4 }
         r330 <- Concat { lo: r328, hi: r329 }
         r400 <- Upsilon { value: r330, phi_ref: r394 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r375 <- Part { src: r15, offset: 0, size: 4 }
         r376 <- Const { value: -1, size: 4 }
         r377 <- ArithK(BitOr, r375, -1)
         r378 <- Part { src: r15, offset: 4, size: 4 }
         r379 <- Concat { lo: r377, hi: r378 }
         r395 <- Upsilon { value: r379, phi_ref: r394 }
.B6:    ;; preds:B5,B8  → Always(Return).
  (  2)  r394 <- Phi
         r356 <- Get(r394)
         r357 <- Part { src: r394, offset: 0, size: 4 }
         r358 <- SetReturnValue(r357)



T0: {
  [pre:RSP - 8]:* := pre:R12;
  [pre:RSP - 16]:* := pre:RBP;
  [pre:RSP - 24]:* := pre:RBX;
  let r78: Bytes(8) = pre:RSP - 40;
  cs_open(pre:RDI[8 .. 4] ++ 3,
          pre:RSI[8 .. 4] ++ 8,
          r78,
          pre:RCX);
  ;
  if ! IsZero (pre:RAX[4 .. 0] & pre:RAX[4 .. 0]) {
    r394 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] | -1);
    goto T6
  }
  let r123: Bytes(4) = pre:R8[4 .. 0];
  let r141: Bytes(4) = pre:RSI[8 .. 4];
  let r168: Bytes(8) = cs_disasm(4203184,
                                 r141,
                                 r78[1 .. 0],
                                 r123,
                                 pre:R8[8 .. 4],
                                 (pre:R8[4 .. 0] ^ r123)[1 .. 0]);
  ;
  if IsZero (r168) {
    __builtin_puts();
    r390 := r141 ++ 4203184;
    r391 := cs_disasm(4203184,
                      r141,
                      r78[1 .. 0],
                      r123,
                      pre:R8[8 .. 4],
                      (pre:R8[4 .. 0] ^ r123)[1 .. 0]);
    r392 := pre:RCX[8 .. 4] ++ 4096;
    r393 := r78[8 .. 4] ++ 8;
    goto T5
  }
  r387 := cs_disasm(4203184,
                    r141,
                    r78[1 .. 0],
                    r123,
                    pre:R8[8 .. 4],
                    (pre:R8[4 .. 0] ^ r123)[1 .. 0]);
  r389 := pre:RBX[8 .. 4] ++ (pre:RBX[4 .. 0] ^ pre:RBX[4 .. 0]);
  goto T3
  T3: {
    let mut r389: Bytes(8);
    let mut r387: Bytes(8);
    let r203: Bytes(8) = [pre:RSP - 32]:8;
    let r225: Bytes(8) = r389 + 1;
    let r236: Bytes(8) = r203 + (r389 << 5 as u64 - r389) * 8;
    let r246: Bytes(8) = r236 + 42;
    let r264: Bytes(8) = printf(r246);
    let r275: Bytes(8) = r387 - r225;
    ;
    r387 := r387 - r225;
    r389 := r389 + 1;
    if ! IsZero (r275) {
      goto T3
    }
    let r286: Bytes(8) = pre:RSP - 32;
    cs_free([r286]:8,
            r286);
    r390 := r387 - r225;
    r391 := printf(r246);
    r392 := r236 + 74;
    r393 := r236 + 42;
    goto T5
  }
  
  T5: {
    let mut r393: Bytes(8);
    let mut r392: Bytes(8);
    let mut r391: Bytes(8);
    let mut r390: Bytes(8);
    cs_close(r78,
             r390,
             r393,
             r392);
    r394 := r391[8 .. 4] ++ (r391[4 .. 0] ^ r391[4 .. 0]);
    goto T6
  }
  
  T6: {
    let mut r394: Bytes(8);
    ;
    return r394[4 .. 0]
  }

}
