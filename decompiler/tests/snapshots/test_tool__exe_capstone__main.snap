---
source: decompiler/tests/test_tool.rs
expression: out
---
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

function type: "main" func () int <TypeID(17v1)>
4 warnings:
  #   0: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   1: while applying calling convention for return value in call site
           <- type has no alignment?
  #   2: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   3: while applying calling convention for return value in call site
           <- type has no alignment?


mil program = 
program  386 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Undefined
   44 r46: TypeID(2v1) <- Undefined
   45 r47: TypeID(2v1) <- Undefined
   46 r48: TypeID(2v1) <- Undefined
   47 r49: TypeID(2v1) <- Undefined
   48 r50: TypeID(2v1) <- Undefined
   49 r51: TypeID(2v1) <- Undefined
   50 r52: TypeID(2v1) <- Undefined
   51 r53: TypeID(2v1) <- Undefined
   52 r54: TypeID(2v1) <- Undefined
   53 r55: TypeID(2v1) <- Undefined
   54 r56: TypeID(2v1) <- Undefined
   55 r57: TypeID(2v1) <- Undefined
   56 r58: TypeID(2v1) <- Undefined
   57 r59: TypeID(2v1) <- Undefined
   58 r60: TypeID(2v1) <- Undefined
   59 r61: TypeID(2v1) <- Undefined
   60 r62: TypeID(2v1) <- Undefined
   61 r63: TypeID(2v1) <- Undefined
   62 r64: TypeID(2v1) <- Undefined
   63 r65: TypeID(2v1) <- Undefined
0x401090:
   64 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   65 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x401092:
   66 r45: TypeID(2v1) <- Const { value: 8, size: 4 }
   67 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   68 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x401097:
   69 r45: TypeID(2v1) <- Const { value: 3, size: 4 }
   70 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
   71 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x40109c:
   72 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   73 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x40109d:
   74 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   75 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x40109e:
   76 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
   77 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   78 r12: TypeID(2v1) <- Get(r12)
   79 r10: TypeID(2v1) <- OverflowOf(r12)
   80 r2: TypeID(2v1) <- CarryOf(r12)
   81 r6: TypeID(2v1) <- SignOf(r12)
   82 r5: TypeID(2v1) <- IsZero(r12)
   83 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   84 r3: TypeID(2v1) <- Parity(r47)
0x4010a2:
   85 r19: TypeID(2v1) <- Get(r12)
0x4010a5:
   86 r48: TypeID(2v1) <- CArg { value: r18, next_arg: None }
   87 r48: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r48) }
   88 r48: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r48) }
   89 r48: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r48) }
   90 r49: TypeID(3338v1) <- Const { value: 4198512, size: 8 }
   91 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
   92 r2: TypeID(2v1) <- Undefined
   93 r3: TypeID(2v1) <- Undefined
   94 r4: TypeID(2v1) <- Undefined
   95 r5: TypeID(2v1) <- Undefined
   96 r6: TypeID(2v1) <- Undefined
   97 r7: TypeID(2v1) <- Undefined
   98 r8: TypeID(2v1) <- Undefined
   99 r9: TypeID(2v1) <- Undefined
  100 r10: TypeID(2v1) <- Undefined
  101 r48: TypeID(2v1) <- Get(r16)
0x4010aa:
  102 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  103 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  104 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  105 r6: TypeID(2v1) <- SignOf(r46)
  106 r5: TypeID(2v1) <- IsZero(r46)
  107 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  108 r3: TypeID(2v1) <- Parity(r46)
  109 r2: TypeID(2v1) <- False
  110 r10: TypeID(2v1) <- False
0x4010ac:
  111 r45: TypeID(2v1) <- Not(r5)
  112 r46: TypeID(2v1) <- SetJumpCondition(r45)
  113 r46: TypeID(2v1) <- Control(JmpIf(374))
0x4010b2:
  114 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  115 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  116 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  117 r14: TypeID(2v1) <- Get(r45)
0x4010b6:
  118 r45: TypeID(2v1) <- Const { value: 8, size: 8 }
  119 r45: TypeID(2v1) <- Arith(Add, r45, r12)
  120 r21: TypeID(2v1) <- Get(r45)
0x4010bb:
  121 r46: TypeID(2v1) <- Part { src: r20, offset: 0, size: 4 }
  122 r48: TypeID(2v1) <- Part { src: r20, offset: 0, size: 4 }
  123 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  124 r49: TypeID(2v1) <- Part { src: r20, offset: 4, size: 4 }
  125 r20: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  126 r10: TypeID(2v1) <- False
  127 r2: TypeID(2v1) <- False
  128 r6: TypeID(2v1) <- SignOf(r46)
  129 r5: TypeID(2v1) <- IsZero(r46)
  130 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  131 r3: TypeID(2v1) <- Parity(r50)
0x4010be:
  132 r24: TypeID(2v1) <- Get(r12)
0x4010c1:
  133 r45: TypeID(2v1) <- Const { value: 4096, size: 4 }
  134 r46: TypeID(2v1) <- Part { src: r18, offset: 4, size: 4 }
  135 r18: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010c6:
  136 r45: TypeID(2v1) <- Const { value: 8, size: 4 }
  137 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  138 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010cb:
  139 r45: TypeID(2v1) <- Const { value: 4203184, size: 4 }
  140 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  141 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010d0:
  142 r51: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  143 r51: TypeID(2v1) <- Void
  144 r51: TypeID(2v1) <- Get(r14)
  145 r52: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  146 r52: TypeID(2v1) <- Void
  147 r52: TypeID(2v1) <- Get(r15)
  148 r53: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  149 r53: TypeID(2v1) <- Void
  150 r53: TypeID(2v1) <- Get(r19)
  151 r54: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
  152 r54: TypeID(2v1) <- Void
  153 r54: TypeID(2v1) <- Get(r18)
  154 r55: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
  155 r55: TypeID(2v1) <- Void
  156 r55: TypeID(2v1) <- Get(r20)
  157 r56: TypeID(2v1) <- Ancestral(AncestralName("arg5"))
  158 r56: TypeID(2v1) <- Void
  159 r56: TypeID(2v1) <- Get(r21)
  160 r57: TypeID(2v1) <- CArg { value: r50, next_arg: None }
  161 r57: TypeID(2v1) <- CArg { value: r49, next_arg: Some(r57) }
  162 r57: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r57) }
  163 r57: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r57) }
  164 r57: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r57) }
  165 r57: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r57) }
  166 r58: TypeID(3330v1) <- Const { value: 4198496, size: 8 }
  167 r57: TypeID(2v1) <- Call { callee: r58, first_arg: Some(r57) }
  168 r2: TypeID(2v1) <- Undefined
  169 r3: TypeID(2v1) <- Undefined
  170 r4: TypeID(2v1) <- Undefined
  171 r5: TypeID(2v1) <- Undefined
  172 r6: TypeID(2v1) <- Undefined
  173 r7: TypeID(2v1) <- Undefined
  174 r8: TypeID(2v1) <- Undefined
  175 r9: TypeID(2v1) <- Undefined
  176 r10: TypeID(2v1) <- Undefined
  177 r16: TypeID(2v1) <- Part { src: r57, offset: 0, size: 8 }
0x4010d5:
  178 r11: TypeID(2v1) <- Get(r16)
0x4010d8:
  179 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  180 r6: TypeID(2v1) <- SignOf(r16)
  181 r5: TypeID(2v1) <- IsZero(r16)
  182 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  183 r3: TypeID(2v1) <- Parity(r16)
  184 r2: TypeID(2v1) <- False
  185 r10: TypeID(2v1) <- False
0x4010db:
  186 r45: TypeID(2v1) <- SetJumpCondition(r5)
  187 r45: TypeID(2v1) <- Control(JmpIf(359))
0x4010dd:
  188 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  189 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  190 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  191 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  192 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  193 r10: TypeID(2v1) <- False
  194 r2: TypeID(2v1) <- False
  195 r6: TypeID(2v1) <- SignOf(r46)
  196 r5: TypeID(2v1) <- IsZero(r46)
  197 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  198 r3: TypeID(2v1) <- Parity(r50)
0x4010e0:
  199 r16: TypeID(2v1) <- Get(r17)
0x4010e3:
  200 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  201 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  202 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  203 r19: TypeID(2v1) <- Get(r45)
0x4010e8:
  204 r45: TypeID(2v1) <- Const { value: 4203193, size: 4 }
  205 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  206 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010ed:
  207 r46: TypeID(2v1) <- Const { value: 5, size: 1 }
  208 r46: TypeID(2v1) <- Widen { reg: r46, target_size: 8, sign: false }
  209 r16: TypeID(2v1) <- Arith(Shl, r16, r46)
  210 r16: TypeID(2v1) <- Get(r16)
  211 r6: TypeID(2v1) <- SignOf(r16)
  212 r5: TypeID(2v1) <- IsZero(r16)
  213 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  214 r3: TypeID(2v1) <- Parity(r47)
0x4010f1:
  215 r16: TypeID(2v1) <- Arith(Sub, r16, r17)
  216 r16: TypeID(2v1) <- Get(r16)
  217 r10: TypeID(2v1) <- OverflowOf(r16)
  218 r2: TypeID(2v1) <- CarryOf(r16)
  219 r6: TypeID(2v1) <- SignOf(r16)
  220 r5: TypeID(2v1) <- IsZero(r16)
  221 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  222 r3: TypeID(2v1) <- Parity(r47)
0x4010f4:
  223 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  224 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  225 r17: TypeID(2v1) <- Get(r17)
  226 r10: TypeID(2v1) <- OverflowOf(r17)
  227 r2: TypeID(2v1) <- CarryOf(r17)
  228 r6: TypeID(2v1) <- SignOf(r17)
  229 r5: TypeID(2v1) <- IsZero(r17)
  230 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  231 r3: TypeID(2v1) <- Parity(r47)
0x4010f8:
  232 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
  233 r45: TypeID(2v1) <- Arith(Add, r45, r19)
  234 r46: TypeID(2v1) <- ArithK(Mul, r16, 8)
  235 r45: TypeID(2v1) <- Arith(Add, r45, r46)
  236 r16: TypeID(2v1) <- Get(r45)
0x4010fc:
  237 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  238 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  239 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  240 r15: TypeID(2v1) <- Get(r45)
0x401100:
  241 r45: TypeID(2v1) <- Const { value: 74, size: 8 }
  242 r45: TypeID(2v1) <- Arith(Add, r45, r16)
  243 r18: TypeID(2v1) <- Get(r45)
0x401104:
  244 r45: TypeID(2v1) <- Const { value: 42, size: 8 }
  245 r45: TypeID(2v1) <- Arith(Add, r45, r16)
  246 r19: TypeID(2v1) <- Get(r45)
0x401108:
  247 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  248 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  249 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  250 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  251 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  252 r10: TypeID(2v1) <- False
  253 r2: TypeID(2v1) <- False
  254 r6: TypeID(2v1) <- SignOf(r46)
  255 r5: TypeID(2v1) <- IsZero(r46)
  256 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  257 r3: TypeID(2v1) <- Parity(r50)
0x40110a:
  258 r46: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  259 r46: TypeID(2v1) <- Void
  260 r46: TypeID(2v1) <- Get(r14)
  261 r47: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  262 r48: TypeID(3327v1) <- Const { value: 4198480, size: 8 }
  263 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  264 r2: TypeID(2v1) <- Undefined
  265 r3: TypeID(2v1) <- Undefined
  266 r4: TypeID(2v1) <- Undefined
  267 r5: TypeID(2v1) <- Undefined
  268 r6: TypeID(2v1) <- Undefined
  269 r7: TypeID(2v1) <- Undefined
  270 r8: TypeID(2v1) <- Undefined
  271 r9: TypeID(2v1) <- Undefined
  272 r10: TypeID(2v1) <- Undefined
  273 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x40110f:
  274 r11: TypeID(2v1) <- Arith(Sub, r11, r17)
  275 r10: TypeID(2v1) <- OverflowOf(r11)
  276 r2: TypeID(2v1) <- CarryOf(r11)
  277 r6: TypeID(2v1) <- SignOf(r11)
  278 r5: TypeID(2v1) <- IsZero(r11)
  279 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  280 r3: TypeID(2v1) <- Parity(r47)
0x401112:
  281 r45: TypeID(2v1) <- Not(r5)
  282 r46: TypeID(2v1) <- SetJumpCondition(r45)
  283 r46: TypeID(2v1) <- Control(JmpIf(199))
0x401114:
  284 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  285 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  286 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  287 r14: TypeID(2v1) <- Get(r45)
0x401119:
  288 r15: TypeID(2v1) <- Get(r11)
0x40111c:
  289 r47: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  290 r47: TypeID(2v1) <- Void
  291 r47: TypeID(2v1) <- Get(r14)
  292 r48: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  293 r48: TypeID(2v1) <- Void
  294 r48: TypeID(2v1) <- Get(r15)
  295 r49: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  296 r49: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r49) }
  297 r50: TypeID(3323v1) <- Const { value: 4198464, size: 8 }
  298 r49: TypeID(2v1) <- Call { callee: r50, first_arg: Some(r49) }
  299 r2: TypeID(2v1) <- Undefined
  300 r3: TypeID(2v1) <- Undefined
  301 r4: TypeID(2v1) <- Undefined
  302 r5: TypeID(2v1) <- Undefined
  303 r6: TypeID(2v1) <- Undefined
  304 r7: TypeID(2v1) <- Undefined
  305 r8: TypeID(2v1) <- Undefined
  306 r9: TypeID(2v1) <- Undefined
  307 r10: TypeID(2v1) <- Undefined
0x401121:
  308 r14: TypeID(2v1) <- Get(r24)
0x401124:
  309 r46: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  310 r46: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r46) }
  311 r46: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r46) }
  312 r46: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r46) }
  313 r47: TypeID(3320v1) <- Const { value: 4198528, size: 8 }
  314 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  315 r2: TypeID(2v1) <- Undefined
  316 r3: TypeID(2v1) <- Undefined
  317 r4: TypeID(2v1) <- Undefined
  318 r5: TypeID(2v1) <- Undefined
  319 r6: TypeID(2v1) <- Undefined
  320 r7: TypeID(2v1) <- Undefined
  321 r8: TypeID(2v1) <- Undefined
  322 r9: TypeID(2v1) <- Undefined
  323 r10: TypeID(2v1) <- Undefined
  324 r46: TypeID(2v1) <- Get(r16)
0x401129:
  325 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  326 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  327 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  328 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  329 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  330 r10: TypeID(2v1) <- False
  331 r2: TypeID(2v1) <- False
  332 r6: TypeID(2v1) <- SignOf(r46)
  333 r5: TypeID(2v1) <- IsZero(r46)
  334 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  335 r3: TypeID(2v1) <- Parity(r50)
0x40112b:
  336 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  337 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  338 r12: TypeID(2v1) <- Get(r12)
  339 r10: TypeID(2v1) <- OverflowOf(r12)
  340 r2: TypeID(2v1) <- CarryOf(r12)
  341 r6: TypeID(2v1) <- SignOf(r12)
  342 r5: TypeID(2v1) <- IsZero(r12)
  343 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  344 r3: TypeID(2v1) <- Parity(r47)
0x40112f:
  345 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  346 r17: TypeID(2v1) <- Get(r45)
  347 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401130:
  348 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  349 r11: TypeID(2v1) <- Get(r45)
  350 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401131:
  351 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  352 r24: TypeID(2v1) <- Get(r45)
  353 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401133:
  354 r45: TypeID(2v1) <- Void
  355 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  356 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  357 r47: TypeID(2v1) <- SetReturnValue(r45)
  358 r47: TypeID(2v1) <- Control(Ret)
0x401134:
  359 r45: TypeID(2v1) <- Const { value: 4203208, size: 4 }
  360 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  361 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x401139:
  362 r46: TypeID(3366v1) <- Const { value: 4198448, size: 8 }
  363 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  364 r2: TypeID(2v1) <- Undefined
  365 r3: TypeID(2v1) <- Undefined
  366 r4: TypeID(2v1) <- Undefined
  367 r5: TypeID(2v1) <- Undefined
  368 r6: TypeID(2v1) <- Undefined
  369 r7: TypeID(2v1) <- Undefined
  370 r8: TypeID(2v1) <- Undefined
  371 r9: TypeID(2v1) <- Undefined
  372 r10: TypeID(2v1) <- Undefined
0x40113e:
  373 r45: TypeID(2v1) <- Control(Jmp(308))
0x401140:
  374 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  375 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  376 r46: TypeID(2v1) <- Arith(BitOr, r46, r47)
  377 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  378 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  379 r10: TypeID(2v1) <- False
  380 r2: TypeID(2v1) <- False
  381 r6: TypeID(2v1) <- SignOf(r46)
  382 r5: TypeID(2v1) <- IsZero(r46)
  383 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  384 r3: TypeID(2v1) <- Parity(r49)
0x401143:
  385 r45: TypeID(2v1) <- Control(Jmp(336))


ssa pre-xform:
ssa program  410 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  4)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  4)  r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  3)  r19: ? <- Ancestral(AncestralName("R8"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  2)  r64: ? <- ArithK(Add, r11, -8)
         r65: ? <- StoreMem { addr: r64, value: r23 }
         r66: ? <- Const { value: 8, size: 4 }
         r67: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r68: ? <- Concat { lo: r66, hi: r67 }
         r69: ? <- Const { value: 3, size: 4 }
         r70: ? <- Part { src: r13, offset: 4, size: 4 }
         r71: ? <- Concat { lo: r69, hi: r70 }
  (  2)  r72: ? <- ArithK(Add, r64, -8)
         r73: ? <- StoreMem { addr: r72, value: r10 }
  (  2)  r74: ? <- ArithK(Add, r72, -8)
         r75: ? <- StoreMem { addr: r74, value: r16 }
         r76: ? <- Const { value: 16, size: 8 }
  (  6)  r77: ? <- Arith(Sub, r74, r76)
         r83: ? <- Part { src: r77, offset: 0, size: 1 }
         r86: ? <- CArg { value: r17, next_arg: None }
         r87: ? <- CArg { value: r77, next_arg: Some(r86) }
         r88: ? <- CArg { value: r68, next_arg: Some(r87) }
         r89: ? <- CArg { value: r71, next_arg: Some(r88) }
         r90: cs_open <TypeID(3338v1)> <- Const { value: 4198512, size: 8 }
         r91: ? <- Call { callee: r90, first_arg: Some(r89) }
         r102: ? <- Part { src: r15, offset: 0, size: 4 }
         r103: ? <- Part { src: r15, offset: 0, size: 4 }
         r104: ? <- Arith(BitAnd, r102, r103)
         r106: ? <- IsZero(r104)
         r111: ? <- Not(r106)
         r112: ? <- SetJumpCondition(r111)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r121: ? <- Part { src: r19, offset: 0, size: 4 }
  (  2)  r122: ? <- Part { src: r19, offset: 0, size: 4 }
         r123: ? <- Arith(BitXor, r121, r122)
         r124: ? <- Part { src: r19, offset: 4, size: 4 }
         r130: ? <- Part { src: r123, offset: 0, size: 1 }
         r133: ? <- Const { value: 4096, size: 4 }
         r134: ? <- Part { src: r17, offset: 4, size: 4 }
         r135: ? <- Concat { lo: r133, hi: r134 }
         r136: ? <- Const { value: 8, size: 4 }
         r137: ? <- Part { src: r77, offset: 4, size: 4 }
         r138: ? <- Concat { lo: r136, hi: r137 }
  (  2)  r139: ? <- Const { value: 4203184, size: 4 }
  (  2)  r140: ? <- Part { src: r68, offset: 4, size: 4 }
         r141: ? <- Concat { lo: r139, hi: r140 }
         r160: ? <- CArg { value: r130, next_arg: None }
         r161: ? <- CArg { value: r124, next_arg: Some(r160) }
         r162: ? <- CArg { value: r122, next_arg: Some(r161) }
         r163: ? <- CArg { value: r83, next_arg: Some(r162) }
         r164: ? <- CArg { value: r140, next_arg: Some(r163) }
         r165: ? <- CArg { value: r139, next_arg: Some(r164) }
         r166: cs_disasm <TypeID(3330v1)> <- Const { value: 4198496, size: 8 }
         r167: ? <- Call { callee: r166, first_arg: Some(r165) }
  (  3)  r177: ? <- Part { src: r167, offset: 0, size: 8 }
  (  2)  r179: ? <- Arith(BitAnd, r177, r177)
         r181: ? <- IsZero(r179)
         r186: ? <- SetJumpCondition(r181)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r188: ? <- Part { src: r16, offset: 0, size: 4 }
         r189: ? <- Part { src: r16, offset: 0, size: 4 }
         r190: ? <- Arith(BitXor, r188, r189)
         r191: ? <- Part { src: r16, offset: 4, size: 4 }
         r192: ? <- Concat { lo: r190, hi: r191 }
         r400: ? <- Upsilon { value: r177, phi_ref: r386 }
         r402: ? <- Upsilon { value: r192, phi_ref: r388 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r388: ? <- Phi
         r386: ? <- Phi
         r200: ? <- Const { value: 8, size: 8 }
         r201: ? <- Arith(Add, r200, r77)
         r202: ? <- LoadMem { addr: r201, size: 8 }
         r207: ? <- Const { value: 5, size: 1 }
         r208: ? <- Widen { reg: r207, target_size: 8, sign: false }
         r209: ? <- Arith(Shl, r388, r208)
         r215: ? <- Arith(Sub, r209, r388)
         r223: ? <- Const { value: 1, size: 8 }
  (  2)  r224: ? <- Arith(Add, r388, r223)
         r232: ? <- Const { value: 0, size: 8 }
         r233: ? <- Arith(Add, r232, r202)
         r234: ? <- ArithK(Mul, r215, 8)
  (  2)  r235: ? <- Arith(Add, r233, r234)
         r241: ? <- Const { value: 74, size: 8 }
         r242: ? <- Arith(Add, r241, r235)
         r244: ? <- Const { value: 42, size: 8 }
  (  2)  r245: ? <- Arith(Add, r244, r235)
         r261: ? <- CArg { value: r245, next_arg: None }
         r262: printf <TypeID(3327v1)> <- Const { value: 4198480, size: 8 }
         r263: ? <- Call { callee: r262, first_arg: Some(r261) }
         r273: ? <- Part { src: r263, offset: 0, size: 8 }
  (  3)  r274: ? <- Arith(Sub, r386, r224)
         r278: ? <- IsZero(r274)
         r281: ? <- Not(r278)
         r282: ? <- SetJumpCondition(r281)
         r403: ? <- Upsilon { value: r274, phi_ref: r386 }
         r405: ? <- Upsilon { value: r224, phi_ref: r388 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r284: ? <- Const { value: 8, size: 8 }
  (  2)  r285: ? <- Arith(Add, r284, r77)
         r286: ? <- LoadMem { addr: r285, size: 8 }
         r295: ? <- CArg { value: r285, next_arg: None }
         r296: ? <- CArg { value: r286, next_arg: Some(r295) }
         r297: cs_free <TypeID(3323v1)> <- Const { value: 4198464, size: 8 }
         r298: ? <- Call { callee: r297, first_arg: Some(r296) }
         r406: ? <- Upsilon { value: r274, phi_ref: r389 }
         r407: ? <- Upsilon { value: r273, phi_ref: r390 }
         r408: ? <- Upsilon { value: r242, phi_ref: r391 }
         r409: ? <- Upsilon { value: r245, phi_ref: r392 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r362: __builtin_puts <TypeID(3366v1)> <- Const { value: 4198448, size: 8 }
         r363: ? <- Call { callee: r362, first_arg: None }
         r395: ? <- Upsilon { value: r141, phi_ref: r389 }
         r396: ? <- Upsilon { value: r179, phi_ref: r390 }
         r397: ? <- Upsilon { value: r135, phi_ref: r391 }
         r398: ? <- Upsilon { value: r138, phi_ref: r392 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r392: ? <- Phi
         r391: ? <- Phi
  (  3)  r390: ? <- Phi
         r389: ? <- Phi
         r309: ? <- CArg { value: r391, next_arg: None }
         r310: ? <- CArg { value: r392, next_arg: Some(r309) }
         r311: ? <- CArg { value: r389, next_arg: Some(r310) }
         r312: ? <- CArg { value: r77, next_arg: Some(r311) }
         r313: cs_close <TypeID(3320v1)> <- Const { value: 4198528, size: 8 }
         r314: ? <- Call { callee: r313, first_arg: Some(r312) }
         r325: ? <- Part { src: r390, offset: 0, size: 4 }
         r326: ? <- Part { src: r390, offset: 0, size: 4 }
         r327: ? <- Arith(BitXor, r325, r326)
         r328: ? <- Part { src: r390, offset: 4, size: 4 }
         r329: ? <- Concat { lo: r327, hi: r328 }
         r399: ? <- Upsilon { value: r329, phi_ref: r393 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r374: ? <- Part { src: r15, offset: 0, size: 4 }
         r375: ? <- Const { value: -1, size: 4 }
         r376: ? <- Arith(BitOr, r374, r375)
         r377: ? <- Part { src: r15, offset: 4, size: 4 }
         r378: ? <- Concat { lo: r376, hi: r377 }
         r394: ? <- Upsilon { value: r378, phi_ref: r393 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r393: ? <- Phi
         r355: ? <- Concat { lo: r354, hi: r393 }
         r356: ? <- Part { src: r355, offset: 0, size: 4 }
         r357: ? <- SetReturnValue(r356)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r19, r23, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r83, r86, r87, r88, r89, r90, r91, r102, r103, r104, r106, r111, r112]
  BlockID(1) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) } [r121, r122, r123, r124, r130, r133, r134, r135, r136, r137, r138, r139, r140, r141, r160, r161, r162, r163, r164, r165, r166, r167, r177, r179, r181, r186]
  BlockID(2) -> Always(Block(BlockID(3))) [r188, r189, r190, r191, r192, r400, r402]
  BlockID(3) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) } [r388, r386, r200, r201, r202, r207, r208, r209, r215, r223, r224, r232, r233, r234, r235, r241, r242, r244, r245, r261, r262, r263, r273, r274, r278, r281, r282, r403, r405]
  BlockID(4) -> Always(Block(BlockID(5))) [r284, r285, r286, r295, r296, r297, r298, r406, r407, r408, r409]
  BlockID(5) -> Always(Block(BlockID(6))) [r392, r391, r390, r389, r309, r310, r311, r312, r313, r314, r325, r326, r327, r328, r329, r399]
  BlockID(6) -> Always(Return) [r393, r354, r355, r356, r357]
  BlockID(7) -> Always(Block(BlockID(5))) [r362, r363, r395, r396, r397, r398]
  BlockID(8) -> Always(Block(BlockID(6))) [r374, r375, r376, r377, r378, r394]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  BlockID(5)
    |  |  BlockID(7)
    |  BlockID(6)
    |  BlockID(8)

ssa post-xform:
ssa program  410 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  6)  r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
  (  2)  r14: ? <- Ancestral(AncestralName("RSI"))
  (  4)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  4)  r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  3)  r19: ? <- Ancestral(AncestralName("R8"))
         r23: ? <- Ancestral(AncestralName("R12"))
         r64: ? <- ArithK(Add, r11, -8)
         r65: ? <- StoreMem { addr: r64, value: r23 }
         r66: ? <- Const { value: 8, size: 4 }
         r67: ? <- Part { src: r14, offset: 4, size: 4 }
         r68: ? <- Concat { lo: r66, hi: r67 }
         r69: ? <- Const { value: 3, size: 4 }
         r70: ? <- Part { src: r13, offset: 4, size: 4 }
         r71: ? <- Concat { lo: r69, hi: r70 }
         r72: ? <- ArithK(Add, r11, -16)
         r73: ? <- StoreMem { addr: r72, value: r10 }
         r74: ? <- ArithK(Add, r11, -24)
         r75: ? <- StoreMem { addr: r74, value: r16 }
  (  4)  r77: ? <- ArithK(Add, r11, -40)
         r83: ? <- Part { src: r77, offset: 0, size: 1 }
         r86: ? <- CArg { value: r17, next_arg: None }
         r87: ? <- CArg { value: r77, next_arg: Some(r86) }
         r88: ? <- CArg { value: r68, next_arg: Some(r87) }
         r89: ? <- CArg { value: r71, next_arg: Some(r88) }
         r90: cs_open <TypeID(3338v1)> <- Const { value: 4198512, size: 8 }
         r91: ? <- Call { callee: r90, first_arg: Some(r89) }
         r102: ? <- Part { src: r15, offset: 0, size: 4 }
         r103: ? <- Part { src: r15, offset: 0, size: 4 }
         r104: ? <- Arith(BitAnd, r102, r103)
         r106: ? <- IsZero(r104)
         r111: ? <- Not(r106)
         r112: ? <- SetJumpCondition(r111)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r121: ? <- Part { src: r19, offset: 0, size: 4 }
  (  2)  r122: ? <- Part { src: r19, offset: 0, size: 4 }
         r123: ? <- Arith(BitXor, r121, r122)
         r124: ? <- Part { src: r19, offset: 4, size: 4 }
         r130: ? <- Part { src: r123, offset: 0, size: 1 }
         r133: ? <- Const { value: 4096, size: 4 }
         r134: ? <- Part { src: r17, offset: 4, size: 4 }
         r135: ? <- Concat { lo: r133, hi: r134 }
         r136: ? <- Const { value: 8, size: 4 }
         r137: ? <- Part { src: r77, offset: 4, size: 4 }
         r138: ? <- Concat { lo: r136, hi: r137 }
  (  2)  r139: ? <- Const { value: 4203184, size: 4 }
  (  2)  r140: ? <- Part { src: r14, offset: 4, size: 4 }
         r141: ? <- Concat { lo: r139, hi: r140 }
         r160: ? <- CArg { value: r130, next_arg: None }
         r161: ? <- CArg { value: r124, next_arg: Some(r160) }
         r162: ? <- CArg { value: r122, next_arg: Some(r161) }
         r163: ? <- CArg { value: r83, next_arg: Some(r162) }
         r164: ? <- CArg { value: r140, next_arg: Some(r163) }
         r165: ? <- CArg { value: r139, next_arg: Some(r164) }
         r166: cs_disasm <TypeID(3330v1)> <- Const { value: 4198496, size: 8 }
  (  3)  r167: ? <- Call { callee: r166, first_arg: Some(r165) }
         r181: ? <- IsZero(r167)
         r186: ? <- SetJumpCondition(r181)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r188: ? <- Part { src: r16, offset: 0, size: 4 }
         r189: ? <- Part { src: r16, offset: 0, size: 4 }
         r190: ? <- Arith(BitXor, r188, r189)
         r191: ? <- Part { src: r16, offset: 4, size: 4 }
         r192: ? <- Concat { lo: r190, hi: r191 }
         r400: ? <- Upsilon { value: r167, phi_ref: r386 }
         r402: ? <- Upsilon { value: r192, phi_ref: r388 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r388: ? <- Phi
         r386: ? <- Phi
         r201: ? <- ArithK(Add, r11, -32)
         r202: ? <- LoadMem { addr: r201, size: 8 }
         r207: ? <- Const { value: 5, size: 1 }
         r208: ? <- Widen { reg: r207, target_size: 8, sign: false }
         r209: ? <- Arith(Shl, r388, r208)
         r215: ? <- Arith(Sub, r209, r388)
  (  2)  r224: ? <- ArithK(Add, r388, 1)
         r234: ? <- ArithK(Mul, r215, 8)
  (  2)  r235: ? <- Arith(Add, r202, r234)
         r242: ? <- ArithK(Add, r235, 74)
  (  2)  r245: ? <- ArithK(Add, r235, 42)
         r261: ? <- CArg { value: r245, next_arg: None }
         r262: printf <TypeID(3327v1)> <- Const { value: 4198480, size: 8 }
         r263: ? <- Call { callee: r262, first_arg: Some(r261) }
  (  3)  r274: ? <- Arith(Sub, r386, r224)
         r278: ? <- IsZero(r274)
         r281: ? <- Not(r278)
         r282: ? <- SetJumpCondition(r281)
         r403: ? <- Upsilon { value: r274, phi_ref: r386 }
         r405: ? <- Upsilon { value: r224, phi_ref: r388 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
  (  2)  r285: ? <- ArithK(Add, r11, -32)
         r286: ? <- LoadMem { addr: r285, size: 8 }
         r295: ? <- CArg { value: r285, next_arg: None }
         r296: ? <- CArg { value: r286, next_arg: Some(r295) }
         r297: cs_free <TypeID(3323v1)> <- Const { value: 4198464, size: 8 }
         r298: ? <- Call { callee: r297, first_arg: Some(r296) }
         r406: ? <- Upsilon { value: r274, phi_ref: r389 }
         r407: ? <- Upsilon { value: r263, phi_ref: r390 }
         r408: ? <- Upsilon { value: r242, phi_ref: r391 }
         r409: ? <- Upsilon { value: r245, phi_ref: r392 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r362: __builtin_puts <TypeID(3366v1)> <- Const { value: 4198448, size: 8 }
         r363: ? <- Call { callee: r362, first_arg: None }
         r395: ? <- Upsilon { value: r141, phi_ref: r389 }
         r396: ? <- Upsilon { value: r167, phi_ref: r390 }
         r397: ? <- Upsilon { value: r135, phi_ref: r391 }
         r398: ? <- Upsilon { value: r138, phi_ref: r392 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r392: ? <- Phi
         r391: ? <- Phi
  (  3)  r390: ? <- Phi
         r389: ? <- Phi
         r309: ? <- CArg { value: r391, next_arg: None }
         r310: ? <- CArg { value: r392, next_arg: Some(r309) }
         r311: ? <- CArg { value: r389, next_arg: Some(r310) }
         r312: ? <- CArg { value: r77, next_arg: Some(r311) }
         r313: cs_close <TypeID(3320v1)> <- Const { value: 4198528, size: 8 }
         r314: ? <- Call { callee: r313, first_arg: Some(r312) }
         r325: ? <- Part { src: r390, offset: 0, size: 4 }
         r326: ? <- Part { src: r390, offset: 0, size: 4 }
         r327: ? <- Arith(BitXor, r325, r326)
         r328: ? <- Part { src: r390, offset: 4, size: 4 }
         r329: ? <- Concat { lo: r327, hi: r328 }
         r399: ? <- Upsilon { value: r329, phi_ref: r393 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r374: ? <- Part { src: r15, offset: 0, size: 4 }
         r376: ? <- ArithK(BitOr, r374, -1)
         r377: ? <- Part { src: r15, offset: 4, size: 4 }
         r378: ? <- Concat { lo: r376, hi: r377 }
         r394: ? <- Upsilon { value: r378, phi_ref: r393 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r393: ? <- Phi
         r356: ? <- Part { src: r393, offset: 0, size: 4 }
         r357: ? <- SetReturnValue(r356)



T0: {
  [pre:RSP - 8]:* := pre:R12;
  [pre:RSP - 16]:* := pre:RBP;
  [pre:RSP - 24]:* := pre:RBX;
  let r77: Bytes(8) = pre:RSP - 40;
  cs_open(pre:RDI[8 .. 4] ++ 3,
          pre:RSI[8 .. 4] ++ 8,
          r77,
          pre:RCX);
  ;
  if ! IsZero (pre:RAX[4 .. 0] & pre:RAX[4 .. 0]) {
    r393 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] | -1);
    goto T6
  }
  let r122: Bytes(4) = pre:R8[4 .. 0];
  let r140: Bytes(4) = pre:RSI[8 .. 4];
  let r167: Bytes(8) = cs_disasm(4203184,
                                 r140,
                                 r77[1 .. 0],
                                 r122,
                                 pre:R8[8 .. 4],
                                 (pre:R8[4 .. 0] ^ r122)[1 .. 0]);
  ;
  if IsZero (r167) {
    __builtin_puts();
    r389 := r140 ++ 4203184;
    r390 := cs_disasm(4203184,
                      r140,
                      r77[1 .. 0],
                      r122,
                      pre:R8[8 .. 4],
                      (pre:R8[4 .. 0] ^ r122)[1 .. 0]);
    r391 := pre:RCX[8 .. 4] ++ 4096;
    r392 := r77[8 .. 4] ++ 8;
    goto T5
  }
  r386 := cs_disasm(4203184,
                    r140,
                    r77[1 .. 0],
                    r122,
                    pre:R8[8 .. 4],
                    (pre:R8[4 .. 0] ^ r122)[1 .. 0]);
  r388 := pre:RBX[8 .. 4] ++ (pre:RBX[4 .. 0] ^ pre:RBX[4 .. 0]);
  goto T3
  T3: {
    let mut r388: Bytes(8);
    let mut r386: Bytes(8);
    let r224: Bytes(8) = r388 + 1;
    let r235: Bytes(8) = [pre:RSP - 32]:8 + (r388 << 5 as u64 - r388) * 8;
    let r245: Bytes(8) = r235 + 42;
    printf(r245);
    let r274: Bytes(8) = r386 - r224;
    ;
    r386 := r386 - r224;
    r388 := r388 + 1;
    if ! IsZero (r274) {
      goto T3
    }
    let r285: Bytes(8) = pre:RSP - 32;
    cs_free([r285]:8,
            r285);
    r389 := r386 - r224;
    r390 := printf(r245);
    r391 := r235 + 74;
    r392 := r235 + 42;
    goto T5
  }
  
  T5: {
    let mut r392: Bytes(8);
    let mut r391: Bytes(8);
    let mut r390: Bytes(8);
    let mut r389: Bytes(8);
    cs_close(r77,
             r389,
             r392,
             r391);
    r393 := r390[8 .. 4] ++ (r390[4 .. 0] ^ r390[4 .. 0]);
    goto T6
  }
  
  T6: {
    let mut r393: Bytes(8);
    ;
    return r393[4 .. 0]
  }

}
