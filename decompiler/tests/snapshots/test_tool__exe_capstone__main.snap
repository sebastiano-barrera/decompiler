---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  355 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
0x401090:
   42 r12 <- ArithK(Add, r12, -8)
   43 r46 <- StoreMem { addr: r12, value: r24 }
0x401092:
   44 r45 <- Int { value: 8, size: 4 }
   45 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   46 r15 <- Get(r45)
0x401097:
   47 r45 <- Int { value: 3, size: 4 }
   48 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   49 r14 <- Get(r45)
0x40109c:
   50 r12 <- ArithK(Add, r12, -8)
   51 r46 <- StoreMem { addr: r12, value: r11 }
0x40109d:
   52 r12 <- ArithK(Add, r12, -8)
   53 r46 <- StoreMem { addr: r12, value: r17 }
0x40109e:
   54 r46 <- Int { value: 16, size: 8 }
   55 r12 <- Arith(Sub, r12, r46)
   56 r12 <- Get(r12)
   57 r10 <- OverflowOf(r12)
   58 r2 <- CarryOf(r12)
   59 r6 <- SignOf(r12)
   60 r5 <- IsZero(r12)
   61 r47 <- Part { src: r12, offset: 0, size: 1 }
   62 r3 <- Parity(r47)
0x4010a2:
   63 r19 <- Get(r12)
0x4010a5:
   64 r45 <- Int { value: 4198512, size: 8 }
   65 r46 <- CArg { value: r18, next_arg: None }
   66 r46 <- CArg { value: r19, next_arg: Some(r46) }
   67 r46 <- CArg { value: r15, next_arg: Some(r46) }
   68 r46 <- CArg { value: r14, next_arg: Some(r46) }
   69 r46 <- Call { callee: r45, first_arg: Some(r46) }
   70 r2 <- UndefinedBool
   71 r3 <- UndefinedBool
   72 r4 <- UndefinedBool
   73 r5 <- UndefinedBool
   74 r6 <- UndefinedBool
   75 r7 <- UndefinedBool
   76 r8 <- UndefinedBool
   77 r9 <- UndefinedBool
   78 r10 <- UndefinedBool
   79 r46 <- Get(r16)
0x4010aa:
   80 r46 <- Part { src: r16, offset: 0, size: 4 }
   81 r48 <- Part { src: r16, offset: 0, size: 4 }
   82 r46 <- Arith(BitAnd, r46, r48)
   83 r6 <- SignOf(r46)
   84 r5 <- IsZero(r46)
   85 r49 <- Part { src: r46, offset: 0, size: 1 }
   86 r3 <- Parity(r46)
   87 r2 <- False
   88 r10 <- False
0x4010ac:
   89 r45 <- Not(r5)
   90 r46 <- SetJumpCondition(r45)
   91 r46 <- Control(JmpExtIf(4198720))
0x4010b2:
   92 r46 <- Int { value: 0, size: 8 }
   93 r46 <- Arith(Add, r46, r12)
   94 r45 <- LoadMem { addr: r46, size: 8 }
   95 r14 <- Get(r45)
0x4010b6:
   96 r45 <- Int { value: 8, size: 8 }
   97 r45 <- Arith(Add, r45, r12)
   98 r21 <- Get(r45)
0x4010bb:
   99 r46 <- Part { src: r20, offset: 0, size: 4 }
  100 r48 <- Part { src: r20, offset: 0, size: 4 }
  101 r46 <- Arith(BitXor, r46, r48)
  102 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  103 r20 <- Get(r46)
  104 r10 <- False
  105 r2 <- False
  106 r6 <- SignOf(r46)
  107 r5 <- IsZero(r46)
  108 r49 <- Part { src: r46, offset: 0, size: 1 }
  109 r3 <- Parity(r49)
0x4010be:
  110 r24 <- Get(r12)
0x4010c1:
  111 r45 <- Int { value: 4096, size: 4 }
  112 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  113 r18 <- Get(r45)
0x4010c6:
  114 r45 <- Int { value: 8, size: 4 }
  115 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  116 r19 <- Get(r45)
0x4010cb:
  117 r45 <- Int { value: 4203184, size: 4 }
  118 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  119 r15 <- Get(r45)
0x4010d0:
  120 r45 <- Int { value: 4198496, size: 8 }
  121 r47 <- Void
  122 r47 <- Get(r14)
  123 r48 <- Void
  124 r48 <- Get(r15)
  125 r49 <- Void
  126 r49 <- Get(r19)
  127 r50 <- Void
  128 r50 <- Get(r18)
  129 r51 <- Void
  130 r51 <- Get(r20)
  131 r52 <- Void
  132 r52 <- Get(r21)
  133 r46 <- CArg { value: r52, next_arg: None }
  134 r46 <- CArg { value: r51, next_arg: Some(r46) }
  135 r46 <- CArg { value: r50, next_arg: Some(r46) }
  136 r46 <- CArg { value: r49, next_arg: Some(r46) }
  137 r46 <- CArg { value: r48, next_arg: Some(r46) }
  138 r46 <- CArg { value: r47, next_arg: Some(r46) }
  139 r46 <- Call { callee: r45, first_arg: Some(r46) }
  140 r2 <- UndefinedBool
  141 r3 <- UndefinedBool
  142 r4 <- UndefinedBool
  143 r5 <- UndefinedBool
  144 r6 <- UndefinedBool
  145 r7 <- UndefinedBool
  146 r8 <- UndefinedBool
  147 r9 <- UndefinedBool
  148 r10 <- UndefinedBool
  149 r16 <- Part { src: r46, offset: 0, size: 8 }
0x4010d5:
  150 r11 <- Get(r16)
0x4010d8:
  151 r16 <- Arith(BitAnd, r16, r16)
  152 r6 <- SignOf(r16)
  153 r5 <- IsZero(r16)
  154 r47 <- Part { src: r16, offset: 0, size: 1 }
  155 r3 <- Parity(r16)
  156 r2 <- False
  157 r10 <- False
0x4010db:
  158 r45 <- SetJumpCondition(r5)
  159 r45 <- Control(JmpExtIf(4198708))
0x4010dd:
  160 r46 <- Part { src: r17, offset: 0, size: 4 }
  161 r48 <- Part { src: r17, offset: 0, size: 4 }
  162 r46 <- Arith(BitXor, r46, r48)
  163 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  164 r17 <- Get(r46)
  165 r10 <- False
  166 r2 <- False
  167 r6 <- SignOf(r46)
  168 r5 <- IsZero(r46)
  169 r49 <- Part { src: r46, offset: 0, size: 1 }
  170 r3 <- Parity(r49)
0x4010e0:
  171 r16 <- Get(r17)
0x4010e3:
  172 r46 <- Int { value: 8, size: 8 }
  173 r46 <- Arith(Add, r46, r12)
  174 r45 <- LoadMem { addr: r46, size: 8 }
  175 r19 <- Get(r45)
0x4010e8:
  176 r45 <- Int { value: 4203193, size: 4 }
  177 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  178 r14 <- Get(r45)
0x4010ed:
  179 r46 <- Int { value: 5, size: 1 }
  180 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  181 r16 <- Arith(Shl, r16, r46)
  182 r16 <- Get(r16)
  183 r6 <- SignOf(r16)
  184 r5 <- IsZero(r16)
  185 r47 <- Part { src: r16, offset: 0, size: 1 }
  186 r3 <- Parity(r47)
0x4010f1:
  187 r16 <- Arith(Sub, r16, r17)
  188 r16 <- Get(r16)
  189 r10 <- OverflowOf(r16)
  190 r2 <- CarryOf(r16)
  191 r6 <- SignOf(r16)
  192 r5 <- IsZero(r16)
  193 r47 <- Part { src: r16, offset: 0, size: 1 }
  194 r3 <- Parity(r47)
0x4010f4:
  195 r46 <- Int { value: 1, size: 8 }
  196 r17 <- Arith(Add, r17, r46)
  197 r17 <- Get(r17)
  198 r10 <- OverflowOf(r17)
  199 r2 <- CarryOf(r17)
  200 r6 <- SignOf(r17)
  201 r5 <- IsZero(r17)
  202 r47 <- Part { src: r17, offset: 0, size: 1 }
  203 r3 <- Parity(r47)
0x4010f8:
  204 r45 <- Int { value: 0, size: 8 }
  205 r45 <- Arith(Add, r45, r19)
  206 r46 <- ArithK(Mul, r16, 8)
  207 r45 <- Arith(Add, r45, r46)
  208 r16 <- Get(r45)
0x4010fc:
  209 r46 <- Int { value: 8, size: 8 }
  210 r46 <- Arith(Add, r46, r16)
  211 r45 <- LoadMem { addr: r46, size: 8 }
  212 r15 <- Get(r45)
0x401100:
  213 r45 <- Int { value: 74, size: 8 }
  214 r45 <- Arith(Add, r45, r16)
  215 r18 <- Get(r45)
0x401104:
  216 r45 <- Int { value: 42, size: 8 }
  217 r45 <- Arith(Add, r45, r16)
  218 r19 <- Get(r45)
0x401108:
  219 r46 <- Part { src: r16, offset: 0, size: 4 }
  220 r48 <- Part { src: r16, offset: 0, size: 4 }
  221 r46 <- Arith(BitXor, r46, r48)
  222 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  223 r16 <- Get(r46)
  224 r10 <- False
  225 r2 <- False
  226 r6 <- SignOf(r46)
  227 r5 <- IsZero(r46)
  228 r49 <- Part { src: r46, offset: 0, size: 1 }
  229 r3 <- Parity(r49)
0x40110a:
  230 r45 <- Int { value: 4198480, size: 8 }
  231 r47 <- Void
  232 r47 <- Get(r14)
  233 r46 <- CArg { value: r47, next_arg: None }
  234 r46 <- Call { callee: r45, first_arg: Some(r46) }
  235 r2 <- UndefinedBool
  236 r3 <- UndefinedBool
  237 r4 <- UndefinedBool
  238 r5 <- UndefinedBool
  239 r6 <- UndefinedBool
  240 r7 <- UndefinedBool
  241 r8 <- UndefinedBool
  242 r9 <- UndefinedBool
  243 r10 <- UndefinedBool
  244 r16 <- Part { src: r46, offset: 0, size: 8 }
0x40110f:
  245 r11 <- Arith(Sub, r11, r17)
  246 r10 <- OverflowOf(r11)
  247 r2 <- CarryOf(r11)
  248 r6 <- SignOf(r11)
  249 r5 <- IsZero(r11)
  250 r47 <- Part { src: r11, offset: 0, size: 1 }
  251 r3 <- Parity(r47)
0x401112:
  252 r45 <- Not(r5)
  253 r46 <- SetJumpCondition(r45)
  254 r46 <- Control(JmpExtIf(4198624))
0x401114:
  255 r46 <- Int { value: 8, size: 8 }
  256 r46 <- Arith(Add, r46, r12)
  257 r45 <- LoadMem { addr: r46, size: 8 }
  258 r14 <- Get(r45)
0x401119:
  259 r15 <- Get(r11)
0x40111c:
  260 r45 <- Int { value: 4198464, size: 8 }
  261 r47 <- Void
  262 r47 <- Get(r14)
  263 r48 <- Void
  264 r48 <- Get(r15)
  265 r46 <- CArg { value: r48, next_arg: None }
  266 r46 <- CArg { value: r47, next_arg: Some(r46) }
  267 r46 <- Call { callee: r45, first_arg: Some(r46) }
  268 r2 <- UndefinedBool
  269 r3 <- UndefinedBool
  270 r4 <- UndefinedBool
  271 r5 <- UndefinedBool
  272 r6 <- UndefinedBool
  273 r7 <- UndefinedBool
  274 r8 <- UndefinedBool
  275 r9 <- UndefinedBool
  276 r10 <- UndefinedBool
0x401121:
  277 r14 <- Get(r24)
0x401124:
  278 r45 <- Int { value: 4198528, size: 8 }
  279 r46 <- CArg { value: r18, next_arg: None }
  280 r46 <- CArg { value: r19, next_arg: Some(r46) }
  281 r46 <- CArg { value: r15, next_arg: Some(r46) }
  282 r46 <- CArg { value: r14, next_arg: Some(r46) }
  283 r46 <- Call { callee: r45, first_arg: Some(r46) }
  284 r2 <- UndefinedBool
  285 r3 <- UndefinedBool
  286 r4 <- UndefinedBool
  287 r5 <- UndefinedBool
  288 r6 <- UndefinedBool
  289 r7 <- UndefinedBool
  290 r8 <- UndefinedBool
  291 r9 <- UndefinedBool
  292 r10 <- UndefinedBool
  293 r46 <- Get(r16)
0x401129:
  294 r46 <- Part { src: r16, offset: 0, size: 4 }
  295 r48 <- Part { src: r16, offset: 0, size: 4 }
  296 r46 <- Arith(BitXor, r46, r48)
  297 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  298 r16 <- Get(r46)
  299 r10 <- False
  300 r2 <- False
  301 r6 <- SignOf(r46)
  302 r5 <- IsZero(r46)
  303 r49 <- Part { src: r46, offset: 0, size: 1 }
  304 r3 <- Parity(r49)
0x40112b:
  305 r46 <- Int { value: 16, size: 8 }
  306 r12 <- Arith(Add, r12, r46)
  307 r12 <- Get(r12)
  308 r10 <- OverflowOf(r12)
  309 r2 <- CarryOf(r12)
  310 r6 <- SignOf(r12)
  311 r5 <- IsZero(r12)
  312 r47 <- Part { src: r12, offset: 0, size: 1 }
  313 r3 <- Parity(r47)
0x40112f:
  314 r45 <- LoadMem { addr: r12, size: 8 }
  315 r17 <- Get(r45)
  316 r12 <- ArithK(Add, r12, 8)
0x401130:
  317 r45 <- LoadMem { addr: r12, size: 8 }
  318 r11 <- Get(r45)
  319 r12 <- ArithK(Add, r12, 8)
0x401131:
  320 r45 <- LoadMem { addr: r12, size: 8 }
  321 r24 <- Get(r45)
  322 r12 <- ArithK(Add, r12, 8)
0x401133:
  323 r45 <- Void
  324 r45 <- Concat { lo: r45, hi: r16 }
  325 r45 <- Part { src: r45, offset: 0, size: 4 }
  326 r47 <- SetReturnValue(r45)
  327 r47 <- Control(Ret)
0x401134:
  328 r45 <- Int { value: 4203208, size: 4 }
  329 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  330 r14 <- Get(r45)
0x401139:
  331 r45 <- Int { value: 4198448, size: 8 }
  332 r46 <- Call { callee: r45, first_arg: None }
  333 r2 <- UndefinedBool
  334 r3 <- UndefinedBool
  335 r4 <- UndefinedBool
  336 r5 <- UndefinedBool
  337 r6 <- UndefinedBool
  338 r7 <- UndefinedBool
  339 r8 <- UndefinedBool
  340 r9 <- UndefinedBool
  341 r10 <- UndefinedBool
0x40113e:
  342 r45 <- Control(JmpExt(4198689))
0x401140:
  343 r46 <- Part { src: r16, offset: 0, size: 4 }
  344 r47 <- Int { value: -1, size: 4 }
  345 r46 <- Arith(BitOr, r46, r47)
  346 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  347 r16 <- Get(r46)
  348 r10 <- False
  349 r2 <- False
  350 r6 <- SignOf(r46)
  351 r5 <- IsZero(r46)
  352 r48 <- Part { src: r46, offset: 0, size: 1 }
  353 r3 <- Parity(r48)
0x401143:
  354 r45 <- Control(JmpExt(4198699))


 --- ssa pre-xform
ssa program  376 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r9: Bytes(8) <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10: Bytes(8) <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r14: Bytes(8) <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
  (  3)  r15: Bytes(8) <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
         r16: Bytes(8) <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  (  2)  r18: Bytes(8) <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
         r22: Bytes(8) <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
  (  2)  r42: Bytes(8) <- ArithK(Add, r10, -8)
         r43: Effect <- StoreMem { addr: r42, value: r22 }
         r44: Bytes(4) <- Int { value: 8, size: 4 }
         r45: Bytes(8) <- Widen { reg: r44, target_size: 8, sign: false }
         r47: Bytes(4) <- Int { value: 3, size: 4 }
         r48: Bytes(8) <- Widen { reg: r47, target_size: 8, sign: false }
  (  2)  r50: Bytes(8) <- ArithK(Add, r42, -8)
         r51: Effect <- StoreMem { addr: r50, value: r9 }
  (  2)  r52: Bytes(8) <- ArithK(Add, r50, -8)
         r53: Effect <- StoreMem { addr: r52, value: r15 }
         r54: Bytes(8) <- Int { value: 16, size: 8 }
  (  6)  r55: Bytes(8) <- Arith(Sub, r52, r54)
         r64: Bytes(8) <- Int { value: 4198512, size: 8 }
         r65: Bytes(8) <- CArg { value: r16, next_arg: None }
         r66: Bytes(8) <- CArg { value: r55, next_arg: Some(r65) }
         r67: Bytes(8) <- CArg { value: r45, next_arg: Some(r66) }
         r68: Bytes(8) <- CArg { value: r48, next_arg: Some(r67) }
         r69: Bytes(8) <- Call { callee: r64, first_arg: Some(r68) }
         r80: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r81: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r82: Bytes(4) <- Arith(BitAnd, r80, r81)
         r84: Bool <- IsZero(r82)
         r89: Bool <- Not(r84)
         r90: Effect <- SetJumpCondition(r89)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r92: Bytes(8) <- Int { value: 0, size: 8 }
         r93: Bytes(8) <- Arith(Add, r92, r55)
         r94: Bytes(8) <- LoadMem { addr: r93, size: 8 }
         r96: Bytes(8) <- Int { value: 8, size: 8 }
         r97: Bytes(8) <- Arith(Add, r96, r55)
         r99: Bytes(4) <- Part { src: r18, offset: 0, size: 4 }
         r100: Bytes(4) <- Part { src: r18, offset: 0, size: 4 }
         r101: Bytes(4) <- Arith(BitXor, r99, r100)
         r102: Bytes(8) <- Widen { reg: r101, target_size: 8, sign: false }
         r111: Bytes(4) <- Int { value: 4096, size: 4 }
  (  2)  r112: Bytes(8) <- Widen { reg: r111, target_size: 8, sign: false }
         r114: Bytes(4) <- Int { value: 8, size: 4 }
  (  2)  r115: Bytes(8) <- Widen { reg: r114, target_size: 8, sign: false }
         r117: Bytes(4) <- Int { value: 4203184, size: 4 }
  (  2)  r118: Bytes(8) <- Widen { reg: r117, target_size: 8, sign: false }
         r120: Bytes(8) <- Int { value: 4198496, size: 8 }
         r133: Bytes(8) <- CArg { value: r97, next_arg: None }
         r134: Bytes(8) <- CArg { value: r102, next_arg: Some(r133) }
         r135: Bytes(8) <- CArg { value: r112, next_arg: Some(r134) }
         r136: Bytes(8) <- CArg { value: r115, next_arg: Some(r135) }
         r137: Bytes(8) <- CArg { value: r118, next_arg: Some(r136) }
         r138: Bytes(8) <- CArg { value: r94, next_arg: Some(r137) }
         r139: Bytes(8) <- Call { callee: r120, first_arg: Some(r138) }
  (  3)  r149: Bytes(8) <- Part { src: r139, offset: 0, size: 8 }
  (  2)  r151: Bytes(8) <- Arith(BitAnd, r149, r149)
         r153: Bool <- IsZero(r151)
         r158: Effect <- SetJumpCondition(r153)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r160: Bytes(4) <- Part { src: r15, offset: 0, size: 4 }
         r161: Bytes(4) <- Part { src: r15, offset: 0, size: 4 }
         r162: Bytes(4) <- Arith(BitXor, r160, r161)
         r163: Bytes(8) <- Widen { reg: r162, target_size: 8, sign: false }
         r368: Effect <- Upsilon { value: r149, phi_ref: r355 }
         r369: Effect <- Upsilon { value: r163, phi_ref: r356 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r356: Error <- Phi
         r355: Error <- Phi
         r172: Bytes(8) <- Int { value: 8, size: 8 }
         r173: Bytes(8) <- Arith(Add, r172, r55)
         r174: Bytes(8) <- LoadMem { addr: r173, size: 8 }
         r176: Bytes(4) <- Int { value: 4203193, size: 4 }
         r177: Bytes(8) <- Widen { reg: r176, target_size: 8, sign: false }
         r179: Bytes(1) <- Int { value: 5, size: 1 }
         r180: Bytes(8) <- Widen { reg: r179, target_size: 8, sign: false }
         r181: Error <- Arith(Shl, r356, r180)
         r187: Error <- Arith(Sub, r181, r356)
         r195: Bytes(8) <- Int { value: 1, size: 8 }
  (  2)  r196: Error <- Arith(Add, r356, r195)
         r204: Bytes(8) <- Int { value: 0, size: 8 }
         r205: Bytes(8) <- Arith(Add, r204, r174)
         r206: Error <- ArithK(Mul, r187, 8)
  (  2)  r207: Error <- Arith(Add, r205, r206)
         r213: Bytes(8) <- Int { value: 74, size: 8 }
         r214: Error <- Arith(Add, r213, r207)
         r216: Bytes(8) <- Int { value: 42, size: 8 }
         r217: Error <- Arith(Add, r216, r207)
         r230: Bytes(8) <- Int { value: 4198480, size: 8 }
         r233: Bytes(8) <- CArg { value: r177, next_arg: None }
         r234: Bytes(8) <- Call { callee: r230, first_arg: Some(r233) }
         r244: Bytes(8) <- Part { src: r234, offset: 0, size: 8 }
  (  4)  r245: Error <- Arith(Sub, r355, r196)
         r249: Bool <- IsZero(r245)
         r252: Bool <- Not(r249)
         r253: Effect <- SetJumpCondition(r252)
         r370: Effect <- Upsilon { value: r245, phi_ref: r355 }
         r371: Effect <- Upsilon { value: r196, phi_ref: r356 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r255: Bytes(8) <- Int { value: 8, size: 8 }
         r256: Bytes(8) <- Arith(Add, r255, r55)
         r257: Bytes(8) <- LoadMem { addr: r256, size: 8 }
         r260: Bytes(8) <- Int { value: 4198464, size: 8 }
         r265: Error <- CArg { value: r245, next_arg: None }
         r266: Bytes(8) <- CArg { value: r257, next_arg: Some(r265) }
         r267: Bytes(8) <- Call { callee: r260, first_arg: Some(r266) }
         r372: Effect <- Upsilon { value: r245, phi_ref: r357 }
         r373: Effect <- Upsilon { value: r244, phi_ref: r358 }
         r374: Effect <- Upsilon { value: r214, phi_ref: r359 }
         r375: Effect <- Upsilon { value: r217, phi_ref: r360 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r331: Bytes(8) <- Int { value: 4198448, size: 8 }
         r332: Bytes(8) <- Call { callee: r331, first_arg: None }
         r363: Effect <- Upsilon { value: r118, phi_ref: r357 }
         r364: Effect <- Upsilon { value: r151, phi_ref: r358 }
         r365: Effect <- Upsilon { value: r112, phi_ref: r359 }
         r366: Effect <- Upsilon { value: r115, phi_ref: r360 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r360: Error <- Phi
         r359: Error <- Phi
  (  2)  r358: Bytes(8) <- Phi
         r357: Error <- Phi
         r278: Bytes(8) <- Int { value: 4198528, size: 8 }
         r279: Error <- CArg { value: r359, next_arg: None }
         r280: Error <- CArg { value: r360, next_arg: Some(r279) }
         r281: Error <- CArg { value: r357, next_arg: Some(r280) }
         r282: Bytes(8) <- CArg { value: r55, next_arg: Some(r281) }
         r283: Bytes(8) <- Call { callee: r278, first_arg: Some(r282) }
         r294: Bytes(4) <- Part { src: r358, offset: 0, size: 4 }
         r295: Bytes(4) <- Part { src: r358, offset: 0, size: 4 }
         r296: Bytes(4) <- Arith(BitXor, r294, r295)
         r297: Bytes(8) <- Widen { reg: r296, target_size: 8, sign: false }
         r367: Effect <- Upsilon { value: r297, phi_ref: r361 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r343: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r344: Bytes(4) <- Int { value: -1, size: 4 }
         r345: Bytes(4) <- Arith(BitOr, r343, r344)
         r346: Bytes(8) <- Widen { reg: r345, target_size: 8, sign: false }
         r362: Effect <- Upsilon { value: r346, phi_ref: r361 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r361: Bytes(8) <- Phi
         r324: Bytes(8) <- Concat { lo: r323, hi: r361 }
         r325: Bytes(4) <- Part { src: r324, offset: 0, size: 4 }
         r326: Effect <- SetReturnValue(r325)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) } [r9, r10, r14, r15, r16, r18, r22, r42, r43, r45, r48, r50, r51, r52, r53, r55, r64, r65, r66, r67, r68, r69, r80, r81, r82, r84, r89, r90]
  BlockID(1) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) } [r93, r94, r97, r99, r100, r101, r102, r112, r115, r118, r120, r133, r134, r135, r136, r137, r138, r139, r153, r158]
  BlockID(2) -> Always(Block(BlockID(3))) [r160, r161, r162, r163, r368, r369]
  BlockID(3) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) } [r356, r355, r173, r174, r177, r181, r187, r196, r206, r207, r214, r217, r230, r233, r234, r245, r249, r252, r253, r370, r371]
  BlockID(4) -> Always(Block(BlockID(5))) [r256, r257, r260, r265, r266, r267, r372, r373, r374, r375]
  BlockID(5) -> Always(Block(BlockID(6))) [r360, r359, r358, r357, r278, r279, r280, r281, r282, r283, r294, r295, r296, r297, r367]
  BlockID(6) -> Always(Return) [r361, r325, r326]
  BlockID(7) -> Always(Block(BlockID(5))) [r331, r332, r363, r364, r365, r366]
  BlockID(8) -> Always(Block(BlockID(6))) [r343, r345, r346, r362]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  BlockID(5)
|  |  BlockID(7)
|  BlockID(6)
|  BlockID(8)

 --- ssa
ssa program  376 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r9: Bytes(8) <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
  (  8)  r10: Bytes(8) <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r14: Bytes(8) <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
  (  3)  r15: Bytes(8) <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
         r16: Bytes(8) <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  (  2)  r18: Bytes(8) <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
         r22: Bytes(8) <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
         r42: Bytes(8) <- ArithK(Add, r10, -8)
         r43: Effect <- StoreMem { addr: r42, value: r22 }
         r45: Bytes(8) <- Int { value: 8, size: 8 }
         r48: Bytes(8) <- Int { value: 3, size: 8 }
         r50: Bytes(8) <- ArithK(Add, r10, -16)
         r51: Effect <- StoreMem { addr: r50, value: r9 }
         r52: Bytes(8) <- ArithK(Add, r10, -24)
         r53: Effect <- StoreMem { addr: r52, value: r15 }
  (  2)  r55: Bytes(8) <- ArithK(Add, r10, -40)
         r64: Bytes(8) <- Int { value: 4198512, size: 8 }
         r65: Bytes(8) <- CArg { value: r16, next_arg: None }
         r66: Bytes(8) <- CArg { value: r55, next_arg: Some(r65) }
         r67: Bytes(8) <- CArg { value: r45, next_arg: Some(r66) }
         r68: Bytes(8) <- CArg { value: r48, next_arg: Some(r67) }
         r69: Bytes(8) <- Call { callee: r64, first_arg: Some(r68) }
         r80: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r81: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r82: Bytes(4) <- Arith(BitAnd, r80, r81)
         r84: Bool <- IsZero(r82)
         r89: Bool <- Not(r84)
         r90: Effect <- SetJumpCondition(r89)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r93: Bytes(8) <- ArithK(Add, r10, -40)
         r94: Bytes(8) <- LoadMem { addr: r93, size: 8 }
         r97: Bytes(8) <- ArithK(Add, r10, -32)
         r99: Bytes(4) <- Part { src: r18, offset: 0, size: 4 }
         r100: Bytes(4) <- Part { src: r18, offset: 0, size: 4 }
         r101: Bytes(4) <- Arith(BitXor, r99, r100)
         r102: Bytes(8) <- Widen { reg: r101, target_size: 8, sign: false }
  (  2)  r112: Bytes(8) <- Int { value: 4096, size: 8 }
  (  2)  r115: Bytes(8) <- Int { value: 8, size: 8 }
  (  2)  r118: Bytes(8) <- Int { value: 4203184, size: 8 }
         r120: Bytes(8) <- Int { value: 4198496, size: 8 }
         r133: Bytes(8) <- CArg { value: r97, next_arg: None }
         r134: Bytes(8) <- CArg { value: r102, next_arg: Some(r133) }
         r135: Bytes(8) <- CArg { value: r112, next_arg: Some(r134) }
         r136: Bytes(8) <- CArg { value: r115, next_arg: Some(r135) }
         r137: Bytes(8) <- CArg { value: r118, next_arg: Some(r136) }
         r138: Bytes(8) <- CArg { value: r94, next_arg: Some(r137) }
  (  3)  r139: Bytes(8) <- Call { callee: r120, first_arg: Some(r138) }
         r153: Bool <- IsZero(r139)
         r158: Effect <- SetJumpCondition(r153)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r160: Bytes(4) <- Part { src: r15, offset: 0, size: 4 }
         r161: Bytes(4) <- Part { src: r15, offset: 0, size: 4 }
         r162: Bytes(4) <- Arith(BitXor, r160, r161)
         r163: Bytes(8) <- Widen { reg: r162, target_size: 8, sign: false }
         r368: Effect <- Upsilon { value: r139, phi_ref: r355 }
         r369: Effect <- Upsilon { value: r163, phi_ref: r356 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r356: Error <- Phi
         r355: Error <- Phi
         r173: Bytes(8) <- ArithK(Add, r10, -32)
         r174: Bytes(8) <- LoadMem { addr: r173, size: 8 }
         r177: Bytes(8) <- Int { value: 4203193, size: 8 }
         r181: Error <- ArithK(Shl, r356, 5)
         r187: Error <- Arith(Sub, r181, r356)
  (  2)  r196: Error <- ArithK(Add, r356, 1)
         r206: Error <- ArithK(Mul, r187, 8)
  (  2)  r207: Error <- Arith(Add, r174, r206)
         r214: Error <- ArithK(Add, r207, 74)
         r217: Error <- ArithK(Add, r207, 42)
         r230: Bytes(8) <- Int { value: 4198480, size: 8 }
         r233: Bytes(8) <- CArg { value: r177, next_arg: None }
         r234: Bytes(8) <- Call { callee: r230, first_arg: Some(r233) }
  (  4)  r245: Error <- Arith(Sub, r355, r196)
         r249: Bool <- IsZero(r245)
         r252: Bool <- Not(r249)
         r253: Effect <- SetJumpCondition(r252)
         r370: Effect <- Upsilon { value: r245, phi_ref: r355 }
         r371: Effect <- Upsilon { value: r196, phi_ref: r356 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r256: Bytes(8) <- ArithK(Add, r10, -32)
         r257: Bytes(8) <- LoadMem { addr: r256, size: 8 }
         r260: Bytes(8) <- Int { value: 4198464, size: 8 }
         r265: Error <- CArg { value: r245, next_arg: None }
         r266: Bytes(8) <- CArg { value: r257, next_arg: Some(r265) }
         r267: Bytes(8) <- Call { callee: r260, first_arg: Some(r266) }
         r372: Effect <- Upsilon { value: r245, phi_ref: r357 }
         r373: Effect <- Upsilon { value: r234, phi_ref: r358 }
         r374: Effect <- Upsilon { value: r214, phi_ref: r359 }
         r375: Effect <- Upsilon { value: r217, phi_ref: r360 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r331: Bytes(8) <- Int { value: 4198448, size: 8 }
         r332: Bytes(8) <- Call { callee: r331, first_arg: None }
         r363: Effect <- Upsilon { value: r118, phi_ref: r357 }
         r364: Effect <- Upsilon { value: r139, phi_ref: r358 }
         r365: Effect <- Upsilon { value: r112, phi_ref: r359 }
         r366: Effect <- Upsilon { value: r115, phi_ref: r360 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r360: Error <- Phi
         r359: Error <- Phi
  (  2)  r358: Bytes(8) <- Phi
         r357: Error <- Phi
         r278: Bytes(8) <- Int { value: 4198528, size: 8 }
         r279: Error <- CArg { value: r359, next_arg: None }
         r280: Error <- CArg { value: r360, next_arg: Some(r279) }
         r281: Error <- CArg { value: r357, next_arg: Some(r280) }
         r282: Bytes(8) <- CArg { value: r55, next_arg: Some(r281) }
         r283: Bytes(8) <- Call { callee: r278, first_arg: Some(r282) }
         r294: Bytes(4) <- Part { src: r358, offset: 0, size: 4 }
         r295: Bytes(4) <- Part { src: r358, offset: 0, size: 4 }
         r296: Bytes(4) <- Arith(BitXor, r294, r295)
         r297: Bytes(8) <- Widen { reg: r296, target_size: 8, sign: false }
         r367: Effect <- Upsilon { value: r297, phi_ref: r361 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r343: Bytes(4) <- Part { src: r14, offset: 0, size: 4 }
         r345: Bytes(4) <- ArithK(BitOr, r343, -1)
         r346: Bytes(8) <- Widen { reg: r345, target_size: 8, sign: false }
         r362: Effect <- Upsilon { value: r346, phi_ref: r361 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r361: Bytes(8) <- Phi
         r325: Bytes(4) <- Part { src: r361, offset: 0, size: 4 }
         r326: Effect <- SetReturnValue(r325)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:R12;
  [pre:RSP - 16]:* := pre:RBP;
  [pre:RSP - 24]:* := pre:RBX;
  let r55: Bytes(8) = pre:RSP - 40;
  4198512(3,
          8,
          r55,
          pre:RCX);
  ;
  if ! IsZero (pre:RAX[4 .. 0] & pre:RAX[4 .. 0]) {
    r361 := (pre:RAX[4 .. 0] | -1) as u64;
    goto T6
  }
  let r139: Bytes(8) = cs_disasm([pre:RSP - 40]:8,
                                 4203184,
                                 8,
                                 4096,
                                 ((pre:R8[4 .. 0] ^ pre:R8[4 .. 0]) as u64),
                                 (pre:RSP - 32));
  ;
  if IsZero (r139) {
    __builtin_puts();
    r357 := 4203184;
    r358 := cs_disasm([pre:RSP - 40]:8,
                      4203184,
                      8,
                      4096,
                      ((pre:R8[4 .. 0] ^ pre:R8[4 .. 0]) as u64),
                      (pre:RSP - 32));
    r359 := 4096;
    r360 := 8;
    goto T5
  }
  r355 := cs_disasm([pre:RSP - 40]:8,
                    4203184,
                    8,
                    4096,
                    ((pre:R8[4 .. 0] ^ pre:R8[4 .. 0]) as u64),
                    (pre:RSP - 32));
  r356 := (pre:RBX[4 .. 0] ^ pre:RBX[4 .. 0]) as u64;
  goto T3
  T3: {
    let mut r356: Error;
    let mut r355: Error;
    let r196: Error = r356 + 1;
    let r207: Error = [pre:RSP - 32]:8 + (r356 << 5 - r356) * 8;
    printf(4203193);
    let r245: Error = r355 - r196;
    ;
    r355 := r355 - r196;
    r356 := r356 + 1;
    if ! IsZero (r245) {
      goto T3
    }
    cs_free([pre:RSP - 32]:8,
            r245);
    r357 := r355 - r196;
    r358 := printf(4203193);
    r359 := r207 + 74;
    r360 := r207 + 42;
    goto T5
  }
  
  T5: {
    let mut r360: Error;
    let mut r359: Error;
    let mut r358: Bytes(8);
    let mut r357: Error;
    4198528(r55,
            r357,
            r360,
            r359);
    r361 := (r358[4 .. 0] ^ r358[4 .. 0]) as u64;
    goto T6
  }
  
  T6: {
    let mut r361: Bytes(8);
    ;
    return r361[4 .. 0]
  }

}
