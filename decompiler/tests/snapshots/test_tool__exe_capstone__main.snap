---
source: decompiler/tests/test_tool.rs
expression: out
---
main 0x401090+181 (file 0x1090)
          401090: 41 54                   push r12
          401092: be 08 00 00 00          mov esi,8
          401097: bf 03 00 00 00          mov edi,3
          40109c: 55                      push rbp
          40109d: 53                      push rbx
          40109e: 48 83 ec 10             sub rsp,10h
          4010a2: 48 89 e2                mov rdx,rsp
          4010a5: e8 c6 ff ff ff          call 0000000000401070h
          4010aa: 85 c0                   test eax,eax
          4010ac: 0f 85 8e 00 00 00       jne 0000000000401140h
          4010b2: 48 8b 3c 24             mov rdi,[rsp]
          4010b6: 4c 8d 4c 24 08          lea r9,[rsp+8]
          4010bb: 45 31 c0                xor r8d,r8d
          4010be: 49 89 e4                mov r12,rsp
          4010c1: b9 00 10 00 00          mov ecx,1000h
          4010c6: ba 08 00 00 00          mov edx,8
          4010cb: be b0 22 40 00          mov esi,4022B0h
          4010d0: e8 8b ff ff ff          call 0000000000401060h
          4010d5: 48 89 c5                mov rbp,rax
          4010d8: 48 85 c0                test rax,rax
          4010db: 74 57                   je short 0000000000401134h
          4010dd: 31 db                   xor ebx,ebx
          4010df: 90                      nop
          4010e0: 48 89 d8                mov rax,rbx
          4010e3: 48 8b 54 24 08          mov rdx,[rsp+8]
          4010e8: bf b9 22 40 00          mov edi,4022B9h
          4010ed: 48 c1 e0 05             shl rax,5
          4010f1: 48 29 d8                sub rax,rbx
          4010f4: 48 83 c3 01             add rbx,1
          4010f8: 48 8d 04 c2             lea rax,[rdx+rax*8]
          4010fc: 48 8b 70 08             mov rsi,[rax+8]
          401100: 48 8d 48 4a             lea rcx,[rax+4Ah]
          401104: 48 8d 50 2a             lea rdx,[rax+2Ah]
          401108: 31 c0                   xor eax,eax
          40110a: e8 41 ff ff ff          call 0000000000401050h
          40110f: 48 39 dd                cmp rbp,rbx
          401112: 75 cc                   jne short 00000000004010E0h
          401114: 48 8b 7c 24 08          mov rdi,[rsp+8]
          401119: 48 89 ee                mov rsi,rbp
          40111c: e8 1f ff ff ff          call 0000000000401040h
          401121: 4c 89 e7                mov rdi,r12
          401124: e8 57 ff ff ff          call 0000000000401080h
          401129: 31 c0                   xor eax,eax
          40112b: 48 83 c4 10             add rsp,10h
          40112f: 5b                      pop rbx
          401130: 5d                      pop rbp
          401131: 41 5c                   pop r12
          401133: c3                      ret
          401134: bf c8 22 40 00          mov edi,4022C8h
          401139: e8 f2 fe ff ff          call 0000000000401030h
          40113e: eb e1                   jmp short 0000000000401121h
          401140: 83 c8 ff                or eax,0FFFFFFFFh
          401143: eb e6                   jmp short 000000000040112Bh

function type: "main" func () int <TypeID(17v1)>
4 warnings:
  #   0: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   1: while applying calling convention for return value in call site
           <- type has no alignment?
  #   2: packing parameters for subroutine type
           <- while applying calling convention
           <- type has no alignment?
  #   3: while applying calling convention for return value in call site
           <- type has no alignment?


mil program = 
program  365 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
0x401090:
   43 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   44 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x401092:
   45 r45: TypeID(2v1) <- Const { value: 8, size: 4 }
   46 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   47 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x401097:
   48 r45: TypeID(2v1) <- Const { value: 3, size: 4 }
   49 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
   50 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x40109c:
   51 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   52 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x40109d:
   53 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   54 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x40109e:
   55 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
   56 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   57 r12: TypeID(2v1) <- Get(r12)
   58 r10: TypeID(2v1) <- OverflowOf(r12)
   59 r2: TypeID(2v1) <- CarryOf(r12)
   60 r6: TypeID(2v1) <- SignOf(r12)
   61 r5: TypeID(2v1) <- IsZero(r12)
   62 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   63 r3: TypeID(2v1) <- Parity(r47)
0x4010a2:
   64 r19: TypeID(2v1) <- Get(r12)
0x4010a5:
   65 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
   66 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
   67 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
   68 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
   69 r46: TypeID(3338v1) <- Const { value: 4198512, size: 8 }
   70 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
   71 r2: TypeID(2v1) <- Undefined
   72 r3: TypeID(2v1) <- Undefined
   73 r4: TypeID(2v1) <- Undefined
   74 r5: TypeID(2v1) <- Undefined
   75 r6: TypeID(2v1) <- Undefined
   76 r7: TypeID(2v1) <- Undefined
   77 r8: TypeID(2v1) <- Undefined
   78 r9: TypeID(2v1) <- Undefined
   79 r10: TypeID(2v1) <- Undefined
   80 r45: TypeID(2v1) <- Get(r16)
0x4010aa:
   81 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   82 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   83 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
   84 r6: TypeID(2v1) <- SignOf(r46)
   85 r5: TypeID(2v1) <- IsZero(r46)
   86 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   87 r3: TypeID(2v1) <- Parity(r46)
   88 r2: TypeID(2v1) <- False
   89 r10: TypeID(2v1) <- False
0x4010ac:
   90 r45: TypeID(2v1) <- Not(r5)
   91 r46: TypeID(2v1) <- SetJumpCondition(r45)
   92 r46: TypeID(2v1) <- Control(JmpIf(353))
0x4010b2:
   93 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   94 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   95 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   96 r14: TypeID(2v1) <- Get(r45)
0x4010b6:
   97 r45: TypeID(2v1) <- Const { value: 8, size: 8 }
   98 r45: TypeID(2v1) <- Arith(Add, r45, r12)
   99 r21: TypeID(2v1) <- Get(r45)
0x4010bb:
  100 r46: TypeID(2v1) <- Part { src: r20, offset: 0, size: 4 }
  101 r48: TypeID(2v1) <- Part { src: r20, offset: 0, size: 4 }
  102 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  103 r49: TypeID(2v1) <- Part { src: r20, offset: 4, size: 4 }
  104 r20: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  105 r10: TypeID(2v1) <- False
  106 r2: TypeID(2v1) <- False
  107 r6: TypeID(2v1) <- SignOf(r46)
  108 r5: TypeID(2v1) <- IsZero(r46)
  109 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  110 r3: TypeID(2v1) <- Parity(r50)
0x4010be:
  111 r24: TypeID(2v1) <- Get(r12)
0x4010c1:
  112 r45: TypeID(2v1) <- Const { value: 4096, size: 4 }
  113 r46: TypeID(2v1) <- Part { src: r18, offset: 4, size: 4 }
  114 r18: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010c6:
  115 r45: TypeID(2v1) <- Const { value: 8, size: 4 }
  116 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  117 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010cb:
  118 r45: TypeID(2v1) <- Const { value: 4203184, size: 4 }
  119 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  120 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010d0:
  121 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  122 r45: TypeID(2v1) <- Void
  123 r45: TypeID(2v1) <- Get(r14)
  124 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  125 r46: TypeID(2v1) <- Void
  126 r46: TypeID(2v1) <- Get(r15)
  127 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  128 r47: TypeID(2v1) <- Void
  129 r47: TypeID(2v1) <- Get(r19)
  130 r48: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
  131 r48: TypeID(2v1) <- Void
  132 r48: TypeID(2v1) <- Get(r18)
  133 r49: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
  134 r49: TypeID(2v1) <- Void
  135 r49: TypeID(2v1) <- Get(r20)
  136 r50: TypeID(2v1) <- Ancestral(AncestralName("arg5"))
  137 r50: TypeID(2v1) <- Void
  138 r50: TypeID(2v1) <- Get(r21)
  139 r51: TypeID(2v1) <- CArg { value: r50, next_arg: None }
  140 r51: TypeID(2v1) <- CArg { value: r49, next_arg: Some(r51) }
  141 r51: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r51) }
  142 r51: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r51) }
  143 r51: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r51) }
  144 r51: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r51) }
  145 r52: TypeID(3330v1) <- Const { value: 4198496, size: 8 }
  146 r51: TypeID(2v1) <- Call { callee: r52, first_arg: Some(r51) }
  147 r2: TypeID(2v1) <- Undefined
  148 r3: TypeID(2v1) <- Undefined
  149 r4: TypeID(2v1) <- Undefined
  150 r5: TypeID(2v1) <- Undefined
  151 r6: TypeID(2v1) <- Undefined
  152 r7: TypeID(2v1) <- Undefined
  153 r8: TypeID(2v1) <- Undefined
  154 r9: TypeID(2v1) <- Undefined
  155 r10: TypeID(2v1) <- Undefined
  156 r16: TypeID(2v1) <- Part { src: r51, offset: 0, size: 8 }
0x4010d5:
  157 r11: TypeID(2v1) <- Get(r16)
0x4010d8:
  158 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  159 r6: TypeID(2v1) <- SignOf(r16)
  160 r5: TypeID(2v1) <- IsZero(r16)
  161 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  162 r3: TypeID(2v1) <- Parity(r16)
  163 r2: TypeID(2v1) <- False
  164 r10: TypeID(2v1) <- False
0x4010db:
  165 r45: TypeID(2v1) <- SetJumpCondition(r5)
  166 r45: TypeID(2v1) <- Control(JmpIf(338))
0x4010dd:
  167 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  168 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  169 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  170 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  171 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  172 r10: TypeID(2v1) <- False
  173 r2: TypeID(2v1) <- False
  174 r6: TypeID(2v1) <- SignOf(r46)
  175 r5: TypeID(2v1) <- IsZero(r46)
  176 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  177 r3: TypeID(2v1) <- Parity(r50)
0x4010e0:
  178 r16: TypeID(2v1) <- Get(r17)
0x4010e3:
  179 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  180 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  181 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  182 r19: TypeID(2v1) <- Get(r45)
0x4010e8:
  183 r45: TypeID(2v1) <- Const { value: 4203193, size: 4 }
  184 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  185 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x4010ed:
  186 r46: TypeID(2v1) <- Const { value: 5, size: 1 }
  187 r46: TypeID(2v1) <- Widen { reg: r46, target_size: 8, sign: false }
  188 r16: TypeID(2v1) <- Arith(Shl, r16, r46)
  189 r16: TypeID(2v1) <- Get(r16)
  190 r6: TypeID(2v1) <- SignOf(r16)
  191 r5: TypeID(2v1) <- IsZero(r16)
  192 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  193 r3: TypeID(2v1) <- Parity(r47)
0x4010f1:
  194 r16: TypeID(2v1) <- Arith(Sub, r16, r17)
  195 r16: TypeID(2v1) <- Get(r16)
  196 r10: TypeID(2v1) <- OverflowOf(r16)
  197 r2: TypeID(2v1) <- CarryOf(r16)
  198 r6: TypeID(2v1) <- SignOf(r16)
  199 r5: TypeID(2v1) <- IsZero(r16)
  200 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  201 r3: TypeID(2v1) <- Parity(r47)
0x4010f4:
  202 r46: TypeID(2v1) <- Const { value: 1, size: 8 }
  203 r17: TypeID(2v1) <- Arith(Add, r17, r46)
  204 r17: TypeID(2v1) <- Get(r17)
  205 r10: TypeID(2v1) <- OverflowOf(r17)
  206 r2: TypeID(2v1) <- CarryOf(r17)
  207 r6: TypeID(2v1) <- SignOf(r17)
  208 r5: TypeID(2v1) <- IsZero(r17)
  209 r47: TypeID(2v1) <- Part { src: r17, offset: 0, size: 1 }
  210 r3: TypeID(2v1) <- Parity(r47)
0x4010f8:
  211 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
  212 r45: TypeID(2v1) <- Arith(Add, r45, r19)
  213 r46: TypeID(2v1) <- ArithK(Mul, r16, 8)
  214 r45: TypeID(2v1) <- Arith(Add, r45, r46)
  215 r16: TypeID(2v1) <- Get(r45)
0x4010fc:
  216 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  217 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  218 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  219 r15: TypeID(2v1) <- Get(r45)
0x401100:
  220 r45: TypeID(2v1) <- Const { value: 74, size: 8 }
  221 r45: TypeID(2v1) <- Arith(Add, r45, r16)
  222 r18: TypeID(2v1) <- Get(r45)
0x401104:
  223 r45: TypeID(2v1) <- Const { value: 42, size: 8 }
  224 r45: TypeID(2v1) <- Arith(Add, r45, r16)
  225 r19: TypeID(2v1) <- Get(r45)
0x401108:
  226 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  227 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  228 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  229 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  230 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  231 r10: TypeID(2v1) <- False
  232 r2: TypeID(2v1) <- False
  233 r6: TypeID(2v1) <- SignOf(r46)
  234 r5: TypeID(2v1) <- IsZero(r46)
  235 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  236 r3: TypeID(2v1) <- Parity(r50)
0x40110a:
  237 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  238 r45: TypeID(2v1) <- Void
  239 r45: TypeID(2v1) <- Get(r14)
  240 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  241 r47: TypeID(3327v1) <- Const { value: 4198480, size: 8 }
  242 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  243 r2: TypeID(2v1) <- Undefined
  244 r3: TypeID(2v1) <- Undefined
  245 r4: TypeID(2v1) <- Undefined
  246 r5: TypeID(2v1) <- Undefined
  247 r6: TypeID(2v1) <- Undefined
  248 r7: TypeID(2v1) <- Undefined
  249 r8: TypeID(2v1) <- Undefined
  250 r9: TypeID(2v1) <- Undefined
  251 r10: TypeID(2v1) <- Undefined
  252 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x40110f:
  253 r11: TypeID(2v1) <- Arith(Sub, r11, r17)
  254 r10: TypeID(2v1) <- OverflowOf(r11)
  255 r2: TypeID(2v1) <- CarryOf(r11)
  256 r6: TypeID(2v1) <- SignOf(r11)
  257 r5: TypeID(2v1) <- IsZero(r11)
  258 r47: TypeID(2v1) <- Part { src: r11, offset: 0, size: 1 }
  259 r3: TypeID(2v1) <- Parity(r47)
0x401112:
  260 r45: TypeID(2v1) <- Not(r5)
  261 r46: TypeID(2v1) <- SetJumpCondition(r45)
  262 r46: TypeID(2v1) <- Control(JmpIf(178))
0x401114:
  263 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  264 r46: TypeID(2v1) <- Arith(Add, r46, r12)
  265 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  266 r14: TypeID(2v1) <- Get(r45)
0x401119:
  267 r15: TypeID(2v1) <- Get(r11)
0x40111c:
  268 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  269 r45: TypeID(2v1) <- Void
  270 r45: TypeID(2v1) <- Get(r14)
  271 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  272 r46: TypeID(2v1) <- Void
  273 r46: TypeID(2v1) <- Get(r15)
  274 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  275 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  276 r48: TypeID(3323v1) <- Const { value: 4198464, size: 8 }
  277 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  278 r2: TypeID(2v1) <- Undefined
  279 r3: TypeID(2v1) <- Undefined
  280 r4: TypeID(2v1) <- Undefined
  281 r5: TypeID(2v1) <- Undefined
  282 r6: TypeID(2v1) <- Undefined
  283 r7: TypeID(2v1) <- Undefined
  284 r8: TypeID(2v1) <- Undefined
  285 r9: TypeID(2v1) <- Undefined
  286 r10: TypeID(2v1) <- Undefined
0x401121:
  287 r14: TypeID(2v1) <- Get(r24)
0x401124:
  288 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  289 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  290 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  291 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  292 r46: TypeID(3320v1) <- Const { value: 4198528, size: 8 }
  293 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
  294 r2: TypeID(2v1) <- Undefined
  295 r3: TypeID(2v1) <- Undefined
  296 r4: TypeID(2v1) <- Undefined
  297 r5: TypeID(2v1) <- Undefined
  298 r6: TypeID(2v1) <- Undefined
  299 r7: TypeID(2v1) <- Undefined
  300 r8: TypeID(2v1) <- Undefined
  301 r9: TypeID(2v1) <- Undefined
  302 r10: TypeID(2v1) <- Undefined
  303 r45: TypeID(2v1) <- Get(r16)
0x401129:
  304 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  305 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  306 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  307 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  308 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  309 r10: TypeID(2v1) <- False
  310 r2: TypeID(2v1) <- False
  311 r6: TypeID(2v1) <- SignOf(r46)
  312 r5: TypeID(2v1) <- IsZero(r46)
  313 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  314 r3: TypeID(2v1) <- Parity(r50)
0x40112b:
  315 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  316 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  317 r12: TypeID(2v1) <- Get(r12)
  318 r10: TypeID(2v1) <- OverflowOf(r12)
  319 r2: TypeID(2v1) <- CarryOf(r12)
  320 r6: TypeID(2v1) <- SignOf(r12)
  321 r5: TypeID(2v1) <- IsZero(r12)
  322 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  323 r3: TypeID(2v1) <- Parity(r47)
0x40112f:
  324 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  325 r17: TypeID(2v1) <- Get(r45)
  326 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401130:
  327 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  328 r11: TypeID(2v1) <- Get(r45)
  329 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401131:
  330 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  331 r24: TypeID(2v1) <- Get(r45)
  332 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x401133:
  333 r45: TypeID(2v1) <- Void
  334 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  335 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  336 r47: TypeID(2v1) <- SetReturnValue(r45)
  337 r47: TypeID(2v1) <- Control(Ret)
0x401134:
  338 r45: TypeID(2v1) <- Const { value: 4203208, size: 4 }
  339 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  340 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x401139:
  341 r46: TypeID(3366v1) <- Const { value: 4198448, size: 8 }
  342 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  343 r2: TypeID(2v1) <- Undefined
  344 r3: TypeID(2v1) <- Undefined
  345 r4: TypeID(2v1) <- Undefined
  346 r5: TypeID(2v1) <- Undefined
  347 r6: TypeID(2v1) <- Undefined
  348 r7: TypeID(2v1) <- Undefined
  349 r8: TypeID(2v1) <- Undefined
  350 r9: TypeID(2v1) <- Undefined
  351 r10: TypeID(2v1) <- Undefined
0x40113e:
  352 r45: TypeID(2v1) <- Control(Jmp(287))
0x401140:
  353 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  354 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  355 r46: TypeID(2v1) <- Arith(BitOr, r46, r47)
  356 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  357 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  358 r10: TypeID(2v1) <- False
  359 r2: TypeID(2v1) <- False
  360 r6: TypeID(2v1) <- SignOf(r46)
  361 r5: TypeID(2v1) <- IsZero(r46)
  362 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  363 r3: TypeID(2v1) <- Parity(r49)
0x401143:
  364 r45: TypeID(2v1) <- Control(Jmp(315))


ssa pre-xform:
ssa program  389 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  4)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  4)  r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  3)  r19: ? <- Ancestral(AncestralName("R8"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  2)  r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r23 }
         r45: ? <- Const { value: 8, size: 4 }
         r46: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r47: ? <- Concat { lo: r45, hi: r46 }
         r48: ? <- Const { value: 3, size: 4 }
         r49: ? <- Part { src: r13, offset: 4, size: 4 }
         r50: ? <- Concat { lo: r48, hi: r49 }
  (  2)  r51: ? <- ArithK(Add, r43, -8)
         r52: ? <- StoreMem { addr: r51, value: r10 }
  (  2)  r53: ? <- ArithK(Add, r51, -8)
         r54: ? <- StoreMem { addr: r53, value: r16 }
         r55: ? <- Const { value: 16, size: 8 }
  (  7)  r56: ? <- Arith(Sub, r53, r55)
         r65: ? <- CArg { value: r17, next_arg: None }
         r66: ? <- CArg { value: r56, next_arg: Some(r65) }
         r67: ? <- CArg { value: r47, next_arg: Some(r66) }
         r68: ? <- CArg { value: r50, next_arg: Some(r67) }
         r69: cs_open <TypeID(3338v1)> <- Const { value: 4198512, size: 8 }
         r70: ? <- Call { callee: r69, first_arg: Some(r68) }
         r81: ? <- Part { src: r15, offset: 0, size: 4 }
         r82: ? <- Part { src: r15, offset: 0, size: 4 }
         r83: ? <- Arith(BitAnd, r81, r82)
         r85: ? <- IsZero(r83)
         r90: ? <- Not(r85)
         r91: ? <- SetJumpCondition(r90)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r93: ? <- Const { value: 0, size: 8 }
         r94: ? <- Arith(Add, r93, r56)
  (  2)  r95: ? <- LoadMem { addr: r94, size: 8 }
         r97: ? <- Const { value: 8, size: 8 }
         r98: ? <- Arith(Add, r97, r56)
         r100: ? <- Part { src: r19, offset: 0, size: 4 }
         r101: ? <- Part { src: r19, offset: 0, size: 4 }
         r102: ? <- Arith(BitXor, r100, r101)
         r103: ? <- Part { src: r19, offset: 4, size: 4 }
         r104: ? <- Concat { lo: r102, hi: r103 }
         r112: ? <- Const { value: 4096, size: 4 }
         r113: ? <- Part { src: r17, offset: 4, size: 4 }
  (  2)  r114: ? <- Concat { lo: r112, hi: r113 }
         r115: ? <- Const { value: 8, size: 4 }
         r116: ? <- Part { src: r56, offset: 4, size: 4 }
  (  2)  r117: ? <- Concat { lo: r115, hi: r116 }
         r118: ? <- Const { value: 4203184, size: 4 }
         r119: ? <- Part { src: r47, offset: 4, size: 4 }
  (  2)  r120: ? <- Concat { lo: r118, hi: r119 }
         r139: ? <- CArg { value: r98, next_arg: None }
         r140: ? <- CArg { value: r104, next_arg: Some(r139) }
         r141: ? <- CArg { value: r114, next_arg: Some(r140) }
         r142: ? <- CArg { value: r117, next_arg: Some(r141) }
         r143: ? <- CArg { value: r120, next_arg: Some(r142) }
         r144: ? <- CArg { value: r95, next_arg: Some(r143) }
         r145: cs_disasm <TypeID(3330v1)> <- Const { value: 4198496, size: 8 }
         r146: ? <- Call { callee: r145, first_arg: Some(r144) }
  (  3)  r156: ? <- Part { src: r146, offset: 0, size: 8 }
  (  2)  r158: ? <- Arith(BitAnd, r156, r156)
         r160: ? <- IsZero(r158)
         r165: ? <- SetJumpCondition(r160)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r167: ? <- Part { src: r16, offset: 0, size: 4 }
         r168: ? <- Part { src: r16, offset: 0, size: 4 }
         r169: ? <- Arith(BitXor, r167, r168)
         r170: ? <- Part { src: r16, offset: 4, size: 4 }
         r171: ? <- Concat { lo: r169, hi: r170 }
         r379: ? <- Upsilon { value: r156, phi_ref: r365 }
         r380: ? <- Upsilon { value: r95, phi_ref: r366 }
         r381: ? <- Upsilon { value: r171, phi_ref: r367 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r367: ? <- Phi
         r366: ? <- Phi
         r365: ? <- Phi
         r179: ? <- Const { value: 8, size: 8 }
         r180: ? <- Arith(Add, r179, r56)
         r181: ? <- LoadMem { addr: r180, size: 8 }
         r183: ? <- Const { value: 4203193, size: 4 }
         r184: ? <- Part { src: r366, offset: 4, size: 4 }
  (  2)  r185: ? <- Concat { lo: r183, hi: r184 }
         r186: ? <- Const { value: 5, size: 1 }
         r187: ? <- Widen { reg: r186, target_size: 8, sign: false }
         r188: ? <- Arith(Shl, r367, r187)
         r194: ? <- Arith(Sub, r188, r367)
         r202: ? <- Const { value: 1, size: 8 }
  (  2)  r203: ? <- Arith(Add, r367, r202)
         r211: ? <- Const { value: 0, size: 8 }
         r212: ? <- Arith(Add, r211, r181)
         r213: ? <- ArithK(Mul, r194, 8)
  (  2)  r214: ? <- Arith(Add, r212, r213)
         r220: ? <- Const { value: 74, size: 8 }
         r221: ? <- Arith(Add, r220, r214)
         r223: ? <- Const { value: 42, size: 8 }
         r224: ? <- Arith(Add, r223, r214)
         r240: ? <- CArg { value: r185, next_arg: None }
         r241: printf <TypeID(3327v1)> <- Const { value: 4198480, size: 8 }
         r242: ? <- Call { callee: r241, first_arg: Some(r240) }
         r252: ? <- Part { src: r242, offset: 0, size: 8 }
  (  4)  r253: ? <- Arith(Sub, r365, r203)
         r257: ? <- IsZero(r253)
         r260: ? <- Not(r257)
         r261: ? <- SetJumpCondition(r260)
         r382: ? <- Upsilon { value: r253, phi_ref: r365 }
         r383: ? <- Upsilon { value: r185, phi_ref: r366 }
         r384: ? <- Upsilon { value: r203, phi_ref: r367 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r263: ? <- Const { value: 8, size: 8 }
         r264: ? <- Arith(Add, r263, r56)
         r265: ? <- LoadMem { addr: r264, size: 8 }
         r274: ? <- CArg { value: r253, next_arg: None }
         r275: ? <- CArg { value: r265, next_arg: Some(r274) }
         r276: cs_free <TypeID(3323v1)> <- Const { value: 4198464, size: 8 }
         r277: ? <- Call { callee: r276, first_arg: Some(r275) }
         r385: ? <- Upsilon { value: r253, phi_ref: r368 }
         r386: ? <- Upsilon { value: r252, phi_ref: r369 }
         r387: ? <- Upsilon { value: r221, phi_ref: r370 }
         r388: ? <- Upsilon { value: r224, phi_ref: r371 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r341: __builtin_puts <TypeID(3366v1)> <- Const { value: 4198448, size: 8 }
         r342: ? <- Call { callee: r341, first_arg: None }
         r374: ? <- Upsilon { value: r120, phi_ref: r368 }
         r375: ? <- Upsilon { value: r158, phi_ref: r369 }
         r376: ? <- Upsilon { value: r114, phi_ref: r370 }
         r377: ? <- Upsilon { value: r117, phi_ref: r371 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r371: ? <- Phi
         r370: ? <- Phi
  (  3)  r369: ? <- Phi
         r368: ? <- Phi
         r288: ? <- CArg { value: r370, next_arg: None }
         r289: ? <- CArg { value: r371, next_arg: Some(r288) }
         r290: ? <- CArg { value: r368, next_arg: Some(r289) }
         r291: ? <- CArg { value: r56, next_arg: Some(r290) }
         r292: cs_close <TypeID(3320v1)> <- Const { value: 4198528, size: 8 }
         r293: ? <- Call { callee: r292, first_arg: Some(r291) }
         r304: ? <- Part { src: r369, offset: 0, size: 4 }
         r305: ? <- Part { src: r369, offset: 0, size: 4 }
         r306: ? <- Arith(BitXor, r304, r305)
         r307: ? <- Part { src: r369, offset: 4, size: 4 }
         r308: ? <- Concat { lo: r306, hi: r307 }
         r378: ? <- Upsilon { value: r308, phi_ref: r372 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r353: ? <- Part { src: r15, offset: 0, size: 4 }
         r354: ? <- Const { value: -1, size: 4 }
         r355: ? <- Arith(BitOr, r353, r354)
         r356: ? <- Part { src: r15, offset: 4, size: 4 }
         r357: ? <- Concat { lo: r355, hi: r356 }
         r373: ? <- Upsilon { value: r357, phi_ref: r372 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r372: ? <- Phi
         r334: ? <- Concat { lo: r333, hi: r372 }
         r335: ? <- Part { src: r334, offset: 0, size: 4 }
         r336: ? <- SetReturnValue(r335)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r19, r23, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r65, r66, r67, r68, r69, r70, r81, r82, r83, r85, r90, r91]
  BlockID(1) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) } [r93, r94, r95, r97, r98, r100, r101, r102, r103, r104, r112, r113, r114, r115, r116, r117, r118, r119, r120, r139, r140, r141, r142, r143, r144, r145, r146, r156, r158, r160, r165]
  BlockID(2) -> Always(Block(BlockID(3))) [r167, r168, r169, r170, r171, r379, r380, r381]
  BlockID(3) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) } [r367, r366, r365, r179, r180, r181, r183, r184, r185, r186, r187, r188, r194, r202, r203, r211, r212, r213, r214, r220, r221, r223, r224, r240, r241, r242, r252, r253, r257, r260, r261, r382, r383, r384]
  BlockID(4) -> Always(Block(BlockID(5))) [r263, r264, r265, r274, r275, r276, r277, r385, r386, r387, r388]
  BlockID(5) -> Always(Block(BlockID(6))) [r371, r370, r369, r368, r288, r289, r290, r291, r292, r293, r304, r305, r306, r307, r308, r378]
  BlockID(6) -> Always(Return) [r372, r333, r334, r335, r336]
  BlockID(7) -> Always(Block(BlockID(5))) [r341, r342, r374, r375, r376, r377]
  BlockID(8) -> Always(Block(BlockID(6))) [r353, r354, r355, r356, r357, r373]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  BlockID(5)
    |  |  BlockID(7)
    |  BlockID(6)
    |  BlockID(8)

ssa post-xform:
ssa program  389 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(8)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  8)  r11: ? <- Ancestral(AncestralName("RSP"))
         r13: ? <- Ancestral(AncestralName("RDI"))
  (  2)  r14: ? <- Ancestral(AncestralName("RSI"))
  (  4)  r15: ? <- Ancestral(AncestralName("RAX"))
  (  4)  r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  (  3)  r19: ? <- Ancestral(AncestralName("R8"))
         r23: ? <- Ancestral(AncestralName("R12"))
         r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r23 }
         r45: ? <- Const { value: 8, size: 4 }
         r46: ? <- Part { src: r14, offset: 4, size: 4 }
         r47: ? <- Concat { lo: r45, hi: r46 }
         r48: ? <- Const { value: 3, size: 4 }
         r49: ? <- Part { src: r13, offset: 4, size: 4 }
         r50: ? <- Concat { lo: r48, hi: r49 }
         r51: ? <- ArithK(Add, r11, -16)
         r52: ? <- StoreMem { addr: r51, value: r10 }
         r53: ? <- ArithK(Add, r11, -24)
         r54: ? <- StoreMem { addr: r53, value: r16 }
  (  3)  r56: ? <- ArithK(Add, r11, -40)
         r65: ? <- CArg { value: r17, next_arg: None }
         r66: ? <- CArg { value: r56, next_arg: Some(r65) }
         r67: ? <- CArg { value: r47, next_arg: Some(r66) }
         r68: ? <- CArg { value: r50, next_arg: Some(r67) }
         r69: cs_open <TypeID(3338v1)> <- Const { value: 4198512, size: 8 }
         r70: ? <- Call { callee: r69, first_arg: Some(r68) }
         r81: ? <- Part { src: r15, offset: 0, size: 4 }
         r82: ? <- Part { src: r15, offset: 0, size: 4 }
         r83: ? <- Arith(BitAnd, r81, r82)
         r85: ? <- IsZero(r83)
         r90: ? <- Not(r85)
         r91: ? <- SetJumpCondition(r90)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(2)) }.
         r94: ? <- ArithK(Add, r11, -40)
  (  2)  r95: ? <- LoadMem { addr: r94, size: 8 }
         r98: ? <- ArithK(Add, r11, -32)
         r100: ? <- Part { src: r19, offset: 0, size: 4 }
         r101: ? <- Part { src: r19, offset: 0, size: 4 }
         r102: ? <- Arith(BitXor, r100, r101)
         r103: ? <- Part { src: r19, offset: 4, size: 4 }
         r104: ? <- Concat { lo: r102, hi: r103 }
         r112: ? <- Const { value: 4096, size: 4 }
         r113: ? <- Part { src: r17, offset: 4, size: 4 }
  (  2)  r114: ? <- Concat { lo: r112, hi: r113 }
         r115: ? <- Const { value: 8, size: 4 }
         r116: ? <- Part { src: r56, offset: 4, size: 4 }
  (  2)  r117: ? <- Concat { lo: r115, hi: r116 }
         r118: ? <- Const { value: 4203184, size: 4 }
         r119: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r120: ? <- Concat { lo: r118, hi: r119 }
         r139: ? <- CArg { value: r98, next_arg: None }
         r140: ? <- CArg { value: r104, next_arg: Some(r139) }
         r141: ? <- CArg { value: r114, next_arg: Some(r140) }
         r142: ? <- CArg { value: r117, next_arg: Some(r141) }
         r143: ? <- CArg { value: r120, next_arg: Some(r142) }
         r144: ? <- CArg { value: r95, next_arg: Some(r143) }
         r145: cs_disasm <TypeID(3330v1)> <- Const { value: 4198496, size: 8 }
  (  3)  r146: ? <- Call { callee: r145, first_arg: Some(r144) }
         r160: ? <- IsZero(r146)
         r165: ? <- SetJumpCondition(r160)
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r167: ? <- Part { src: r16, offset: 0, size: 4 }
         r168: ? <- Part { src: r16, offset: 0, size: 4 }
         r169: ? <- Arith(BitXor, r167, r168)
         r170: ? <- Part { src: r16, offset: 4, size: 4 }
         r171: ? <- Concat { lo: r169, hi: r170 }
         r379: ? <- Upsilon { value: r146, phi_ref: r365 }
         r380: ? <- Upsilon { value: r95, phi_ref: r366 }
         r381: ? <- Upsilon { value: r171, phi_ref: r367 }
.B3:    ;; preds:B2,B3  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(4)) }.
  (  3)  r367: ? <- Phi
         r366: ? <- Phi
         r365: ? <- Phi
         r180: ? <- ArithK(Add, r11, -32)
         r181: ? <- LoadMem { addr: r180, size: 8 }
         r183: ? <- Const { value: 4203193, size: 4 }
         r184: ? <- Part { src: r366, offset: 4, size: 4 }
  (  2)  r185: ? <- Concat { lo: r183, hi: r184 }
         r186: ? <- Const { value: 5, size: 1 }
         r187: ? <- Widen { reg: r186, target_size: 8, sign: false }
         r188: ? <- Arith(Shl, r367, r187)
         r194: ? <- Arith(Sub, r188, r367)
  (  2)  r203: ? <- ArithK(Add, r367, 1)
         r213: ? <- ArithK(Mul, r194, 8)
  (  2)  r214: ? <- Arith(Add, r181, r213)
         r221: ? <- ArithK(Add, r214, 74)
         r224: ? <- ArithK(Add, r214, 42)
         r240: ? <- CArg { value: r185, next_arg: None }
         r241: printf <TypeID(3327v1)> <- Const { value: 4198480, size: 8 }
         r242: ? <- Call { callee: r241, first_arg: Some(r240) }
  (  4)  r253: ? <- Arith(Sub, r365, r203)
         r257: ? <- IsZero(r253)
         r260: ? <- Not(r257)
         r261: ? <- SetJumpCondition(r260)
         r382: ? <- Upsilon { value: r253, phi_ref: r365 }
         r383: ? <- Upsilon { value: r185, phi_ref: r366 }
         r384: ? <- Upsilon { value: r203, phi_ref: r367 }
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r264: ? <- ArithK(Add, r11, -32)
         r265: ? <- LoadMem { addr: r264, size: 8 }
         r274: ? <- CArg { value: r253, next_arg: None }
         r275: ? <- CArg { value: r265, next_arg: Some(r274) }
         r276: cs_free <TypeID(3323v1)> <- Const { value: 4198464, size: 8 }
         r277: ? <- Call { callee: r276, first_arg: Some(r275) }
         r385: ? <- Upsilon { value: r253, phi_ref: r368 }
         r386: ? <- Upsilon { value: r242, phi_ref: r369 }
         r387: ? <- Upsilon { value: r221, phi_ref: r370 }
         r388: ? <- Upsilon { value: r224, phi_ref: r371 }
.B7:    ;; preds:B1  → Always(Block(BlockID(5))).
         r341: __builtin_puts <TypeID(3366v1)> <- Const { value: 4198448, size: 8 }
         r342: ? <- Call { callee: r341, first_arg: None }
         r374: ? <- Upsilon { value: r120, phi_ref: r368 }
         r375: ? <- Upsilon { value: r146, phi_ref: r369 }
         r376: ? <- Upsilon { value: r114, phi_ref: r370 }
         r377: ? <- Upsilon { value: r117, phi_ref: r371 }
.B5:    ;; preds:B4,B7  → Always(Block(BlockID(6))).
         r371: ? <- Phi
         r370: ? <- Phi
  (  3)  r369: ? <- Phi
         r368: ? <- Phi
         r288: ? <- CArg { value: r370, next_arg: None }
         r289: ? <- CArg { value: r371, next_arg: Some(r288) }
         r290: ? <- CArg { value: r368, next_arg: Some(r289) }
         r291: ? <- CArg { value: r56, next_arg: Some(r290) }
         r292: cs_close <TypeID(3320v1)> <- Const { value: 4198528, size: 8 }
         r293: ? <- Call { callee: r292, first_arg: Some(r291) }
         r304: ? <- Part { src: r369, offset: 0, size: 4 }
         r305: ? <- Part { src: r369, offset: 0, size: 4 }
         r306: ? <- Arith(BitXor, r304, r305)
         r307: ? <- Part { src: r369, offset: 4, size: 4 }
         r308: ? <- Concat { lo: r306, hi: r307 }
         r378: ? <- Upsilon { value: r308, phi_ref: r372 }
.B8:    ;; preds:B0  → Always(Block(BlockID(6))).
         r353: ? <- Part { src: r15, offset: 0, size: 4 }
         r355: ? <- ArithK(BitOr, r353, -1)
         r356: ? <- Part { src: r15, offset: 4, size: 4 }
         r357: ? <- Concat { lo: r355, hi: r356 }
         r373: ? <- Upsilon { value: r357, phi_ref: r372 }
.B6:    ;; preds:B5,B8  → Always(Return).
         r372: ? <- Phi
         r335: ? <- Part { src: r372, offset: 0, size: 4 }
         r336: ? <- SetReturnValue(r335)



T0: {
  [pre:RSP - 8]:* := pre:R12;
  [pre:RSP - 16]:* := pre:RBP;
  [pre:RSP - 24]:* := pre:RBX;
  let r56: Bytes(8) = pre:RSP - 40;
  cs_open(pre:RDI[8 .. 4] ++ 3,
          pre:RSI[8 .. 4] ++ 8,
          r56,
          pre:RCX);
  ;
  if ! IsZero (pre:RAX[4 .. 0] & pre:RAX[4 .. 0]) {
    r372 := pre:RAX[8 .. 4] ++ (pre:RAX[4 .. 0] | -1);
    goto T6
  }
  let r95: Bytes(8) = [pre:RSP - 40]:8;
  let r114: Bytes(8) = pre:RCX[8 .. 4] ++ 4096;
  let r117: Bytes(8) = r56[8 .. 4] ++ 8;
  let r120: Bytes(8) = pre:RSI[8 .. 4] ++ 4203184;
  let r146: Bytes(8) = cs_disasm(r95,
                                 r120,
                                 r117,
                                 r114,
                                 pre:R8[8 .. 4] ++ (pre:R8[4 .. 0] ^ pre:R8[4 .. 0]),
                                 (pre:RSP - 32));
  ;
  if IsZero (r146) {
    __builtin_puts();
    r368 := pre:RSI[8 .. 4] ++ 4203184;
    r369 := cs_disasm(r95,
                      r120,
                      r117,
                      r114,
                      pre:R8[8 .. 4] ++ (pre:R8[4 .. 0] ^ pre:R8[4 .. 0]),
                      (pre:RSP - 32));
    r370 := pre:RCX[8 .. 4] ++ 4096;
    r371 := r56[8 .. 4] ++ 8;
    goto T5
  }
  r365 := cs_disasm(r95,
                    r120,
                    r117,
                    r114,
                    pre:R8[8 .. 4] ++ (pre:R8[4 .. 0] ^ pre:R8[4 .. 0]),
                    (pre:RSP - 32));
  r366 := [pre:RSP - 40]:8;
  r367 := pre:RBX[8 .. 4] ++ (pre:RBX[4 .. 0] ^ pre:RBX[4 .. 0]);
  goto T3
  T3: {
    let mut r367: Bytes(8);
    let mut r366: Bytes(8);
    let mut r365: Bytes(8);
    let r185: Bytes(8) = r366[8 .. 4] ++ 4203193;
    let r203: Bytes(8) = r367 + 1;
    let r214: Bytes(8) = [pre:RSP - 32]:8 + (r367 << 5 as u64 - r367) * 8;
    printf(r185);
    let r253: Bytes(8) = r365 - r203;
    ;
    r365 := r365 - r203;
    r366 := r366[8 .. 4] ++ 4203193;
    r367 := r367 + 1;
    if ! IsZero (r253) {
      goto T3
    }
    cs_free([pre:RSP - 32]:8,
            r253);
    r368 := r365 - r203;
    r369 := printf(r185);
    r370 := r214 + 74;
    r371 := r214 + 42;
    goto T5
  }
  
  T5: {
    let mut r371: Bytes(8);
    let mut r370: Bytes(8);
    let mut r369: Bytes(8);
    let mut r368: Bytes(8);
    cs_close(r56,
             r368,
             r371,
             r370);
    r372 := r369[8 .. 4] ++ (r369[4 .. 0] ^ r369[4 .. 0]);
    goto T6
  }
  
  T6: {
    let mut r372: Bytes(8);
    ;
    return r372[4 .. 0]
  }

}
