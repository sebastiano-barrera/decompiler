---
source: decompiler/tests/test_tool.rs
assertion_line: 138
expression: out
---
 --- mil
program  99 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), size: 8 }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), size: 0 }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), size: 0 }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), size: 0 }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), size: 0 }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), size: 0 }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), size: 0 }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), size: 0 }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), size: 0 }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), size: 8 }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), size: 8 }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), size: 8 }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), size: 8 }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), size: 8 }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), size: 8 }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), size: 8 }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), size: 64 }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), size: 64 }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), size: 64 }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), size: 64 }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), size: 64 }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), size: 64 }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), size: 64 }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), size: 64 }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), size: 64 }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), size: 64 }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), size: 64 }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), size: 64 }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), size: 64 }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), size: 64 }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
   43 r15 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), size: 8 }
   45 r19 <- Get(r46)
   46 r47 <- Ancestral { anc_name: AncestralName("arg2"), size: 16 }
   47 r48 <- Part { src: r47, offset: 0, size: 8 }
   48 r18 <- Get(r48)
   49 r49 <- Part { src: r47, offset: 8, size: 8 }
   50 r20 <- Get(r49)
   51 r50 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
   52 r52 <- Part { src: r50, offset: 0, size: 8 }
   53 r51 <- ArithK(Add, r12, 8)
   54 r51 <- StoreMem { addr: r51, value: r52 }
   55 r52 <- Part { src: r50, offset: 8, size: 8 }
   56 r51 <- ArithK(Add, r12, 16)
   57 r51 <- StoreMem { addr: r51, value: r52 }
   58 r52 <- Part { src: r50, offset: 16, size: 8 }
   59 r51 <- ArithK(Add, r12, 24)
   60 r51 <- StoreMem { addr: r51, value: r52 }
   61 r52 <- Part { src: r50, offset: 24, size: 8 }
   62 r51 <- ArithK(Add, r12, 32)
   63 r51 <- StoreMem { addr: r51, value: r52 }
0x40128b:
   64 r16 <- Get(r14)
0x40128e:
   65 r46 <- Const { value: 8, size: 8 }
   66 r46 <- Arith(Add, r46, r12)
   67 r45 <- LoadMem { addr: r46, size: 16 }
   68 r47 <- Part { src: r28, offset: 16, size: 48 }
   69 r28 <- Concat { lo: r45, hi: r47 }
0x401293:
   70 r46 <- Const { value: 24, size: 8 }
   71 r46 <- Arith(Add, r46, r12)
   72 r45 <- LoadMem { addr: r46, size: 16 }
   73 r47 <- Part { src: r29, offset: 16, size: 48 }
   74 r29 <- Concat { lo: r45, hi: r47 }
0x401298:
   75 r46 <- Part { src: r29, offset: 0, size: 16 }
   76 r47 <- Const { value: 16, size: 8 }
   77 r47 <- Arith(Add, r47, r14)
   78 r47 <- StoreMem { addr: r47, value: r46 }
0x40129c:
   79 r46 <- Part { src: r28, offset: 0, size: 16 }
   80 r47 <- Const { value: 0, size: 8 }
   81 r47 <- Arith(Add, r47, r14)
   82 r47 <- StoreMem { addr: r47, value: r46 }
0x40129f:
   83 r45 <- Void
   84 r47 <- ArithK(Add, r16, 0)
   85 r48 <- LoadMem { addr: r47, size: 8 }
   86 r45 <- Concat { lo: r45, hi: r48 }
   87 r47 <- ArithK(Add, r16, 8)
   88 r49 <- LoadMem { addr: r47, size: 8 }
   89 r45 <- Concat { lo: r45, hi: r49 }
   90 r47 <- ArithK(Add, r16, 16)
   91 r50 <- LoadMem { addr: r47, size: 8 }
   92 r45 <- Concat { lo: r45, hi: r50 }
   93 r47 <- ArithK(Add, r16, 24)
   94 r51 <- LoadMem { addr: r47, size: 8 }
   95 r45 <- Concat { lo: r45, hi: r51 }
   96 r45 <- Part { src: r45, offset: 0, size: 32 }
   97 r52 <- SetReturnValue(r45)
   98 r52 <- Control(Ret)


 --- ssa pre-xform
ssa program  99 instrs
.B0:    ;;  → Always(Return).
  (  6)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
         r26 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
         r27 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
  (  4)  r51 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
         r52 <- Part { src: r51, offset: 0, size: 8 }
         r53 <- ArithK(Add, r10, 8)
         r54 <- StoreMem { addr: r53, value: r52 }
         r55 <- Part { src: r51, offset: 8, size: 8 }
         r56 <- ArithK(Add, r10, 16)
         r57 <- StoreMem { addr: r56, value: r55 }
         r58 <- Part { src: r51, offset: 16, size: 8 }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r58 }
         r61 <- Part { src: r51, offset: 24, size: 8 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r65 <- Const { value: 8, size: 8 }
         r66 <- Arith(Add, r65, r10)
         r67 <- LoadMem { addr: r66, size: 16 }
         r68 <- Part { src: r26, offset: 16, size: 48 }
         r69 <- Concat { lo: r67, hi: r68 }
         r70 <- Const { value: 24, size: 8 }
         r71 <- Arith(Add, r70, r10)
         r72 <- LoadMem { addr: r71, size: 16 }
         r73 <- Part { src: r27, offset: 16, size: 48 }
         r74 <- Concat { lo: r72, hi: r73 }
         r75 <- Part { src: r74, offset: 0, size: 16 }
         r76 <- Const { value: 16, size: 8 }
         r77 <- Arith(Add, r76, r12)
         r78 <- StoreMem { addr: r77, value: r75 }
         r79 <- Part { src: r69, offset: 0, size: 16 }
         r80 <- Const { value: 0, size: 8 }
         r81 <- Arith(Add, r80, r12)
         r82 <- StoreMem { addr: r81, value: r79 }
         r84 <- ArithK(Add, r12, 0)
         r85 <- LoadMem { addr: r84, size: 8 }
         r86 <- Concat { lo: r83, hi: r85 }
         r87 <- ArithK(Add, r12, 8)
         r88 <- LoadMem { addr: r87, size: 8 }
         r89 <- Concat { lo: r86, hi: r88 }
         r90 <- ArithK(Add, r12, 16)
         r91 <- LoadMem { addr: r90, size: 8 }
         r92 <- Concat { lo: r89, hi: r91 }
         r93 <- ArithK(Add, r12, 24)
         r94 <- LoadMem { addr: r93, size: 8 }
         r95 <- Concat { lo: r92, hi: r94 }
         r96 <- Part { src: r95, offset: 0, size: 32 }
         r97 <- SetReturnValue(r96)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r12, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r110, r100, r103, r115, r105, r108, r77, r78, r82, r85, r87, r88, r89, r90, r91, r92, r93, r94, r95, r97]
  domtree:
    BlockID(0)

 --- ssa
ssa program  119 instrs
.B0:    ;;  → Always(Return).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
  (  6)  r51 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
         r52 <- Part { src: r51, offset: 0, size: 8 }
         r53 <- ArithK(Add, r10, 8)
         r54 <- StoreMem { addr: r53, value: r52 }
  (  2)  r55 <- StructGetMember { struct_value: r51, name: "member1", size: 32 }
         r56 <- ArithK(Add, r10, 16)
         r57 <- StoreMem { addr: r56, value: r55 }
  (  2)  r58 <- StructGetMember { struct_value: r51, name: "member2", size: 32 }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r58 }
         r61 <- Part { src: r51, offset: 24, size: 8 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r110 <- Part { src: r51, offset: 0, size: 8 }
         r100 <- Part { src: r55, offset: 0, size: 8 }
         r103 <- Concat { lo: r100, hi: r110 }
         r115 <- Part { src: r58, offset: 0, size: 8 }
         r105 <- Part { src: r51, offset: 24, size: 8 }
         r108 <- Concat { lo: r105, hi: r115 }
         r77 <- ArithK(Add, r12, 16)
         r78 <- StoreMem { addr: r77, value: r108 }
         r82 <- StoreMem { addr: r12, value: r103 }
         r85 <- LoadMem { addr: r12, size: 8 }
         r87 <- ArithK(Add, r12, 8)
         r88 <- LoadMem { addr: r87, size: 8 }
         r89 <- Concat { lo: r85, hi: r88 }
         r90 <- ArithK(Add, r12, 16)
         r91 <- LoadMem { addr: r90, size: 8 }
         r92 <- Concat { lo: r89, hi: r91 }
         r93 <- ArithK(Add, r12, 24)
         r94 <- LoadMem { addr: r93, size: 8 }
         r95 <- Concat { lo: r92, hi: r94 }
         r97 <- SetReturnValue(r95)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg3[8 .. 0];
  let r55: Bytes(32) = pre:arg3.member1;
  [pre:RSP + 16]:* := r55;
  let r58: Bytes(32) = pre:arg3.member2;
  [pre:RSP + 24]:* := r58;
  [pre:RSP + 32]:* := pre:arg3[32 .. 24];
  [pre:RDI + 16]:* := r58[8 .. 0] ++ pre:arg3[32 .. 24];
  [pre:RDI]:* := pre:arg3[8 .. 0] ++ r55[8 .. 0];
  ;
  return [pre:RDI + 24]:8 as i8 ++ [pre:RDI + 16]:8 as i8 ++ [pre:RDI + 8]:8 ++ [pre:RDI]:8 as i16 as i24
}
