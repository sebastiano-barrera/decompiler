---
source: decompiler/tests/test_tool.rs
expression: out
---
func102 0x401301+21 (file 0x1301)
          401301: 48 89 f8                mov rax,rdi
          401304: 0f 28 44 24 08          movaps xmm0,[rsp+8]
          401309: 0f 28 4c 24 18          movaps xmm1,[rsp+18h]
          40130e: 0f 11 4f 10             movups [rdi+10h],xmm1
          401312: 0f 11 07                movups [rdi],xmm0
          401315: c3                      ret

function type: "func102" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 *void <TypeID(1v1)>,
                               arg3 small <TypeID(785v1)>,
                               arg4 big <TypeID(795v1)>) big <TypeID(795v1)>
2 warnings:
  #   0: while applying the calling convention for parameters
           <- type has no alignment?
  #   1: decoding return value
           <- type has no alignment?


mil program = 
program  85 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Undefined
   44 r46: TypeID(2v1) <- Undefined
   45 r47: TypeID(2v1) <- Undefined
   46 r48: TypeID(2v1) <- Undefined
   47 r49: TypeID(2v1) <- Undefined
   48 r50: TypeID(2v1) <- Undefined
   49 r51: TypeID(2v1) <- Undefined
   50 r52: TypeID(2v1) <- Undefined
   51 r53: TypeID(2v1) <- Undefined
   52 r54: TypeID(2v1) <- Undefined
   53 r55: TypeID(2v1) <- Undefined
   54 r56: TypeID(2v1) <- Undefined
   55 r57: TypeID(2v1) <- Undefined
   56 r58: TypeID(2v1) <- Undefined
   57 r59: TypeID(2v1) <- Undefined
   58 r60: TypeID(2v1) <- Undefined
   59 r61: TypeID(2v1) <- Undefined
   60 r62: TypeID(2v1) <- Undefined
   61 r63: TypeID(2v1) <- Undefined
   62 r64: TypeID(2v1) <- Undefined
   63 r65: TypeID(2v1) <- Undefined
0x401301:
   64 r16: TypeID(2v1) <- Get(r14)
0x401304:
   65 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   66 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   67 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 16 }
   68 r47: TypeID(2v1) <- Part { src: r28, offset: 16, size: 48 }
   69 r28: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x401309:
   70 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
   71 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   72 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 16 }
   73 r47: TypeID(2v1) <- Part { src: r29, offset: 16, size: 48 }
   74 r29: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x40130e:
   75 r46: TypeID(2v1) <- Part { src: r29, offset: 0, size: 16 }
   76 r47: TypeID(2v1) <- Const { value: 16, size: 8 }
   77 r47: TypeID(2v1) <- Arith(Add, r47, r14)
   78 r47: TypeID(2v1) <- StoreMem { addr: r47, value: r46 }
0x401312:
   79 r46: TypeID(2v1) <- Part { src: r28, offset: 0, size: 16 }
   80 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
   81 r47: TypeID(2v1) <- Arith(Add, r47, r14)
   82 r47: TypeID(2v1) <- StoreMem { addr: r47, value: r46 }
0x401315:
   83 r46: TypeID(2v1) <- SetReturnValue(r16)
   84 r46: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  85 instrs
.B0:    ;;  → Always(Return).
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r13: ? <- Ancestral(AncestralName("RDI"))
         r27: ? <- Ancestral(AncestralName("ZMM0"))
         r28: ? <- Ancestral(AncestralName("ZMM1"))
         r65: ? <- Const { value: 8, size: 8 }
         r66: ? <- Arith(Add, r65, r11)
         r67: ? <- LoadMem { addr: r66, size: 16 }
         r68: ? <- Part { src: r27, offset: 16, size: 48 }
         r69: ? <- Concat { lo: r67, hi: r68 }
         r70: ? <- Const { value: 24, size: 8 }
         r71: ? <- Arith(Add, r70, r11)
         r72: ? <- LoadMem { addr: r71, size: 16 }
         r73: ? <- Part { src: r28, offset: 16, size: 48 }
         r74: ? <- Concat { lo: r72, hi: r73 }
         r75: ? <- Part { src: r74, offset: 0, size: 16 }
         r76: ? <- Const { value: 16, size: 8 }
         r77: ? <- Arith(Add, r76, r13)
         r78: ? <- StoreMem { addr: r77, value: r75 }
         r79: ? <- Part { src: r69, offset: 0, size: 16 }
         r80: ? <- Const { value: 0, size: 8 }
         r81: ? <- Arith(Add, r80, r13)
         r82: ? <- StoreMem { addr: r81, value: r79 }
         r83: ? <- SetReturnValue(r13)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r13, r27, r28, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  85 instrs
.B0:    ;;  → Always(Return).
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r13: ? <- Ancestral(AncestralName("RDI"))
         r66: ? <- ArithK(Add, r11, 8)
         r67: ? <- LoadMem { addr: r66, size: 16 }
         r71: ? <- ArithK(Add, r11, 24)
         r72: ? <- LoadMem { addr: r71, size: 16 }
         r77: ? <- ArithK(Add, r13, 16)
         r78: ? <- StoreMem { addr: r77, value: r72 }
         r82: ? <- StoreMem { addr: r13, value: r67 }
         r83: ? <- SetReturnValue(r13)



T0: {
  [pre:RDI + 16]:* := [pre:RSP + 24]:16;
  [pre:RDI]:* := [pre:RSP + 8]:16;
  ;
  return pre:RDI
}
