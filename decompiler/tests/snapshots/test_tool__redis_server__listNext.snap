---
source: decompiler/tests/test_tool.rs
expression: out
---
listNext 0x4110b0+39 (file 0x110b0)
          4110b0: 48 8b 07                mov rax,[rdi]
          4110b3: 48 85 c0                test rax,rax
          4110b6: 74 1e                   je short 00000000004110D6h
          4110b8: 8b 57 08                mov edx,[rdi+8]
          4110bb: 85 d2                   test edx,edx
          4110bd: 75 11                   jne short 00000000004110D0h
          4110bf: 48 8b 50 08             mov rdx,[rax+8]
          4110c3: 48 89 17                mov [rdi],rdx
          4110c6: c3                      ret
          4110c7: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
          4110d0: 48 8b 10                mov rdx,[rax]
          4110d3: 48 89 17                mov [rdi],rdx
          4110d6: c3                      ret

function type: "listNext" func (iter *listIter <TypeID(163777v1)>) *listNode <TypeID(163772v1)>
0 warnings.


mil program = 
program  121 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
                65 r45 <- Ancestral(AncestralName("arg0"))
                66 r14 <- Get(r45)
0x4110b0:
                67 r46 <- Const { value: 0, size: 8 }
                68 r46 <- Arith(Add, r46, r14)
                69 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
                70 r16 <- Get(r45)
0x4110b3:
                71 r16 <- Arith(BitAnd, r16, r16)
                72 r6 <- SignOf(r16)
                73 r5 <- IsZero(r16)
                74 r47 <- Part { src: r16, offset: 0, size: 1 }
                75 r3 <- Parity(r16)
                76 r2 <- False
                77 r10 <- False
0x4110b6:
                78 r45 <- SetJumpCondition(r5)
                79 r45 <- Control(JmpIf(116))
0x4110b8:
                80 r46 <- Const { value: 8, size: 8 }
                81 r46 <- Arith(Add, r46, r14)
                82 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
                83 r47 <- Part { src: r19, offset: 4, size: 4 }
                84 r19 <- Concat { lo: r45, hi: r47 }
0x4110bb:
                85 r46 <- Part { src: r19, offset: 0, size: 4 }
                86 r48 <- Part { src: r19, offset: 0, size: 4 }
                87 r46 <- Arith(BitAnd, r46, r48)
                88 r6 <- SignOf(r46)
                89 r5 <- IsZero(r46)
                90 r49 <- Part { src: r46, offset: 0, size: 1 }
                91 r3 <- Parity(r46)
                92 r2 <- False
                93 r10 <- False
0x4110bd:
                94 r45 <- Not(r5)
                95 r46 <- SetJumpCondition(r45)
                96 r46 <- Control(JmpIf(109))
0x4110bf:
                97 r46 <- Const { value: 8, size: 8 }
                98 r46 <- Arith(Add, r46, r16)
                99 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               100 r19 <- Get(r45)
0x4110c3:
               101 r46 <- Const { value: 0, size: 8 }
               102 r46 <- Arith(Add, r46, r14)
               103 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x4110c6:
               104 r45 <- Void
               105 r45 <- Concat { lo: r45, hi: r16 }
               106 r45 <- Part { src: r45, offset: 0, size: 8 }
               107 r47 <- SetReturnValue(r45)
               108 r47 <- Control(Ret)
0x4110d0:
               109 r46 <- Const { value: 0, size: 8 }
               110 r46 <- Arith(Add, r46, r16)
               111 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               112 r19 <- Get(r45)
0x4110d3:
               113 r46 <- Const { value: 0, size: 8 }
               114 r46 <- Arith(Add, r46, r14)
               115 r44 <- StoreMem { mem: r44, addr: r46, value: r19 }
0x4110d6:
               116 r45 <- Void
               117 r45 <- Concat { lo: r45, hi: r16 }
               118 r45 <- Part { src: r45, offset: 0, size: 8 }
               119 r47 <- SetReturnValue(r45)
               120 r47 <- Control(Ret)


ssa pre-xform:
ssa program  121 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
         r18 <- Ancestral(AncestralName("RDX"))
  (  6)  r43 <- Ancestral(AncestralName("memory"))
  (  4)  r65 <- Ancestral(AncestralName("arg0"))
         r67 <- Const { value: 0, size: 8 }
         r68 <- Arith(Add, r67, r65)
  (  2)  r69 <- LoadMem { mem: r43, addr: r68, size: 8 }
  (  5)  r71 <- Arith(BitAnd, r69, r69)
         r73 <- IsZero(r71)
         r78 <- SetJumpCondition(r73)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r80 <- Const { value: 8, size: 8 }
         r81 <- Arith(Add, r80, r65)
         r82 <- LoadMem { mem: r43, addr: r81, size: 4 }
         r83 <- Part { src: r18, offset: 4, size: 4 }
  (  2)  r84 <- Concat { lo: r82, hi: r83 }
         r85 <- Part { src: r84, offset: 0, size: 4 }
         r86 <- Part { src: r84, offset: 0, size: 4 }
         r87 <- Arith(BitAnd, r85, r86)
         r89 <- IsZero(r87)
         r94 <- Not(r89)
         r95 <- SetJumpCondition(r94)
.B2:    ;; preds:B1  → Always(Return).
         r97 <- Const { value: 8, size: 8 }
         r98 <- Arith(Add, r97, r71)
         r99 <- LoadMem { mem: r43, addr: r98, size: 8 }
         r101 <- Const { value: 0, size: 8 }
         r102 <- Arith(Add, r101, r65)
         r103 <- StoreMem { mem: r43, addr: r102, value: r99 }
         r105 <- Concat { lo: r104, hi: r71 }
         r106 <- Part { src: r105, offset: 0, size: 8 }
         r107 <- SetReturnValue(r106)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r109 <- Const { value: 0, size: 8 }
         r110 <- Arith(Add, r109, r71)
         r111 <- LoadMem { mem: r43, addr: r110, size: 8 }
         r113 <- Const { value: 0, size: 8 }
         r114 <- Arith(Add, r113, r65)
         r115 <- StoreMem { mem: r43, addr: r114, value: r111 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r117 <- Concat { lo: r116, hi: r71 }
         r118 <- Part { src: r117, offset: 0, size: 8 }
         r119 <- SetReturnValue(r118)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) } [r18, r43, r65, r67, r68, r69, r71, r73, r78]
  BlockID(1) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) } [r80, r81, r82, r83, r84, r85, r86, r87, r89, r94, r95]
  BlockID(2) -> Always(Return) [r97, r98, r99, r101, r102, r103, r104, r105, r106, r107]
  BlockID(3) -> Always(Block(BlockID(4))) [r109, r110, r111, r113, r114, r115]
  BlockID(4) -> Always(Return) [r116, r117, r118, r119]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  BlockID(3)
    |  BlockID(4)

ssa post-xform:
ssa program  121 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
  (  6)  r43 <- Ancestral(AncestralName("memory"))
  (  4)  r65 <- Ancestral(AncestralName("arg0"))
  (  5)  r69 <- LoadMem { mem: r43, addr: r65, size: 8 }
         r73 <- IsZero(r69)
         r78 <- SetJumpCondition(r73)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r81 <- ArithK(Add, r65, 8)
         r82 <- LoadMem { mem: r43, addr: r81, size: 4 }
         r89 <- IsZero(r82)
         r94 <- Not(r89)
         r95 <- SetJumpCondition(r94)
.B2:    ;; preds:B1  → Always(Return).
         r98 <- ArithK(Add, r69, 8)
         r99 <- LoadMem { mem: r43, addr: r98, size: 8 }
         r103 <- StoreMem { mem: r43, addr: r65, value: r99 }
         r107 <- SetReturnValue(r69)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r111 <- LoadMem { mem: r43, addr: r69, size: 8 }
         r115 <- StoreMem { mem: r43, addr: r65, value: r111 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r119 <- SetReturnValue(r69)



T0: {
  let r69: Bytes(8) = [pre:arg0]:8;
  ;
  if IsZero (r69) {
    goto T4
  }
  ;
  if ! IsZero ([pre:arg0 + 8]:4) {
    [pre:arg0]:* := [r69]:8;
    goto T4
  }
  [pre:arg0]:* := [r69 + 8]:8;
  ;
  return r69
  T4: {
    ;
    return r69
  }

}
