---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  99 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
0x4110b0:
   45 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   46 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   47 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   48 r16: TypeID(2v1) <- Get(r45)
0x4110b3:
   49 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
   50 r6: TypeID(2v1) <- SignOf(r16)
   51 r5: TypeID(2v1) <- IsZero(r16)
   52 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   53 r3: TypeID(2v1) <- Parity(r16)
   54 r2: TypeID(2v1) <- False
   55 r10: TypeID(2v1) <- False
0x4110b6:
   56 r45: TypeID(2v1) <- SetJumpCondition(r5)
   57 r45: TypeID(2v1) <- Control(JmpIf(94))
0x4110b8:
   58 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   59 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   60 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
   61 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
   62 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x4110bb:
   63 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
   64 r48: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
   65 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
   66 r6: TypeID(2v1) <- SignOf(r46)
   67 r5: TypeID(2v1) <- IsZero(r46)
   68 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   69 r3: TypeID(2v1) <- Parity(r46)
   70 r2: TypeID(2v1) <- False
   71 r10: TypeID(2v1) <- False
0x4110bd:
   72 r45: TypeID(2v1) <- Not(r5)
   73 r46: TypeID(2v1) <- SetJumpCondition(r45)
   74 r46: TypeID(2v1) <- Control(JmpIf(87))
0x4110bf:
   75 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   76 r46: TypeID(2v1) <- Arith(Add, r46, r16)
   77 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   78 r19: TypeID(2v1) <- Get(r45)
0x4110c3:
   79 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   80 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   81 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x4110c6:
   82 r45: TypeID(2v1) <- Void
   83 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   84 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
   85 r47: TypeID(2v1) <- SetReturnValue(r45)
   86 r47: TypeID(2v1) <- Control(Ret)
0x4110d0:
   87 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   88 r46: TypeID(2v1) <- Arith(Add, r46, r16)
   89 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   90 r19: TypeID(2v1) <- Get(r45)
0x4110d3:
   91 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   92 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   93 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x4110d6:
   94 r45: TypeID(2v1) <- Void
   95 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   96 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
   97 r47: TypeID(2v1) <- SetReturnValue(r45)
   98 r47: TypeID(2v1) <- Control(Ret)


 --- ssa pre-xform
ssa program  99 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
         r18: ? <- Ancestral(AncestralName("RDX"))
  (  4)  r43: ? <- Ancestral(AncestralName("arg0"))
         r45: ? <- Const { value: 0, size: 8 }
         r46: ? <- Arith(Add, r45, r43)
  (  2)  r47: ? <- LoadMem { addr: r46, size: 8 }
  (  5)  r49: ? <- Arith(BitAnd, r47, r47)
         r51: ? <- IsZero(r49)
         r56: ? <- SetJumpCondition(r51)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r58: ? <- Const { value: 8, size: 8 }
         r59: ? <- Arith(Add, r58, r43)
         r60: ? <- LoadMem { addr: r59, size: 4 }
         r61: ? <- Part { src: r18, offset: 4, size: 4 }
  (  2)  r62: ? <- Concat { lo: r60, hi: r61 }
         r63: ? <- Part { src: r62, offset: 0, size: 4 }
         r64: ? <- Part { src: r62, offset: 0, size: 4 }
         r65: ? <- Arith(BitAnd, r63, r64)
         r67: ? <- IsZero(r65)
         r72: ? <- Not(r67)
         r73: ? <- SetJumpCondition(r72)
.B2:    ;; preds:B1  → Always(Return).
         r75: ? <- Const { value: 8, size: 8 }
         r76: ? <- Arith(Add, r75, r49)
         r77: ? <- LoadMem { addr: r76, size: 8 }
         r79: ? <- Const { value: 0, size: 8 }
         r80: ? <- Arith(Add, r79, r43)
         r81: ? <- StoreMem { addr: r80, value: r77 }
         r83: ? <- Concat { lo: r82, hi: r49 }
         r84: ? <- Part { src: r83, offset: 0, size: 8 }
         r85: ? <- SetReturnValue(r84)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r87: ? <- Const { value: 0, size: 8 }
         r88: ? <- Arith(Add, r87, r49)
         r89: ? <- LoadMem { addr: r88, size: 8 }
         r91: ? <- Const { value: 0, size: 8 }
         r92: ? <- Arith(Add, r91, r43)
         r93: ? <- StoreMem { addr: r92, value: r89 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r95: ? <- Concat { lo: r94, hi: r49 }
         r96: ? <- Part { src: r95, offset: 0, size: 8 }
         r97: ? <- SetReturnValue(r96)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) } [r43, r47, r51, r56]
  BlockID(1) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) } [r59, r60, r67, r72, r73]
  BlockID(2) -> Always(Return) [r76, r77, r81, r85]
  BlockID(3) -> Always(Block(BlockID(4))) [r89, r93]
  BlockID(4) -> Always(Return) [r97]
  domtree:
    
 --- ssa
ssa program  99 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
  (  4)  r43: ? <- Ancestral(AncestralName("arg0"))
  (  5)  r47: ? <- LoadMem { addr: r43, size: 8 }
         r51: ? <- IsZero(r47)
         r56: ? <- SetJumpCondition(r51)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r59: ? <- ArithK(Add, r43, 8)
         r60: ? <- LoadMem { addr: r59, size: 4 }
         r67: ? <- IsZero(r60)
         r72: ? <- Not(r67)
         r73: ? <- SetJumpCondition(r72)
.B2:    ;; preds:B1  → Always(Return).
         r76: ? <- ArithK(Add, r47, 8)
         r77: ? <- LoadMem { addr: r76, size: 8 }
         r81: ? <- StoreMem { addr: r43, value: r77 }
         r85: ? <- SetReturnValue(r47)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r89: ? <- LoadMem { addr: r47, size: 8 }
         r93: ? <- StoreMem { addr: r43, value: r89 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r97: ? <- SetReturnValue(r47)


 --- ast

T0: {
  let r47: Bytes(8) = [pre:arg0]:8;
  ;
  if IsZero (r47) {
    goto T4
  }
  ;
  if ! IsZero ([pre:arg0 + 8]:4) {
    [pre:arg0]:* := [r47]:8;
    goto T4
  }
  [pre:arg0]:* := [r47 + 8]:8;
  ;
  return r47
  T4: {
    ;
    return r47
  }

}
