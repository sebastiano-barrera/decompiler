---
source: decompiler/tests/test_tool.rs
expression: out
---
listNext 0x4110b0+39 (file 0x110b0)
          4110b0: 48 8b 07                mov rax,[rdi]
          4110b3: 48 85 c0                test rax,rax
          4110b6: 74 1e                   je short 00000000004110D6h
          4110b8: 8b 57 08                mov edx,[rdi+8]
          4110bb: 85 d2                   test edx,edx
          4110bd: 75 11                   jne short 00000000004110D0h
          4110bf: 48 8b 50 08             mov rdx,[rax+8]
          4110c3: 48 89 17                mov [rdi],rdx
          4110c6: c3                      ret
          4110c7: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
          4110d0: 48 8b 10                mov rdx,[rax]
          4110d3: 48 89 17                mov [rdi],rdx
          4110d6: c3                      ret

function type: "listNext" func (iter *listIter <TypeID(163778v1)>) *listNode <TypeID(163773v1)>
0 warnings.


mil program = 
program  120 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Undefined
   44 r46: TypeID(2v1) <- Undefined
   45 r47: TypeID(2v1) <- Undefined
   46 r48: TypeID(2v1) <- Undefined
   47 r49: TypeID(2v1) <- Undefined
   48 r50: TypeID(2v1) <- Undefined
   49 r51: TypeID(2v1) <- Undefined
   50 r52: TypeID(2v1) <- Undefined
   51 r53: TypeID(2v1) <- Undefined
   52 r54: TypeID(2v1) <- Undefined
   53 r55: TypeID(2v1) <- Undefined
   54 r56: TypeID(2v1) <- Undefined
   55 r57: TypeID(2v1) <- Undefined
   56 r58: TypeID(2v1) <- Undefined
   57 r59: TypeID(2v1) <- Undefined
   58 r60: TypeID(2v1) <- Undefined
   59 r61: TypeID(2v1) <- Undefined
   60 r62: TypeID(2v1) <- Undefined
   61 r63: TypeID(2v1) <- Undefined
   62 r64: TypeID(2v1) <- Undefined
   63 r65: TypeID(2v1) <- Undefined
   64 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   65 r14: TypeID(2v1) <- Get(r45)
0x4110b0:
   66 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
   67 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   68 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   69 r16: TypeID(2v1) <- Get(r45)
0x4110b3:
   70 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
   71 r6: TypeID(2v1) <- SignOf(r16)
   72 r5: TypeID(2v1) <- IsZero(r16)
   73 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   74 r3: TypeID(2v1) <- Parity(r16)
   75 r2: TypeID(2v1) <- False
   76 r10: TypeID(2v1) <- False
0x4110b6:
   77 r45: TypeID(2v1) <- SetJumpCondition(r5)
   78 r45: TypeID(2v1) <- Control(JmpIf(115))
0x4110b8:
   79 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   80 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   81 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
   82 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
   83 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x4110bb:
   84 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
   85 r48: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
   86 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
   87 r6: TypeID(2v1) <- SignOf(r46)
   88 r5: TypeID(2v1) <- IsZero(r46)
   89 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   90 r3: TypeID(2v1) <- Parity(r46)
   91 r2: TypeID(2v1) <- False
   92 r10: TypeID(2v1) <- False
0x4110bd:
   93 r45: TypeID(2v1) <- Not(r5)
   94 r46: TypeID(2v1) <- SetJumpCondition(r45)
   95 r46: TypeID(2v1) <- Control(JmpIf(108))
0x4110bf:
   96 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   97 r46: TypeID(2v1) <- Arith(Add, r46, r16)
   98 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   99 r19: TypeID(2v1) <- Get(r45)
0x4110c3:
  100 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  101 r46: TypeID(2v1) <- Arith(Add, r46, r14)
  102 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x4110c6:
  103 r45: TypeID(2v1) <- Void
  104 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  105 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  106 r47: TypeID(2v1) <- SetReturnValue(r45)
  107 r47: TypeID(2v1) <- Control(Ret)
0x4110d0:
  108 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  109 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  110 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  111 r19: TypeID(2v1) <- Get(r45)
0x4110d3:
  112 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  113 r46: TypeID(2v1) <- Arith(Add, r46, r14)
  114 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r19 }
0x4110d6:
  115 r45: TypeID(2v1) <- Void
  116 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  117 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  118 r47: TypeID(2v1) <- SetReturnValue(r45)
  119 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  120 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
         r18: ? <- Ancestral(AncestralName("RDX"))
  (  4)  r64: ? <- Ancestral(AncestralName("arg0"))
         r66: ? <- Const { value: 0, size: 8 }
         r67: ? <- Arith(Add, r66, r64)
  (  2)  r68: ? <- LoadMem { addr: r67, size: 8 }
  (  5)  r70: ? <- Arith(BitAnd, r68, r68)
         r72: ? <- IsZero(r70)
         r77: ? <- SetJumpCondition(r72)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r79: ? <- Const { value: 8, size: 8 }
         r80: ? <- Arith(Add, r79, r64)
         r81: ? <- LoadMem { addr: r80, size: 4 }
         r82: ? <- Part { src: r18, offset: 4, size: 4 }
  (  2)  r83: ? <- Concat { lo: r81, hi: r82 }
         r84: ? <- Part { src: r83, offset: 0, size: 4 }
         r85: ? <- Part { src: r83, offset: 0, size: 4 }
         r86: ? <- Arith(BitAnd, r84, r85)
         r88: ? <- IsZero(r86)
         r93: ? <- Not(r88)
         r94: ? <- SetJumpCondition(r93)
.B2:    ;; preds:B1  → Always(Return).
         r96: ? <- Const { value: 8, size: 8 }
         r97: ? <- Arith(Add, r96, r70)
         r98: ? <- LoadMem { addr: r97, size: 8 }
         r100: ? <- Const { value: 0, size: 8 }
         r101: ? <- Arith(Add, r100, r64)
         r102: ? <- StoreMem { addr: r101, value: r98 }
         r104: ? <- Concat { lo: r103, hi: r70 }
         r105: ? <- Part { src: r104, offset: 0, size: 8 }
         r106: ? <- SetReturnValue(r105)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r108: ? <- Const { value: 0, size: 8 }
         r109: ? <- Arith(Add, r108, r70)
         r110: ? <- LoadMem { addr: r109, size: 8 }
         r112: ? <- Const { value: 0, size: 8 }
         r113: ? <- Arith(Add, r112, r64)
         r114: ? <- StoreMem { addr: r113, value: r110 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r116: ? <- Concat { lo: r115, hi: r70 }
         r117: ? <- Part { src: r116, offset: 0, size: 8 }
         r118: ? <- SetReturnValue(r117)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) } [r18, r64, r66, r67, r68, r70, r72, r77]
  BlockID(1) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) } [r79, r80, r81, r82, r83, r84, r85, r86, r88, r93, r94]
  BlockID(2) -> Always(Return) [r96, r97, r98, r100, r101, r102, r103, r104, r105, r106]
  BlockID(3) -> Always(Block(BlockID(4))) [r108, r109, r110, r112, r113, r114]
  BlockID(4) -> Always(Return) [r115, r116, r117, r118]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  BlockID(3)
    |  BlockID(4)

ssa post-xform:
ssa program  120 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(1)) }.
  (  4)  r64: ? <- Ancestral(AncestralName("arg0"))
  (  5)  r68: ? <- LoadMem { addr: r64, size: 8 }
         r72: ? <- IsZero(r68)
         r77: ? <- SetJumpCondition(r72)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(2)) }.
         r80: ? <- ArithK(Add, r64, 8)
         r81: ? <- LoadMem { addr: r80, size: 4 }
         r88: ? <- IsZero(r81)
         r93: ? <- Not(r88)
         r94: ? <- SetJumpCondition(r93)
.B2:    ;; preds:B1  → Always(Return).
         r97: ? <- ArithK(Add, r68, 8)
         r98: ? <- LoadMem { addr: r97, size: 8 }
         r102: ? <- StoreMem { addr: r64, value: r98 }
         r106: ? <- SetReturnValue(r68)
.B3:    ;; preds:B1  → Always(Block(BlockID(4))).
         r110: ? <- LoadMem { addr: r68, size: 8 }
         r114: ? <- StoreMem { addr: r64, value: r110 }
.B4:    ;; preds:B0,B3  → Always(Return).
         r118: ? <- SetReturnValue(r68)



T0: {
  let r68: Bytes(8) = [pre:arg0]:8;
  ;
  if IsZero (r68) {
    goto T4
  }
  ;
  if ! IsZero ([pre:arg0 + 8]:4) {
    [pre:arg0]:* := [r68]:8;
    goto T4
  }
  [pre:arg0]:* := [r68 + 8]:8;
  ;
  return r68
  T4: {
    ;
    return r68
  }

}
