---
source: decompiler/tests/test_tool.rs
assertion_line: 126
expression: out
---
 --- mil
program  597 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), size: 8 }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), size: 0 }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), size: 0 }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), size: 0 }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), size: 0 }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), size: 0 }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), size: 0 }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), size: 0 }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), size: 0 }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), size: 8 }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), size: 8 }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), size: 8 }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), size: 8 }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), size: 8 }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), size: 8 }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), size: 8 }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), size: 64 }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), size: 64 }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), size: 64 }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), size: 64 }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), size: 64 }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), size: 64 }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), size: 64 }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), size: 64 }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), size: 64 }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), size: 64 }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), size: 64 }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), size: 64 }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), size: 64 }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), size: 64 }
0x485d60:
   42 r12 <- ArithK(Add, r12, -8)
   43 r46 <- StoreMem { addr: r12, value: r11 }
0x485d61:
   44 r11 <- Get(r12)
0x485d64:
   45 r12 <- ArithK(Add, r12, -8)
   46 r46 <- StoreMem { addr: r12, value: r24 }
0x485d66:
   47 r12 <- ArithK(Add, r12, -8)
   48 r46 <- StoreMem { addr: r12, value: r17 }
0x485d67:
   49 r17 <- Get(r14)
0x485d6a:
   50 r46 <- Const { value: 48, size: 8 }
   51 r12 <- Arith(Sub, r12, r46)
   52 r12 <- Get(r12)
   53 r10 <- OverflowOf(r12)
   54 r2 <- CarryOf(r12)
   55 r6 <- SignOf(r12)
   56 r5 <- IsZero(r12)
   57 r47 <- Part { src: r12, offset: 0, size: 1 }
   58 r3 <- Parity(r47)
0x485d6e:
   59 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
0x485d71:
   60 r46 <- Part { src: r16, offset: 0, size: 4 }
   61 r47 <- Const { value: -16, size: 4 }
   62 r46 <- Arith(BitAnd, r46, r47)
   63 r48 <- Part { src: r16, offset: 4, size: 4 }
   64 r16 <- Concat { lo: r46, hi: r48 }
   65 r10 <- False
   66 r2 <- False
   67 r6 <- SignOf(r46)
   68 r5 <- IsZero(r46)
   69 r49 <- Part { src: r46, offset: 0, size: 1 }
   70 r3 <- Parity(r49)
0x485d74:
   71 r46 <- Part { src: r16, offset: 0, size: 1 }
   72 r47 <- Const { value: 144, size: 1 }
   73 r46 <- Arith(Sub, r46, r47)
   74 r10 <- OverflowOf(r46)
   75 r2 <- CarryOf(r46)
   76 r6 <- SignOf(r46)
   77 r5 <- IsZero(r46)
   78 r48 <- Part { src: r46, offset: 0, size: 1 }
   79 r3 <- Parity(r48)
0x485d76:
   80 r45 <- SetJumpCondition(r5)
   81 r45 <- Control(JmpExtIf(4742624))
0x485d78:
   82 r46 <- Part { src: r16, offset: 0, size: 1 }
   83 r47 <- Const { value: 176, size: 1 }
   84 r46 <- Arith(Sub, r46, r47)
   85 r10 <- OverflowOf(r46)
   86 r2 <- CarryOf(r46)
   87 r6 <- SignOf(r46)
   88 r5 <- IsZero(r46)
   89 r48 <- Part { src: r46, offset: 0, size: 1 }
   90 r3 <- Parity(r48)
0x485d7a:
   91 r45 <- Not(r5)
   92 r46 <- SetJumpCondition(r45)
   93 r46 <- Control(JmpExtIf(4743008))
0x485d80:
   94 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485d83:
   95 r46 <- Const { value: 8, size: 8 }
   96 r46 <- Arith(Add, r46, r15)
   97 r45 <- LoadMem { addr: r46, size: 8 }
   98 r18 <- Get(r45)
0x485d87:
   99 r46 <- Const { value: 8, size: 8 }
  100 r46 <- Arith(Add, r46, r14)
  101 r45 <- LoadMem { addr: r46, size: 8 }
  102 r14 <- Get(r45)
0x485d8b:
  103 r46 <- Part { src: r16, offset: 0, size: 4 }
  104 r47 <- Const { value: -16, size: 4 }
  105 r46 <- Arith(BitAnd, r46, r47)
  106 r48 <- Part { src: r16, offset: 4, size: 4 }
  107 r16 <- Concat { lo: r46, hi: r48 }
  108 r10 <- False
  109 r2 <- False
  110 r6 <- SignOf(r46)
  111 r5 <- IsZero(r46)
  112 r49 <- Part { src: r46, offset: 0, size: 1 }
  113 r3 <- Parity(r49)
0x485d8e:
  114 r46 <- Part { src: r16, offset: 0, size: 1 }
  115 r47 <- Const { value: 16, size: 1 }
  116 r46 <- Arith(Sub, r46, r47)
  117 r10 <- OverflowOf(r46)
  118 r2 <- CarryOf(r46)
  119 r6 <- SignOf(r46)
  120 r5 <- IsZero(r46)
  121 r48 <- Part { src: r46, offset: 0, size: 1 }
  122 r3 <- Parity(r48)
0x485d90:
  123 r45 <- SetJumpCondition(r5)
  124 r45 <- Control(JmpExtIf(4742584))
0x485d92:
  125 r45 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
0x485d96:
  126 r46 <- Part { src: r15, offset: 0, size: 4 }
  127 r47 <- Part { src: r16, offset: 4, size: 4 }
  128 r16 <- Concat { lo: r46, hi: r47 }
0x485d98:
  129 r46 <- Part { src: r16, offset: 0, size: 4 }
  130 r47 <- Const { value: 7, size: 4 }
  131 r46 <- Arith(BitAnd, r46, r47)
  132 r48 <- Part { src: r16, offset: 4, size: 4 }
  133 r16 <- Concat { lo: r46, hi: r48 }
  134 r10 <- False
  135 r2 <- False
  136 r6 <- SignOf(r46)
  137 r5 <- IsZero(r46)
  138 r49 <- Part { src: r46, offset: 0, size: 1 }
  139 r3 <- Parity(r49)
0x485d9b:
  140 r46 <- Part { src: r19, offset: 0, size: 4 }
  141 r48 <- Part { src: r19, offset: 0, size: 4 }
  142 r46 <- Arith(BitAnd, r46, r48)
  143 r6 <- SignOf(r46)
  144 r5 <- IsZero(r46)
  145 r49 <- Part { src: r46, offset: 0, size: 1 }
  146 r3 <- Parity(r46)
  147 r2 <- False
  148 r10 <- False
0x485d9d:
  149 r45 <- Not(r5)
  150 r46 <- SetJumpCondition(r45)
  151 r46 <- Control(JmpExtIf(4742672))
0x485d9f:
  152 r46 <- Part { src: r16, offset: 0, size: 1 }
  153 r47 <- Const { value: 4, size: 1 }
  154 r46 <- Arith(Sub, r46, r47)
  155 r10 <- OverflowOf(r46)
  156 r2 <- CarryOf(r46)
  157 r6 <- SignOf(r46)
  158 r5 <- IsZero(r46)
  159 r48 <- Part { src: r46, offset: 0, size: 1 }
  160 r3 <- Parity(r48)
0x485da1:
  161 r45 <- Not(r6)
  162 r46 <- Not(r5)
  163 r45 <- Bool(And, r45, r46)
  164 r47 <- SetJumpCondition(r45)
  165 r47 <- Control(JmpExtIf(4203597))
0x485da7:
  166 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485daa:
  167 r46 <- Const { value: 6851632, size: 8 }
  168 r47 <- ArithK(Mul, r16, 8)
  169 r46 <- Arith(Add, r46, r47)
  170 r46 <- SetJumpTarget(r46)
  171 r45 <- Control(JmpIndirect)
0x485db8:
  172 r15 <- Get(r18)
0x485dbb:
  173 r46 <- Part { src: r19, offset: 0, size: 4 }
  174 r48 <- Part { src: r19, offset: 0, size: 4 }
  175 r46 <- Arith(BitAnd, r46, r48)
  176 r6 <- SignOf(r46)
  177 r5 <- IsZero(r46)
  178 r49 <- Part { src: r46, offset: 0, size: 1 }
  179 r3 <- Parity(r46)
  180 r2 <- False
  181 r10 <- False
0x485dbd:
  182 r45 <- SetJumpCondition(r5)
  183 r45 <- Control(JmpExtIf(4742696))
0x485dbf:
  184 r45 <- Const { value: 5627056, size: 8 }
  185 r47 <- Void
  186 r47 <- Get(r14)
  187 r48 <- Void
  188 r48 <- Get(r15)
  189 r46 <- CArg { value: r48, next_arg: None }
  190 r46 <- CArg { value: r47, next_arg: Some(r46) }
  191 r46 <- Call { callee: r45, first_arg: Some(r46) }
  192 r2 <- UndefinedBool
  193 r3 <- UndefinedBool
  194 r4 <- UndefinedBool
  195 r5 <- UndefinedBool
  196 r6 <- UndefinedBool
  197 r7 <- UndefinedBool
  198 r8 <- UndefinedBool
  199 r9 <- UndefinedBool
  200 r10 <- UndefinedBool
  201 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485dd0:
  202 r46 <- Const { value: 8, size: 8 }
  203 r46 <- Arith(Add, r46, r17)
  204 r46 <- StoreMem { addr: r46, value: r16 }
0x485dd4:
  205 r46 <- Const { value: 48, size: 8 }
  206 r12 <- Arith(Add, r12, r46)
  207 r12 <- Get(r12)
  208 r10 <- OverflowOf(r12)
  209 r2 <- CarryOf(r12)
  210 r6 <- SignOf(r12)
  211 r5 <- IsZero(r12)
  212 r47 <- Part { src: r12, offset: 0, size: 1 }
  213 r3 <- Parity(r47)
0x485dd8:
  214 r45 <- LoadMem { addr: r12, size: 8 }
  215 r17 <- Get(r45)
  216 r12 <- ArithK(Add, r12, 8)
0x485dd9:
  217 r45 <- LoadMem { addr: r12, size: 8 }
  218 r24 <- Get(r45)
  219 r12 <- ArithK(Add, r12, 8)
0x485ddb:
  220 r45 <- LoadMem { addr: r12, size: 8 }
  221 r11 <- Get(r45)
  222 r12 <- ArithK(Add, r12, 8)
0x485ddc:
  223 r45 <- SetReturnValue(r16)
  224 r45 <- Control(Ret)
0x485de0:
  225 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485de3:
  226 r45 <- NotYetImplemented("unsupported: neg edx")
0x485de5:
  227 r46 <- Const { value: 8, size: 8 }
  228 r46 <- Arith(Add, r46, r15)
  229 r45 <- LoadMem { addr: r46, size: 8 }
  230 r14 <- Get(r45)
0x485de9:
  231 r45 <- NotYetImplemented("unsupported: sbb ecx,ecx")
0x485deb:
  232 r46 <- Part { src: r16, offset: 0, size: 4 }
  233 r47 <- Const { value: -16, size: 4 }
  234 r46 <- Arith(BitAnd, r46, r47)
  235 r48 <- Part { src: r16, offset: 4, size: 4 }
  236 r16 <- Concat { lo: r46, hi: r48 }
  237 r10 <- False
  238 r2 <- False
  239 r6 <- SignOf(r46)
  240 r5 <- IsZero(r46)
  241 r49 <- Part { src: r46, offset: 0, size: 1 }
  242 r3 <- Parity(r49)
0x485dee:
  243 r46 <- Part { src: r16, offset: 0, size: 1 }
  244 r47 <- Const { value: 16, size: 1 }
  245 r46 <- Arith(Sub, r46, r47)
  246 r10 <- OverflowOf(r46)
  247 r2 <- CarryOf(r46)
  248 r6 <- SignOf(r46)
  249 r5 <- IsZero(r46)
  250 r48 <- Part { src: r46, offset: 0, size: 1 }
  251 r3 <- Parity(r48)
0x485df0:
  252 r45 <- SetJumpCondition(r5)
  253 r45 <- Control(JmpExtIf(4742704))
0x485df2:
  254 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
0x485df6:
  255 r46 <- Part { src: r19, offset: 0, size: 4 }
  256 r47 <- Part { src: r16, offset: 4, size: 4 }
  257 r16 <- Concat { lo: r46, hi: r47 }
0x485df8:
  258 r46 <- Part { src: r16, offset: 0, size: 4 }
  259 r47 <- Const { value: 7, size: 4 }
  260 r46 <- Arith(BitAnd, r46, r47)
  261 r48 <- Part { src: r16, offset: 4, size: 4 }
  262 r16 <- Concat { lo: r46, hi: r48 }
  263 r10 <- False
  264 r2 <- False
  265 r6 <- SignOf(r46)
  266 r5 <- IsZero(r46)
  267 r49 <- Part { src: r46, offset: 0, size: 1 }
  268 r3 <- Parity(r49)
0x485dfb:
  269 r46 <- Part { src: r16, offset: 0, size: 1 }
  270 r47 <- Const { value: 4, size: 1 }
  271 r46 <- Arith(Sub, r46, r47)
  272 r10 <- OverflowOf(r46)
  273 r2 <- CarryOf(r46)
  274 r6 <- SignOf(r46)
  275 r5 <- IsZero(r46)
  276 r48 <- Part { src: r46, offset: 0, size: 1 }
  277 r3 <- Parity(r48)
0x485dfd:
  278 r45 <- Not(r6)
  279 r46 <- Not(r5)
  280 r45 <- Bool(And, r45, r46)
  281 r47 <- SetJumpCondition(r45)
  282 r47 <- Control(JmpExtIf(4203590))
0x485e03:
  283 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e06:
  284 r46 <- Const { value: 6851672, size: 8 }
  285 r47 <- ArithK(Mul, r16, 8)
  286 r46 <- Arith(Add, r46, r47)
  287 r46 <- SetJumpTarget(r46)
  288 r45 <- Control(JmpIndirect)
0x485e10:
  289 r46 <- Part { src: r16, offset: 0, size: 1 }
  290 r47 <- Const { value: 4, size: 1 }
  291 r46 <- Arith(Sub, r46, r47)
  292 r10 <- OverflowOf(r46)
  293 r2 <- CarryOf(r46)
  294 r6 <- SignOf(r46)
  295 r5 <- IsZero(r46)
  296 r48 <- Part { src: r46, offset: 0, size: 1 }
  297 r3 <- Parity(r48)
0x485e12:
  298 r45 <- Not(r6)
  299 r46 <- Not(r5)
  300 r45 <- Bool(And, r45, r46)
  301 r47 <- SetJumpCondition(r45)
  302 r47 <- Control(JmpExtIf(4203604))
0x485e18:
  303 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e1b:
  304 r46 <- Const { value: 6851712, size: 8 }
  305 r47 <- ArithK(Mul, r16, 8)
  306 r46 <- Arith(Add, r46, r47)
  307 r46 <- SetJumpTarget(r46)
  308 r45 <- Control(JmpIndirect)
0x485e28:
  309 r45 <- Const { value: 5627360, size: 8 }
  310 r47 <- Void
  311 r47 <- Get(r14)
  312 r48 <- Void
  313 r48 <- Get(r15)
  314 r46 <- CArg { value: r48, next_arg: None }
  315 r46 <- CArg { value: r47, next_arg: Some(r46) }
  316 r46 <- Call { callee: r45, first_arg: Some(r46) }
  317 r2 <- UndefinedBool
  318 r3 <- UndefinedBool
  319 r4 <- UndefinedBool
  320 r5 <- UndefinedBool
  321 r6 <- UndefinedBool
  322 r7 <- UndefinedBool
  323 r8 <- UndefinedBool
  324 r9 <- UndefinedBool
  325 r10 <- UndefinedBool
  326 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485e2d:
  327 r45 <- Control(JmpExt(4742608))
0x485e30:
  328 r45 <- Const { value: -48, size: 8 }
  329 r45 <- Arith(Add, r45, r11)
  330 r24 <- Get(r45)
0x485e34:
  331 r19 <- Get(r14)
0x485e37:
  332 r45 <- Const { value: 32, size: 4 }
  333 r46 <- Part { src: r15, offset: 4, size: 4 }
  334 r15 <- Concat { lo: r45, hi: r46 }
0x485e3c:
  335 r46 <- Part { src: r18, offset: 0, size: 4 }
  336 r47 <- Const { value: -52, size: 8 }
  337 r47 <- Arith(Add, r47, r11)
  338 r47 <- StoreMem { addr: r47, value: r46 }
0x485e3f:
  339 r14 <- Get(r24)
0x485e42:
  340 r45 <- Const { value: 4520352, size: 8 }
  341 r47 <- Void
  342 r47 <- Get(r14)
  343 r48 <- Void
  344 r48 <- Get(r15)
  345 r49 <- Void
  346 r49 <- Get(r19)
  347 r46 <- CArg { value: r49, next_arg: None }
  348 r46 <- CArg { value: r48, next_arg: Some(r46) }
  349 r46 <- CArg { value: r47, next_arg: Some(r46) }
  350 r46 <- Call { callee: r45, first_arg: Some(r46) }
  351 r2 <- UndefinedBool
  352 r3 <- UndefinedBool
  353 r4 <- UndefinedBool
  354 r5 <- UndefinedBool
  355 r6 <- UndefinedBool
  356 r7 <- UndefinedBool
  357 r8 <- UndefinedBool
  358 r9 <- UndefinedBool
  359 r10 <- UndefinedBool
  360 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485e47:
  361 r14 <- Get(r24)
0x485e4a:
  362 r45 <- Const { value: 4199136, size: 8 }
  363 r47 <- Void
  364 r47 <- Get(r14)
  365 r46 <- CArg { value: r47, next_arg: None }
  366 r46 <- Call { callee: r45, first_arg: Some(r46) }
  367 r2 <- UndefinedBool
  368 r3 <- UndefinedBool
  369 r4 <- UndefinedBool
  370 r5 <- UndefinedBool
  371 r6 <- UndefinedBool
  372 r7 <- UndefinedBool
  373 r8 <- UndefinedBool
  374 r9 <- UndefinedBool
  375 r10 <- UndefinedBool
  376 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485e4f:
  377 r46 <- Const { value: 8, size: 8 }
  378 r46 <- Arith(Add, r46, r17)
  379 r45 <- LoadMem { addr: r46, size: 8 }
  380 r14 <- Get(r45)
0x485e53:
  381 r46 <- Const { value: -52, size: 8 }
  382 r46 <- Arith(Add, r46, r11)
  383 r45 <- LoadMem { addr: r46, size: 4 }
  384 r47 <- Part { src: r18, offset: 4, size: 4 }
  385 r18 <- Concat { lo: r45, hi: r47 }
0x485e56:
  386 r15 <- Get(r24)
0x485e59:
  387 r19 <- Get(r16)
0x485e5c:
  388 r45 <- Const { value: 4293744, size: 8 }
  389 r47 <- Void
  390 r47 <- Get(r14)
  391 r48 <- Void
  392 r48 <- Get(r15)
  393 r46 <- CArg { value: r48, next_arg: None }
  394 r46 <- CArg { value: r47, next_arg: Some(r46) }
  395 r46 <- Call { callee: r45, first_arg: Some(r46) }
  396 r2 <- UndefinedBool
  397 r3 <- UndefinedBool
  398 r4 <- UndefinedBool
  399 r5 <- UndefinedBool
  400 r6 <- UndefinedBool
  401 r7 <- UndefinedBool
  402 r8 <- UndefinedBool
  403 r9 <- UndefinedBool
  404 r10 <- UndefinedBool
0x485e61:
  405 r45 <- Control(JmpExt(4742612))
0x485e70:
  406 r46 <- Const { value: -9, size: 8 }
  407 r46 <- Arith(Add, r46, r14)
  408 r45 <- LoadMem { addr: r46, size: 4 }
  409 r47 <- Part { src: r19, offset: 4, size: 4 }
  410 r19 <- Concat { lo: r45, hi: r47 }
0x485e73:
  411 r46 <- Const { value: 8, size: 8 }
  412 r46 <- Arith(Add, r46, r17)
  413 r45 <- LoadMem { addr: r46, size: 8 }
  414 r16 <- Get(r45)
0x485e77:
  415 r46 <- Const { value: 48, size: 8 }
  416 r12 <- Arith(Add, r12, r46)
  417 r12 <- Get(r12)
  418 r10 <- OverflowOf(r12)
  419 r2 <- CarryOf(r12)
  420 r6 <- SignOf(r12)
  421 r5 <- IsZero(r12)
  422 r47 <- Part { src: r12, offset: 0, size: 1 }
  423 r3 <- Parity(r47)
0x485e7b:
  424 r15 <- Get(r14)
0x485e7e:
  425 r45 <- LoadMem { addr: r12, size: 8 }
  426 r17 <- Get(r45)
  427 r12 <- ArithK(Add, r12, 8)
0x485e7f:
  428 r45 <- LoadMem { addr: r12, size: 8 }
  429 r24 <- Get(r45)
  430 r12 <- ArithK(Add, r12, 8)
0x485e81:
  431 r14 <- Get(r16)
0x485e84:
  432 r45 <- LoadMem { addr: r12, size: 8 }
  433 r11 <- Get(r45)
  434 r12 <- ArithK(Add, r12, 8)
0x485e85:
  435 r45 <- Control(JmpExt(4293744))
0x485e90:
  436 r46 <- Const { value: -17, size: 8 }
  437 r46 <- Arith(Add, r46, r14)
  438 r45 <- LoadMem { addr: r46, size: 8 }
  439 r19 <- Get(r45)
0x485e94:
  440 r45 <- Control(JmpExt(4742771))
0x485ea0:
  441 r46 <- Part { src: r19, offset: 0, size: 1 }
  442 r47 <- Const { value: 3, size: 1 }
  443 r46 <- Arith(Shr, r46, r47)
  444 r48 <- Part { src: r19, offset: 1, size: 7 }
  445 r19 <- Concat { lo: r46, hi: r48 }
  446 r6 <- SignOf(r46)
  447 r5 <- IsZero(r46)
  448 r49 <- Part { src: r46, offset: 0, size: 1 }
  449 r3 <- Parity(r49)
0x485ea3:
  450 r45 <- NotYetImplemented("unsupported: movzx edx,dl")
0x485ea6:
  451 r45 <- Control(JmpExt(4742771))
0x485eb0:
  452 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-3]")
0x485eb4:
  453 r45 <- Control(JmpExt(4742771))
0x485ec0:
  454 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rdi-5]")
0x485ec4:
  455 r45 <- Control(JmpExt(4742771))
0x485ed0:
  456 r46 <- Part { src: r15, offset: 0, size: 1 }
  457 r47 <- Const { value: 3, size: 1 }
  458 r46 <- Arith(Shr, r46, r47)
  459 r48 <- Part { src: r15, offset: 1, size: 7 }
  460 r15 <- Concat { lo: r46, hi: r48 }
  461 r6 <- SignOf(r46)
  462 r5 <- IsZero(r46)
  463 r49 <- Part { src: r46, offset: 0, size: 1 }
  464 r3 <- Parity(r49)
0x485ed4:
  465 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485ed8:
  466 r15 <- Get(r18)
0x485edb:
  467 r45 <- Const { value: 5626912, size: 8 }
  468 r47 <- Void
  469 r47 <- Get(r14)
  470 r48 <- Void
  471 r48 <- Get(r15)
  472 r49 <- Void
  473 r49 <- Get(r19)
  474 r49 <- Part { src: r49, offset: 0, size: 4 }
  475 r46 <- CArg { value: r49, next_arg: None }
  476 r46 <- CArg { value: r48, next_arg: Some(r46) }
  477 r46 <- CArg { value: r47, next_arg: Some(r46) }
  478 r46 <- Call { callee: r45, first_arg: Some(r46) }
  479 r2 <- UndefinedBool
  480 r3 <- UndefinedBool
  481 r4 <- UndefinedBool
  482 r5 <- UndefinedBool
  483 r6 <- UndefinedBool
  484 r7 <- UndefinedBool
  485 r8 <- UndefinedBool
  486 r9 <- UndefinedBool
  487 r10 <- UndefinedBool
  488 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485ee0:
  489 r45 <- Control(JmpExt(4742608))
0x485ee8:
  490 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485eec:
  491 r45 <- Control(JmpExt(4742872))
0x485ef0:
  492 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485ef4:
  493 r45 <- Control(JmpExt(4742872))
0x485f00:
  494 r46 <- Const { value: -9, size: 8 }
  495 r46 <- Arith(Add, r46, r18)
  496 r45 <- LoadMem { addr: r46, size: 4 }
  497 r47 <- Part { src: r19, offset: 4, size: 4 }
  498 r19 <- Concat { lo: r45, hi: r47 }
0x485f03:
  499 r45 <- Control(JmpExt(4742872))
0x485f08:
  500 r46 <- Const { value: -17, size: 8 }
  501 r46 <- Arith(Add, r46, r18)
  502 r45 <- LoadMem { addr: r46, size: 4 }
  503 r47 <- Part { src: r19, offset: 4, size: 4 }
  504 r19 <- Concat { lo: r45, hi: r47 }
0x485f0b:
  505 r15 <- Get(r18)
0x485f0e:
  506 r45 <- Const { value: 5626880, size: 8 }
  507 r47 <- Void
  508 r47 <- Get(r14)
  509 r48 <- Void
  510 r48 <- Get(r15)
  511 r49 <- Void
  512 r49 <- Get(r19)
  513 r49 <- Part { src: r49, offset: 0, size: 4 }
  514 r46 <- CArg { value: r49, next_arg: None }
  515 r46 <- CArg { value: r48, next_arg: Some(r46) }
  516 r46 <- CArg { value: r47, next_arg: Some(r46) }
  517 r46 <- Call { callee: r45, first_arg: Some(r46) }
  518 r2 <- UndefinedBool
  519 r3 <- UndefinedBool
  520 r4 <- UndefinedBool
  521 r5 <- UndefinedBool
  522 r6 <- UndefinedBool
  523 r7 <- UndefinedBool
  524 r8 <- UndefinedBool
  525 r9 <- UndefinedBool
  526 r10 <- UndefinedBool
  527 r16 <- Part { src: r46, offset: 0, size: 8 }
0x485f13:
  528 r45 <- Control(JmpExt(4742608))
0x485f20:
  529 r46 <- Part { src: r15, offset: 0, size: 1 }
  530 r47 <- Const { value: 3, size: 1 }
  531 r46 <- Arith(Shr, r46, r47)
  532 r48 <- Part { src: r15, offset: 1, size: 7 }
  533 r15 <- Concat { lo: r46, hi: r48 }
  534 r6 <- SignOf(r46)
  535 r5 <- IsZero(r46)
  536 r49 <- Part { src: r46, offset: 0, size: 1 }
  537 r3 <- Parity(r49)
0x485f24:
  538 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485f28:
  539 r45 <- Control(JmpExt(4742923))
0x485f30:
  540 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485f34:
  541 r45 <- Control(JmpExt(4742923))
0x485f40:
  542 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485f44:
  543 r45 <- Control(JmpExt(4742923))
0x485f50:
  544 r46 <- Const { value: -9, size: 8 }
  545 r46 <- Arith(Add, r46, r18)
  546 r45 <- LoadMem { addr: r46, size: 4 }
  547 r47 <- Part { src: r19, offset: 4, size: 4 }
  548 r19 <- Concat { lo: r45, hi: r47 }
0x485f53:
  549 r45 <- Control(JmpExt(4742923))
0x485f58:
  550 r46 <- Const { value: -17, size: 8 }
  551 r46 <- Arith(Add, r46, r18)
  552 r45 <- LoadMem { addr: r46, size: 4 }
  553 r47 <- Part { src: r19, offset: 4, size: 4 }
  554 r19 <- Concat { lo: r45, hi: r47 }
0x485f5b:
  555 r45 <- Control(JmpExt(4742872))
0x485f60:
  556 r45 <- Const { value: 6979771, size: 4 }
  557 r46 <- Part { src: r19, offset: 4, size: 4 }
  558 r19 <- Concat { lo: r45, hi: r46 }
0x485f65:
  559 r45 <- Const { value: 165, size: 4 }
  560 r46 <- Part { src: r15, offset: 4, size: 4 }
  561 r15 <- Concat { lo: r45, hi: r46 }
0x485f6a:
  562 r45 <- Const { value: 6982459, size: 4 }
  563 r46 <- Part { src: r14, offset: 4, size: 4 }
  564 r14 <- Concat { lo: r45, hi: r46 }
0x485f6f:
  565 r46 <- Part { src: r16, offset: 0, size: 4 }
  566 r48 <- Part { src: r16, offset: 0, size: 4 }
  567 r46 <- Arith(BitXor, r46, r48)
  568 r49 <- Part { src: r16, offset: 4, size: 4 }
  569 r16 <- Concat { lo: r46, hi: r49 }
  570 r10 <- False
  571 r2 <- False
  572 r6 <- SignOf(r46)
  573 r5 <- IsZero(r46)
  574 r50 <- Part { src: r46, offset: 0, size: 1 }
  575 r3 <- Parity(r50)
0x485f71:
  576 r45 <- Const { value: 4990320, size: 8 }
  577 r47 <- Void
  578 r47 <- Get(r14)
  579 r48 <- Void
  580 r48 <- Get(r15)
  581 r48 <- Part { src: r48, offset: 0, size: 4 }
  582 r49 <- Void
  583 r49 <- Get(r19)
  584 r46 <- CArg { value: r49, next_arg: None }
  585 r46 <- CArg { value: r48, next_arg: Some(r46) }
  586 r46 <- CArg { value: r47, next_arg: Some(r46) }
  587 r46 <- Call { callee: r45, first_arg: Some(r46) }
  588 r2 <- UndefinedBool
  589 r3 <- UndefinedBool
  590 r4 <- UndefinedBool
  591 r5 <- UndefinedBool
  592 r6 <- UndefinedBool
  593 r7 <- UndefinedBool
  594 r8 <- UndefinedBool
  595 r9 <- UndefinedBool
  596 r10 <- UndefinedBool


 --- ssa pre-xform
ssa program  603 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  4)  r12 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
  (  5)  r13 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
  (  2)  r14 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
         r15 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
  (  6)  r17 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
         r22 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
  (  4)  r42 <- ArithK(Add, r10, -8)
         r43 <- StoreMem { addr: r42, value: r9 }
  (  2)  r45 <- ArithK(Add, r42, -8)
         r46 <- StoreMem { addr: r45, value: r22 }
         r47 <- ArithK(Add, r45, -8)
         r48 <- StoreMem { addr: r47, value: r15 }
         r59 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r60 <- Part { src: r14, offset: 0, size: 4 }
         r61 <- Const { value: -16, size: 4 }
         r62 <- Arith(BitAnd, r60, r61)
         r63 <- Part { src: r14, offset: 4, size: 4 }
  (  6)  r64 <- Concat { lo: r62, hi: r63 }
         r71 <- Part { src: r64, offset: 0, size: 1 }
         r72 <- Const { value: 144, size: 1 }
         r73 <- Arith(Sub, r71, r72)
         r77 <- IsZero(r73)
         r80 <- SetJumpCondition(r77)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r82 <- Part { src: r64, offset: 0, size: 1 }
         r83 <- Const { value: 176, size: 1 }
         r84 <- Arith(Sub, r82, r83)
         r88 <- IsZero(r84)
         r91 <- Not(r88)
         r92 <- SetJumpCondition(r91)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r94 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r95 <- Const { value: 8, size: 8 }
         r96 <- Arith(Add, r95, r13)
  (  2)  r97 <- LoadMem { addr: r96, size: 8 }
         r99 <- Const { value: 8, size: 8 }
         r100 <- Arith(Add, r99, r12)
  (  2)  r101 <- LoadMem { addr: r100, size: 8 }
         r103 <- Part { src: r64, offset: 0, size: 4 }
         r104 <- Const { value: -16, size: 4 }
         r105 <- Arith(BitAnd, r103, r104)
         r106 <- Part { src: r64, offset: 4, size: 4 }
  (  2)  r107 <- Concat { lo: r105, hi: r106 }
         r114 <- Part { src: r107, offset: 0, size: 1 }
         r115 <- Const { value: 16, size: 1 }
         r116 <- Arith(Sub, r114, r115)
         r120 <- IsZero(r116)
         r123 <- SetJumpCondition(r120)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r125 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r126 <- Part { src: r13, offset: 0, size: 4 }
         r127 <- Part { src: r107, offset: 4, size: 4 }
  (  2)  r128 <- Concat { lo: r126, hi: r127 }
         r129 <- Part { src: r128, offset: 0, size: 4 }
         r130 <- Const { value: 7, size: 4 }
         r131 <- Arith(BitAnd, r129, r130)
         r132 <- Part { src: r128, offset: 4, size: 4 }
  (  4)  r133 <- Concat { lo: r131, hi: r132 }
         r140 <- Part { src: r17, offset: 0, size: 4 }
         r141 <- Part { src: r17, offset: 0, size: 4 }
         r142 <- Arith(BitAnd, r140, r141)
         r144 <- IsZero(r142)
         r149 <- Not(r144)
         r150 <- SetJumpCondition(r149)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r152 <- Part { src: r133, offset: 0, size: 1 }
         r153 <- Const { value: 4, size: 1 }
  (  2)  r154 <- Arith(Sub, r152, r153)
         r157 <- SignOf(r154)
         r158 <- IsZero(r154)
         r161 <- Not(r157)
         r162 <- Not(r158)
         r163 <- Bool(And, r161, r162)
         r164 <- SetJumpCondition(r163)
.B5:    ;; preds:B4  → Always(Indirect).
         r166 <- NotYetImplemented("unsupported: movzx eax,al")
         r167 <- Const { value: 6851632, size: 8 }
         r168 <- ArithK(Mul, r133, 8)
         r169 <- Arith(Add, r167, r168)
         r170 <- SetJumpTarget(r169)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r289 <- Part { src: r133, offset: 0, size: 1 }
         r290 <- Const { value: 4, size: 1 }
  (  2)  r291 <- Arith(Sub, r289, r290)
         r294 <- SignOf(r291)
         r295 <- IsZero(r291)
         r298 <- Not(r294)
         r299 <- Not(r295)
         r300 <- Bool(And, r298, r299)
         r301 <- SetJumpCondition(r300)
.B14:    ;; preds:B13  → Always(Indirect).
         r303 <- NotYetImplemented("unsupported: movzx eax,al")
         r304 <- Const { value: 6851712, size: 8 }
         r305 <- ArithK(Mul, r133, 8)
         r306 <- Arith(Add, r304, r305)
         r307 <- SetJumpTarget(r306)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r173 <- Part { src: r17, offset: 0, size: 4 }
         r174 <- Part { src: r17, offset: 0, size: 4 }
         r175 <- Arith(BitAnd, r173, r174)
         r177 <- IsZero(r175)
         r182 <- SetJumpCondition(r177)
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r184 <- Const { value: 5627056, size: 8 }
         r189 <- CArg { value: r97, next_arg: None }
         r190 <- CArg { value: r101, next_arg: Some(r189) }
         r191 <- Call { callee: r184, first_arg: Some(r190) }
         r201 <- Part { src: r191, offset: 0, size: 8 }
         r602 <- Upsilon { value: r201, phi_ref: r597 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r309 <- Const { value: 5627360, size: 8 }
         r314 <- CArg { value: r97, next_arg: None }
         r315 <- CArg { value: r101, next_arg: Some(r314) }
         r316 <- Call { callee: r309, first_arg: Some(r315) }
         r326 <- Part { src: r316, offset: 0, size: 8 }
         r600 <- Upsilon { value: r326, phi_ref: r597 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r597 <- Phi
         r202 <- Const { value: 8, size: 8 }
         r203 <- Arith(Add, r202, r12)
         r204 <- StoreMem { addr: r203, value: r597 }
         r601 <- Upsilon { value: r597, phi_ref: r598 }
.B35:    ;; preds:B1  → Always(Undefined).
         r556 <- Const { value: 6979771, size: 4 }
         r557 <- Part { src: r17, offset: 4, size: 4 }
         r558 <- Concat { lo: r556, hi: r557 }
         r559 <- Const { value: 165, size: 4 }
         r560 <- Part { src: r13, offset: 4, size: 4 }
         r561 <- Concat { lo: r559, hi: r560 }
         r562 <- Const { value: 6982459, size: 4 }
         r563 <- Part { src: r12, offset: 4, size: 4 }
         r564 <- Concat { lo: r562, hi: r563 }
         r576 <- Const { value: 4990320, size: 8 }
         r581 <- Part { src: r561, offset: 0, size: 4 }
         r584 <- CArg { value: r558, next_arg: None }
         r585 <- CArg { value: r581, next_arg: Some(r584) }
         r586 <- CArg { value: r564, next_arg: Some(r585) }
         r587 <- Call { callee: r576, first_arg: Some(r586) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r225 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r226 <- NotYetImplemented("unsupported: neg edx")
         r227 <- Const { value: 8, size: 8 }
         r228 <- Arith(Add, r227, r13)
         r229 <- LoadMem { addr: r228, size: 8 }
         r231 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r232 <- Part { src: r64, offset: 0, size: 4 }
         r233 <- Const { value: -16, size: 4 }
         r234 <- Arith(BitAnd, r232, r233)
         r235 <- Part { src: r64, offset: 4, size: 4 }
  (  2)  r236 <- Concat { lo: r234, hi: r235 }
         r243 <- Part { src: r236, offset: 0, size: 1 }
         r244 <- Const { value: 16, size: 1 }
         r245 <- Arith(Sub, r243, r244)
         r249 <- IsZero(r245)
         r252 <- SetJumpCondition(r249)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r254 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r255 <- Part { src: r17, offset: 0, size: 4 }
         r256 <- Part { src: r236, offset: 4, size: 4 }
  (  2)  r257 <- Concat { lo: r255, hi: r256 }
         r258 <- Part { src: r257, offset: 0, size: 4 }
         r259 <- Const { value: 7, size: 4 }
         r260 <- Arith(BitAnd, r258, r259)
         r261 <- Part { src: r257, offset: 4, size: 4 }
  (  2)  r262 <- Concat { lo: r260, hi: r261 }
         r269 <- Part { src: r262, offset: 0, size: 1 }
         r270 <- Const { value: 4, size: 1 }
  (  2)  r271 <- Arith(Sub, r269, r270)
         r274 <- SignOf(r271)
         r275 <- IsZero(r271)
         r278 <- Not(r274)
         r279 <- Not(r275)
         r280 <- Bool(And, r278, r279)
         r281 <- SetJumpCondition(r280)
.B12:    ;; preds:B11  → Always(Indirect).
         r283 <- NotYetImplemented("unsupported: movzx eax,al")
         r284 <- Const { value: 6851672, size: 8 }
         r285 <- ArithK(Mul, r262, 8)
         r286 <- Arith(Add, r284, r285)
         r287 <- SetJumpTarget(r286)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
         r328 <- Const { value: -48, size: 8 }
  (  3)  r329 <- Arith(Add, r328, r42)
         r332 <- Const { value: 32, size: 4 }
         r333 <- Part { src: r13, offset: 4, size: 4 }
         r334 <- Concat { lo: r332, hi: r333 }
         r335 <- Part { src: r16, offset: 0, size: 4 }
         r336 <- Const { value: -52, size: 8 }
         r337 <- Arith(Add, r336, r42)
         r338 <- StoreMem { addr: r337, value: r335 }
         r340 <- Const { value: 4520352, size: 8 }
         r347 <- CArg { value: r229, next_arg: None }
         r348 <- CArg { value: r334, next_arg: Some(r347) }
         r349 <- CArg { value: r329, next_arg: Some(r348) }
         r350 <- Call { callee: r340, first_arg: Some(r349) }
         r362 <- Const { value: 4199136, size: 8 }
         r365 <- CArg { value: r329, next_arg: None }
         r366 <- Call { callee: r362, first_arg: Some(r365) }
         r376 <- Part { src: r366, offset: 0, size: 8 }
         r377 <- Const { value: 8, size: 8 }
         r378 <- Arith(Add, r377, r12)
         r379 <- LoadMem { addr: r378, size: 8 }
         r388 <- Const { value: 4293744, size: 8 }
         r393 <- CArg { value: r329, next_arg: None }
         r394 <- CArg { value: r379, next_arg: Some(r393) }
         r395 <- Call { callee: r388, first_arg: Some(r394) }
         r599 <- Upsilon { value: r376, phi_ref: r598 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r598 <- Phi
         r223 <- SetReturnValue(r598)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) } [r9, r10, r12, r13, r14, r15, r16, r17, r22, r42, r43, r45, r46, r47, r48, r59, r60, r62, r71, r73, r77, r80]
  BlockID(1) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) } [r82, r84, r88, r91, r92]
  BlockID(2) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) } [r94, r96, r97, r100, r101, r105, r114, r116, r120, r123]
  BlockID(3) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) } [r125, r129, r131, r132, r133, r140, r141, r142, r144, r149, r150]
  BlockID(4) -> Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) } [r152, r154, r157, r158, r161, r162, r163, r164]
  BlockID(5) -> Always(Indirect) [r166, r168, r169, r170]
  BlockID(6) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) } [r173, r174, r175, r177, r182]
  BlockID(7) -> Always(Block(BlockID(8))) [r184, r189, r190, r191, r602]
  BlockID(8) -> Always(Block(BlockID(9))) [r597, r203, r204, r601]
  BlockID(9) -> Always(Return) [r598, r223]
  BlockID(10) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) } [r225, r226, r228, r229, r231, r234, r243, r245, r249, r252]
  BlockID(11) -> Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) } [r254, r258, r260, r261, r262, r269, r271, r274, r275, r278, r279, r280, r281]
  BlockID(12) -> Always(Indirect) [r283, r285, r286, r287]
  BlockID(13) -> Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) } [r289, r291, r294, r295, r298, r299, r300, r301]
  BlockID(14) -> Always(Indirect) [r303, r305, r306, r307]
  BlockID(15) -> Always(Block(BlockID(8))) [r309, r314, r315, r316, r600]
  BlockID(16) -> Always(Block(BlockID(9))) [r329, r332, r333, r334, r335, r337, r338, r340, r347, r348, r349, r350, r362, r365, r366, r378, r379, r388, r393, r394, r395, r599]
  BlockID(17) -> Always(Undefined) []
  BlockID(18) -> Always(Undefined) []
  BlockID(19) -> Always(Undefined) []
  BlockID(20) -> Always(Undefined) [r450]
  BlockID(21) -> Always(Undefined) [r452]
  BlockID(22) -> Always(Undefined) [r454]
  BlockID(23) -> Always(Undefined) [r465]
  BlockID(24) -> Always(Undefined) [r478]
  BlockID(25) -> Always(Undefined) [r490]
  BlockID(26) -> Always(Undefined) [r492]
  BlockID(27) -> Always(Undefined) []
  BlockID(28) -> Always(Undefined) []
  BlockID(29) -> Always(Undefined) [r517]
  BlockID(30) -> Always(Undefined) [r538]
  BlockID(31) -> Always(Undefined) [r540]
  BlockID(32) -> Always(Undefined) [r542]
  BlockID(33) -> Always(Undefined) []
  BlockID(34) -> Always(Undefined) []
  BlockID(35) -> Always(Undefined) [r556, r557, r558, r559, r562, r563, r564, r576, r584, r585, r586, r587]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  |  |  |  BlockID(5)
|  |  |  |  BlockID(13)
|  |  |  |  |  BlockID(14)
|  |  |  BlockID(6)
|  |  |  |  BlockID(7)
|  |  |  |  BlockID(8)
|  |  |  |  BlockID(15)
|  |  BlockID(35)
|  BlockID(9)
|  BlockID(10)
|  |  BlockID(11)
|  |  |  BlockID(12)
|  |  BlockID(16)
BlockID(17)
BlockID(18)
BlockID(19)
BlockID(20)
BlockID(21)
BlockID(22)
BlockID(23)
BlockID(24)
BlockID(25)
BlockID(26)
BlockID(27)
BlockID(28)
BlockID(29)
BlockID(30)
BlockID(31)
BlockID(32)
BlockID(33)
BlockID(34)

 --- ssa
ssa program  603 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
  (  5)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  4)  r12 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
  (  4)  r13 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
  (  3)  r14 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
         r15 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
  (  6)  r17 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
         r22 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
         r42 <- ArithK(Add, r10, -8)
         r43 <- StoreMem { addr: r42, value: r9 }
         r45 <- ArithK(Add, r10, -16)
         r46 <- StoreMem { addr: r45, value: r22 }
         r47 <- ArithK(Add, r10, -24)
         r48 <- StoreMem { addr: r47, value: r15 }
         r59 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r60 <- Part { src: r14, offset: 0, size: 4 }
  (  4)  r62 <- ArithK(BitAnd, r60, -16)
         r71 <- Part { src: r62, offset: 0, size: 1 }
         r73 <- ArithK(Add, r71, -144)
         r77 <- IsZero(r73)
         r80 <- SetJumpCondition(r77)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r82 <- Part { src: r62, offset: 0, size: 1 }
         r84 <- ArithK(Add, r82, -176)
         r88 <- IsZero(r84)
         r91 <- Not(r88)
         r92 <- SetJumpCondition(r91)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r94 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r96 <- ArithK(Add, r13, 8)
  (  2)  r97 <- LoadMem { addr: r96, size: 8 }
         r100 <- ArithK(Add, r12, 8)
  (  2)  r101 <- LoadMem { addr: r100, size: 8 }
         r105 <- ArithK(BitAnd, r62, -16)
         r114 <- Part { src: r105, offset: 0, size: 1 }
         r116 <- ArithK(Add, r114, -16)
         r120 <- IsZero(r116)
         r123 <- SetJumpCondition(r120)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r125 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r129 <- Part { src: r13, offset: 0, size: 4 }
  (  3)  r131 <- ArithK(BitAnd, r129, 7)
         r132 <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r133 <- Concat { lo: r131, hi: r132 }
         r140 <- Part { src: r17, offset: 0, size: 4 }
         r141 <- Part { src: r17, offset: 0, size: 4 }
         r142 <- Arith(BitAnd, r140, r141)
         r144 <- IsZero(r142)
         r149 <- Not(r144)
         r150 <- SetJumpCondition(r149)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r152 <- Part { src: r131, offset: 0, size: 1 }
  (  2)  r154 <- ArithK(Add, r152, -4)
         r157 <- SignOf(r154)
         r158 <- IsZero(r154)
         r161 <- Not(r157)
         r162 <- Not(r158)
         r163 <- Bool(And, r161, r162)
         r164 <- SetJumpCondition(r163)
.B5:    ;; preds:B4  → Always(Indirect).
         r166 <- NotYetImplemented("unsupported: movzx eax,al")
         r168 <- ArithK(Mul, r133, 8)
         r169 <- ArithK(Add, r168, 6851632)
         r170 <- SetJumpTarget(r169)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r289 <- Part { src: r131, offset: 0, size: 1 }
  (  2)  r291 <- ArithK(Add, r289, -4)
         r294 <- SignOf(r291)
         r295 <- IsZero(r291)
         r298 <- Not(r294)
         r299 <- Not(r295)
         r300 <- Bool(And, r298, r299)
         r301 <- SetJumpCondition(r300)
.B14:    ;; preds:B13  → Always(Indirect).
         r303 <- NotYetImplemented("unsupported: movzx eax,al")
         r305 <- ArithK(Mul, r133, 8)
         r306 <- ArithK(Add, r305, 6851712)
         r307 <- SetJumpTarget(r306)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r173 <- Part { src: r17, offset: 0, size: 4 }
         r174 <- Part { src: r17, offset: 0, size: 4 }
         r175 <- Arith(BitAnd, r173, r174)
         r177 <- IsZero(r175)
         r182 <- SetJumpCondition(r177)
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r184 <- Const { value: 5627056, size: 8 }
         r189 <- CArg { value: r97, next_arg: None }
         r190 <- CArg { value: r101, next_arg: Some(r189) }
         r191 <- Call { callee: r184, first_arg: Some(r190) }
         r602 <- Upsilon { value: r191, phi_ref: r597 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r309 <- Const { value: 5627360, size: 8 }
         r314 <- CArg { value: r97, next_arg: None }
         r315 <- CArg { value: r101, next_arg: Some(r314) }
         r316 <- Call { callee: r309, first_arg: Some(r315) }
         r600 <- Upsilon { value: r316, phi_ref: r597 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r597 <- Phi
         r203 <- ArithK(Add, r12, 8)
         r204 <- StoreMem { addr: r203, value: r597 }
         r601 <- Upsilon { value: r597, phi_ref: r598 }
.B35:    ;; preds:B1  → Always(Undefined).
         r556 <- Const { value: 6979771, size: 4 }
         r557 <- Part { src: r17, offset: 4, size: 4 }
         r558 <- Concat { lo: r556, hi: r557 }
         r559 <- Const { value: 165, size: 4 }
         r562 <- Const { value: 6982459, size: 4 }
         r563 <- Part { src: r12, offset: 4, size: 4 }
         r564 <- Concat { lo: r562, hi: r563 }
         r576 <- Const { value: 4990320, size: 8 }
         r584 <- CArg { value: r558, next_arg: None }
         r585 <- CArg { value: r559, next_arg: Some(r584) }
         r586 <- CArg { value: r564, next_arg: Some(r585) }
         r587 <- Call { callee: r576, first_arg: Some(r586) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r225 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r226 <- NotYetImplemented("unsupported: neg edx")
         r228 <- ArithK(Add, r13, 8)
         r229 <- LoadMem { addr: r228, size: 8 }
         r231 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r234 <- ArithK(BitAnd, r62, -16)
         r243 <- Part { src: r234, offset: 0, size: 1 }
         r245 <- ArithK(Add, r243, -16)
         r249 <- IsZero(r245)
         r252 <- SetJumpCondition(r249)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r254 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r258 <- Part { src: r17, offset: 0, size: 4 }
  (  2)  r260 <- ArithK(BitAnd, r258, 7)
         r261 <- Part { src: r14, offset: 4, size: 4 }
         r262 <- Concat { lo: r260, hi: r261 }
         r269 <- Part { src: r260, offset: 0, size: 1 }
  (  2)  r271 <- ArithK(Add, r269, -4)
         r274 <- SignOf(r271)
         r275 <- IsZero(r271)
         r278 <- Not(r274)
         r279 <- Not(r275)
         r280 <- Bool(And, r278, r279)
         r281 <- SetJumpCondition(r280)
.B12:    ;; preds:B11  → Always(Indirect).
         r283 <- NotYetImplemented("unsupported: movzx eax,al")
         r285 <- ArithK(Mul, r262, 8)
         r286 <- ArithK(Add, r285, 6851672)
         r287 <- SetJumpTarget(r286)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  3)  r329 <- ArithK(Add, r10, -56)
         r332 <- Const { value: 32, size: 4 }
         r333 <- Part { src: r13, offset: 4, size: 4 }
         r334 <- Concat { lo: r332, hi: r333 }
         r335 <- Part { src: r16, offset: 0, size: 4 }
         r337 <- ArithK(Add, r10, -60)
         r338 <- StoreMem { addr: r337, value: r335 }
         r340 <- Const { value: 4520352, size: 8 }
         r347 <- CArg { value: r229, next_arg: None }
         r348 <- CArg { value: r334, next_arg: Some(r347) }
         r349 <- CArg { value: r329, next_arg: Some(r348) }
         r350 <- Call { callee: r340, first_arg: Some(r349) }
         r362 <- Const { value: 4199136, size: 8 }
         r365 <- CArg { value: r329, next_arg: None }
         r366 <- Call { callee: r362, first_arg: Some(r365) }
         r378 <- ArithK(Add, r12, 8)
         r379 <- LoadMem { addr: r378, size: 8 }
         r388 <- Const { value: 4293744, size: 8 }
         r393 <- CArg { value: r329, next_arg: None }
         r394 <- CArg { value: r379, next_arg: Some(r393) }
         r395 <- Call { callee: r388, first_arg: Some(r394) }
         r599 <- Upsilon { value: r366, phi_ref: r598 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r598 <- Phi
         r223 <- SetReturnValue(r598)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R12;
  [pre:RSP - 24]:* := pre:RBX;
  TODO /* unsupported: movzx eax,byte ptr [rdi] */;
  let r62: Bytes(4) = pre:RAX[4 .. 0] & -16;
  ;
  if IsZero (r62[1 .. 0] - 144) {
    TODO /* unsupported: movzx eax,byte ptr [rsi] */;
    TODO /* unsupported: neg edx */;
    TODO /* unsupported: sbb ecx,ecx */;
    ;
    if IsZero ((r62 & -16)[1 .. 0] - 16) {
      let r329: Bytes(8) = pre:RSP - 56;
      [pre:RSP - 60]:* := pre:RCX[4 .. 0];
      4520352(r329,
              pre:RSI[8 .. 4] ++ 32,
              [pre:RSI + 8]:8);
      4199136(r329);
      4293744([pre:RDI + 8]:8,
              r329);
      r598 := 4199136(r329);
      goto T9
    }
    TODO /* unsupported: movzx edx,byte ptr [rdi-1] */;
    let r260: Bytes(4) = pre:RDX[4 .. 0] & 7;
    let r271: Bytes(1) = r260[1 .. 0] - 4;
    ;
    if ! SignOf (r271) AND ! IsZero (r271) {
      goto ext 0x402446
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (pre:RAX[8 .. 4] ++ r260 * 8 + 6851672).*
  }
  ;
  if ! IsZero (r62[1 .. 0] - 176) {
    4990320(pre:RDI[8 .. 4] ++ 6982459,
            165,
            pre:RDX[8 .. 4] ++ 6979771);
    goto undefined /* warning: due to decompiler bug or limitation */
  }
  TODO /* unsupported: movzx eax,byte ptr [rsi] */;
  let r97: Bytes(8) = [pre:RSI + 8]:8;
  let r101: Bytes(8) = [pre:RDI + 8]:8;
  ;
  if IsZero ((r62 & -16)[1 .. 0] - 16) {
    ;
    if IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
      5627360(r101,
              r97);
      r597 := 5627360(r101,
                      r97);
      goto T8
    }
    5627056(r101,
            r97);
    r597 := 5627056(r101,
                    r97);
    goto T8
    T8: {
      let mut r597: Bytes(8);
      [pre:RDI + 8]:* := r597;
      r598 := phi ();
      goto T9
    }
  
  }
  TODO /* unsupported: movzx esi,byte ptr [rcx-1] */;
  let r131: Bytes(4) = pre:RSI[4 .. 0] & 7;
  let r133: Bytes(8) = pre:RAX[8 .. 4] ++ r131;
  ;
  if ! IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
    let r291: Bytes(1) = r131[1 .. 0] - 4;
    ;
    if ! SignOf (r291) AND ! IsZero (r291) {
      goto ext 0x402454
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (r133 * 8 + 6851712).*
  }
  let r154: Bytes(1) = r131[1 .. 0] - 4;
  ;
  if ! SignOf (r154) AND ! IsZero (r154) {
    goto ext 0x40244d
  }
  TODO /* unsupported: movzx eax,al */;
  ;
  goto (r133 * 8 + 6851632).*
  T9: {
    let mut r598: Bytes(8);
    ;
    return r598
  }

}
