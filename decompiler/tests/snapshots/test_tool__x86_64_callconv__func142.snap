---
source: decompiler/tests/test_tool.rs
expression: out
---
func142 0x4013ea+5 (file 0x13ea)
          4013ea: 8a 44 24 24             mov al,[rsp+24h]
          4013ee: c3                      ret

function type: "func142" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 *void <TypeID(1v1)>,
                               arg3 *void <TypeID(1v1)>,
                               arg4 *void <TypeID(1v1)>,
                               arg5 small <TypeID(785v1)>,
                               arg6 small <TypeID(785v1)>) uint8_t <TypeID(789v1)>
0 warnings.


mil program = 
program  98 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Undefined
   44 r46: TypeID(2v1) <- Undefined
   45 r47: TypeID(2v1) <- Undefined
   46 r48: TypeID(2v1) <- Undefined
   47 r49: TypeID(2v1) <- Undefined
   48 r50: TypeID(2v1) <- Undefined
   49 r51: TypeID(2v1) <- Undefined
   50 r52: TypeID(2v1) <- Undefined
   51 r53: TypeID(2v1) <- Undefined
   52 r54: TypeID(2v1) <- Undefined
   53 r55: TypeID(2v1) <- Undefined
   54 r56: TypeID(2v1) <- Undefined
   55 r57: TypeID(2v1) <- Undefined
   56 r58: TypeID(2v1) <- Undefined
   57 r59: TypeID(2v1) <- Undefined
   58 r60: TypeID(2v1) <- Undefined
   59 r61: TypeID(2v1) <- Undefined
   60 r62: TypeID(2v1) <- Undefined
   61 r63: TypeID(2v1) <- Undefined
   62 r64: TypeID(2v1) <- Undefined
   63 r65: TypeID(2v1) <- Undefined
   64 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   65 r14: TypeID(2v1) <- Get(r45)
   66 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   67 r15: TypeID(2v1) <- Get(r46)
   68 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
   69 r19: TypeID(2v1) <- Get(r47)
   70 r48: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
   71 r18: TypeID(2v1) <- Get(r48)
   72 r49: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
   73 r20: TypeID(2v1) <- Get(r49)
   74 r50: TypeID(2v1) <- Ancestral(AncestralName("arg5"))
   75 r52: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
   76 r51: TypeID(2v1) <- ArithK(Add, r12, 8)
   77 r51: TypeID(2v1) <- StoreMem { addr: r51, value: r52 }
   78 r52: TypeID(2v1) <- Part { src: r50, offset: 8, size: 8 }
   79 r51: TypeID(2v1) <- ArithK(Add, r12, 16)
   80 r51: TypeID(2v1) <- StoreMem { addr: r51, value: r52 }
   81 r53: TypeID(2v1) <- Ancestral(AncestralName("arg6"))
   82 r55: TypeID(2v1) <- Part { src: r53, offset: 0, size: 8 }
   83 r54: TypeID(2v1) <- ArithK(Add, r12, 24)
   84 r54: TypeID(2v1) <- StoreMem { addr: r54, value: r55 }
   85 r55: TypeID(2v1) <- Part { src: r53, offset: 8, size: 8 }
   86 r54: TypeID(2v1) <- ArithK(Add, r12, 32)
   87 r54: TypeID(2v1) <- StoreMem { addr: r54, value: r55 }
0x4013ea:
   88 r46: TypeID(2v1) <- Const { value: 36, size: 8 }
   89 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   90 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
   91 r47: TypeID(2v1) <- Part { src: r16, offset: 1, size: 7 }
   92 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x4013ee:
   93 r45: TypeID(2v1) <- Void
   94 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   95 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
   96 r47: TypeID(2v1) <- SetReturnValue(r45)
   97 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  98 instrs
.B0:    ;;  → Always(Return).
  (  5)  r11: ? <- Ancestral(AncestralName("RSP"))
         r15: ? <- Ancestral(AncestralName("RAX"))
  (  2)  r74: ? <- Ancestral(AncestralName("arg5"))
         r75: ? <- Part { src: r74, offset: 0, size: 8 }
         r76: ? <- ArithK(Add, r11, 8)
         r77: ? <- StoreMem { addr: r76, value: r75 }
         r78: ? <- Part { src: r74, offset: 8, size: 8 }
         r79: ? <- ArithK(Add, r11, 16)
         r80: ? <- StoreMem { addr: r79, value: r78 }
  (  2)  r81: ? <- Ancestral(AncestralName("arg6"))
         r82: ? <- Part { src: r81, offset: 0, size: 8 }
         r83: ? <- ArithK(Add, r11, 24)
         r84: ? <- StoreMem { addr: r83, value: r82 }
         r85: ? <- Part { src: r81, offset: 8, size: 8 }
         r86: ? <- ArithK(Add, r11, 32)
         r87: ? <- StoreMem { addr: r86, value: r85 }
         r88: ? <- Const { value: 36, size: 8 }
         r89: ? <- Arith(Add, r88, r11)
         r90: ? <- LoadMem { addr: r89, size: 1 }
         r91: ? <- Part { src: r15, offset: 1, size: 7 }
         r92: ? <- Concat { lo: r90, hi: r91 }
         r94: ? <- Concat { lo: r93, hi: r92 }
         r95: ? <- Part { src: r94, offset: 0, size: 1 }
         r96: ? <- SetReturnValue(r95)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r15, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  103 instrs
.B0:    ;;  → Always(Return).
  (  4)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  2)  r74: ? <- Ancestral(AncestralName("arg5"))
         r75: ? <- Part { src: r74, offset: 0, size: 8 }
         r76: ? <- ArithK(Add, r11, 8)
         r77: ? <- StoreMem { addr: r76, value: r75 }
         r78: ? <- Part { src: r74, offset: 8, size: 8 }
         r79: ? <- ArithK(Add, r11, 16)
         r80: ? <- StoreMem { addr: r79, value: r78 }
  (  3)  r81: ? <- Ancestral(AncestralName("arg6"))
         r82: ? <- Part { src: r81, offset: 0, size: 8 }
         r83: ? <- ArithK(Add, r11, 24)
         r84: ? <- StoreMem { addr: r83, value: r82 }
         r85: ? <- Part { src: r81, offset: 8, size: 8 }
         r86: ? <- ArithK(Add, r11, 32)
         r87: ? <- StoreMem { addr: r86, value: r85 }
         r99: ? <- Part { src: r81, offset: 12, size: 1 }
         r96: ? <- SetReturnValue(r99)



T0: {
  [pre:RSP + 8]:* := pre:arg5[8 .. 0];
  [pre:RSP + 16]:* := pre:arg5[16 .. 8];
  [pre:RSP + 24]:* := pre:arg6[8 .. 0];
  [pre:RSP + 32]:* := pre:arg6[16 .. 8];
  ;
  return pre:arg6[13 .. 12]
}
