---
source: decompiler/tests/test_tool.rs
expression: out
---
func142 0x4013ea+5 (file 0x13ea)
          4013ea: 8a 44 24 24             mov al,[rsp+24h]
          4013ee: c3                      ret

function type: "func142" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 *void <TypeID(1v1)>,
                               arg3 *void <TypeID(1v1)>,
                               arg4 *void <TypeID(1v1)>,
                               arg5 small <TypeID(784v1)>,
                               arg6 small <TypeID(784v1)>) uint8_t <TypeID(788v1)>
0 warnings.


mil program = 
program  99 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
                65 r45 <- Ancestral(AncestralName("arg0"))
                66 r14 <- Get(r45)
                67 r46 <- Ancestral(AncestralName("arg1"))
                68 r15 <- Get(r46)
                69 r47 <- Ancestral(AncestralName("arg2"))
                70 r19 <- Get(r47)
                71 r48 <- Ancestral(AncestralName("arg3"))
                72 r18 <- Get(r48)
                73 r49 <- Ancestral(AncestralName("arg4"))
                74 r20 <- Get(r49)
                75 r50 <- Ancestral(AncestralName("arg5"))
                76 r52 <- Part { src: r50, offset: 0, size: 8 }
                77 r51 <- ArithK(Add, r12, 8)
                78 r44 <- StoreMem { mem: r44, addr: r51, value: r52 }
                79 r52 <- Part { src: r50, offset: 8, size: 8 }
                80 r51 <- ArithK(Add, r12, 16)
                81 r44 <- StoreMem { mem: r44, addr: r51, value: r52 }
                82 r53 <- Ancestral(AncestralName("arg6"))
                83 r55 <- Part { src: r53, offset: 0, size: 8 }
                84 r54 <- ArithK(Add, r12, 24)
                85 r44 <- StoreMem { mem: r44, addr: r54, value: r55 }
                86 r55 <- Part { src: r53, offset: 8, size: 8 }
                87 r54 <- ArithK(Add, r12, 32)
                88 r44 <- StoreMem { mem: r44, addr: r54, value: r55 }
0x4013ea:
                89 r46 <- Const { value: 36, size: 8 }
                90 r46 <- Arith(Add, r46, r12)
                91 r45 <- LoadMem { mem: r44, addr: r46, size: 1 }
                92 r47 <- Part { src: r16, offset: 1, size: 7 }
                93 r16 <- Concat { lo: r45, hi: r47 }
0x4013ee:
                94 r45 <- Void
                95 r45 <- Concat { lo: r45, hi: r16 }
                96 r45 <- Part { src: r45, offset: 0, size: 1 }
                97 r47 <- SetReturnValue(r45)
                98 r47 <- Control(Ret)


ssa pre-xform:
ssa program  99 instrs
.B0:    ;;  → Always(Return).
  (  5)  r11 <- Ancestral(AncestralName("RSP"))
         r15 <- Ancestral(AncestralName("RAX"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r75 <- Ancestral(AncestralName("arg5"))
         r76 <- Part { src: r75, offset: 0, size: 8 }
         r77 <- ArithK(Add, r11, 8)
         r78 <- StoreMem { mem: r43, addr: r77, value: r76 }
         r79 <- Part { src: r75, offset: 8, size: 8 }
         r80 <- ArithK(Add, r11, 16)
         r81 <- StoreMem { mem: r78, addr: r80, value: r79 }
  (  2)  r82 <- Ancestral(AncestralName("arg6"))
         r83 <- Part { src: r82, offset: 0, size: 8 }
         r84 <- ArithK(Add, r11, 24)
         r85 <- StoreMem { mem: r81, addr: r84, value: r83 }
         r86 <- Part { src: r82, offset: 8, size: 8 }
         r87 <- ArithK(Add, r11, 32)
         r88 <- StoreMem { mem: r85, addr: r87, value: r86 }
         r89 <- Const { value: 36, size: 8 }
         r90 <- Arith(Add, r89, r11)
         r91 <- LoadMem { mem: r88, addr: r90, size: 1 }
         r92 <- Part { src: r15, offset: 1, size: 7 }
         r93 <- Concat { lo: r91, hi: r92 }
         r95 <- Concat { lo: r94, hi: r93 }
         r96 <- Part { src: r95, offset: 0, size: 1 }
         r97 <- SetReturnValue(r96)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r15, r43, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  104 instrs
.B0:    ;;  → Always(Return).
  (  4)  r11 <- Ancestral(AncestralName("RSP"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r75 <- Ancestral(AncestralName("arg5"))
         r76 <- Part { src: r75, offset: 0, size: 8 }
         r77 <- ArithK(Add, r11, 8)
         r78 <- StoreMem { mem: r43, addr: r77, value: r76 }
         r79 <- Part { src: r75, offset: 8, size: 8 }
         r80 <- ArithK(Add, r11, 16)
         r81 <- StoreMem { mem: r78, addr: r80, value: r79 }
  (  3)  r82 <- Ancestral(AncestralName("arg6"))
         r83 <- Part { src: r82, offset: 0, size: 8 }
         r84 <- ArithK(Add, r11, 24)
         r85 <- StoreMem { mem: r81, addr: r84, value: r83 }
         r86 <- Part { src: r82, offset: 8, size: 8 }
         r87 <- ArithK(Add, r11, 32)
         r88 <- StoreMem { mem: r85, addr: r87, value: r86 }
         r100 <- Part { src: r82, offset: 12, size: 1 }
         r97 <- SetReturnValue(r100)



T0: {
  [pre:RSP + 8]:* := pre:arg5[8 .. 0];
  [pre:RSP + 16]:* := pre:arg5[16 .. 8];
  [pre:RSP + 24]:* := pre:arg6[8 .. 0];
  [pre:RSP + 32]:* := pre:arg6[16 .. 8];
  ;
  return pre:arg6[13 .. 12]
}
