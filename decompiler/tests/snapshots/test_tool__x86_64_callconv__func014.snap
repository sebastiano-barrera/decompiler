---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  90 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(32) }
   43 r47 <- Part { src: r45, offset: 0, size: 8 }
   44 r46 <- ArithK(Add, r12, 8)
   45 r46 <- StoreMem { addr: r46, value: r47 }
   46 r47 <- Part { src: r45, offset: 8, size: 8 }
   47 r46 <- ArithK(Add, r12, 16)
   48 r46 <- StoreMem { addr: r46, value: r47 }
   49 r47 <- Part { src: r45, offset: 16, size: 8 }
   50 r46 <- ArithK(Add, r12, 24)
   51 r46 <- StoreMem { addr: r46, value: r47 }
   52 r47 <- Part { src: r45, offset: 24, size: 8 }
   53 r46 <- ArithK(Add, r12, 32)
   54 r46 <- StoreMem { addr: r46, value: r47 }
0x40113c:
   55 r16 <- Get(r14)
0x40113f:
   56 r46 <- Const { value: 8, size: 8 }
   57 r46 <- Arith(Add, r46, r12)
   58 r45 <- LoadMem { addr: r46, size: 16 }
   59 r47 <- Part { src: r28, offset: 16, size: 48 }
   60 r28 <- Concat { lo: r45, hi: r47 }
0x401144:
   61 r46 <- Const { value: 24, size: 8 }
   62 r46 <- Arith(Add, r46, r12)
   63 r45 <- LoadMem { addr: r46, size: 16 }
   64 r47 <- Part { src: r29, offset: 16, size: 48 }
   65 r29 <- Concat { lo: r45, hi: r47 }
0x401149:
   66 r46 <- Part { src: r29, offset: 0, size: 16 }
   67 r47 <- Const { value: 16, size: 8 }
   68 r47 <- Arith(Add, r47, r14)
   69 r47 <- StoreMem { addr: r47, value: r46 }
0x40114d:
   70 r46 <- Part { src: r28, offset: 0, size: 16 }
   71 r47 <- Const { value: 0, size: 8 }
   72 r47 <- Arith(Add, r47, r14)
   73 r47 <- StoreMem { addr: r47, value: r46 }
0x401150:
   74 r45 <- Void
   75 r47 <- ArithK(Add, r16, 0)
   76 r48 <- LoadMem { addr: r47, size: 8 }
   77 r45 <- Concat { lo: r45, hi: r48 }
   78 r47 <- ArithK(Add, r16, 8)
   79 r49 <- LoadMem { addr: r47, size: 8 }
   80 r45 <- Concat { lo: r45, hi: r49 }
   81 r47 <- ArithK(Add, r16, 16)
   82 r50 <- LoadMem { addr: r47, size: 8 }
   83 r45 <- Concat { lo: r45, hi: r50 }
   84 r47 <- ArithK(Add, r16, 24)
   85 r51 <- LoadMem { addr: r47, size: 8 }
   86 r45 <- Concat { lo: r45, hi: r51 }
   87 r45 <- Part { src: r45, offset: 0, size: 32 }
   88 r52 <- SetReturnValue(r45)
   89 r52 <- Control(Ret)


 --- ssa pre-xform
ssa program  90 instrs
.B0:    ;;  → Always(Return).
  (  6)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
         r26 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
         r27 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
  (  4)  r42 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(32) }
         r43 <- Part { src: r42, offset: 0, size: 8 }
         r44 <- ArithK(Add, r10, 8)
         r45 <- StoreMem { addr: r44, value: r43 }
         r46 <- Part { src: r42, offset: 8, size: 8 }
         r47 <- ArithK(Add, r10, 16)
         r48 <- StoreMem { addr: r47, value: r46 }
         r49 <- Part { src: r42, offset: 16, size: 8 }
         r50 <- ArithK(Add, r10, 24)
         r51 <- StoreMem { addr: r50, value: r49 }
         r52 <- Part { src: r42, offset: 24, size: 8 }
         r53 <- ArithK(Add, r10, 32)
         r54 <- StoreMem { addr: r53, value: r52 }
         r56 <- Const { value: 8, size: 8 }
         r57 <- Arith(Add, r56, r10)
         r58 <- LoadMem { addr: r57, size: 16 }
         r59 <- Part { src: r26, offset: 16, size: 48 }
         r60 <- Concat { lo: r58, hi: r59 }
         r61 <- Const { value: 24, size: 8 }
         r62 <- Arith(Add, r61, r10)
         r63 <- LoadMem { addr: r62, size: 16 }
         r64 <- Part { src: r27, offset: 16, size: 48 }
         r65 <- Concat { lo: r63, hi: r64 }
         r66 <- Part { src: r65, offset: 0, size: 16 }
         r67 <- Const { value: 16, size: 8 }
         r68 <- Arith(Add, r67, r12)
         r69 <- StoreMem { addr: r68, value: r66 }
         r70 <- Part { src: r60, offset: 0, size: 16 }
         r71 <- Const { value: 0, size: 8 }
         r72 <- Arith(Add, r71, r12)
         r73 <- StoreMem { addr: r72, value: r70 }
         r75 <- ArithK(Add, r12, 0)
         r76 <- LoadMem { addr: r75, size: 8 }
         r77 <- Concat { lo: r74, hi: r76 }
         r78 <- ArithK(Add, r12, 8)
         r79 <- LoadMem { addr: r78, size: 8 }
         r80 <- Concat { lo: r77, hi: r79 }
         r81 <- ArithK(Add, r12, 16)
         r82 <- LoadMem { addr: r81, size: 8 }
         r83 <- Concat { lo: r80, hi: r82 }
         r84 <- ArithK(Add, r12, 24)
         r85 <- LoadMem { addr: r84, size: 8 }
         r86 <- Concat { lo: r83, hi: r85 }
         r87 <- Part { src: r86, offset: 0, size: 32 }
         r88 <- SetReturnValue(r87)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r12, r42, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r91, r94, r106, r96, r99, r68, r69, r73, r76, r78, r79, r80, r81, r82, r83, r84, r85, r86, r88]
  domtree:
    BlockID(0)

 --- ssa
ssa program  110 instrs
.B0:    ;;  → Always(Return).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  6)  r12 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
  (  7)  r42 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(32) }
         r44 <- ArithK(Add, r10, 8)
         r45 <- StoreMem { addr: r44, value: r42 }
  (  2)  r46 <- StructGetMember { struct_value: r42, name: "member1", size: 32 }
         r47 <- ArithK(Add, r10, 16)
         r48 <- StoreMem { addr: r47, value: r46 }
         r49 <- Part { src: r42, offset: 16, size: 8 }
         r50 <- ArithK(Add, r10, 24)
         r51 <- StoreMem { addr: r50, value: r49 }
         r52 <- Part { src: r42, offset: 24, size: 8 }
         r53 <- ArithK(Add, r10, 32)
         r54 <- StoreMem { addr: r53, value: r52 }
         r91 <- Part { src: r46, offset: 0, size: 8 }
         r94 <- Concat { lo: r91, hi: r42 }
         r106 <- Part { src: r42, offset: 16, size: 8 }
         r96 <- Part { src: r42, offset: 24, size: 8 }
         r99 <- Concat { lo: r96, hi: r106 }
         r68 <- ArithK(Add, r12, 16)
         r69 <- StoreMem { addr: r68, value: r99 }
         r73 <- StoreMem { addr: r12, value: r94 }
         r76 <- LoadMem { addr: r12, size: 8 }
         r78 <- ArithK(Add, r12, 8)
         r79 <- LoadMem { addr: r78, size: 8 }
         r80 <- Concat { lo: r76, hi: r79 }
         r81 <- ArithK(Add, r12, 16)
         r82 <- LoadMem { addr: r81, size: 8 }
         r83 <- Concat { lo: r80, hi: r82 }
         r84 <- ArithK(Add, r12, 24)
         r85 <- LoadMem { addr: r84, size: 8 }
         r86 <- Concat { lo: r83, hi: r85 }
         r88 <- SetReturnValue(r86)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg0;
  let r46: Bytes(32) = pre:arg0.member1;
  [pre:RSP + 16]:* := r46;
  [pre:RSP + 24]:* := pre:arg0[24 .. 16];
  [pre:RSP + 32]:* := pre:arg0[32 .. 24];
  [pre:RDI + 16]:* := pre:arg0[24 .. 16] ++ pre:arg0[32 .. 24];
  [pre:RDI]:* := pre:arg0 as i32 ++ r46[8 .. 0] as i8;
  ;
  return [pre:RDI + 24]:8 as i8 ++ [pre:RDI + 16]:8 as i8 ++ [pre:RDI + 8]:8 ++ [pre:RDI]:8 as i16 as i24
}
