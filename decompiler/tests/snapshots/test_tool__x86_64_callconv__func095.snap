---
source: decompiler/tests/test_tool.rs
expression: out
---
func095 0x4012de+11 (file 0x12de)
          4012de: 48 8b 44 24 08          mov rax,[rsp+8]
          4012e3: 48 8b 54 24 10          mov rdx,[rsp+10h]
          4012e8: c3                      ret

function type: "func095" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 *void <TypeID(1v1)>,
                               arg3 small <TypeID(784v1)>,
                               arg4 small <TypeID(784v1)>) small <TypeID(784v1)>
0 warnings.


mil program = 
program  97 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
                65 r45 <- Ancestral(AncestralName("arg0"))
                66 r14 <- Get(r45)
                67 r46 <- Ancestral(AncestralName("arg1"))
                68 r15 <- Get(r46)
                69 r47 <- Ancestral(AncestralName("arg2"))
                70 r19 <- Get(r47)
                71 r48 <- Ancestral(AncestralName("arg3"))
                72 r49 <- Part { src: r48, offset: 0, size: 8 }
                73 r18 <- Get(r49)
                74 r50 <- Part { src: r48, offset: 8, size: 8 }
                75 r20 <- Get(r50)
                76 r51 <- Ancestral(AncestralName("arg4"))
                77 r53 <- Part { src: r51, offset: 0, size: 8 }
                78 r52 <- ArithK(Add, r12, 8)
                79 r44 <- StoreMem { mem: r44, addr: r52, value: r53 }
                80 r53 <- Part { src: r51, offset: 8, size: 8 }
                81 r52 <- ArithK(Add, r12, 16)
                82 r44 <- StoreMem { mem: r44, addr: r52, value: r53 }
0x4012de:
                83 r46 <- Const { value: 8, size: 8 }
                84 r46 <- Arith(Add, r46, r12)
                85 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
                86 r16 <- Get(r45)
0x4012e3:
                87 r46 <- Const { value: 16, size: 8 }
                88 r46 <- Arith(Add, r46, r12)
                89 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
                90 r19 <- Get(r45)
0x4012e8:
                91 r45 <- Void
                92 r45 <- Concat { lo: r45, hi: r16 }
                93 r45 <- Concat { lo: r45, hi: r19 }
                94 r45 <- Part { src: r45, offset: 0, size: 16 }
                95 r47 <- SetReturnValue(r45)
                96 r47 <- Control(Ret)


ssa pre-xform:
ssa program  97 instrs
.B0:    ;;  → Always(Return).
  (  4)  r11 <- Ancestral(AncestralName("RSP"))
         r43 <- Ancestral(AncestralName("memory"))
  (  2)  r76 <- Ancestral(AncestralName("arg4"))
         r77 <- Part { src: r76, offset: 0, size: 8 }
         r78 <- ArithK(Add, r11, 8)
         r79 <- StoreMem { mem: r43, addr: r78, value: r77 }
         r80 <- Part { src: r76, offset: 8, size: 8 }
         r81 <- ArithK(Add, r11, 16)
  (  2)  r82 <- StoreMem { mem: r79, addr: r81, value: r80 }
         r83 <- Const { value: 8, size: 8 }
         r84 <- Arith(Add, r83, r11)
         r85 <- LoadMem { mem: r82, addr: r84, size: 8 }
         r87 <- Const { value: 16, size: 8 }
         r88 <- Arith(Add, r87, r11)
         r89 <- LoadMem { mem: r82, addr: r88, size: 8 }
         r92 <- Concat { lo: r91, hi: r85 }
         r93 <- Concat { lo: r92, hi: r89 }
         r94 <- Part { src: r93, offset: 0, size: 16 }
         r95 <- SetReturnValue(r94)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r43, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r87, r88, r89, r91, r92, r93, r94, r95]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  107 instrs
.B0:    ;;  → Always(Return).
  (  2)  r11 <- Ancestral(AncestralName("RSP"))
         r43 <- Ancestral(AncestralName("memory"))
  (  4)  r76 <- Ancestral(AncestralName("arg4"))
         r77 <- Part { src: r76, offset: 0, size: 8 }
         r78 <- ArithK(Add, r11, 8)
         r79 <- StoreMem { mem: r43, addr: r78, value: r77 }
         r80 <- Part { src: r76, offset: 8, size: 8 }
         r81 <- ArithK(Add, r11, 16)
         r82 <- StoreMem { mem: r79, addr: r81, value: r80 }
         r98 <- Part { src: r76, offset: 0, size: 8 }
         r103 <- Part { src: r76, offset: 8, size: 8 }
         r93 <- Concat { lo: r98, hi: r103 }
         r95 <- SetReturnValue(r93)



T0: {
  [pre:RSP + 8]:* := pre:arg4[8 .. 0];
  [pre:RSP + 16]:* := pre:arg4[16 .. 8];
  ;
  return pre:arg4[16 .. 8] ++ pre:arg4[8 .. 0]
}
