---
source: decompiler/tests/test_tool.rs
assertion_line: 138
expression: out
---
 --- mil
program  74 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), size: 8 }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), size: 0 }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), size: 0 }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), size: 0 }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), size: 0 }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), size: 0 }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), size: 0 }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), size: 0 }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), size: 0 }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), size: 8 }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), size: 8 }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), size: 8 }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), size: 8 }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), size: 8 }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), size: 8 }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), size: 8 }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), size: 64 }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), size: 64 }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), size: 64 }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), size: 64 }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), size: 64 }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), size: 64 }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), size: 64 }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), size: 64 }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), size: 64 }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), size: 64 }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), size: 64 }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), size: 64 }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), size: 64 }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), size: 64 }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
   43 r14 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), size: 8 }
   45 r15 <- Get(r46)
   46 r47 <- Ancestral { anc_name: AncestralName("arg2"), size: 16 }
   47 r48 <- Part { src: r47, offset: 0, size: 8 }
   48 r19 <- Get(r48)
   49 r49 <- Part { src: r47, offset: 8, size: 8 }
   50 r18 <- Get(r49)
   51 r50 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
   52 r52 <- Part { src: r50, offset: 0, size: 8 }
   53 r51 <- ArithK(Add, r12, 8)
   54 r51 <- StoreMem { addr: r51, value: r52 }
   55 r52 <- Part { src: r50, offset: 8, size: 8 }
   56 r51 <- ArithK(Add, r12, 16)
   57 r51 <- StoreMem { addr: r51, value: r52 }
   58 r52 <- Part { src: r50, offset: 16, size: 8 }
   59 r51 <- ArithK(Add, r12, 24)
   60 r51 <- StoreMem { addr: r51, value: r52 }
   61 r52 <- Part { src: r50, offset: 24, size: 8 }
   62 r51 <- ArithK(Add, r12, 32)
   63 r51 <- StoreMem { addr: r51, value: r52 }
0x4012c3:
   64 r46 <- Const { value: 35, size: 8 }
   65 r46 <- Arith(Add, r46, r12)
   66 r45 <- LoadMem { addr: r46, size: 1 }
   67 r47 <- Part { src: r16, offset: 1, size: 7 }
   68 r16 <- Concat { lo: r45, hi: r47 }
0x4012c7:
   69 r45 <- Void
   70 r45 <- Concat { lo: r45, hi: r16 }
   71 r45 <- Part { src: r45, offset: 0, size: 1 }
   72 r47 <- SetReturnValue(r45)
   73 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  74 instrs
.B0:    ;;  → Always(Return).
  (  5)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
         r14 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
  (  4)  r51 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
         r52 <- Part { src: r51, offset: 0, size: 8 }
         r53 <- ArithK(Add, r10, 8)
         r54 <- StoreMem { addr: r53, value: r52 }
         r55 <- Part { src: r51, offset: 8, size: 8 }
         r56 <- ArithK(Add, r10, 16)
         r57 <- StoreMem { addr: r56, value: r55 }
         r58 <- Part { src: r51, offset: 16, size: 8 }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r58 }
         r61 <- Part { src: r51, offset: 24, size: 8 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r64 <- Const { value: 35, size: 8 }
         r65 <- Arith(Add, r64, r10)
         r66 <- LoadMem { addr: r65, size: 1 }
         r67 <- Part { src: r14, offset: 1, size: 7 }
         r68 <- Concat { lo: r66, hi: r67 }
         r70 <- Concat { lo: r69, hi: r68 }
         r71 <- Part { src: r70, offset: 0, size: 1 }
         r72 <- SetReturnValue(r71)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r75, r72]
  domtree:
    BlockID(0)

 --- ssa
ssa program  79 instrs
.B0:    ;;  → Always(Return).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  5)  r51 <- Ancestral { anc_name: AncestralName("arg3"), size: 32 }
         r52 <- Part { src: r51, offset: 0, size: 8 }
         r53 <- ArithK(Add, r10, 8)
         r54 <- StoreMem { addr: r53, value: r52 }
         r55 <- StructGetMember { struct_value: r51, name: "member1", size: 32 }
         r56 <- ArithK(Add, r10, 16)
         r57 <- StoreMem { addr: r56, value: r55 }
         r58 <- StructGetMember { struct_value: r51, name: "member2", size: 32 }
         r59 <- ArithK(Add, r10, 24)
         r60 <- StoreMem { addr: r59, value: r58 }
         r61 <- Part { src: r51, offset: 24, size: 8 }
         r62 <- ArithK(Add, r10, 32)
         r63 <- StoreMem { addr: r62, value: r61 }
         r75 <- Part { src: r51, offset: 27, size: 1 }
         r72 <- SetReturnValue(r75)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg3[8 .. 0];
  [pre:RSP + 16]:* := pre:arg3.member1;
  [pre:RSP + 24]:* := pre:arg3.member2;
  [pre:RSP + 32]:* := pre:arg3[32 .. 24];
  ;
  return pre:arg3[28 .. 27]
}
