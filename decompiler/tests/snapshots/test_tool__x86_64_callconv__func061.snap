---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  71 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(8) }
   43 r14 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), reg_type: Bytes(16) }
   45 r47 <- Part { src: r46, offset: 0, size: 8 }
   46 r15 <- Get(r47)
   47 r48 <- Part { src: r46, offset: 8, size: 8 }
   48 r19 <- Get(r48)
   49 r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(32) }
   50 r51 <- Part { src: r49, offset: 0, size: 8 }
   51 r50 <- ArithK(Add, r12, 8)
   52 r50 <- StoreMem { addr: r50, value: r51 }
   53 r51 <- Part { src: r49, offset: 8, size: 8 }
   54 r50 <- ArithK(Add, r12, 16)
   55 r50 <- StoreMem { addr: r50, value: r51 }
   56 r51 <- Part { src: r49, offset: 16, size: 8 }
   57 r50 <- ArithK(Add, r12, 24)
   58 r50 <- StoreMem { addr: r50, value: r51 }
   59 r51 <- Part { src: r49, offset: 24, size: 8 }
   60 r50 <- ArithK(Add, r12, 32)
   61 r50 <- StoreMem { addr: r50, value: r51 }
0x40123c:
   62 r46 <- Const { value: 24, size: 8 }
   63 r46 <- Arith(Add, r46, r12)
   64 r45 <- LoadMem { addr: r46, size: 8 }
   65 r16 <- Get(r45)
0x401241:
   66 r45 <- Void
   67 r45 <- Concat { lo: r45, hi: r16 }
   68 r45 <- Part { src: r45, offset: 0, size: 8 }
   69 r47 <- SetReturnValue(r45)
   70 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  71 instrs
.B0:    ;;  → Always(Return).
  (  5)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  4)  r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(32) }
         r50 <- Part { src: r49, offset: 0, size: 8 }
         r51 <- ArithK(Add, r10, 8)
         r52 <- StoreMem { addr: r51, value: r50 }
         r53 <- Part { src: r49, offset: 8, size: 8 }
         r54 <- ArithK(Add, r10, 16)
         r55 <- StoreMem { addr: r54, value: r53 }
         r56 <- Part { src: r49, offset: 16, size: 8 }
         r57 <- ArithK(Add, r10, 24)
         r58 <- StoreMem { addr: r57, value: r56 }
         r59 <- Part { src: r49, offset: 24, size: 8 }
         r60 <- ArithK(Add, r10, 32)
         r61 <- StoreMem { addr: r60, value: r59 }
         r62 <- Const { value: 24, size: 8 }
         r63 <- Arith(Add, r62, r10)
         r64 <- LoadMem { addr: r63, size: 8 }
         r67 <- Concat { lo: r66, hi: r64 }
         r68 <- Part { src: r67, offset: 0, size: 8 }
         r69 <- SetReturnValue(r68)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r49, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r69]
  domtree:
    BlockID(0)

 --- ssa
ssa program  76 instrs
.B0:    ;;  → Always(Return).
  (  4)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  4)  r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(32) }
         r51 <- ArithK(Add, r10, 8)
         r52 <- StoreMem { addr: r51, value: r49 }
         r53 <- StructGetMember { struct_value: r49, name: "member1", size: 32 }
         r54 <- ArithK(Add, r10, 16)
         r55 <- StoreMem { addr: r54, value: r53 }
  (  2)  r56 <- Part { src: r49, offset: 16, size: 8 }
         r57 <- ArithK(Add, r10, 24)
         r58 <- StoreMem { addr: r57, value: r56 }
         r59 <- Part { src: r49, offset: 24, size: 8 }
         r60 <- ArithK(Add, r10, 32)
         r61 <- StoreMem { addr: r60, value: r59 }
         r69 <- SetReturnValue(r56)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg2;
  [pre:RSP + 16]:* := pre:arg2.member1;
  let r56: Bytes(8) = pre:arg2[24 .. 16];
  [pre:RSP + 24]:* := r56;
  [pre:RSP + 32]:* := pre:arg2[32 .. 24];
  ;
  return r56
}
