---
source: decompiler/tests/test_tool.rs
assertion_line: 154
expression: out
---
 --- mil
program  90 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
0x50c4d0:
   42 r12 <- ArithK(Add, r12, -8)
   43 r46 <- StoreMem { addr: r12, value: r11 }
0x50c4d1:
   44 r45 <- Int { value: 24, size: 4 }
   45 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   46 r14 <- Get(r45)
0x50c4d6:
   47 r11 <- Get(r12)
0x50c4d9:
   48 r45 <- Int { value: 4433936, size: 8 }
   49 r47 <- Void
   50 r47 <- Get(r14)
   51 r46 <- CArg { value: r47, next_arg: None }
   52 r46 <- Call { callee: r45, first_arg: Some(r46) }
   53 r2 <- UndefinedBool
   54 r3 <- UndefinedBool
   55 r4 <- UndefinedBool
   56 r5 <- UndefinedBool
   57 r6 <- UndefinedBool
   58 r7 <- UndefinedBool
   59 r8 <- UndefinedBool
   60 r9 <- UndefinedBool
   61 r10 <- UndefinedBool
   62 r16 <- Part { src: r46, offset: 0, size: 8 }
0x50c4de:
   63 r46 <- Part { src: r28, offset: 0, size: 16 }
   64 r48 <- Part { src: r28, offset: 0, size: 16 }
   65 r46 <- Arith(BitXor, r46, r48)
   66 r49 <- Part { src: r28, offset: 16, size: 48 }
   67 r28 <- Concat { lo: r46, hi: r49 }
   68 r10 <- False
   69 r2 <- False
   70 r6 <- SignOf(r46)
   71 r5 <- IsZero(r46)
   72 r50 <- Part { src: r46, offset: 0, size: 1 }
   73 r3 <- Parity(r50)
0x50c4e2:
   74 r45 <- Int { value: 0, size: 8 }
   75 r46 <- Int { value: 0, size: 8 }
   76 r46 <- Arith(Add, r46, r16)
   77 r46 <- StoreMem { addr: r46, value: r45 }
0x50c4e9:
   78 r46 <- Part { src: r28, offset: 0, size: 16 }
   79 r47 <- Int { value: 8, size: 8 }
   80 r47 <- Arith(Add, r47, r16)
   81 r47 <- StoreMem { addr: r47, value: r46 }
0x50c4ed:
   82 r45 <- LoadMem { addr: r12, size: 8 }
   83 r11 <- Get(r45)
   84 r12 <- ArithK(Add, r12, 8)
0x50c4ee:
   85 r45 <- Void
   86 r45 <- Concat { lo: r45, hi: r16 }
   87 r45 <- Part { src: r45, offset: 0, size: 8 }
   88 r47 <- SetReturnValue(r45)
   89 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  90 instrs
.B0:    ;;  → Always(Return).
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r26 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
         r42 <- ArithK(Add, r10, -8)
         r43 <- StoreMem { addr: r42, value: r9 }
         r44 <- Int { value: 24, size: 4 }
         r45 <- Widen { reg: r44, target_size: 8, sign: false }
         r48 <- Int { value: 4433936, size: 8 }
         r51 <- CArg { value: r45, next_arg: None }
         r52 <- Call { callee: r48, first_arg: Some(r51) }
  (  3)  r62 <- Part { src: r52, offset: 0, size: 8 }
         r63 <- Part { src: r26, offset: 0, size: 16 }
         r64 <- Part { src: r26, offset: 0, size: 16 }
         r65 <- Arith(BitXor, r63, r64)
         r66 <- Part { src: r26, offset: 16, size: 48 }
         r67 <- Concat { lo: r65, hi: r66 }
         r74 <- Int { value: 0, size: 8 }
         r75 <- Int { value: 0, size: 8 }
         r76 <- Arith(Add, r75, r62)
         r77 <- StoreMem { addr: r76, value: r74 }
         r78 <- Part { src: r67, offset: 0, size: 16 }
         r79 <- Int { value: 8, size: 8 }
         r80 <- Arith(Add, r79, r62)
         r81 <- StoreMem { addr: r80, value: r78 }
         r86 <- Concat { lo: r85, hi: r62 }
         r87 <- Part { src: r86, offset: 0, size: 8 }
         r88 <- SetReturnValue(r87)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r9, r10, r26, r42, r43, r45, r48, r51, r52, r63, r64, r65, r74, r77, r78, r80, r81, r88]
  domtree:
    BlockID(0)

 --- ssa
ssa program  90 instrs
.B0:    ;;  → Always(Return).
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  2)  r26 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
         r42 <- ArithK(Add, r10, -8)
         r43 <- StoreMem { addr: r42, value: r9 }
         r45 <- Int { value: 24, size: 8 }
         r48 <- Int { value: 4433936, size: 8 }
         r51 <- CArg { value: r45, next_arg: None }
  (  3)  r52 <- Call { callee: r48, first_arg: Some(r51) }
         r63 <- Part { src: r26, offset: 0, size: 16 }
         r64 <- Part { src: r26, offset: 0, size: 16 }
         r65 <- Arith(BitXor, r63, r64)
         r74 <- Int { value: 0, size: 8 }
         r77 <- StoreMem { addr: r52, value: r74 }
         r78 <- Part { src: r65, offset: 0, size: 16 }
         r80 <- ArithK(Add, r52, 8)
         r81 <- StoreMem { addr: r80, value: r78 }
         r88 <- SetReturnValue(r52)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:RBP;
  let r52: Bytes(8) = <?>4433936(24);
  [r52]:* := 0;
  [r52 + 8]:* := (pre:ZMM0[16 .. 0] ^ pre:ZMM0[16 .. 0])[16 .. 0];
  ;
  return r52
}
