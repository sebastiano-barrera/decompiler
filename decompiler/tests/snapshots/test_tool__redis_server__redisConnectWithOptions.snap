---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  769 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- FuncArgument { index: 0, reg_type: Bytes(8) }
   43 r14 <- Get(r45)
0x595210:
   44 r12 <- ArithK(Add, r12, -8)
   45 r46 <- StoreMem { addr: r12, value: r11 }
0x595211:
   46 r45 <- Int { value: 272, size: 4 }
   47 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   48 r15 <- Get(r45)
0x595216:
   49 r11 <- Get(r14)
0x595219:
   50 r45 <- Int { value: 1, size: 4 }
   51 r45 <- Widen { reg: r45, target_size: 8, sign: false }
   52 r14 <- Get(r45)
0x59521e:
   53 r12 <- ArithK(Add, r12, -8)
   54 r46 <- StoreMem { addr: r12, value: r17 }
0x59521f:
   55 r46 <- Int { value: 8, size: 8 }
   56 r12 <- Arith(Sub, r12, r46)
   57 r12 <- Get(r12)
   58 r10 <- OverflowOf(r12)
   59 r2 <- CarryOf(r12)
   60 r6 <- SignOf(r12)
   61 r5 <- IsZero(r12)
   62 r47 <- Part { src: r12, offset: 0, size: 1 }
   63 r3 <- Parity(r47)
0x595223:
   64 r45 <- Int { value: 7837792, size: 8 }
   65 r16 <- Get(r45)
0x59522a:
   66 r46 <- Int { value: 8, size: 8 }
   67 r46 <- Arith(Add, r46, r16)
   68 r45 <- LoadMem { addr: r46, size: 8 }
   69 r45 <- LoadMem { addr: r45, size: 8 }
   70 r47 <- CArg { value: r18, next_arg: None }
   71 r47 <- CArg { value: r19, next_arg: Some(r47) }
   72 r47 <- CArg { value: r15, next_arg: Some(r47) }
   73 r47 <- CArg { value: r14, next_arg: Some(r47) }
   74 r47 <- Call { callee: r45, first_arg: Some(r47) }
   75 r2 <- UndefinedBool
   76 r3 <- UndefinedBool
   77 r4 <- UndefinedBool
   78 r5 <- UndefinedBool
   79 r6 <- UndefinedBool
   80 r7 <- UndefinedBool
   81 r8 <- UndefinedBool
   82 r9 <- UndefinedBool
   83 r10 <- UndefinedBool
   84 r47 <- Get(r16)
0x59522d:
   85 r16 <- Arith(BitAnd, r16, r16)
   86 r6 <- SignOf(r16)
   87 r5 <- IsZero(r16)
   88 r47 <- Part { src: r16, offset: 0, size: 1 }
   89 r3 <- Parity(r16)
   90 r2 <- False
   91 r10 <- False
0x595230:
   92 r45 <- SetJumpCondition(r5)
   93 r45 <- Control(JmpExtIf(5854160))
0x595236:
   94 r17 <- Get(r16)
0x595239:
   95 r45 <- Int { value: 7837920, size: 8 }
   96 r45 <- Arith(Add, r45, r13)
   97 r16 <- Get(r45)
0x595240:
   98 r46 <- Int { value: 0, size: 8 }
   99 r46 <- Arith(Add, r46, r17)
  100 r46 <- StoreMem { addr: r46, value: r16 }
0x595243:
  101 r45 <- Int { value: 5857232, size: 8 }
  102 r46 <- Call { callee: r45, first_arg: None }
  103 r2 <- UndefinedBool
  104 r3 <- UndefinedBool
  105 r4 <- UndefinedBool
  106 r5 <- UndefinedBool
  107 r6 <- UndefinedBool
  108 r7 <- UndefinedBool
  109 r8 <- UndefinedBool
  110 r9 <- UndefinedBool
  111 r10 <- UndefinedBool
  112 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595248:
  113 r46 <- Int { value: 152, size: 8 }
  114 r46 <- Arith(Add, r46, r17)
  115 r46 <- StoreMem { addr: r46, value: r16 }
0x59524f:
  116 r45 <- Int { value: 5852912, size: 8 }
  117 r46 <- Call { callee: r45, first_arg: None }
  118 r2 <- UndefinedBool
  119 r3 <- UndefinedBool
  120 r4 <- UndefinedBool
  121 r5 <- UndefinedBool
  122 r6 <- UndefinedBool
  123 r7 <- UndefinedBool
  124 r8 <- UndefinedBool
  125 r9 <- UndefinedBool
  126 r10 <- UndefinedBool
  127 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595254:
  128 r46 <- Int { value: 152, size: 8 }
  129 r46 <- Arith(Add, r46, r17)
  130 r45 <- LoadMem { addr: r46, size: 8 }
  131 r47 <- Int { value: 0, size: 8 }
  132 r45 <- Arith(Sub, r45, r47)
  133 r10 <- OverflowOf(r45)
  134 r2 <- CarryOf(r45)
  135 r6 <- SignOf(r45)
  136 r5 <- IsZero(r45)
  137 r48 <- Part { src: r45, offset: 0, size: 1 }
  138 r3 <- Parity(r48)
0x59525c:
  139 r45 <- Int { value: 4294967295, size: 4 }
  140 r46 <- Int { value: 140, size: 8 }
  141 r46 <- Arith(Add, r46, r17)
  142 r46 <- StoreMem { addr: r46, value: r45 }
0x595266:
  143 r46 <- Int { value: 160, size: 8 }
  144 r46 <- Arith(Add, r46, r17)
  145 r46 <- StoreMem { addr: r46, value: r16 }
0x59526d:
  146 r45 <- SetJumpCondition(r5)
  147 r45 <- Control(JmpExtIf(5854152))
0x595273:
  148 r16 <- Arith(BitAnd, r16, r16)
  149 r6 <- SignOf(r16)
  150 r5 <- IsZero(r16)
  151 r47 <- Part { src: r16, offset: 0, size: 1 }
  152 r3 <- Parity(r16)
  153 r2 <- False
  154 r10 <- False
0x595276:
  155 r45 <- SetJumpCondition(r5)
  156 r45 <- Control(JmpExtIf(5854152))
0x59527c:
  157 r46 <- Int { value: 4, size: 8 }
  158 r46 <- Arith(Add, r46, r11)
  159 r45 <- LoadMem { addr: r46, size: 4 }
  160 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  161 r16 <- Get(r45)
0x59527f:
  162 r46 <- Part { src: r16, offset: 0, size: 1 }
  163 r47 <- Int { value: 1, size: 1 }
  164 r46 <- Arith(BitAnd, r46, r47)
  165 r6 <- SignOf(r46)
  166 r5 <- IsZero(r46)
  167 r48 <- Part { src: r46, offset: 0, size: 1 }
  168 r3 <- Parity(r46)
  169 r2 <- False
  170 r10 <- False
0x595281:
  171 r45 <- Not(r5)
  172 r46 <- SetJumpCondition(r45)
  173 r46 <- Control(JmpExtIf(5853834))
0x595283:
  174 r46 <- Int { value: 144, size: 8 }
  175 r46 <- Arith(Add, r46, r17)
  176 r45 <- LoadMem { addr: r46, size: 4 }
  177 r47 <- Int { value: 1, size: 4 }
  178 r45 <- Arith(BitOr, r45, r47)
  179 r48 <- Int { value: 144, size: 8 }
  180 r48 <- Arith(Add, r48, r17)
  181 r48 <- StoreMem { addr: r48, value: r45 }
  182 r10 <- False
  183 r2 <- False
  184 r6 <- SignOf(r45)
  185 r5 <- IsZero(r45)
  186 r49 <- Part { src: r45, offset: 0, size: 1 }
  187 r3 <- Parity(r49)
0x59528a:
  188 r46 <- Part { src: r16, offset: 0, size: 1 }
  189 r47 <- Int { value: 2, size: 1 }
  190 r46 <- Arith(BitAnd, r46, r47)
  191 r6 <- SignOf(r46)
  192 r5 <- IsZero(r46)
  193 r48 <- Part { src: r46, offset: 0, size: 1 }
  194 r3 <- Parity(r46)
  195 r2 <- False
  196 r10 <- False
0x59528c:
  197 r45 <- SetJumpCondition(r5)
  198 r45 <- Control(JmpExtIf(5853848))
0x59528e:
  199 r46 <- Int { value: 144, size: 8 }
  200 r46 <- Arith(Add, r46, r17)
  201 r45 <- LoadMem { addr: r46, size: 4 }
  202 r47 <- Int { value: 128, size: 4 }
  203 r45 <- Arith(BitOr, r45, r47)
  204 r48 <- Int { value: 144, size: 8 }
  205 r48 <- Arith(Add, r48, r17)
  206 r48 <- StoreMem { addr: r48, value: r45 }
  207 r10 <- False
  208 r2 <- False
  209 r6 <- SignOf(r45)
  210 r5 <- IsZero(r45)
  211 r49 <- Part { src: r45, offset: 0, size: 1 }
  212 r3 <- Parity(r49)
0x595298:
  213 r46 <- Part { src: r16, offset: 0, size: 1 }
  214 r47 <- Int { value: 4, size: 1 }
  215 r46 <- Arith(BitAnd, r46, r47)
  216 r6 <- SignOf(r46)
  217 r5 <- IsZero(r46)
  218 r48 <- Part { src: r46, offset: 0, size: 1 }
  219 r3 <- Parity(r46)
  220 r2 <- False
  221 r10 <- False
0x59529a:
  222 r45 <- SetJumpCondition(r5)
  223 r45 <- Control(JmpExtIf(5853862))
0x59529c:
  224 r46 <- Int { value: 144, size: 8 }
  225 r46 <- Arith(Add, r46, r17)
  226 r45 <- LoadMem { addr: r46, size: 4 }
  227 r47 <- Int { value: 512, size: 4 }
  228 r45 <- Arith(BitOr, r45, r47)
  229 r48 <- Int { value: 144, size: 8 }
  230 r48 <- Arith(Add, r48, r17)
  231 r48 <- StoreMem { addr: r48, value: r45 }
  232 r10 <- False
  233 r2 <- False
  234 r6 <- SignOf(r45)
  235 r5 <- IsZero(r45)
  236 r49 <- Part { src: r45, offset: 0, size: 1 }
  237 r3 <- Parity(r49)
0x5952a6:
  238 r46 <- Part { src: r16, offset: 0, size: 1 }
  239 r47 <- Int { value: 16, size: 1 }
  240 r46 <- Arith(BitAnd, r46, r47)
  241 r6 <- SignOf(r46)
  242 r5 <- IsZero(r46)
  243 r48 <- Part { src: r46, offset: 0, size: 1 }
  244 r3 <- Parity(r46)
  245 r2 <- False
  246 r10 <- False
0x5952a8:
  247 r45 <- SetJumpCondition(r5)
  248 r45 <- Control(JmpExtIf(5853876))
0x5952aa:
  249 r46 <- Int { value: 144, size: 8 }
  250 r46 <- Arith(Add, r46, r17)
  251 r45 <- LoadMem { addr: r46, size: 4 }
  252 r47 <- Int { value: 1024, size: 4 }
  253 r45 <- Arith(BitOr, r45, r47)
  254 r48 <- Int { value: 144, size: 8 }
  255 r48 <- Arith(Add, r48, r17)
  256 r48 <- StoreMem { addr: r48, value: r45 }
  257 r10 <- False
  258 r2 <- False
  259 r6 <- SignOf(r45)
  260 r5 <- IsZero(r45)
  261 r49 <- Part { src: r45, offset: 0, size: 1 }
  262 r3 <- Parity(r49)
0x5952b4:
  263 r46 <- Part { src: r16, offset: 0, size: 1 }
  264 r47 <- Int { value: 32, size: 1 }
  265 r46 <- Arith(BitAnd, r46, r47)
  266 r6 <- SignOf(r46)
  267 r5 <- IsZero(r46)
  268 r48 <- Part { src: r46, offset: 0, size: 1 }
  269 r3 <- Parity(r46)
  270 r2 <- False
  271 r10 <- False
0x5952b6:
  272 r45 <- SetJumpCondition(r5)
  273 r45 <- Control(JmpExtIf(5853890))
0x5952b8:
  274 r46 <- Int { value: 144, size: 8 }
  275 r46 <- Arith(Add, r46, r17)
  276 r45 <- LoadMem { addr: r46, size: 4 }
  277 r47 <- Int { value: 2048, size: 4 }
  278 r45 <- Arith(BitOr, r45, r47)
  279 r48 <- Int { value: 144, size: 8 }
  280 r48 <- Arith(Add, r48, r17)
  281 r48 <- StoreMem { addr: r48, value: r45 }
  282 r10 <- False
  283 r2 <- False
  284 r6 <- SignOf(r45)
  285 r5 <- IsZero(r45)
  286 r49 <- Part { src: r45, offset: 0, size: 1 }
  287 r3 <- Parity(r49)
0x5952c2:
  288 r46 <- Part { src: r16, offset: 0, size: 1 }
  289 r47 <- Int { value: 64, size: 1 }
  290 r46 <- Arith(BitAnd, r46, r47)
  291 r6 <- SignOf(r46)
  292 r5 <- IsZero(r46)
  293 r48 <- Part { src: r46, offset: 0, size: 1 }
  294 r3 <- Parity(r46)
  295 r2 <- False
  296 r10 <- False
0x5952c4:
  297 r45 <- SetJumpCondition(r5)
  298 r45 <- Control(JmpExtIf(5853904))
0x5952c6:
  299 r46 <- Int { value: 144, size: 8 }
  300 r46 <- Arith(Add, r46, r17)
  301 r45 <- LoadMem { addr: r46, size: 4 }
  302 r47 <- Int { value: 4096, size: 4 }
  303 r45 <- Arith(BitOr, r45, r47)
  304 r48 <- Int { value: 144, size: 8 }
  305 r48 <- Arith(Add, r48, r17)
  306 r48 <- StoreMem { addr: r48, value: r45 }
  307 r10 <- False
  308 r2 <- False
  309 r6 <- SignOf(r45)
  310 r5 <- IsZero(r45)
  311 r49 <- Part { src: r45, offset: 0, size: 1 }
  312 r3 <- Parity(r49)
0x5952d0:
  313 r46 <- Int { value: 64, size: 8 }
  314 r46 <- Arith(Add, r46, r11)
  315 r45 <- LoadMem { addr: r46, size: 8 }
  316 r15 <- Get(r45)
0x5952d4:
  317 r15 <- Arith(BitAnd, r15, r15)
  318 r6 <- SignOf(r15)
  319 r5 <- IsZero(r15)
  320 r47 <- Part { src: r15, offset: 0, size: 1 }
  321 r3 <- Parity(r15)
  322 r2 <- False
  323 r10 <- False
0x5952d7:
  324 r45 <- SetJumpCondition(r5)
  325 r45 <- Control(JmpExtIf(5854128))
0x5952dd:
  326 r14 <- Get(r17)
0x5952e0:
  327 r45 <- Int { value: 5853696, size: 8 }
  328 r47 <- Void
  329 r47 <- Get(r14)
  330 r48 <- Void
  331 r48 <- Get(r15)
  332 r46 <- CArg { value: r48, next_arg: None }
  333 r46 <- CArg { value: r47, next_arg: Some(r46) }
  334 r46 <- Call { callee: r45, first_arg: Some(r46) }
  335 r2 <- UndefinedBool
  336 r3 <- UndefinedBool
  337 r4 <- UndefinedBool
  338 r5 <- UndefinedBool
  339 r6 <- UndefinedBool
  340 r7 <- UndefinedBool
  341 r8 <- UndefinedBool
  342 r9 <- UndefinedBool
  343 r10 <- UndefinedBool
  344 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5952e5:
  345 r46 <- Int { value: 48, size: 8 }
  346 r46 <- Arith(Add, r46, r11)
  347 r45 <- LoadMem { addr: r46, size: 8 }
  348 r16 <- Get(r45)
0x5952e9:
  349 r46 <- Int { value: 8, size: 8 }
  350 r46 <- Arith(Add, r46, r11)
  351 r45 <- LoadMem { addr: r46, size: 8 }
  352 r15 <- Get(r45)
0x5952ed:
  353 r14 <- Get(r17)
0x5952f0:
  354 r46 <- Int { value: 240, size: 8 }
  355 r46 <- Arith(Add, r46, r17)
  356 r46 <- StoreMem { addr: r46, value: r16 }
0x5952f7:
  357 r46 <- Int { value: 56, size: 8 }
  358 r46 <- Arith(Add, r46, r11)
  359 r45 <- LoadMem { addr: r46, size: 8 }
  360 r16 <- Get(r45)
0x5952fb:
  361 r46 <- Int { value: 248, size: 8 }
  362 r46 <- Arith(Add, r46, r17)
  363 r46 <- StoreMem { addr: r46, value: r16 }
0x595302:
  364 r45 <- Int { value: 5842752, size: 8 }
  365 r47 <- Void
  366 r47 <- Get(r14)
  367 r48 <- Void
  368 r48 <- Get(r15)
  369 r46 <- CArg { value: r48, next_arg: None }
  370 r46 <- CArg { value: r47, next_arg: Some(r46) }
  371 r46 <- Call { callee: r45, first_arg: Some(r46) }
  372 r2 <- UndefinedBool
  373 r3 <- UndefinedBool
  374 r4 <- UndefinedBool
  375 r5 <- UndefinedBool
  376 r6 <- UndefinedBool
  377 r7 <- UndefinedBool
  378 r8 <- UndefinedBool
  379 r9 <- UndefinedBool
  380 r10 <- UndefinedBool
  381 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595307:
  382 r46 <- Part { src: r16, offset: 0, size: 4 }
  383 r48 <- Part { src: r16, offset: 0, size: 4 }
  384 r46 <- Arith(BitAnd, r46, r48)
  385 r6 <- SignOf(r46)
  386 r5 <- IsZero(r46)
  387 r49 <- Part { src: r46, offset: 0, size: 1 }
  388 r3 <- Parity(r46)
  389 r2 <- False
  390 r10 <- False
0x595309:
  391 r45 <- Not(r5)
  392 r46 <- SetJumpCondition(r45)
  393 r46 <- Control(JmpExtIf(5854096))
0x59530f:
  394 r46 <- Int { value: 16, size: 8 }
  395 r46 <- Arith(Add, r46, r11)
  396 r45 <- LoadMem { addr: r46, size: 8 }
  397 r15 <- Get(r45)
0x595313:
  398 r14 <- Get(r17)
0x595316:
  399 r45 <- Int { value: 5844704, size: 8 }
  400 r47 <- Void
  401 r47 <- Get(r14)
  402 r48 <- Void
  403 r48 <- Get(r15)
  404 r46 <- CArg { value: r48, next_arg: None }
  405 r46 <- CArg { value: r47, next_arg: Some(r46) }
  406 r46 <- Call { callee: r45, first_arg: Some(r46) }
  407 r2 <- UndefinedBool
  408 r3 <- UndefinedBool
  409 r4 <- UndefinedBool
  410 r5 <- UndefinedBool
  411 r6 <- UndefinedBool
  412 r7 <- UndefinedBool
  413 r8 <- UndefinedBool
  414 r9 <- UndefinedBool
  415 r10 <- UndefinedBool
  416 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59531b:
  417 r46 <- Part { src: r16, offset: 0, size: 4 }
  418 r48 <- Part { src: r16, offset: 0, size: 4 }
  419 r46 <- Arith(BitAnd, r46, r48)
  420 r6 <- SignOf(r46)
  421 r5 <- IsZero(r46)
  422 r49 <- Part { src: r46, offset: 0, size: 1 }
  423 r3 <- Parity(r46)
  424 r2 <- False
  425 r10 <- False
0x59531d:
  426 r45 <- Not(r5)
  427 r46 <- SetJumpCondition(r45)
  428 r46 <- Control(JmpExtIf(5854096))
0x59531f:
  429 r46 <- Int { value: 0, size: 8 }
  430 r46 <- Arith(Add, r46, r11)
  431 r45 <- LoadMem { addr: r46, size: 4 }
  432 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  433 r16 <- Get(r45)
0x595322:
  434 r46 <- Part { src: r16, offset: 0, size: 4 }
  435 r48 <- Part { src: r16, offset: 0, size: 4 }
  436 r46 <- Arith(BitAnd, r46, r48)
  437 r6 <- SignOf(r46)
  438 r5 <- IsZero(r46)
  439 r49 <- Part { src: r46, offset: 0, size: 1 }
  440 r3 <- Parity(r46)
  441 r2 <- False
  442 r10 <- False
0x595324:
  443 r45 <- SetJumpCondition(r5)
  444 r45 <- Control(JmpExtIf(5854176))
0x59532a:
  445 r46 <- Part { src: r16, offset: 0, size: 4 }
  446 r47 <- Int { value: 1, size: 4 }
  447 r46 <- Arith(Sub, r46, r47)
  448 r10 <- OverflowOf(r46)
  449 r2 <- CarryOf(r46)
  450 r6 <- SignOf(r46)
  451 r5 <- IsZero(r46)
  452 r48 <- Part { src: r46, offset: 0, size: 1 }
  453 r3 <- Parity(r48)
0x59532d:
  454 r45 <- SetJumpCondition(r5)
  455 r45 <- Control(JmpExtIf(5854208))
0x595333:
  456 r46 <- Part { src: r16, offset: 0, size: 4 }
  457 r47 <- Int { value: 2, size: 4 }
  458 r46 <- Arith(Sub, r46, r47)
  459 r10 <- OverflowOf(r46)
  460 r2 <- CarryOf(r46)
  461 r6 <- SignOf(r46)
  462 r5 <- IsZero(r46)
  463 r48 <- Part { src: r46, offset: 0, size: 1 }
  464 r3 <- Parity(r48)
0x595336:
  465 r45 <- Not(r5)
  466 r46 <- SetJumpCondition(r45)
  467 r46 <- Control(JmpExtIf(5854152))
0x59533c:
  468 r46 <- Int { value: 144, size: 8 }
  469 r46 <- Arith(Add, r46, r17)
  470 r45 <- LoadMem { addr: r46, size: 4 }
  471 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  472 r16 <- Get(r45)
0x595342:
  473 r46 <- Int { value: 24, size: 8 }
  474 r46 <- Arith(Add, r46, r11)
  475 r45 <- LoadMem { addr: r46, size: 4 }
  476 r45 <- Part { src: r45, offset: 0, size: 4 }
  477 r45 <- Widen { reg: r45, target_size: 16, sign: false }
  478 r47 <- Part { src: r28, offset: 4, size: 60 }
  479 r28 <- Concat { lo: r45, hi: r47 }
0x595347:
  480 r46 <- Part { src: r16, offset: 0, size: 4 }
  481 r47 <- Int { value: 2, size: 4 }
  482 r46 <- Arith(BitOr, r46, r47)
  483 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  484 r16 <- Get(r46)
  485 r10 <- False
  486 r2 <- False
  487 r6 <- SignOf(r46)
  488 r5 <- IsZero(r46)
  489 r48 <- Part { src: r46, offset: 0, size: 1 }
  490 r3 <- Parity(r48)
0x59534a:
  491 r46 <- Part { src: r16, offset: 0, size: 4 }
  492 r46 <- Part { src: r46, offset: 0, size: 4 }
  493 r46 <- Widen { reg: r46, target_size: 16, sign: false }
  494 r47 <- Part { src: r29, offset: 4, size: 60 }
  495 r29 <- Concat { lo: r46, hi: r47 }
0x59534e:
  496 r45 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
0x595352:
  497 r45 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
0x59535a:
  498 r46 <- Int { value: 8, size: 8 }
  499 r46 <- Arith(Add, r46, r17)
  500 r45 <- LoadMem { addr: r46, size: 4 }
  501 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  502 r16 <- Get(r45)
0x59535d:
  503 r46 <- Part { src: r16, offset: 0, size: 4 }
  504 r48 <- Part { src: r16, offset: 0, size: 4 }
  505 r46 <- Arith(BitAnd, r46, r48)
  506 r6 <- SignOf(r46)
  507 r5 <- IsZero(r46)
  508 r49 <- Part { src: r46, offset: 0, size: 1 }
  509 r3 <- Parity(r46)
  510 r2 <- False
  511 r10 <- False
0x59535f:
  512 r45 <- Not(r5)
  513 r46 <- SetJumpCondition(r45)
  514 r46 <- Control(JmpExtIf(5854116))
0x595361:
  515 r46 <- Int { value: 140, size: 8 }
  516 r46 <- Arith(Add, r46, r17)
  517 r45 <- LoadMem { addr: r46, size: 4 }
  518 r47 <- Int { value: -1, size: 4 }
  519 r45 <- Arith(Sub, r45, r47)
  520 r10 <- OverflowOf(r45)
  521 r2 <- CarryOf(r45)
  522 r6 <- SignOf(r45)
  523 r5 <- IsZero(r45)
  524 r48 <- Part { src: r45, offset: 0, size: 1 }
  525 r3 <- Parity(r48)
0x595368:
  526 r45 <- SetJumpCondition(r5)
  527 r45 <- Control(JmpExtIf(5854116))
0x59536a:
  528 r46 <- Int { value: 16, size: 8 }
  529 r46 <- Arith(Add, r46, r11)
  530 r45 <- LoadMem { addr: r46, size: 8 }
  531 r16 <- Get(r45)
0x59536e:
  532 r16 <- Arith(BitAnd, r16, r16)
  533 r6 <- SignOf(r16)
  534 r5 <- IsZero(r16)
  535 r47 <- Part { src: r16, offset: 0, size: 1 }
  536 r3 <- Parity(r16)
  537 r2 <- False
  538 r10 <- False
0x595371:
  539 r45 <- SetJumpCondition(r5)
  540 r45 <- Control(JmpExtIf(5854116))
0x595373:
  541 r46 <- Int { value: 144, size: 8 }
  542 r46 <- Arith(Add, r46, r17)
  543 r45 <- LoadMem { addr: r46, size: 1 }
  544 r47 <- Int { value: 1, size: 1 }
  545 r45 <- Arith(BitAnd, r45, r47)
  546 r6 <- SignOf(r45)
  547 r5 <- IsZero(r45)
  548 r48 <- Part { src: r45, offset: 0, size: 1 }
  549 r3 <- Parity(r45)
  550 r2 <- False
  551 r10 <- False
0x59537a:
  552 r45 <- SetJumpCondition(r5)
  553 r45 <- Control(JmpExtIf(5854116))
0x59537c:
  554 r46 <- Int { value: 0, size: 8 }
  555 r46 <- Arith(Add, r46, r16)
  556 r45 <- LoadMem { addr: r46, size: 8 }
  557 r15 <- Get(r45)
0x59537f:
  558 r46 <- Int { value: 8, size: 8 }
  559 r46 <- Arith(Add, r46, r16)
  560 r45 <- LoadMem { addr: r46, size: 8 }
  561 r19 <- Get(r45)
0x595383:
  562 r14 <- Get(r17)
0x595386:
  563 r45 <- Int { value: 5844800, size: 8 }
  564 r47 <- Void
  565 r47 <- Get(r14)
  566 r46 <- CArg { value: r47, next_arg: None }
  567 r46 <- Call { callee: r45, first_arg: Some(r46) }
  568 r2 <- UndefinedBool
  569 r3 <- UndefinedBool
  570 r4 <- UndefinedBool
  571 r5 <- UndefinedBool
  572 r6 <- UndefinedBool
  573 r7 <- UndefinedBool
  574 r8 <- UndefinedBool
  575 r9 <- UndefinedBool
  576 r10 <- UndefinedBool
  577 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59538b:
  578 r45 <- Control(JmpExt(5854116))
0x595390:
  579 r45 <- Int { value: 6951854, size: 8 }
  580 r45 <- Arith(Add, r45, r13)
  581 r19 <- Get(r45)
0x595397:
  582 r45 <- Int { value: 5, size: 4 }
  583 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  584 r15 <- Get(r45)
0x59539c:
  585 r14 <- Get(r17)
0x59539f:
  586 r45 <- Int { value: 5852656, size: 8 }
  587 r47 <- Void
  588 r47 <- Get(r14)
  589 r48 <- Void
  590 r48 <- Get(r15)
  591 r48 <- Part { src: r48, offset: 0, size: 4 }
  592 r49 <- Void
  593 r49 <- Get(r19)
  594 r46 <- CArg { value: r49, next_arg: None }
  595 r46 <- CArg { value: r48, next_arg: Some(r46) }
  596 r46 <- CArg { value: r47, next_arg: Some(r46) }
  597 r46 <- Call { callee: r45, first_arg: Some(r46) }
  598 r2 <- UndefinedBool
  599 r3 <- UndefinedBool
  600 r4 <- UndefinedBool
  601 r5 <- UndefinedBool
  602 r6 <- UndefinedBool
  603 r7 <- UndefinedBool
  604 r8 <- UndefinedBool
  605 r9 <- UndefinedBool
  606 r10 <- UndefinedBool
0x5953a4:
  607 r46 <- Int { value: 8, size: 8 }
  608 r12 <- Arith(Add, r12, r46)
  609 r12 <- Get(r12)
  610 r10 <- OverflowOf(r12)
  611 r2 <- CarryOf(r12)
  612 r6 <- SignOf(r12)
  613 r5 <- IsZero(r12)
  614 r47 <- Part { src: r12, offset: 0, size: 1 }
  615 r3 <- Parity(r47)
0x5953a8:
  616 r16 <- Get(r17)
0x5953ab:
  617 r45 <- LoadMem { addr: r12, size: 8 }
  618 r17 <- Get(r45)
  619 r12 <- ArithK(Add, r12, 8)
0x5953ac:
  620 r45 <- LoadMem { addr: r12, size: 8 }
  621 r11 <- Get(r45)
  622 r12 <- ArithK(Add, r12, 8)
0x5953ad:
  623 r45 <- Void
  624 r45 <- Concat { lo: r45, hi: r16 }
  625 r45 <- Part { src: r45, offset: 0, size: 8 }
  626 r47 <- SetReturnValue(r45)
  627 r47 <- Control(Ret)
0x5953b0:
  628 r46 <- Part { src: r16, offset: 0, size: 1 }
  629 r47 <- Int { value: 8, size: 1 }
  630 r46 <- Arith(BitAnd, r46, r47)
  631 r6 <- SignOf(r46)
  632 r5 <- IsZero(r46)
  633 r48 <- Part { src: r46, offset: 0, size: 1 }
  634 r3 <- Parity(r46)
  635 r2 <- False
  636 r10 <- False
0x5953b2:
  637 r45 <- Not(r5)
  638 r46 <- SetJumpCondition(r45)
  639 r46 <- Control(JmpExtIf(5853925))
0x5953b8:
  640 r45 <- Int { value: 5846864, size: 8 }
  641 r45 <- Arith(Add, r45, r13)
  642 r15 <- Get(r45)
0x5953bf:
  643 r45 <- Control(JmpExt(5853917))
0x5953c8:
  644 r14 <- Get(r17)
0x5953cb:
  645 r45 <- Int { value: 5852928, size: 8 }
  646 r47 <- Void
  647 r47 <- Get(r14)
  648 r46 <- CArg { value: r47, next_arg: None }
  649 r46 <- Call { callee: r45, first_arg: Some(r46) }
  650 r2 <- UndefinedBool
  651 r3 <- UndefinedBool
  652 r4 <- UndefinedBool
  653 r5 <- UndefinedBool
  654 r6 <- UndefinedBool
  655 r7 <- UndefinedBool
  656 r8 <- UndefinedBool
  657 r9 <- UndefinedBool
  658 r10 <- UndefinedBool
0x5953d0:
  659 r46 <- Part { src: r17, offset: 0, size: 4 }
  660 r48 <- Part { src: r17, offset: 0, size: 4 }
  661 r46 <- Arith(BitXor, r46, r48)
  662 r46 <- Widen { reg: r46, target_size: 8, sign: false }
  663 r17 <- Get(r46)
  664 r10 <- False
  665 r2 <- False
  666 r6 <- SignOf(r46)
  667 r5 <- IsZero(r46)
  668 r49 <- Part { src: r46, offset: 0, size: 1 }
  669 r3 <- Parity(r49)
0x5953d2:
  670 r46 <- Int { value: 8, size: 8 }
  671 r12 <- Arith(Add, r12, r46)
  672 r12 <- Get(r12)
  673 r10 <- OverflowOf(r12)
  674 r2 <- CarryOf(r12)
  675 r6 <- SignOf(r12)
  676 r5 <- IsZero(r12)
  677 r47 <- Part { src: r12, offset: 0, size: 1 }
  678 r3 <- Parity(r47)
0x5953d6:
  679 r16 <- Get(r17)
0x5953d9:
  680 r45 <- LoadMem { addr: r12, size: 8 }
  681 r17 <- Get(r45)
  682 r12 <- ArithK(Add, r12, 8)
0x5953da:
  683 r45 <- LoadMem { addr: r12, size: 8 }
  684 r11 <- Get(r45)
  685 r12 <- ArithK(Add, r12, 8)
0x5953db:
  686 r45 <- Void
  687 r45 <- Concat { lo: r45, hi: r16 }
  688 r45 <- Part { src: r45, offset: 0, size: 8 }
  689 r47 <- SetReturnValue(r45)
  690 r47 <- Control(Ret)
0x5953e0:
  691 r46 <- Int { value: 8, size: 8 }
  692 r46 <- Arith(Add, r46, r11)
  693 r45 <- LoadMem { addr: r46, size: 8 }
  694 r18 <- Get(r45)
0x5953e4:
  695 r46 <- Int { value: 40, size: 8 }
  696 r46 <- Arith(Add, r46, r11)
  697 r45 <- LoadMem { addr: r46, size: 4 }
  698 r45 <- Widen { reg: r45, target_size: 8, sign: false }
  699 r19 <- Get(r45)
0x5953e7:
  700 r14 <- Get(r17)
0x5953ea:
  701 r46 <- Int { value: 32, size: 8 }
  702 r46 <- Arith(Add, r46, r11)
  703 r45 <- LoadMem { addr: r46, size: 8 }
  704 r15 <- Get(r45)
0x5953ee:
  705 r46 <- Int { value: 24, size: 8 }
  706 r46 <- Arith(Add, r46, r11)
  707 r45 <- LoadMem { addr: r46, size: 8 }
  708 r20 <- Get(r45)
0x5953f2:
  709 r45 <- Int { value: 5845184, size: 8 }
  710 r47 <- Void
  711 r47 <- Get(r14)
  712 r48 <- Void
  713 r48 <- Get(r15)
  714 r49 <- Void
  715 r49 <- Get(r19)
  716 r49 <- Part { src: r49, offset: 0, size: 4 }
  717 r50 <- Void
  718 r50 <- Get(r18)
  719 r51 <- Void
  720 r51 <- Get(r20)
  721 r46 <- CArg { value: r51, next_arg: None }
  722 r46 <- CArg { value: r50, next_arg: Some(r46) }
  723 r46 <- CArg { value: r49, next_arg: Some(r46) }
  724 r46 <- CArg { value: r48, next_arg: Some(r46) }
  725 r46 <- CArg { value: r47, next_arg: Some(r46) }
  726 r46 <- Call { callee: r45, first_arg: Some(r46) }
  727 r2 <- UndefinedBool
  728 r3 <- UndefinedBool
  729 r4 <- UndefinedBool
  730 r5 <- UndefinedBool
  731 r6 <- UndefinedBool
  732 r7 <- UndefinedBool
  733 r8 <- UndefinedBool
  734 r9 <- UndefinedBool
  735 r10 <- UndefinedBool
  736 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5953f7:
  737 r45 <- Control(JmpExt(5854042))
0x595400:
  738 r46 <- Int { value: 8, size: 8 }
  739 r46 <- Arith(Add, r46, r11)
  740 r45 <- LoadMem { addr: r46, size: 8 }
  741 r19 <- Get(r45)
0x595404:
  742 r46 <- Int { value: 24, size: 8 }
  743 r46 <- Arith(Add, r46, r11)
  744 r45 <- LoadMem { addr: r46, size: 8 }
  745 r15 <- Get(r45)
0x595408:
  746 r14 <- Get(r17)
0x59540b:
  747 r45 <- Int { value: 5845200, size: 8 }
  748 r47 <- Void
  749 r47 <- Get(r14)
  750 r48 <- Void
  751 r48 <- Get(r15)
  752 r49 <- Void
  753 r49 <- Get(r19)
  754 r46 <- CArg { value: r49, next_arg: None }
  755 r46 <- CArg { value: r48, next_arg: Some(r46) }
  756 r46 <- CArg { value: r47, next_arg: Some(r46) }
  757 r46 <- Call { callee: r45, first_arg: Some(r46) }
  758 r2 <- UndefinedBool
  759 r3 <- UndefinedBool
  760 r4 <- UndefinedBool
  761 r5 <- UndefinedBool
  762 r6 <- UndefinedBool
  763 r7 <- UndefinedBool
  764 r8 <- UndefinedBool
  765 r9 <- UndefinedBool
  766 r10 <- UndefinedBool
  767 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595410:
  768 r45 <- Control(JmpExt(5854042))


 --- ssa pre-xform
ssa program  775 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r11 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
  (  2)  r15 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
         r17 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
  ( 14)  r42 <- FuncArgument { index: 0, reg_type: Bytes(8) }
  (  2)  r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
         r46 <- Int { value: 272, size: 4 }
         r47 <- Widen { reg: r46, target_size: 8, sign: false }
         r50 <- Int { value: 1, size: 4 }
         r51 <- Widen { reg: r50, target_size: 8, sign: false }
         r53 <- ArithK(Add, r44, -8)
         r54 <- StoreMem { addr: r53, value: r15 }
  (  3)  r64 <- Int { value: 7837792, size: 8 }
         r66 <- Int { value: 8, size: 8 }
         r67 <- Arith(Add, r66, r64)
         r68 <- LoadMem { addr: r67, size: 8 }
         r69 <- LoadMem { addr: r68, size: 8 }
         r70 <- CArg { value: r16, next_arg: None }
         r71 <- CArg { value: r17, next_arg: Some(r70) }
         r72 <- CArg { value: r47, next_arg: Some(r71) }
         r73 <- CArg { value: r51, next_arg: Some(r72) }
         r74 <- Call { callee: r69, first_arg: Some(r73) }
  ( 33)  r85 <- Arith(BitAnd, r64, r64)
         r87 <- IsZero(r85)
         r92 <- SetJumpCondition(r87)
         r771 <- Upsilon { value: r15, phi_ref: r770 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r95 <- Int { value: 7837920, size: 8 }
         r96 <- Arith(Add, r95, r11)
         r98 <- Int { value: 0, size: 8 }
         r99 <- Arith(Add, r98, r85)
         r100 <- StoreMem { addr: r99, value: r96 }
         r101 <- Int { value: 5857232, size: 8 }
         r102 <- Call { callee: r101, first_arg: None }
         r112 <- Part { src: r102, offset: 0, size: 8 }
         r113 <- Int { value: 152, size: 8 }
         r114 <- Arith(Add, r113, r85)
         r115 <- StoreMem { addr: r114, value: r112 }
         r116 <- Int { value: 5852912, size: 8 }
         r117 <- Call { callee: r116, first_arg: None }
  (  3)  r127 <- Part { src: r117, offset: 0, size: 8 }
         r128 <- Int { value: 152, size: 8 }
         r129 <- Arith(Add, r128, r85)
         r130 <- LoadMem { addr: r129, size: 8 }
         r131 <- Int { value: 0, size: 8 }
         r132 <- Arith(Sub, r130, r131)
         r136 <- IsZero(r132)
         r139 <- Int { value: 4294967295, size: 4 }
         r140 <- Int { value: 140, size: 8 }
         r141 <- Arith(Add, r140, r85)
         r142 <- StoreMem { addr: r141, value: r139 }
         r143 <- Int { value: 160, size: 8 }
         r144 <- Arith(Add, r143, r85)
         r145 <- StoreMem { addr: r144, value: r127 }
         r146 <- SetJumpCondition(r136)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
         r148 <- Arith(BitAnd, r127, r127)
         r150 <- IsZero(r148)
         r155 <- SetJumpCondition(r150)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r157 <- Int { value: 4, size: 8 }
         r158 <- Arith(Add, r157, r42)
         r159 <- LoadMem { addr: r158, size: 4 }
  (  7)  r160 <- Widen { reg: r159, target_size: 8, sign: false }
         r162 <- Part { src: r160, offset: 0, size: 1 }
         r163 <- Int { value: 1, size: 1 }
         r164 <- Arith(BitAnd, r162, r163)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r174 <- Int { value: 144, size: 8 }
         r175 <- Arith(Add, r174, r85)
         r176 <- LoadMem { addr: r175, size: 4 }
         r177 <- Int { value: 1, size: 4 }
         r178 <- Arith(BitOr, r176, r177)
         r179 <- Int { value: 144, size: 8 }
         r180 <- Arith(Add, r179, r85)
         r181 <- StoreMem { addr: r180, value: r178 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r188 <- Part { src: r160, offset: 0, size: 1 }
         r189 <- Int { value: 2, size: 1 }
         r190 <- Arith(BitAnd, r188, r189)
         r192 <- IsZero(r190)
         r197 <- SetJumpCondition(r192)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r199 <- Int { value: 144, size: 8 }
         r200 <- Arith(Add, r199, r85)
         r201 <- LoadMem { addr: r200, size: 4 }
         r202 <- Int { value: 128, size: 4 }
         r203 <- Arith(BitOr, r201, r202)
         r204 <- Int { value: 144, size: 8 }
         r205 <- Arith(Add, r204, r85)
         r206 <- StoreMem { addr: r205, value: r203 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r213 <- Part { src: r160, offset: 0, size: 1 }
         r214 <- Int { value: 4, size: 1 }
         r215 <- Arith(BitAnd, r213, r214)
         r217 <- IsZero(r215)
         r222 <- SetJumpCondition(r217)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r224 <- Int { value: 144, size: 8 }
         r225 <- Arith(Add, r224, r85)
         r226 <- LoadMem { addr: r225, size: 4 }
         r227 <- Int { value: 512, size: 4 }
         r228 <- Arith(BitOr, r226, r227)
         r229 <- Int { value: 144, size: 8 }
         r230 <- Arith(Add, r229, r85)
         r231 <- StoreMem { addr: r230, value: r228 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r238 <- Part { src: r160, offset: 0, size: 1 }
         r239 <- Int { value: 16, size: 1 }
         r240 <- Arith(BitAnd, r238, r239)
         r242 <- IsZero(r240)
         r247 <- SetJumpCondition(r242)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r249 <- Int { value: 144, size: 8 }
         r250 <- Arith(Add, r249, r85)
         r251 <- LoadMem { addr: r250, size: 4 }
         r252 <- Int { value: 1024, size: 4 }
         r253 <- Arith(BitOr, r251, r252)
         r254 <- Int { value: 144, size: 8 }
         r255 <- Arith(Add, r254, r85)
         r256 <- StoreMem { addr: r255, value: r253 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r263 <- Part { src: r160, offset: 0, size: 1 }
         r264 <- Int { value: 32, size: 1 }
         r265 <- Arith(BitAnd, r263, r264)
         r267 <- IsZero(r265)
         r272 <- SetJumpCondition(r267)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r274 <- Int { value: 144, size: 8 }
         r275 <- Arith(Add, r274, r85)
         r276 <- LoadMem { addr: r275, size: 4 }
         r277 <- Int { value: 2048, size: 4 }
         r278 <- Arith(BitOr, r276, r277)
         r279 <- Int { value: 144, size: 8 }
         r280 <- Arith(Add, r279, r85)
         r281 <- StoreMem { addr: r280, value: r278 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r288 <- Part { src: r160, offset: 0, size: 1 }
         r289 <- Int { value: 64, size: 1 }
         r290 <- Arith(BitAnd, r288, r289)
         r292 <- IsZero(r290)
         r297 <- SetJumpCondition(r292)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r299 <- Int { value: 144, size: 8 }
         r300 <- Arith(Add, r299, r85)
         r301 <- LoadMem { addr: r300, size: 4 }
         r302 <- Int { value: 4096, size: 4 }
         r303 <- Arith(BitOr, r301, r302)
         r304 <- Int { value: 144, size: 8 }
         r305 <- Arith(Add, r304, r85)
         r306 <- StoreMem { addr: r305, value: r303 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r313 <- Int { value: 64, size: 8 }
         r314 <- Arith(Add, r313, r42)
  (  2)  r315 <- LoadMem { addr: r314, size: 8 }
  (  2)  r317 <- Arith(BitAnd, r315, r315)
         r319 <- IsZero(r317)
         r324 <- SetJumpCondition(r319)
         r773 <- Upsilon { value: r317, phi_ref: r769 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r628 <- Part { src: r160, offset: 0, size: 1 }
         r629 <- Int { value: 8, size: 1 }
         r630 <- Arith(BitAnd, r628, r629)
         r632 <- IsZero(r630)
         r637 <- Not(r632)
         r638 <- SetJumpCondition(r637)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r640 <- Int { value: 5846864, size: 8 }
         r641 <- Arith(Add, r640, r11)
         r774 <- Upsilon { value: r641, phi_ref: r769 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r769 <- Phi
         r327 <- Int { value: 5853696, size: 8 }
         r332 <- CArg { value: r769, next_arg: None }
         r333 <- CArg { value: r85, next_arg: Some(r332) }
         r334 <- Call { callee: r327, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r345 <- Int { value: 48, size: 8 }
         r346 <- Arith(Add, r345, r42)
         r347 <- LoadMem { addr: r346, size: 8 }
         r349 <- Int { value: 8, size: 8 }
         r350 <- Arith(Add, r349, r42)
         r351 <- LoadMem { addr: r350, size: 8 }
         r354 <- Int { value: 240, size: 8 }
         r355 <- Arith(Add, r354, r85)
         r356 <- StoreMem { addr: r355, value: r347 }
         r357 <- Int { value: 56, size: 8 }
         r358 <- Arith(Add, r357, r42)
         r359 <- LoadMem { addr: r358, size: 8 }
         r361 <- Int { value: 248, size: 8 }
         r362 <- Arith(Add, r361, r85)
         r363 <- StoreMem { addr: r362, value: r359 }
         r364 <- Int { value: 5842752, size: 8 }
         r369 <- CArg { value: r351, next_arg: None }
         r370 <- CArg { value: r85, next_arg: Some(r369) }
         r371 <- Call { callee: r364, first_arg: Some(r370) }
  (  2)  r381 <- Part { src: r371, offset: 0, size: 8 }
         r382 <- Part { src: r381, offset: 0, size: 4 }
         r383 <- Part { src: r381, offset: 0, size: 4 }
         r384 <- Arith(BitAnd, r382, r383)
         r386 <- IsZero(r384)
         r391 <- Not(r386)
         r392 <- SetJumpCondition(r391)
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r394 <- Int { value: 16, size: 8 }
         r395 <- Arith(Add, r394, r42)
         r396 <- LoadMem { addr: r395, size: 8 }
         r399 <- Int { value: 5844704, size: 8 }
         r404 <- CArg { value: r396, next_arg: None }
         r405 <- CArg { value: r85, next_arg: Some(r404) }
         r406 <- Call { callee: r399, first_arg: Some(r405) }
  (  2)  r416 <- Part { src: r406, offset: 0, size: 8 }
         r417 <- Part { src: r416, offset: 0, size: 4 }
         r418 <- Part { src: r416, offset: 0, size: 4 }
         r419 <- Arith(BitAnd, r417, r418)
         r421 <- IsZero(r419)
         r426 <- Not(r421)
         r427 <- SetJumpCondition(r426)
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
         r429 <- Int { value: 0, size: 8 }
         r430 <- Arith(Add, r429, r42)
         r431 <- LoadMem { addr: r430, size: 4 }
  (  4)  r432 <- Widen { reg: r431, target_size: 8, sign: false }
         r434 <- Part { src: r432, offset: 0, size: 4 }
         r435 <- Part { src: r432, offset: 0, size: 4 }
         r436 <- Arith(BitAnd, r434, r435)
         r438 <- IsZero(r436)
         r443 <- SetJumpCondition(r438)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r445 <- Part { src: r432, offset: 0, size: 4 }
         r446 <- Int { value: 1, size: 4 }
         r447 <- Arith(Sub, r445, r446)
         r451 <- IsZero(r447)
         r454 <- SetJumpCondition(r451)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r456 <- Part { src: r432, offset: 0, size: 4 }
         r457 <- Int { value: 2, size: 4 }
         r458 <- Arith(Sub, r456, r457)
         r462 <- IsZero(r458)
         r465 <- Not(r462)
         r466 <- SetJumpCondition(r465)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r496 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r497 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r738 <- Int { value: 8, size: 8 }
         r739 <- Arith(Add, r738, r42)
         r740 <- LoadMem { addr: r739, size: 8 }
         r742 <- Int { value: 24, size: 8 }
         r743 <- Arith(Add, r742, r42)
         r744 <- LoadMem { addr: r743, size: 8 }
         r747 <- Int { value: 5845200, size: 8 }
         r754 <- CArg { value: r740, next_arg: None }
         r755 <- CArg { value: r744, next_arg: Some(r754) }
         r756 <- CArg { value: r85, next_arg: Some(r755) }
         r757 <- Call { callee: r747, first_arg: Some(r756) }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r691 <- Int { value: 8, size: 8 }
         r692 <- Arith(Add, r691, r42)
         r693 <- LoadMem { addr: r692, size: 8 }
         r695 <- Int { value: 40, size: 8 }
         r696 <- Arith(Add, r695, r42)
         r697 <- LoadMem { addr: r696, size: 4 }
         r698 <- Widen { reg: r697, target_size: 8, sign: false }
         r701 <- Int { value: 32, size: 8 }
         r702 <- Arith(Add, r701, r42)
         r703 <- LoadMem { addr: r702, size: 8 }
         r705 <- Int { value: 24, size: 8 }
         r706 <- Arith(Add, r705, r42)
         r707 <- LoadMem { addr: r706, size: 8 }
         r709 <- Int { value: 5845184, size: 8 }
         r716 <- Part { src: r698, offset: 0, size: 4 }
         r721 <- CArg { value: r707, next_arg: None }
         r722 <- CArg { value: r693, next_arg: Some(r721) }
         r723 <- CArg { value: r716, next_arg: Some(r722) }
         r724 <- CArg { value: r703, next_arg: Some(r723) }
         r725 <- CArg { value: r85, next_arg: Some(r724) }
         r726 <- Call { callee: r709, first_arg: Some(r725) }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r498 <- Int { value: 8, size: 8 }
         r499 <- Arith(Add, r498, r85)
         r500 <- LoadMem { addr: r499, size: 4 }
  (  2)  r501 <- Widen { reg: r500, target_size: 8, sign: false }
         r503 <- Part { src: r501, offset: 0, size: 4 }
         r504 <- Part { src: r501, offset: 0, size: 4 }
         r505 <- Arith(BitAnd, r503, r504)
         r507 <- IsZero(r505)
         r512 <- Not(r507)
         r513 <- SetJumpCondition(r512)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r515 <- Int { value: 140, size: 8 }
         r516 <- Arith(Add, r515, r85)
         r517 <- LoadMem { addr: r516, size: 4 }
         r518 <- Int { value: -1, size: 4 }
         r519 <- Arith(Sub, r517, r518)
         r523 <- IsZero(r519)
         r526 <- SetJumpCondition(r523)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r528 <- Int { value: 16, size: 8 }
         r529 <- Arith(Add, r528, r42)
  (  2)  r530 <- LoadMem { addr: r529, size: 8 }
         r532 <- Arith(BitAnd, r530, r530)
         r534 <- IsZero(r532)
         r539 <- SetJumpCondition(r534)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r541 <- Int { value: 144, size: 8 }
         r542 <- Arith(Add, r541, r85)
         r543 <- LoadMem { addr: r542, size: 1 }
         r544 <- Int { value: 1, size: 1 }
         r545 <- Arith(BitAnd, r543, r544)
         r547 <- IsZero(r545)
         r552 <- SetJumpCondition(r547)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r563 <- Int { value: 5844800, size: 8 }
         r566 <- CArg { value: r85, next_arg: None }
         r567 <- Call { callee: r563, first_arg: Some(r566) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r579 <- Int { value: 6951854, size: 8 }
         r580 <- Arith(Add, r579, r11)
         r582 <- Int { value: 5, size: 4 }
         r583 <- Widen { reg: r582, target_size: 8, sign: false }
         r586 <- Int { value: 5852656, size: 8 }
         r591 <- Part { src: r583, offset: 0, size: 4 }
         r594 <- CArg { value: r580, next_arg: None }
         r595 <- CArg { value: r591, next_arg: Some(r594) }
         r596 <- CArg { value: r85, next_arg: Some(r595) }
         r597 <- Call { callee: r586, first_arg: Some(r596) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r624 <- Concat { lo: r623, hi: r85 }
         r625 <- Part { src: r624, offset: 0, size: 8 }
         r626 <- SetReturnValue(r625)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r645 <- Int { value: 5852928, size: 8 }
         r648 <- CArg { value: r85, next_arg: None }
         r649 <- Call { callee: r645, first_arg: Some(r648) }
         r772 <- Upsilon { value: r85, phi_ref: r770 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  2)  r770 <- Phi
         r659 <- Part { src: r770, offset: 0, size: 4 }
         r660 <- Part { src: r770, offset: 0, size: 4 }
         r661 <- Arith(BitXor, r659, r660)
         r662 <- Widen { reg: r661, target_size: 8, sign: false }
         r687 <- Concat { lo: r686, hi: r662 }
         r688 <- Part { src: r687, offset: 0, size: 8 }
         r689 <- SetReturnValue(r688)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) } [r9, r10, r11, r15, r16, r17, r42, r44, r45, r47, r51, r53, r54, r64, r67, r68, r69, r70, r71, r72, r73, r74, r87, r92, r771]
  BlockID(1) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) } [r96, r99, r100, r101, r102, r114, r115, r116, r117, r129, r130, r136, r139, r141, r142, r144, r145, r146]
  BlockID(2) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) } [r150, r155]
  BlockID(3) -> Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) } [r158, r159, r162, r164, r166, r171, r172]
  BlockID(4) -> Always(Block(BlockID(5))) [r175, r176, r178, r180, r181]
  BlockID(5) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) } [r188, r190, r192, r197]
  BlockID(6) -> Always(Block(BlockID(7))) [r200, r201, r203, r205, r206]
  BlockID(7) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) } [r213, r215, r217, r222]
  BlockID(8) -> Always(Block(BlockID(9))) [r225, r226, r228, r230, r231]
  BlockID(9) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) } [r238, r240, r242, r247]
  BlockID(10) -> Always(Block(BlockID(11))) [r250, r251, r253, r255, r256]
  BlockID(11) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) } [r263, r265, r267, r272]
  BlockID(12) -> Always(Block(BlockID(13))) [r275, r276, r278, r280, r281]
  BlockID(13) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) } [r288, r290, r292, r297]
  BlockID(14) -> Always(Block(BlockID(15))) [r300, r301, r303, r305, r306]
  BlockID(15) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) } [r314, r315, r319, r324, r773]
  BlockID(16) -> Always(Block(BlockID(17))) [r769, r327, r332, r333, r334]
  BlockID(17) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) } [r346, r347, r350, r351, r355, r356, r358, r359, r362, r363, r364, r369, r370, r371, r386, r391, r392]
  BlockID(18) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) } [r395, r396, r399, r404, r405, r406, r421, r426, r427]
  BlockID(19) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) } [r431, r438, r443]
  BlockID(20) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) } [r447, r451, r454]
  BlockID(21) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) } [r458, r462, r465, r466]
  BlockID(22) -> Always(Block(BlockID(23))) [r496, r497]
  BlockID(23) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) } [r499, r500, r507, r512, r513]
  BlockID(24) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) } [r516, r517, r519, r523, r526]
  BlockID(25) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) } [r529, r530, r534, r539]
  BlockID(26) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) } [r542, r543, r545, r547, r552]
  BlockID(27) -> Always(Block(BlockID(29))) [r563, r566, r567]
  BlockID(28) -> Always(Block(BlockID(29))) [r580, r586, r591, r594, r595, r596, r597]
  BlockID(29) -> Always(Return) [r626]
  BlockID(30) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) } [r628, r630, r632, r637, r638]
  BlockID(31) -> Always(Block(BlockID(16))) [r641, r774]
  BlockID(32) -> Always(Block(BlockID(33))) [r645, r648, r649, r772]
  BlockID(33) -> Always(Return) [r770, r659, r660, r661, r688, r689]
  BlockID(34) -> Always(Block(BlockID(23))) [r692, r693, r696, r697, r702, r703, r706, r707, r709, r721, r722, r723, r724, r725, r726]
  BlockID(35) -> Always(Block(BlockID(23))) [r739, r740, r743, r744, r747, r754, r755, r756, r757]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  |  |  BlockID(5)
|  |  |  |  |  BlockID(6)
|  |  |  |  |  BlockID(7)
|  |  |  |  |  |  BlockID(8)
|  |  |  |  |  |  BlockID(9)
|  |  |  |  |  |  |  BlockID(10)
|  |  |  |  |  |  |  BlockID(11)
|  |  |  |  |  |  |  |  BlockID(12)
|  |  |  |  |  |  |  |  BlockID(13)
|  |  |  |  |  |  |  |  |  BlockID(14)
|  |  |  |  |  |  |  |  |  BlockID(15)
|  |  |  |  |  |  |  |  |  |  BlockID(16)
|  |  |  |  |  |  |  |  |  |  BlockID(17)
|  |  |  |  |  |  |  |  |  |  |  BlockID(18)
|  |  |  |  |  |  |  |  |  |  |  |  BlockID(19)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(20)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(21)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(22)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(35)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(23)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(24)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(25)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(26)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(27)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(34)
|  |  |  |  |  |  |  |  |  |  |  BlockID(28)
|  |  |  |  |  |  |  |  |  |  |  BlockID(29)
|  |  |  |  |  |  |  |  |  |  BlockID(30)
|  |  |  |  |  |  |  |  |  |  |  BlockID(31)
|  |  BlockID(32)
|  BlockID(33)

 --- ssa
ssa program  775 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
  (  2)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  3)  r11 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
  (  2)  r15 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
         r17 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
  ( 14)  r42 <- FuncArgument { index: 0, reg_type: Bytes(8) }
         r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
         r47 <- Int { value: 272, size: 8 }
         r51 <- Int { value: 1, size: 8 }
         r53 <- ArithK(Add, r10, -16)
         r54 <- StoreMem { addr: r53, value: r15 }
  ( 11)  r64 <- Int { value: 7837792, size: 8 }
         r67 <- Int { value: 7837800, size: 8 }
         r68 <- LoadMem { addr: r67, size: 8 }
         r69 <- LoadMem { addr: r68, size: 8 }
         r70 <- CArg { value: r16, next_arg: None }
         r71 <- CArg { value: r17, next_arg: Some(r70) }
         r72 <- CArg { value: r47, next_arg: Some(r71) }
         r73 <- CArg { value: r51, next_arg: Some(r72) }
         r74 <- Call { callee: r69, first_arg: Some(r73) }
         r87 <- IsZero(r64)
         r92 <- SetJumpCondition(r87)
         r771 <- Upsilon { value: r15, phi_ref: r770 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r96 <- ArithK(Add, r11, 7837920)
         r99 <- Int { value: 7837792, size: 8 }
         r100 <- StoreMem { addr: r99, value: r96 }
         r101 <- Int { value: 5857232, size: 8 }
         r102 <- Call { callee: r101, first_arg: None }
         r114 <- Int { value: 7837944, size: 8 }
         r115 <- StoreMem { addr: r114, value: r102 }
         r116 <- Int { value: 5852912, size: 8 }
  (  2)  r117 <- Call { callee: r116, first_arg: None }
         r129 <- Int { value: 7837944, size: 8 }
         r130 <- LoadMem { addr: r129, size: 8 }
         r136 <- IsZero(r130)
         r139 <- Int { value: 4294967295, size: 4 }
         r141 <- Int { value: 7837932, size: 8 }
         r142 <- StoreMem { addr: r141, value: r139 }
         r144 <- Int { value: 7837952, size: 8 }
         r145 <- StoreMem { addr: r144, value: r117 }
         r146 <- SetJumpCondition(r136)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
         r150 <- IsZero(r117)
         r155 <- SetJumpCondition(r150)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r158 <- ArithK(Add, r42, 4)
  (  7)  r159 <- LoadMem { addr: r158, size: 4 }
         r162 <- Part { src: r159, offset: 0, size: 1 }
         r164 <- ArithK(BitAnd, r162, 1)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r175 <- Int { value: 7837936, size: 8 }
         r176 <- LoadMem { addr: r175, size: 4 }
         r178 <- ArithK(BitOr, r176, 1)
         r180 <- Int { value: 7837936, size: 8 }
         r181 <- StoreMem { addr: r180, value: r178 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r188 <- Part { src: r159, offset: 0, size: 1 }
         r190 <- ArithK(BitAnd, r188, 2)
         r192 <- IsZero(r190)
         r197 <- SetJumpCondition(r192)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r200 <- Int { value: 7837936, size: 8 }
         r201 <- LoadMem { addr: r200, size: 4 }
         r203 <- ArithK(BitOr, r201, 128)
         r205 <- Int { value: 7837936, size: 8 }
         r206 <- StoreMem { addr: r205, value: r203 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r213 <- Part { src: r159, offset: 0, size: 1 }
         r215 <- ArithK(BitAnd, r213, 4)
         r217 <- IsZero(r215)
         r222 <- SetJumpCondition(r217)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r225 <- Int { value: 7837936, size: 8 }
         r226 <- LoadMem { addr: r225, size: 4 }
         r228 <- ArithK(BitOr, r226, 512)
         r230 <- Int { value: 7837936, size: 8 }
         r231 <- StoreMem { addr: r230, value: r228 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r238 <- Part { src: r159, offset: 0, size: 1 }
         r240 <- ArithK(BitAnd, r238, 16)
         r242 <- IsZero(r240)
         r247 <- SetJumpCondition(r242)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r250 <- Int { value: 7837936, size: 8 }
         r251 <- LoadMem { addr: r250, size: 4 }
         r253 <- ArithK(BitOr, r251, 1024)
         r255 <- Int { value: 7837936, size: 8 }
         r256 <- StoreMem { addr: r255, value: r253 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r263 <- Part { src: r159, offset: 0, size: 1 }
         r265 <- ArithK(BitAnd, r263, 32)
         r267 <- IsZero(r265)
         r272 <- SetJumpCondition(r267)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r275 <- Int { value: 7837936, size: 8 }
         r276 <- LoadMem { addr: r275, size: 4 }
         r278 <- ArithK(BitOr, r276, 2048)
         r280 <- Int { value: 7837936, size: 8 }
         r281 <- StoreMem { addr: r280, value: r278 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r288 <- Part { src: r159, offset: 0, size: 1 }
         r290 <- ArithK(BitAnd, r288, 64)
         r292 <- IsZero(r290)
         r297 <- SetJumpCondition(r292)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r300 <- Int { value: 7837936, size: 8 }
         r301 <- LoadMem { addr: r300, size: 4 }
         r303 <- ArithK(BitOr, r301, 4096)
         r305 <- Int { value: 7837936, size: 8 }
         r306 <- StoreMem { addr: r305, value: r303 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r314 <- ArithK(Add, r42, 64)
  (  2)  r315 <- LoadMem { addr: r314, size: 8 }
         r319 <- IsZero(r315)
         r324 <- SetJumpCondition(r319)
         r773 <- Upsilon { value: r315, phi_ref: r769 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r628 <- Part { src: r159, offset: 0, size: 1 }
         r630 <- ArithK(BitAnd, r628, 8)
         r632 <- IsZero(r630)
         r637 <- Not(r632)
         r638 <- SetJumpCondition(r637)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r641 <- ArithK(Add, r11, 5846864)
         r774 <- Upsilon { value: r641, phi_ref: r769 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r769 <- Phi
         r327 <- Int { value: 5853696, size: 8 }
         r332 <- CArg { value: r769, next_arg: None }
         r333 <- CArg { value: r64, next_arg: Some(r332) }
         r334 <- Call { callee: r327, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r346 <- ArithK(Add, r42, 48)
         r347 <- LoadMem { addr: r346, size: 8 }
         r350 <- ArithK(Add, r42, 8)
         r351 <- LoadMem { addr: r350, size: 8 }
         r355 <- Int { value: 7838032, size: 8 }
         r356 <- StoreMem { addr: r355, value: r347 }
         r358 <- ArithK(Add, r42, 56)
         r359 <- LoadMem { addr: r358, size: 8 }
         r362 <- Int { value: 7838040, size: 8 }
         r363 <- StoreMem { addr: r362, value: r359 }
         r364 <- Int { value: 5842752, size: 8 }
         r369 <- CArg { value: r351, next_arg: None }
         r370 <- CArg { value: r64, next_arg: Some(r369) }
         r371 <- Call { callee: r364, first_arg: Some(r370) }
         r386 <- IsZero(r371)
         r391 <- Not(r386)
         r392 <- SetJumpCondition(r391)
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r395 <- ArithK(Add, r42, 16)
         r396 <- LoadMem { addr: r395, size: 8 }
         r399 <- Int { value: 5844704, size: 8 }
         r404 <- CArg { value: r396, next_arg: None }
         r405 <- CArg { value: r64, next_arg: Some(r404) }
         r406 <- Call { callee: r399, first_arg: Some(r405) }
         r421 <- IsZero(r406)
         r426 <- Not(r421)
         r427 <- SetJumpCondition(r426)
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
  (  3)  r431 <- LoadMem { addr: r42, size: 4 }
         r438 <- IsZero(r431)
         r443 <- SetJumpCondition(r438)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r447 <- ArithK(Add, r431, -1)
         r451 <- IsZero(r447)
         r454 <- SetJumpCondition(r451)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r458 <- ArithK(Add, r431, -2)
         r462 <- IsZero(r458)
         r465 <- Not(r462)
         r466 <- SetJumpCondition(r465)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r496 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r497 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r739 <- ArithK(Add, r42, 8)
         r740 <- LoadMem { addr: r739, size: 8 }
         r743 <- ArithK(Add, r42, 24)
         r744 <- LoadMem { addr: r743, size: 8 }
         r747 <- Int { value: 5845200, size: 8 }
         r754 <- CArg { value: r740, next_arg: None }
         r755 <- CArg { value: r744, next_arg: Some(r754) }
         r756 <- CArg { value: r64, next_arg: Some(r755) }
         r757 <- Call { callee: r747, first_arg: Some(r756) }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r692 <- ArithK(Add, r42, 8)
         r693 <- LoadMem { addr: r692, size: 8 }
         r696 <- ArithK(Add, r42, 40)
         r697 <- LoadMem { addr: r696, size: 4 }
         r702 <- ArithK(Add, r42, 32)
         r703 <- LoadMem { addr: r702, size: 8 }
         r706 <- ArithK(Add, r42, 24)
         r707 <- LoadMem { addr: r706, size: 8 }
         r709 <- Int { value: 5845184, size: 8 }
         r721 <- CArg { value: r707, next_arg: None }
         r722 <- CArg { value: r693, next_arg: Some(r721) }
         r723 <- CArg { value: r697, next_arg: Some(r722) }
         r724 <- CArg { value: r703, next_arg: Some(r723) }
         r725 <- CArg { value: r64, next_arg: Some(r724) }
         r726 <- Call { callee: r709, first_arg: Some(r725) }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r499 <- Int { value: 7837800, size: 8 }
         r500 <- LoadMem { addr: r499, size: 4 }
         r507 <- IsZero(r500)
         r512 <- Not(r507)
         r513 <- SetJumpCondition(r512)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r516 <- Int { value: 7837932, size: 8 }
         r517 <- LoadMem { addr: r516, size: 4 }
         r519 <- ArithK(Add, r517, 1)
         r523 <- IsZero(r519)
         r526 <- SetJumpCondition(r523)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r529 <- ArithK(Add, r42, 16)
         r530 <- LoadMem { addr: r529, size: 8 }
         r534 <- IsZero(r530)
         r539 <- SetJumpCondition(r534)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r542 <- Int { value: 7837936, size: 8 }
         r543 <- LoadMem { addr: r542, size: 1 }
         r545 <- ArithK(BitAnd, r543, 1)
         r547 <- IsZero(r545)
         r552 <- SetJumpCondition(r547)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r563 <- Int { value: 5844800, size: 8 }
         r566 <- CArg { value: r64, next_arg: None }
         r567 <- Call { callee: r563, first_arg: Some(r566) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r580 <- ArithK(Add, r11, 6951854)
         r586 <- Int { value: 5852656, size: 8 }
         r591 <- Int { value: 5, size: 4 }
         r594 <- CArg { value: r580, next_arg: None }
         r595 <- CArg { value: r591, next_arg: Some(r594) }
         r596 <- CArg { value: r64, next_arg: Some(r595) }
         r597 <- Call { callee: r586, first_arg: Some(r596) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r626 <- SetReturnValue(r64)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r645 <- Int { value: 5852928, size: 8 }
         r648 <- CArg { value: r64, next_arg: None }
         r649 <- Call { callee: r645, first_arg: Some(r648) }
         r772 <- Upsilon { value: r64, phi_ref: r770 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  2)  r770 <- Phi
         r659 <- Part { src: r770, offset: 0, size: 4 }
         r660 <- Part { src: r770, offset: 0, size: 4 }
         r661 <- Arith(BitXor, r659, r660)
         r688 <- Widen { reg: r661, target_size: 8, sign: false }
         r689 <- SetReturnValue(r688)


 --- ast

T0: {
  let r42: Bytes(8) = $arg0;
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:RBX;
  [[7837800]:8]:8(1,
                  272,
                  pre:RDX,
                  pre:RCX);
  ;
  r770 := pre:RBX;
  if IsZero (7837792) {
    goto T33
  }
  [7837792]:* := pre:RIP + 7837920;
  hi_sdsempty();
  [7837944]:* := hi_sdsempty();
  let r117: Bytes(8) = redisReaderCreate();
  [7837932]:* := 4294967295;
  [7837952]:* := r117;
  ;
  if IsZero ([7837944]:8) {
    goto T32
  }
  ;
  if IsZero (r117) {
    goto T32
  }
  let r159: Bytes(4) = [r42 + 4]:4;
  ;
  if ! IsZero (r159[1 .. 0] & 1) {
    goto T5
  }
  [7837936]:* := [7837936]:4 | 1;
  goto T5
  T5: {
    ;
    if IsZero (r159[1 .. 0] & 2) {
      goto T7
    }
    [7837936]:* := [7837936]:4 | 128;
    goto T7
    T7: {
      ;
      if IsZero (r159[1 .. 0] & 4) {
        goto T9
      }
      [7837936]:* := [7837936]:4 | 512;
      goto T9
      T9: {
        ;
        if IsZero (r159[1 .. 0] & 16) {
          goto T11
        }
        [7837936]:* := [7837936]:4 | 1024;
        goto T11
        T11: {
          ;
          if IsZero (r159[1 .. 0] & 32) {
            goto T13
          }
          [7837936]:* := [7837936]:4 | 2048;
          goto T13
          T13: {
            ;
            if IsZero (r159[1 .. 0] & 64) {
              goto T15
            }
            [7837936]:* := [7837936]:4 | 4096;
            goto T15
            T15: {
              let r315: Bytes(8) = [r42 + 64]:8;
              ;
              r769 := [r42 + 64]:8;
              if IsZero (r315) {
                ;
                if ! IsZero (r159[1 .. 0] & 8) {
                  goto T17
                }
                r769 := pre:RIP + 5846864;
                goto T16
              }
              goto T16
              T16: {
                let mut r769: Bytes(8);
                redisSetPushCallback(7837792,
                                     r769);
                goto T17
              }
              
              T17: {
                [7838032]:* := [r42 + 48]:8;
                [7838040]:* := [r42 + 56]:8;
                redisContextUpdateConnectTimeout(7837792,
                                                 [r42 + 8]:8);
                ;
                if ! IsZero (redisContextUpdateConnectTimeout(7837792,
                                                              [r42 + 8]:8)) {
                  goto T28
                }
                redisContextUpdateCommandTimeout(7837792,
                                                 [r42 + 16]:8);
                ;
                if ! IsZero (redisContextUpdateCommandTimeout(7837792,
                                                              [r42 + 16]:8)) {
                  goto T28
                }
                let r431: Bytes(4) = [r42]:4;
                ;
                if IsZero (r431) {
                  redisContextConnectBindTcp(7837792,
                                             [r42 + 32]:8,
                                             [r42 + 40]:4,
                                             [r42 + 8]:8,
                                             [r42 + 24]:8);
                  goto T23
                }
                ;
                if IsZero (r431 - 1) {
                  redisContextConnectUnix(7837792,
                                          [r42 + 24]:8,
                                          [r42 + 8]:8);
                  goto T23
                }
                ;
                if ! IsZero (r431 - 2) {
                  goto T32
                }
                TODO /* unsupported: punpckldq xmm0,xmm1 */;
                TODO /* unsupported: movq [rbx+8Ch],xmm0 */;
                goto T23
                T23: {
                  ;
                  if ! IsZero ([7837800]:4) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837932]:4 + 1) {
                    goto T29
                  }
                  ;
                  if IsZero ([r42 + 16]:8) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837936]:1 & 1) {
                    goto T29
                  }
                  redisContextSetTimeout(7837792);
                  goto T29
                }
                
                T28: {
                  __redisSetError(7837792,
                                  5,
                                  (pre:RIP + 6951854));
                  goto T29
                }
                
                T29: {
                  ;
                  return 7837792
                }
              
              }
            
            }
          
          }
        
        }
      
      }
    
    }
  
  }
  
  T32: {
    redisFree(7837792);
    r770 := 7837792;
    goto T33
  }
  
  T33: {
    let mut r770: Bytes(8);
    ;
    return (r770[4 .. 0] ^ r770[4 .. 0]) as u64
  }

}
