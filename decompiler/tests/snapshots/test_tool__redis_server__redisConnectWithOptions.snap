---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  760 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
0x595210:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x595211:
   47 r45: TypeID(2v1) <- Const { value: 272, size: 4 }
   48 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   49 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x595216:
   50 r11: TypeID(2v1) <- Get(r14)
0x595219:
   51 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
   52 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
   53 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59521e:
   54 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   55 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x59521f:
   56 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   57 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   58 r12: TypeID(2v1) <- Get(r12)
   59 r10: TypeID(2v1) <- OverflowOf(r12)
   60 r2: TypeID(2v1) <- CarryOf(r12)
   61 r6: TypeID(2v1) <- SignOf(r12)
   62 r5: TypeID(2v1) <- IsZero(r12)
   63 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   64 r3: TypeID(2v1) <- Parity(r47)
0x595223:
   65 r45: TypeID(2v1) <- Const { value: 7837792, size: 8 }
   66 r16: TypeID(2v1) <- Get(r45)
0x59522a:
   67 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
   68 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
   69 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
   70 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
   71 r47: TypeID(2v1) <- Const { value: 8, size: 8 }
   72 r47: TypeID(2v1) <- Arith(Add, r47, r16)
   73 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
   74 r46: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   75 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
   76 r2: TypeID(2v1) <- Undefined
   77 r3: TypeID(2v1) <- Undefined
   78 r4: TypeID(2v1) <- Undefined
   79 r5: TypeID(2v1) <- Undefined
   80 r6: TypeID(2v1) <- Undefined
   81 r7: TypeID(2v1) <- Undefined
   82 r8: TypeID(2v1) <- Undefined
   83 r9: TypeID(2v1) <- Undefined
   84 r10: TypeID(2v1) <- Undefined
   85 r45: TypeID(2v1) <- Get(r16)
0x59522d:
   86 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
   87 r6: TypeID(2v1) <- SignOf(r16)
   88 r5: TypeID(2v1) <- IsZero(r16)
   89 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   90 r3: TypeID(2v1) <- Parity(r16)
   91 r2: TypeID(2v1) <- False
   92 r10: TypeID(2v1) <- False
0x595230:
   93 r45: TypeID(2v1) <- SetJumpCondition(r5)
   94 r45: TypeID(2v1) <- Control(JmpIf(650))
0x595236:
   95 r17: TypeID(2v1) <- Get(r16)
0x595239:
   96 r45: TypeID(2v1) <- Const { value: 7837920, size: 8 }
   97 r45: TypeID(2v1) <- Arith(Add, r45, r13)
   98 r16: TypeID(2v1) <- Get(r45)
0x595240:
   99 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  100 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  101 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x595243:
  102 r46: TypeID(297702v1) <- Const { value: 5857232, size: 8 }
  103 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  104 r2: TypeID(2v1) <- Undefined
  105 r3: TypeID(2v1) <- Undefined
  106 r4: TypeID(2v1) <- Undefined
  107 r5: TypeID(2v1) <- Undefined
  108 r6: TypeID(2v1) <- Undefined
  109 r7: TypeID(2v1) <- Undefined
  110 r8: TypeID(2v1) <- Undefined
  111 r9: TypeID(2v1) <- Undefined
  112 r10: TypeID(2v1) <- Undefined
  113 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x595248:
  114 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  115 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  116 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x59524f:
  117 r46: TypeID(298074v1) <- Const { value: 5852912, size: 8 }
  118 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  119 r2: TypeID(2v1) <- Undefined
  120 r3: TypeID(2v1) <- Undefined
  121 r4: TypeID(2v1) <- Undefined
  122 r5: TypeID(2v1) <- Undefined
  123 r6: TypeID(2v1) <- Undefined
  124 r7: TypeID(2v1) <- Undefined
  125 r8: TypeID(2v1) <- Undefined
  126 r9: TypeID(2v1) <- Undefined
  127 r10: TypeID(2v1) <- Undefined
  128 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x595254:
  129 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  130 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  131 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  132 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  133 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  134 r10: TypeID(2v1) <- OverflowOf(r45)
  135 r2: TypeID(2v1) <- CarryOf(r45)
  136 r6: TypeID(2v1) <- SignOf(r45)
  137 r5: TypeID(2v1) <- IsZero(r45)
  138 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  139 r3: TypeID(2v1) <- Parity(r48)
0x59525c:
  140 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  141 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  142 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  143 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x595266:
  144 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  145 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  146 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x59526d:
  147 r45: TypeID(2v1) <- SetJumpCondition(r5)
  148 r45: TypeID(2v1) <- Control(JmpIf(635))
0x595273:
  149 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  150 r6: TypeID(2v1) <- SignOf(r16)
  151 r5: TypeID(2v1) <- IsZero(r16)
  152 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  153 r3: TypeID(2v1) <- Parity(r16)
  154 r2: TypeID(2v1) <- False
  155 r10: TypeID(2v1) <- False
0x595276:
  156 r45: TypeID(2v1) <- SetJumpCondition(r5)
  157 r45: TypeID(2v1) <- Control(JmpIf(635))
0x59527c:
  158 r46: TypeID(2v1) <- Const { value: 4, size: 8 }
  159 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  160 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  161 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  162 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59527f:
  163 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  164 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  165 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  166 r6: TypeID(2v1) <- SignOf(r46)
  167 r5: TypeID(2v1) <- IsZero(r46)
  168 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  169 r3: TypeID(2v1) <- Parity(r46)
  170 r2: TypeID(2v1) <- False
  171 r10: TypeID(2v1) <- False
0x595281:
  172 r45: TypeID(2v1) <- Not(r5)
  173 r46: TypeID(2v1) <- SetJumpCondition(r45)
  174 r46: TypeID(2v1) <- Control(JmpIf(189))
0x595283:
  175 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  176 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  177 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  178 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  179 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  180 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  181 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  182 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  183 r10: TypeID(2v1) <- False
  184 r2: TypeID(2v1) <- False
  185 r6: TypeID(2v1) <- SignOf(r45)
  186 r5: TypeID(2v1) <- IsZero(r45)
  187 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  188 r3: TypeID(2v1) <- Parity(r49)
0x59528a:
  189 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  190 r47: TypeID(2v1) <- Const { value: 2, size: 1 }
  191 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  192 r6: TypeID(2v1) <- SignOf(r46)
  193 r5: TypeID(2v1) <- IsZero(r46)
  194 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  195 r3: TypeID(2v1) <- Parity(r46)
  196 r2: TypeID(2v1) <- False
  197 r10: TypeID(2v1) <- False
0x59528c:
  198 r45: TypeID(2v1) <- SetJumpCondition(r5)
  199 r45: TypeID(2v1) <- Control(JmpIf(214))
0x59528e:
  200 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  201 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  202 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  203 r47: TypeID(2v1) <- Const { value: 128, size: 4 }
  204 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  205 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  206 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  207 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  208 r10: TypeID(2v1) <- False
  209 r2: TypeID(2v1) <- False
  210 r6: TypeID(2v1) <- SignOf(r45)
  211 r5: TypeID(2v1) <- IsZero(r45)
  212 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  213 r3: TypeID(2v1) <- Parity(r49)
0x595298:
  214 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  215 r47: TypeID(2v1) <- Const { value: 4, size: 1 }
  216 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  217 r6: TypeID(2v1) <- SignOf(r46)
  218 r5: TypeID(2v1) <- IsZero(r46)
  219 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  220 r3: TypeID(2v1) <- Parity(r46)
  221 r2: TypeID(2v1) <- False
  222 r10: TypeID(2v1) <- False
0x59529a:
  223 r45: TypeID(2v1) <- SetJumpCondition(r5)
  224 r45: TypeID(2v1) <- Control(JmpIf(239))
0x59529c:
  225 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  226 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  227 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  228 r47: TypeID(2v1) <- Const { value: 512, size: 4 }
  229 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  230 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  231 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  232 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  233 r10: TypeID(2v1) <- False
  234 r2: TypeID(2v1) <- False
  235 r6: TypeID(2v1) <- SignOf(r45)
  236 r5: TypeID(2v1) <- IsZero(r45)
  237 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  238 r3: TypeID(2v1) <- Parity(r49)
0x5952a6:
  239 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  240 r47: TypeID(2v1) <- Const { value: 16, size: 1 }
  241 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  242 r6: TypeID(2v1) <- SignOf(r46)
  243 r5: TypeID(2v1) <- IsZero(r46)
  244 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  245 r3: TypeID(2v1) <- Parity(r46)
  246 r2: TypeID(2v1) <- False
  247 r10: TypeID(2v1) <- False
0x5952a8:
  248 r45: TypeID(2v1) <- SetJumpCondition(r5)
  249 r45: TypeID(2v1) <- Control(JmpIf(264))
0x5952aa:
  250 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  251 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  252 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  253 r47: TypeID(2v1) <- Const { value: 1024, size: 4 }
  254 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  255 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  256 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  257 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  258 r10: TypeID(2v1) <- False
  259 r2: TypeID(2v1) <- False
  260 r6: TypeID(2v1) <- SignOf(r45)
  261 r5: TypeID(2v1) <- IsZero(r45)
  262 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  263 r3: TypeID(2v1) <- Parity(r49)
0x5952b4:
  264 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  265 r47: TypeID(2v1) <- Const { value: 32, size: 1 }
  266 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  267 r6: TypeID(2v1) <- SignOf(r46)
  268 r5: TypeID(2v1) <- IsZero(r46)
  269 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  270 r3: TypeID(2v1) <- Parity(r46)
  271 r2: TypeID(2v1) <- False
  272 r10: TypeID(2v1) <- False
0x5952b6:
  273 r45: TypeID(2v1) <- SetJumpCondition(r5)
  274 r45: TypeID(2v1) <- Control(JmpIf(289))
0x5952b8:
  275 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  276 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  277 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  278 r47: TypeID(2v1) <- Const { value: 2048, size: 4 }
  279 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  280 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  281 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  282 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  283 r10: TypeID(2v1) <- False
  284 r2: TypeID(2v1) <- False
  285 r6: TypeID(2v1) <- SignOf(r45)
  286 r5: TypeID(2v1) <- IsZero(r45)
  287 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  288 r3: TypeID(2v1) <- Parity(r49)
0x5952c2:
  289 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  290 r47: TypeID(2v1) <- Const { value: 64, size: 1 }
  291 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  292 r6: TypeID(2v1) <- SignOf(r46)
  293 r5: TypeID(2v1) <- IsZero(r46)
  294 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  295 r3: TypeID(2v1) <- Parity(r46)
  296 r2: TypeID(2v1) <- False
  297 r10: TypeID(2v1) <- False
0x5952c4:
  298 r45: TypeID(2v1) <- SetJumpCondition(r5)
  299 r45: TypeID(2v1) <- Control(JmpIf(314))
0x5952c6:
  300 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  301 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  302 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  303 r47: TypeID(2v1) <- Const { value: 4096, size: 4 }
  304 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  305 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  306 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  307 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  308 r10: TypeID(2v1) <- False
  309 r2: TypeID(2v1) <- False
  310 r6: TypeID(2v1) <- SignOf(r45)
  311 r5: TypeID(2v1) <- IsZero(r45)
  312 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  313 r3: TypeID(2v1) <- Parity(r49)
0x5952d0:
  314 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
  315 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  316 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  317 r15: TypeID(2v1) <- Get(r45)
0x5952d4:
  318 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  319 r6: TypeID(2v1) <- SignOf(r15)
  320 r5: TypeID(2v1) <- IsZero(r15)
  321 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  322 r3: TypeID(2v1) <- Parity(r15)
  323 r2: TypeID(2v1) <- False
  324 r10: TypeID(2v1) <- False
0x5952d7:
  325 r45: TypeID(2v1) <- SetJumpCondition(r5)
  326 r45: TypeID(2v1) <- Control(JmpIf(619))
0x5952dd:
  327 r14: TypeID(2v1) <- Get(r17)
0x5952e0:
  328 r45: TypeID(2v1) <- Void
  329 r45: TypeID(2v1) <- Get(r14)
  330 r46: TypeID(2v1) <- Void
  331 r46: TypeID(2v1) <- Get(r15)
  332 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  333 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  334 r48: TypeID(297899v1) <- Const { value: 5853696, size: 8 }
  335 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  336 r2: TypeID(2v1) <- Undefined
  337 r3: TypeID(2v1) <- Undefined
  338 r4: TypeID(2v1) <- Undefined
  339 r5: TypeID(2v1) <- Undefined
  340 r6: TypeID(2v1) <- Undefined
  341 r7: TypeID(2v1) <- Undefined
  342 r8: TypeID(2v1) <- Undefined
  343 r9: TypeID(2v1) <- Undefined
  344 r10: TypeID(2v1) <- Undefined
  345 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5952e5:
  346 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  347 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  348 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  349 r16: TypeID(2v1) <- Get(r45)
0x5952e9:
  350 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  351 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  352 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  353 r15: TypeID(2v1) <- Get(r45)
0x5952ed:
  354 r14: TypeID(2v1) <- Get(r17)
0x5952f0:
  355 r46: TypeID(2v1) <- Const { value: 240, size: 8 }
  356 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  357 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5952f7:
  358 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  359 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  360 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  361 r16: TypeID(2v1) <- Get(r45)
0x5952fb:
  362 r46: TypeID(2v1) <- Const { value: 248, size: 8 }
  363 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  364 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x595302:
  365 r45: TypeID(2v1) <- Void
  366 r45: TypeID(2v1) <- Get(r14)
  367 r46: TypeID(2v1) <- Void
  368 r46: TypeID(2v1) <- Get(r15)
  369 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  370 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  371 r48: TypeID(297630v1) <- Const { value: 5842752, size: 8 }
  372 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  373 r2: TypeID(2v1) <- Undefined
  374 r3: TypeID(2v1) <- Undefined
  375 r4: TypeID(2v1) <- Undefined
  376 r5: TypeID(2v1) <- Undefined
  377 r6: TypeID(2v1) <- Undefined
  378 r7: TypeID(2v1) <- Undefined
  379 r8: TypeID(2v1) <- Undefined
  380 r9: TypeID(2v1) <- Undefined
  381 r10: TypeID(2v1) <- Undefined
  382 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x595307:
  383 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  384 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  385 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  386 r6: TypeID(2v1) <- SignOf(r46)
  387 r5: TypeID(2v1) <- IsZero(r46)
  388 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  389 r3: TypeID(2v1) <- Parity(r46)
  390 r2: TypeID(2v1) <- False
  391 r10: TypeID(2v1) <- False
0x595309:
  392 r45: TypeID(2v1) <- Not(r5)
  393 r46: TypeID(2v1) <- SetJumpCondition(r45)
  394 r46: TypeID(2v1) <- Control(JmpIf(570))
0x59530f:
  395 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  396 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  397 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  398 r15: TypeID(2v1) <- Get(r45)
0x595313:
  399 r14: TypeID(2v1) <- Get(r17)
0x595316:
  400 r45: TypeID(2v1) <- Void
  401 r45: TypeID(2v1) <- Get(r14)
  402 r46: TypeID(2v1) <- Void
  403 r46: TypeID(2v1) <- Get(r15)
  404 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  405 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  406 r48: TypeID(297627v1) <- Const { value: 5844704, size: 8 }
  407 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  408 r2: TypeID(2v1) <- Undefined
  409 r3: TypeID(2v1) <- Undefined
  410 r4: TypeID(2v1) <- Undefined
  411 r5: TypeID(2v1) <- Undefined
  412 r6: TypeID(2v1) <- Undefined
  413 r7: TypeID(2v1) <- Undefined
  414 r8: TypeID(2v1) <- Undefined
  415 r9: TypeID(2v1) <- Undefined
  416 r10: TypeID(2v1) <- Undefined
  417 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x59531b:
  418 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  419 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  420 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  421 r6: TypeID(2v1) <- SignOf(r46)
  422 r5: TypeID(2v1) <- IsZero(r46)
  423 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  424 r3: TypeID(2v1) <- Parity(r46)
  425 r2: TypeID(2v1) <- False
  426 r10: TypeID(2v1) <- False
0x59531d:
  427 r45: TypeID(2v1) <- Not(r5)
  428 r46: TypeID(2v1) <- SetJumpCondition(r45)
  429 r46: TypeID(2v1) <- Control(JmpIf(570))
0x59531f:
  430 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  431 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  432 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  433 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  434 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x595322:
  435 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  436 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  437 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  438 r6: TypeID(2v1) <- SignOf(r46)
  439 r5: TypeID(2v1) <- IsZero(r46)
  440 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  441 r3: TypeID(2v1) <- Parity(r46)
  442 r2: TypeID(2v1) <- False
  443 r10: TypeID(2v1) <- False
0x595324:
  444 r45: TypeID(2v1) <- SetJumpCondition(r5)
  445 r45: TypeID(2v1) <- Control(JmpIf(682))
0x59532a:
  446 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  447 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  448 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  449 r10: TypeID(2v1) <- OverflowOf(r46)
  450 r2: TypeID(2v1) <- CarryOf(r46)
  451 r6: TypeID(2v1) <- SignOf(r46)
  452 r5: TypeID(2v1) <- IsZero(r46)
  453 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  454 r3: TypeID(2v1) <- Parity(r48)
0x59532d:
  455 r45: TypeID(2v1) <- SetJumpCondition(r5)
  456 r45: TypeID(2v1) <- Control(JmpIf(729))
0x595333:
  457 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  458 r47: TypeID(2v1) <- Const { value: 2, size: 4 }
  459 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  460 r10: TypeID(2v1) <- OverflowOf(r46)
  461 r2: TypeID(2v1) <- CarryOf(r46)
  462 r6: TypeID(2v1) <- SignOf(r46)
  463 r5: TypeID(2v1) <- IsZero(r46)
  464 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  465 r3: TypeID(2v1) <- Parity(r48)
0x595336:
  466 r45: TypeID(2v1) <- Not(r5)
  467 r46: TypeID(2v1) <- SetJumpCondition(r45)
  468 r46: TypeID(2v1) <- Control(JmpIf(635))
0x59533c:
  469 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  470 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  471 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  472 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  473 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x595342:
  474 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
0x595347:
  475 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  476 r47: TypeID(2v1) <- Const { value: 2, size: 4 }
  477 r46: TypeID(2v1) <- Arith(BitOr, r46, r47)
  478 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  479 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  480 r10: TypeID(2v1) <- False
  481 r2: TypeID(2v1) <- False
  482 r6: TypeID(2v1) <- SignOf(r46)
  483 r5: TypeID(2v1) <- IsZero(r46)
  484 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  485 r3: TypeID(2v1) <- Parity(r49)
0x59534a:
  486 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movd xmm1,eax")
0x59534e:
  487 r45: TypeID(2v1) <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
0x595352:
  488 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
0x59535a:
  489 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  490 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  491 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  492 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  493 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59535d:
  494 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  495 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  496 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  497 r6: TypeID(2v1) <- SignOf(r46)
  498 r5: TypeID(2v1) <- IsZero(r46)
  499 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  500 r3: TypeID(2v1) <- Parity(r46)
  501 r2: TypeID(2v1) <- False
  502 r10: TypeID(2v1) <- False
0x59535f:
  503 r45: TypeID(2v1) <- Not(r5)
  504 r46: TypeID(2v1) <- SetJumpCondition(r45)
  505 r46: TypeID(2v1) <- Control(JmpIf(598))
0x595361:
  506 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  507 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  508 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  509 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  510 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  511 r10: TypeID(2v1) <- OverflowOf(r45)
  512 r2: TypeID(2v1) <- CarryOf(r45)
  513 r6: TypeID(2v1) <- SignOf(r45)
  514 r5: TypeID(2v1) <- IsZero(r45)
  515 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  516 r3: TypeID(2v1) <- Parity(r48)
0x595368:
  517 r45: TypeID(2v1) <- SetJumpCondition(r5)
  518 r45: TypeID(2v1) <- Control(JmpIf(598))
0x59536a:
  519 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  520 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  521 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  522 r16: TypeID(2v1) <- Get(r45)
0x59536e:
  523 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  524 r6: TypeID(2v1) <- SignOf(r16)
  525 r5: TypeID(2v1) <- IsZero(r16)
  526 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  527 r3: TypeID(2v1) <- Parity(r16)
  528 r2: TypeID(2v1) <- False
  529 r10: TypeID(2v1) <- False
0x595371:
  530 r45: TypeID(2v1) <- SetJumpCondition(r5)
  531 r45: TypeID(2v1) <- Control(JmpIf(598))
0x595373:
  532 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  533 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  534 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  535 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  536 r45: TypeID(2v1) <- Arith(BitAnd, r45, r47)
  537 r6: TypeID(2v1) <- SignOf(r45)
  538 r5: TypeID(2v1) <- IsZero(r45)
  539 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  540 r3: TypeID(2v1) <- Parity(r45)
  541 r2: TypeID(2v1) <- False
  542 r10: TypeID(2v1) <- False
0x59537a:
  543 r45: TypeID(2v1) <- SetJumpCondition(r5)
  544 r45: TypeID(2v1) <- Control(JmpIf(598))
0x59537c:
  545 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  546 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  547 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  548 r15: TypeID(2v1) <- Get(r45)
0x59537f:
  549 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  550 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  551 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  552 r19: TypeID(2v1) <- Get(r45)
0x595383:
  553 r14: TypeID(2v1) <- Get(r17)
0x595386:
  554 r45: TypeID(2v1) <- Void
  555 r45: TypeID(2v1) <- Get(r14)
  556 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  557 r47: TypeID(297633v1) <- Const { value: 5844800, size: 8 }
  558 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  559 r2: TypeID(2v1) <- Undefined
  560 r3: TypeID(2v1) <- Undefined
  561 r4: TypeID(2v1) <- Undefined
  562 r5: TypeID(2v1) <- Undefined
  563 r6: TypeID(2v1) <- Undefined
  564 r7: TypeID(2v1) <- Undefined
  565 r8: TypeID(2v1) <- Undefined
  566 r9: TypeID(2v1) <- Undefined
  567 r10: TypeID(2v1) <- Undefined
  568 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59538b:
  569 r45: TypeID(2v1) <- Control(Jmp(598))
0x595390:
  570 r45: TypeID(2v1) <- Const { value: 6951854, size: 8 }
  571 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  572 r19: TypeID(2v1) <- Get(r45)
0x595397:
  573 r45: TypeID(2v1) <- Const { value: 5, size: 4 }
  574 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  575 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59539c:
  576 r14: TypeID(2v1) <- Get(r17)
0x59539f:
  577 r45: TypeID(2v1) <- Void
  578 r45: TypeID(2v1) <- Get(r14)
  579 r46: TypeID(2v1) <- Void
  580 r46: TypeID(2v1) <- Get(r15)
  581 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  582 r47: TypeID(2v1) <- Void
  583 r47: TypeID(2v1) <- Get(r19)
  584 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  585 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  586 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  587 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  588 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  589 r2: TypeID(2v1) <- Undefined
  590 r3: TypeID(2v1) <- Undefined
  591 r4: TypeID(2v1) <- Undefined
  592 r5: TypeID(2v1) <- Undefined
  593 r6: TypeID(2v1) <- Undefined
  594 r7: TypeID(2v1) <- Undefined
  595 r8: TypeID(2v1) <- Undefined
  596 r9: TypeID(2v1) <- Undefined
  597 r10: TypeID(2v1) <- Undefined
0x5953a4:
  598 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  599 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  600 r12: TypeID(2v1) <- Get(r12)
  601 r10: TypeID(2v1) <- OverflowOf(r12)
  602 r2: TypeID(2v1) <- CarryOf(r12)
  603 r6: TypeID(2v1) <- SignOf(r12)
  604 r5: TypeID(2v1) <- IsZero(r12)
  605 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  606 r3: TypeID(2v1) <- Parity(r47)
0x5953a8:
  607 r16: TypeID(2v1) <- Get(r17)
0x5953ab:
  608 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  609 r17: TypeID(2v1) <- Get(r45)
  610 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953ac:
  611 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  612 r11: TypeID(2v1) <- Get(r45)
  613 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953ad:
  614 r45: TypeID(2v1) <- Void
  615 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  616 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  617 r47: TypeID(2v1) <- SetReturnValue(r45)
  618 r47: TypeID(2v1) <- Control(Ret)
0x5953b0:
  619 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  620 r47: TypeID(2v1) <- Const { value: 8, size: 1 }
  621 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  622 r6: TypeID(2v1) <- SignOf(r46)
  623 r5: TypeID(2v1) <- IsZero(r46)
  624 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  625 r3: TypeID(2v1) <- Parity(r46)
  626 r2: TypeID(2v1) <- False
  627 r10: TypeID(2v1) <- False
0x5953b2:
  628 r45: TypeID(2v1) <- Not(r5)
  629 r46: TypeID(2v1) <- SetJumpCondition(r45)
  630 r46: TypeID(2v1) <- Control(JmpIf(346))
0x5953b8:
  631 r45: TypeID(2v1) <- Const { value: 5846864, size: 8 }
  632 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  633 r15: TypeID(2v1) <- Get(r45)
0x5953bf:
  634 r45: TypeID(2v1) <- Control(Jmp(327))
0x5953c8:
  635 r14: TypeID(2v1) <- Get(r17)
0x5953cb:
  636 r45: TypeID(2v1) <- Void
  637 r45: TypeID(2v1) <- Get(r14)
  638 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  639 r47: TypeID(298045v1) <- Const { value: 5852928, size: 8 }
  640 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  641 r2: TypeID(2v1) <- Undefined
  642 r3: TypeID(2v1) <- Undefined
  643 r4: TypeID(2v1) <- Undefined
  644 r5: TypeID(2v1) <- Undefined
  645 r6: TypeID(2v1) <- Undefined
  646 r7: TypeID(2v1) <- Undefined
  647 r8: TypeID(2v1) <- Undefined
  648 r9: TypeID(2v1) <- Undefined
  649 r10: TypeID(2v1) <- Undefined
0x5953d0:
  650 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  651 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  652 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  653 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  654 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  655 r10: TypeID(2v1) <- False
  656 r2: TypeID(2v1) <- False
  657 r6: TypeID(2v1) <- SignOf(r46)
  658 r5: TypeID(2v1) <- IsZero(r46)
  659 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  660 r3: TypeID(2v1) <- Parity(r50)
0x5953d2:
  661 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  662 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  663 r12: TypeID(2v1) <- Get(r12)
  664 r10: TypeID(2v1) <- OverflowOf(r12)
  665 r2: TypeID(2v1) <- CarryOf(r12)
  666 r6: TypeID(2v1) <- SignOf(r12)
  667 r5: TypeID(2v1) <- IsZero(r12)
  668 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  669 r3: TypeID(2v1) <- Parity(r47)
0x5953d6:
  670 r16: TypeID(2v1) <- Get(r17)
0x5953d9:
  671 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  672 r17: TypeID(2v1) <- Get(r45)
  673 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953da:
  674 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  675 r11: TypeID(2v1) <- Get(r45)
  676 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953db:
  677 r45: TypeID(2v1) <- Void
  678 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  679 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  680 r47: TypeID(2v1) <- SetReturnValue(r45)
  681 r47: TypeID(2v1) <- Control(Ret)
0x5953e0:
  682 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  683 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  684 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  685 r18: TypeID(2v1) <- Get(r45)
0x5953e4:
  686 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  687 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  688 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  689 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  690 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x5953e7:
  691 r14: TypeID(2v1) <- Get(r17)
0x5953ea:
  692 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  693 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  694 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  695 r15: TypeID(2v1) <- Get(r45)
0x5953ee:
  696 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  697 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  698 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  699 r20: TypeID(2v1) <- Get(r45)
0x5953f2:
  700 r45: TypeID(2v1) <- Void
  701 r45: TypeID(2v1) <- Get(r14)
  702 r46: TypeID(2v1) <- Void
  703 r46: TypeID(2v1) <- Get(r15)
  704 r47: TypeID(2v1) <- Void
  705 r47: TypeID(2v1) <- Get(r19)
  706 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  707 r48: TypeID(2v1) <- Void
  708 r48: TypeID(2v1) <- Get(r18)
  709 r49: TypeID(2v1) <- Void
  710 r49: TypeID(2v1) <- Get(r20)
  711 r50: TypeID(2v1) <- CArg { value: r49, next_arg: None }
  712 r50: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r50) }
  713 r50: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r50) }
  714 r50: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r50) }
  715 r50: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r50) }
  716 r51: TypeID(297640v1) <- Const { value: 5845184, size: 8 }
  717 r50: TypeID(2v1) <- Call { callee: r51, first_arg: Some(r50) }
  718 r2: TypeID(2v1) <- Undefined
  719 r3: TypeID(2v1) <- Undefined
  720 r4: TypeID(2v1) <- Undefined
  721 r5: TypeID(2v1) <- Undefined
  722 r6: TypeID(2v1) <- Undefined
  723 r7: TypeID(2v1) <- Undefined
  724 r8: TypeID(2v1) <- Undefined
  725 r9: TypeID(2v1) <- Undefined
  726 r10: TypeID(2v1) <- Undefined
  727 r16: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
0x5953f7:
  728 r45: TypeID(2v1) <- Control(Jmp(489))
0x595400:
  729 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  730 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  731 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  732 r19: TypeID(2v1) <- Get(r45)
0x595404:
  733 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  734 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  735 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  736 r15: TypeID(2v1) <- Get(r45)
0x595408:
  737 r14: TypeID(2v1) <- Get(r17)
0x59540b:
  738 r45: TypeID(2v1) <- Void
  739 r45: TypeID(2v1) <- Get(r14)
  740 r46: TypeID(2v1) <- Void
  741 r46: TypeID(2v1) <- Get(r15)
  742 r47: TypeID(2v1) <- Void
  743 r47: TypeID(2v1) <- Get(r19)
  744 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  745 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  746 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  747 r49: TypeID(297636v1) <- Const { value: 5845200, size: 8 }
  748 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  749 r2: TypeID(2v1) <- Undefined
  750 r3: TypeID(2v1) <- Undefined
  751 r4: TypeID(2v1) <- Undefined
  752 r5: TypeID(2v1) <- Undefined
  753 r6: TypeID(2v1) <- Undefined
  754 r7: TypeID(2v1) <- Undefined
  755 r8: TypeID(2v1) <- Undefined
  756 r9: TypeID(2v1) <- Undefined
  757 r10: TypeID(2v1) <- Undefined
  758 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x595410:
  759 r45: TypeID(2v1) <- Control(Jmp(489))


 --- ssa pre-xform
ssa program  773 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  2)  r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
  (  2)  r18: ? <- Ancestral(AncestralName("RDX"))
  ( 15)  r43: ? <- Ancestral(AncestralName("arg0"))
  (  2)  r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 272, size: 4 }
         r48: ? <- Part { src: r14, offset: 4, size: 4 }
         r49: ? <- Concat { lo: r47, hi: r48 }
         r51: ? <- Const { value: 1, size: 4 }
         r52: ? <- Part { src: r43, offset: 4, size: 4 }
         r53: ? <- Concat { lo: r51, hi: r52 }
         r54: ? <- ArithK(Add, r45, -8)
         r55: ? <- StoreMem { addr: r54, value: r16 }
  (  3)  r65: ? <- Const { value: 7837792, size: 8 }
         r67: ? <- CArg { value: r17, next_arg: None }
         r68: ? <- CArg { value: r18, next_arg: Some(r67) }
         r69: ? <- CArg { value: r49, next_arg: Some(r68) }
         r70: ? <- CArg { value: r53, next_arg: Some(r69) }
         r71: ? <- Const { value: 8, size: 8 }
         r72: ? <- Arith(Add, r71, r65)
         r73: ? <- LoadMem { addr: r72, size: 8 }
         r74: ? <- LoadMem { addr: r73, size: 8 }
         r75: ? <- Call { callee: r74, first_arg: Some(r70) }
  ( 34)  r86: ? <- Arith(BitAnd, r65, r65)
         r88: ? <- IsZero(r86)
         r93: ? <- SetJumpCondition(r88)
         r764: ? <- Upsilon { value: r16, phi_ref: r763 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r96: ? <- Const { value: 7837920, size: 8 }
         r97: ? <- Arith(Add, r96, r12)
         r99: ? <- Const { value: 0, size: 8 }
         r100: ? <- Arith(Add, r99, r86)
         r101: ? <- StoreMem { addr: r100, value: r97 }
         r102: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
         r113: ? <- Part { src: r103, offset: 0, size: 8 }
         r114: ? <- Const { value: 152, size: 8 }
         r115: ? <- Arith(Add, r114, r86)
         r116: ? <- StoreMem { addr: r115, value: r113 }
         r117: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
         r118: ? <- Call { callee: r117, first_arg: None }
  (  3)  r128: ? <- Part { src: r118, offset: 0, size: 8 }
         r129: ? <- Const { value: 152, size: 8 }
         r130: ? <- Arith(Add, r129, r86)
         r131: ? <- LoadMem { addr: r130, size: 8 }
         r132: ? <- Const { value: 0, size: 8 }
         r133: ? <- Arith(Sub, r131, r132)
         r137: ? <- IsZero(r133)
         r140: ? <- Const { value: 4294967295, size: 4 }
         r141: ? <- Const { value: 140, size: 8 }
         r142: ? <- Arith(Add, r141, r86)
         r143: ? <- StoreMem { addr: r142, value: r140 }
         r144: ? <- Const { value: 160, size: 8 }
         r145: ? <- Arith(Add, r144, r86)
         r146: ? <- StoreMem { addr: r145, value: r128 }
         r147: ? <- SetJumpCondition(r137)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
  (  2)  r149: ? <- Arith(BitAnd, r128, r128)
         r151: ? <- IsZero(r149)
         r156: ? <- SetJumpCondition(r151)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r158: ? <- Const { value: 4, size: 8 }
         r159: ? <- Arith(Add, r158, r43)
         r160: ? <- LoadMem { addr: r159, size: 4 }
         r161: ? <- Part { src: r149, offset: 4, size: 4 }
  (  7)  r162: ? <- Concat { lo: r160, hi: r161 }
         r163: ? <- Part { src: r162, offset: 0, size: 1 }
         r164: ? <- Const { value: 1, size: 1 }
         r165: ? <- Arith(BitAnd, r163, r164)
         r167: ? <- IsZero(r165)
         r172: ? <- Not(r167)
         r173: ? <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r175: ? <- Const { value: 144, size: 8 }
         r176: ? <- Arith(Add, r175, r86)
         r177: ? <- LoadMem { addr: r176, size: 4 }
         r178: ? <- Const { value: 1, size: 4 }
         r179: ? <- Arith(BitOr, r177, r178)
         r180: ? <- Const { value: 144, size: 8 }
         r181: ? <- Arith(Add, r180, r86)
         r182: ? <- StoreMem { addr: r181, value: r179 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r189: ? <- Part { src: r162, offset: 0, size: 1 }
         r190: ? <- Const { value: 2, size: 1 }
         r191: ? <- Arith(BitAnd, r189, r190)
         r193: ? <- IsZero(r191)
         r198: ? <- SetJumpCondition(r193)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r200: ? <- Const { value: 144, size: 8 }
         r201: ? <- Arith(Add, r200, r86)
         r202: ? <- LoadMem { addr: r201, size: 4 }
         r203: ? <- Const { value: 128, size: 4 }
         r204: ? <- Arith(BitOr, r202, r203)
         r205: ? <- Const { value: 144, size: 8 }
         r206: ? <- Arith(Add, r205, r86)
         r207: ? <- StoreMem { addr: r206, value: r204 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r214: ? <- Part { src: r162, offset: 0, size: 1 }
         r215: ? <- Const { value: 4, size: 1 }
         r216: ? <- Arith(BitAnd, r214, r215)
         r218: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r218)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r225: ? <- Const { value: 144, size: 8 }
         r226: ? <- Arith(Add, r225, r86)
         r227: ? <- LoadMem { addr: r226, size: 4 }
         r228: ? <- Const { value: 512, size: 4 }
         r229: ? <- Arith(BitOr, r227, r228)
         r230: ? <- Const { value: 144, size: 8 }
         r231: ? <- Arith(Add, r230, r86)
         r232: ? <- StoreMem { addr: r231, value: r229 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r239: ? <- Part { src: r162, offset: 0, size: 1 }
         r240: ? <- Const { value: 16, size: 1 }
         r241: ? <- Arith(BitAnd, r239, r240)
         r243: ? <- IsZero(r241)
         r248: ? <- SetJumpCondition(r243)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r250: ? <- Const { value: 144, size: 8 }
         r251: ? <- Arith(Add, r250, r86)
         r252: ? <- LoadMem { addr: r251, size: 4 }
         r253: ? <- Const { value: 1024, size: 4 }
         r254: ? <- Arith(BitOr, r252, r253)
         r255: ? <- Const { value: 144, size: 8 }
         r256: ? <- Arith(Add, r255, r86)
         r257: ? <- StoreMem { addr: r256, value: r254 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r264: ? <- Part { src: r162, offset: 0, size: 1 }
         r265: ? <- Const { value: 32, size: 1 }
         r266: ? <- Arith(BitAnd, r264, r265)
         r268: ? <- IsZero(r266)
         r273: ? <- SetJumpCondition(r268)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r275: ? <- Const { value: 144, size: 8 }
         r276: ? <- Arith(Add, r275, r86)
         r277: ? <- LoadMem { addr: r276, size: 4 }
         r278: ? <- Const { value: 2048, size: 4 }
         r279: ? <- Arith(BitOr, r277, r278)
         r280: ? <- Const { value: 144, size: 8 }
         r281: ? <- Arith(Add, r280, r86)
         r282: ? <- StoreMem { addr: r281, value: r279 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r289: ? <- Part { src: r162, offset: 0, size: 1 }
         r290: ? <- Const { value: 64, size: 1 }
         r291: ? <- Arith(BitAnd, r289, r290)
         r293: ? <- IsZero(r291)
         r298: ? <- SetJumpCondition(r293)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r300: ? <- Const { value: 144, size: 8 }
         r301: ? <- Arith(Add, r300, r86)
         r302: ? <- LoadMem { addr: r301, size: 4 }
         r303: ? <- Const { value: 4096, size: 4 }
         r304: ? <- Arith(BitOr, r302, r303)
         r305: ? <- Const { value: 144, size: 8 }
         r306: ? <- Arith(Add, r305, r86)
         r307: ? <- StoreMem { addr: r306, value: r304 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r314: ? <- Const { value: 64, size: 8 }
         r315: ? <- Arith(Add, r314, r43)
  (  2)  r316: ? <- LoadMem { addr: r315, size: 8 }
  (  2)  r318: ? <- Arith(BitAnd, r316, r316)
         r320: ? <- IsZero(r318)
         r325: ? <- SetJumpCondition(r320)
         r766: ? <- Upsilon { value: r318, phi_ref: r760 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r619: ? <- Part { src: r162, offset: 0, size: 1 }
         r620: ? <- Const { value: 8, size: 1 }
         r621: ? <- Arith(BitAnd, r619, r620)
         r623: ? <- IsZero(r621)
         r628: ? <- Not(r623)
         r629: ? <- SetJumpCondition(r628)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r631: ? <- Const { value: 5846864, size: 8 }
         r632: ? <- Arith(Add, r631, r12)
         r767: ? <- Upsilon { value: r632, phi_ref: r760 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r760: ? <- Phi
         r332: ? <- CArg { value: r760, next_arg: None }
         r333: ? <- CArg { value: r86, next_arg: Some(r332) }
         r334: redisSetPushCallback <TypeID(297899v1)> <- Const { value: 5853696, size: 8 }
         r335: ? <- Call { callee: r334, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r346: ? <- Const { value: 48, size: 8 }
         r347: ? <- Arith(Add, r346, r43)
         r348: ? <- LoadMem { addr: r347, size: 8 }
         r350: ? <- Const { value: 8, size: 8 }
         r351: ? <- Arith(Add, r350, r43)
  (  2)  r352: ? <- LoadMem { addr: r351, size: 8 }
         r355: ? <- Const { value: 240, size: 8 }
         r356: ? <- Arith(Add, r355, r86)
         r357: ? <- StoreMem { addr: r356, value: r348 }
         r358: ? <- Const { value: 56, size: 8 }
         r359: ? <- Arith(Add, r358, r43)
         r360: ? <- LoadMem { addr: r359, size: 8 }
         r362: ? <- Const { value: 248, size: 8 }
         r363: ? <- Arith(Add, r362, r86)
         r364: ? <- StoreMem { addr: r363, value: r360 }
         r369: ? <- CArg { value: r352, next_arg: None }
         r370: ? <- CArg { value: r86, next_arg: Some(r369) }
         r371: redisContextUpdateConnectTimeout <TypeID(297630v1)> <- Const { value: 5842752, size: 8 }
         r372: ? <- Call { callee: r371, first_arg: Some(r370) }
  (  2)  r382: ? <- Part { src: r372, offset: 0, size: 8 }
         r383: ? <- Part { src: r382, offset: 0, size: 4 }
         r384: ? <- Part { src: r382, offset: 0, size: 4 }
         r385: ? <- Arith(BitAnd, r383, r384)
         r387: ? <- IsZero(r385)
         r392: ? <- Not(r387)
         r393: ? <- SetJumpCondition(r392)
         r768: ? <- Upsilon { value: r352, phi_ref: r762 }
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r395: ? <- Const { value: 16, size: 8 }
         r396: ? <- Arith(Add, r395, r43)
  (  2)  r397: ? <- LoadMem { addr: r396, size: 8 }
         r404: ? <- CArg { value: r397, next_arg: None }
         r405: ? <- CArg { value: r86, next_arg: Some(r404) }
         r406: redisContextUpdateCommandTimeout <TypeID(297627v1)> <- Const { value: 5844704, size: 8 }
         r407: ? <- Call { callee: r406, first_arg: Some(r405) }
  (  3)  r417: ? <- Part { src: r407, offset: 0, size: 8 }
         r418: ? <- Part { src: r417, offset: 0, size: 4 }
         r419: ? <- Part { src: r417, offset: 0, size: 4 }
         r420: ? <- Arith(BitAnd, r418, r419)
         r422: ? <- IsZero(r420)
         r427: ? <- Not(r422)
         r428: ? <- SetJumpCondition(r427)
         r769: ? <- Upsilon { value: r397, phi_ref: r762 }
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
         r430: ? <- Const { value: 0, size: 8 }
         r431: ? <- Arith(Add, r430, r43)
         r432: ? <- LoadMem { addr: r431, size: 4 }
         r433: ? <- Part { src: r417, offset: 4, size: 4 }
  (  5)  r434: ? <- Concat { lo: r432, hi: r433 }
         r435: ? <- Part { src: r434, offset: 0, size: 4 }
         r436: ? <- Part { src: r434, offset: 0, size: 4 }
         r437: ? <- Arith(BitAnd, r435, r436)
         r439: ? <- IsZero(r437)
         r444: ? <- SetJumpCondition(r439)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r446: ? <- Part { src: r434, offset: 0, size: 4 }
         r447: ? <- Const { value: 1, size: 4 }
         r448: ? <- Arith(Sub, r446, r447)
         r452: ? <- IsZero(r448)
         r455: ? <- SetJumpCondition(r452)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r457: ? <- Part { src: r434, offset: 0, size: 4 }
         r458: ? <- Const { value: 2, size: 4 }
         r459: ? <- Arith(Sub, r457, r458)
         r463: ? <- IsZero(r459)
         r466: ? <- Not(r463)
         r467: ? <- SetJumpCondition(r466)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r469: ? <- Const { value: 144, size: 8 }
         r470: ? <- Arith(Add, r469, r86)
         r471: ? <- LoadMem { addr: r470, size: 4 }
         r472: ? <- Part { src: r434, offset: 4, size: 4 }
  (  2)  r473: ? <- Concat { lo: r471, hi: r472 }
         r474: ? <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r475: ? <- Part { src: r473, offset: 0, size: 4 }
         r476: ? <- Const { value: 2, size: 4 }
         r477: ? <- Arith(BitOr, r475, r476)
         r478: ? <- Part { src: r473, offset: 4, size: 4 }
         r479: ? <- Concat { lo: r477, hi: r478 }
         r486: ? <- NotYetImplemented("unsupported: movd xmm1,eax")
         r487: ? <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r488: ? <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
         r772: ? <- Upsilon { value: r479, phi_ref: r761 }
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r729: ? <- Const { value: 8, size: 8 }
         r730: ? <- Arith(Add, r729, r43)
         r731: ? <- LoadMem { addr: r730, size: 8 }
         r733: ? <- Const { value: 24, size: 8 }
         r734: ? <- Arith(Add, r733, r43)
         r735: ? <- LoadMem { addr: r734, size: 8 }
         r744: ? <- CArg { value: r731, next_arg: None }
         r745: ? <- CArg { value: r735, next_arg: Some(r744) }
         r746: ? <- CArg { value: r86, next_arg: Some(r745) }
         r747: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r748: ? <- Call { callee: r747, first_arg: Some(r746) }
         r758: ? <- Part { src: r748, offset: 0, size: 8 }
         r771: ? <- Upsilon { value: r758, phi_ref: r761 }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r682: ? <- Const { value: 8, size: 8 }
         r683: ? <- Arith(Add, r682, r43)
         r684: ? <- LoadMem { addr: r683, size: 8 }
         r686: ? <- Const { value: 40, size: 8 }
         r687: ? <- Arith(Add, r686, r43)
         r688: ? <- LoadMem { addr: r687, size: 4 }
         r689: ? <- Part { src: r18, offset: 4, size: 4 }
         r690: ? <- Concat { lo: r688, hi: r689 }
         r692: ? <- Const { value: 32, size: 8 }
         r693: ? <- Arith(Add, r692, r43)
         r694: ? <- LoadMem { addr: r693, size: 8 }
         r696: ? <- Const { value: 24, size: 8 }
         r697: ? <- Arith(Add, r696, r43)
         r698: ? <- LoadMem { addr: r697, size: 8 }
         r706: ? <- Part { src: r690, offset: 0, size: 4 }
         r711: ? <- CArg { value: r698, next_arg: None }
         r712: ? <- CArg { value: r684, next_arg: Some(r711) }
         r713: ? <- CArg { value: r706, next_arg: Some(r712) }
         r714: ? <- CArg { value: r694, next_arg: Some(r713) }
         r715: ? <- CArg { value: r86, next_arg: Some(r714) }
         r716: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r717: ? <- Call { callee: r716, first_arg: Some(r715) }
         r727: ? <- Part { src: r717, offset: 0, size: 8 }
         r770: ? <- Upsilon { value: r727, phi_ref: r761 }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r761: ? <- Phi
         r489: ? <- Const { value: 8, size: 8 }
         r490: ? <- Arith(Add, r489, r86)
         r491: ? <- LoadMem { addr: r490, size: 4 }
         r492: ? <- Part { src: r761, offset: 4, size: 4 }
  (  2)  r493: ? <- Concat { lo: r491, hi: r492 }
         r494: ? <- Part { src: r493, offset: 0, size: 4 }
         r495: ? <- Part { src: r493, offset: 0, size: 4 }
         r496: ? <- Arith(BitAnd, r494, r495)
         r498: ? <- IsZero(r496)
         r503: ? <- Not(r498)
         r504: ? <- SetJumpCondition(r503)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r506: ? <- Const { value: 140, size: 8 }
         r507: ? <- Arith(Add, r506, r86)
         r508: ? <- LoadMem { addr: r507, size: 4 }
         r509: ? <- Const { value: -1, size: 4 }
         r510: ? <- Arith(Sub, r508, r509)
         r514: ? <- IsZero(r510)
         r517: ? <- SetJumpCondition(r514)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r519: ? <- Const { value: 16, size: 8 }
         r520: ? <- Arith(Add, r519, r43)
  (  2)  r521: ? <- LoadMem { addr: r520, size: 8 }
         r523: ? <- Arith(BitAnd, r521, r521)
         r525: ? <- IsZero(r523)
         r530: ? <- SetJumpCondition(r525)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r532: ? <- Const { value: 144, size: 8 }
         r533: ? <- Arith(Add, r532, r86)
         r534: ? <- LoadMem { addr: r533, size: 1 }
         r535: ? <- Const { value: 1, size: 1 }
         r536: ? <- Arith(BitAnd, r534, r535)
         r538: ? <- IsZero(r536)
         r543: ? <- SetJumpCondition(r538)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r556: ? <- CArg { value: r86, next_arg: None }
         r557: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: Some(r556) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r762: ? <- Phi
         r570: ? <- Const { value: 6951854, size: 8 }
         r571: ? <- Arith(Add, r570, r12)
         r573: ? <- Const { value: 5, size: 4 }
         r574: ? <- Part { src: r762, offset: 4, size: 4 }
         r575: ? <- Concat { lo: r573, hi: r574 }
         r581: ? <- Part { src: r575, offset: 0, size: 4 }
         r584: ? <- CArg { value: r571, next_arg: None }
         r585: ? <- CArg { value: r581, next_arg: Some(r584) }
         r586: ? <- CArg { value: r86, next_arg: Some(r585) }
         r587: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r588: ? <- Call { callee: r587, first_arg: Some(r586) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r615: ? <- Concat { lo: r614, hi: r86 }
         r616: ? <- Part { src: r615, offset: 0, size: 8 }
         r617: ? <- SetReturnValue(r616)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r638: ? <- CArg { value: r86, next_arg: None }
         r639: redisFree <TypeID(298045v1)> <- Const { value: 5852928, size: 8 }
         r640: ? <- Call { callee: r639, first_arg: Some(r638) }
         r765: ? <- Upsilon { value: r86, phi_ref: r763 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r763: ? <- Phi
         r650: ? <- Part { src: r763, offset: 0, size: 4 }
         r651: ? <- Part { src: r763, offset: 0, size: 4 }
         r652: ? <- Arith(BitXor, r650, r651)
         r653: ? <- Part { src: r763, offset: 4, size: 4 }
         r654: ? <- Concat { lo: r652, hi: r653 }
         r678: ? <- Concat { lo: r677, hi: r654 }
         r679: ? <- Part { src: r678, offset: 0, size: 8 }
         r680: ? <- SetReturnValue(r679)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) } [r10, r11, r12, r14, r16, r17, r18, r43, r45, r46, r47, r48, r49, r51, r52, r53, r54, r55, r65, r67, r68, r69, r70, r72, r73, r74, r75, r88, r93, r764]
  BlockID(1) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) } [r97, r100, r101, r102, r103, r115, r116, r117, r118, r130, r131, r137, r140, r142, r143, r145, r146, r147]
  BlockID(2) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) } [r151, r156]
  BlockID(3) -> Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) } [r159, r160, r163, r165, r167, r172, r173]
  BlockID(4) -> Always(Block(BlockID(5))) [r176, r177, r179, r181, r182]
  BlockID(5) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) } [r189, r191, r193, r198]
  BlockID(6) -> Always(Block(BlockID(7))) [r201, r202, r204, r206, r207]
  BlockID(7) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) } [r214, r216, r218, r223]
  BlockID(8) -> Always(Block(BlockID(9))) [r226, r227, r229, r231, r232]
  BlockID(9) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) } [r239, r241, r243, r248]
  BlockID(10) -> Always(Block(BlockID(11))) [r251, r252, r254, r256, r257]
  BlockID(11) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) } [r264, r266, r268, r273]
  BlockID(12) -> Always(Block(BlockID(13))) [r276, r277, r279, r281, r282]
  BlockID(13) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) } [r289, r291, r293, r298]
  BlockID(14) -> Always(Block(BlockID(15))) [r301, r302, r304, r306, r307]
  BlockID(15) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) } [r315, r316, r320, r325, r766]
  BlockID(16) -> Always(Block(BlockID(17))) [r760, r332, r333, r334, r335]
  BlockID(17) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) } [r347, r348, r351, r352, r356, r357, r359, r360, r363, r364, r369, r370, r371, r372, r383, r384, r385, r387, r392, r393]
  BlockID(18) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) } [r396, r397, r404, r405, r406, r407, r418, r419, r420, r422, r427, r428]
  BlockID(19) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) } [r432, r439, r444]
  BlockID(20) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) } [r448, r452, r455]
  BlockID(21) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) } [r459, r463, r466, r467]
  BlockID(22) -> Always(Block(BlockID(23))) [r474, r486, r487, r488]
  BlockID(23) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) } [r490, r491, r498, r503, r504]
  BlockID(24) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) } [r507, r508, r510, r514, r517]
  BlockID(25) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) } [r520, r521, r525, r530]
  BlockID(26) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) } [r533, r534, r536, r538, r543]
  BlockID(27) -> Always(Block(BlockID(29))) [r556, r557, r558]
  BlockID(28) -> Always(Block(BlockID(29))) [r571, r573, r584, r585, r586, r587, r588]
  BlockID(29) -> Always(Return) [r617]
  BlockID(30) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) } [r619, r621, r623, r628, r629]
  BlockID(31) -> Always(Block(BlockID(16))) [r632, r767]
  BlockID(32) -> Always(Block(BlockID(33))) [r638, r639, r640, r765]
  BlockID(33) -> Always(Return) [r763, r650, r651, r652, r653, r654, r680]
  BlockID(34) -> Always(Block(BlockID(23))) [r683, r684, r687, r688, r693, r694, r697, r698, r711, r712, r713, r714, r715, r716, r717]
  BlockID(35) -> Always(Block(BlockID(23))) [r730, r731, r734, r735, r744, r745, r746, r747, r748]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  |  |  BlockID(5)
|  |  |  |  |  BlockID(6)
|  |  |  |  |  BlockID(7)
|  |  |  |  |  |  BlockID(8)
|  |  |  |  |  |  BlockID(9)
|  |  |  |  |  |  |  BlockID(10)
|  |  |  |  |  |  |  BlockID(11)
|  |  |  |  |  |  |  |  BlockID(12)
|  |  |  |  |  |  |  |  BlockID(13)
|  |  |  |  |  |  |  |  |  BlockID(14)
|  |  |  |  |  |  |  |  |  BlockID(15)
|  |  |  |  |  |  |  |  |  |  BlockID(16)
|  |  |  |  |  |  |  |  |  |  BlockID(17)
|  |  |  |  |  |  |  |  |  |  |  BlockID(18)
|  |  |  |  |  |  |  |  |  |  |  |  BlockID(19)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(20)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(21)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(22)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(35)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(23)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(24)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(25)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(26)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(27)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(34)
|  |  |  |  |  |  |  |  |  |  |  BlockID(28)
|  |  |  |  |  |  |  |  |  |  |  BlockID(29)
|  |  |  |  |  |  |  |  |  |  BlockID(30)
|  |  |  |  |  |  |  |  |  |  |  BlockID(31)
|  |  BlockID(32)
|  BlockID(33)

 --- ssa
ssa program  773 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  2)  r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
         r18: ? <- Ancestral(AncestralName("RDX"))
  ( 15)  r43: ? <- Ancestral(AncestralName("arg0"))
         r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 272, size: 4 }
         r48: ? <- Part { src: r14, offset: 4, size: 4 }
         r49: ? <- Concat { lo: r47, hi: r48 }
         r51: ? <- Const { value: 1, size: 4 }
         r52: ? <- Part { src: r43, offset: 4, size: 4 }
         r53: ? <- Concat { lo: r51, hi: r52 }
         r54: ? <- ArithK(Add, r11, -16)
         r55: ? <- StoreMem { addr: r54, value: r16 }
  ( 11)  r65: ? <- Const { value: 7837792, size: 8 }
         r67: ? <- CArg { value: r17, next_arg: None }
         r68: ? <- CArg { value: r18, next_arg: Some(r67) }
         r69: ? <- CArg { value: r49, next_arg: Some(r68) }
         r70: ? <- CArg { value: r53, next_arg: Some(r69) }
         r72: ? <- Const { value: 7837800, size: 8 }
         r73: ? <- LoadMem { addr: r72, size: 8 }
         r74: ? <- LoadMem { addr: r73, size: 8 }
         r75: ? <- Call { callee: r74, first_arg: Some(r70) }
         r88: ? <- IsZero(r65)
         r93: ? <- SetJumpCondition(r88)
         r764: ? <- Upsilon { value: r16, phi_ref: r763 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r97: ? <- ArithK(Add, r12, 7837920)
         r100: ? <- Const { value: 7837792, size: 8 }
         r101: ? <- StoreMem { addr: r100, value: r97 }
         r102: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
         r115: ? <- Const { value: 7837944, size: 8 }
         r116: ? <- StoreMem { addr: r115, value: r103 }
         r117: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
  (  2)  r118: ? <- Call { callee: r117, first_arg: None }
         r130: ? <- Const { value: 7837944, size: 8 }
         r131: ? <- LoadMem { addr: r130, size: 8 }
         r137: ? <- IsZero(r131)
         r140: ? <- Const { value: 4294967295, size: 4 }
         r142: ? <- Const { value: 7837932, size: 8 }
         r143: ? <- StoreMem { addr: r142, value: r140 }
         r145: ? <- Const { value: 7837952, size: 8 }
         r146: ? <- StoreMem { addr: r145, value: r118 }
         r147: ? <- SetJumpCondition(r137)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
         r151: ? <- IsZero(r118)
         r156: ? <- SetJumpCondition(r151)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r159: ? <- ArithK(Add, r43, 4)
  (  7)  r160: ? <- LoadMem { addr: r159, size: 4 }
         r163: ? <- Part { src: r160, offset: 0, size: 1 }
         r165: ? <- ArithK(BitAnd, r163, 1)
         r167: ? <- IsZero(r165)
         r172: ? <- Not(r167)
         r173: ? <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r176: ? <- Const { value: 7837936, size: 8 }
         r177: ? <- LoadMem { addr: r176, size: 4 }
         r179: ? <- ArithK(BitOr, r177, 1)
         r181: ? <- Const { value: 7837936, size: 8 }
         r182: ? <- StoreMem { addr: r181, value: r179 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r189: ? <- Part { src: r160, offset: 0, size: 1 }
         r191: ? <- ArithK(BitAnd, r189, 2)
         r193: ? <- IsZero(r191)
         r198: ? <- SetJumpCondition(r193)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r201: ? <- Const { value: 7837936, size: 8 }
         r202: ? <- LoadMem { addr: r201, size: 4 }
         r204: ? <- ArithK(BitOr, r202, 128)
         r206: ? <- Const { value: 7837936, size: 8 }
         r207: ? <- StoreMem { addr: r206, value: r204 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r214: ? <- Part { src: r160, offset: 0, size: 1 }
         r216: ? <- ArithK(BitAnd, r214, 4)
         r218: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r218)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r226: ? <- Const { value: 7837936, size: 8 }
         r227: ? <- LoadMem { addr: r226, size: 4 }
         r229: ? <- ArithK(BitOr, r227, 512)
         r231: ? <- Const { value: 7837936, size: 8 }
         r232: ? <- StoreMem { addr: r231, value: r229 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r239: ? <- Part { src: r160, offset: 0, size: 1 }
         r241: ? <- ArithK(BitAnd, r239, 16)
         r243: ? <- IsZero(r241)
         r248: ? <- SetJumpCondition(r243)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r251: ? <- Const { value: 7837936, size: 8 }
         r252: ? <- LoadMem { addr: r251, size: 4 }
         r254: ? <- ArithK(BitOr, r252, 1024)
         r256: ? <- Const { value: 7837936, size: 8 }
         r257: ? <- StoreMem { addr: r256, value: r254 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r264: ? <- Part { src: r160, offset: 0, size: 1 }
         r266: ? <- ArithK(BitAnd, r264, 32)
         r268: ? <- IsZero(r266)
         r273: ? <- SetJumpCondition(r268)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r276: ? <- Const { value: 7837936, size: 8 }
         r277: ? <- LoadMem { addr: r276, size: 4 }
         r279: ? <- ArithK(BitOr, r277, 2048)
         r281: ? <- Const { value: 7837936, size: 8 }
         r282: ? <- StoreMem { addr: r281, value: r279 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r289: ? <- Part { src: r160, offset: 0, size: 1 }
         r291: ? <- ArithK(BitAnd, r289, 64)
         r293: ? <- IsZero(r291)
         r298: ? <- SetJumpCondition(r293)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r301: ? <- Const { value: 7837936, size: 8 }
         r302: ? <- LoadMem { addr: r301, size: 4 }
         r304: ? <- ArithK(BitOr, r302, 4096)
         r306: ? <- Const { value: 7837936, size: 8 }
         r307: ? <- StoreMem { addr: r306, value: r304 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r315: ? <- ArithK(Add, r43, 64)
  (  2)  r316: ? <- LoadMem { addr: r315, size: 8 }
         r320: ? <- IsZero(r316)
         r325: ? <- SetJumpCondition(r320)
         r766: ? <- Upsilon { value: r316, phi_ref: r760 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r619: ? <- Part { src: r160, offset: 0, size: 1 }
         r621: ? <- ArithK(BitAnd, r619, 8)
         r623: ? <- IsZero(r621)
         r628: ? <- Not(r623)
         r629: ? <- SetJumpCondition(r628)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r632: ? <- ArithK(Add, r12, 5846864)
         r767: ? <- Upsilon { value: r632, phi_ref: r760 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r760: ? <- Phi
         r332: ? <- CArg { value: r760, next_arg: None }
         r333: ? <- CArg { value: r65, next_arg: Some(r332) }
         r334: redisSetPushCallback <TypeID(297899v1)> <- Const { value: 5853696, size: 8 }
         r335: ? <- Call { callee: r334, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r347: ? <- ArithK(Add, r43, 48)
         r348: ? <- LoadMem { addr: r347, size: 8 }
         r351: ? <- ArithK(Add, r43, 8)
         r352: ? <- LoadMem { addr: r351, size: 8 }
         r356: ? <- Const { value: 7838032, size: 8 }
         r357: ? <- StoreMem { addr: r356, value: r348 }
         r359: ? <- ArithK(Add, r43, 56)
         r360: ? <- LoadMem { addr: r359, size: 8 }
         r363: ? <- Const { value: 7838040, size: 8 }
         r364: ? <- StoreMem { addr: r363, value: r360 }
         r369: ? <- CArg { value: r352, next_arg: None }
         r370: ? <- CArg { value: r65, next_arg: Some(r369) }
         r371: redisContextUpdateConnectTimeout <TypeID(297630v1)> <- Const { value: 5842752, size: 8 }
  (  2)  r372: ? <- Call { callee: r371, first_arg: Some(r370) }
         r383: ? <- Part { src: r372, offset: 0, size: 4 }
         r384: ? <- Part { src: r372, offset: 0, size: 4 }
         r385: ? <- Arith(BitAnd, r383, r384)
         r387: ? <- IsZero(r385)
         r392: ? <- Not(r387)
         r393: ? <- SetJumpCondition(r392)
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r396: ? <- ArithK(Add, r43, 16)
         r397: ? <- LoadMem { addr: r396, size: 8 }
         r404: ? <- CArg { value: r397, next_arg: None }
         r405: ? <- CArg { value: r65, next_arg: Some(r404) }
         r406: redisContextUpdateCommandTimeout <TypeID(297627v1)> <- Const { value: 5844704, size: 8 }
  (  2)  r407: ? <- Call { callee: r406, first_arg: Some(r405) }
         r418: ? <- Part { src: r407, offset: 0, size: 4 }
         r419: ? <- Part { src: r407, offset: 0, size: 4 }
         r420: ? <- Arith(BitAnd, r418, r419)
         r422: ? <- IsZero(r420)
         r427: ? <- Not(r422)
         r428: ? <- SetJumpCondition(r427)
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
  (  3)  r432: ? <- LoadMem { addr: r43, size: 4 }
         r439: ? <- IsZero(r432)
         r444: ? <- SetJumpCondition(r439)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r448: ? <- ArithK(Add, r432, -1)
         r452: ? <- IsZero(r448)
         r455: ? <- SetJumpCondition(r452)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r459: ? <- ArithK(Add, r432, -2)
         r463: ? <- IsZero(r459)
         r466: ? <- Not(r463)
         r467: ? <- SetJumpCondition(r466)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r474: ? <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r486: ? <- NotYetImplemented("unsupported: movd xmm1,eax")
         r487: ? <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r488: ? <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r730: ? <- ArithK(Add, r43, 8)
         r731: ? <- LoadMem { addr: r730, size: 8 }
         r734: ? <- ArithK(Add, r43, 24)
         r735: ? <- LoadMem { addr: r734, size: 8 }
         r744: ? <- CArg { value: r731, next_arg: None }
         r745: ? <- CArg { value: r735, next_arg: Some(r744) }
         r746: ? <- CArg { value: r65, next_arg: Some(r745) }
         r747: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r748: ? <- Call { callee: r747, first_arg: Some(r746) }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r683: ? <- ArithK(Add, r43, 8)
         r684: ? <- LoadMem { addr: r683, size: 8 }
         r687: ? <- ArithK(Add, r43, 40)
         r688: ? <- LoadMem { addr: r687, size: 4 }
         r693: ? <- ArithK(Add, r43, 32)
         r694: ? <- LoadMem { addr: r693, size: 8 }
         r697: ? <- ArithK(Add, r43, 24)
         r698: ? <- LoadMem { addr: r697, size: 8 }
         r711: ? <- CArg { value: r698, next_arg: None }
         r712: ? <- CArg { value: r684, next_arg: Some(r711) }
         r713: ? <- CArg { value: r688, next_arg: Some(r712) }
         r714: ? <- CArg { value: r694, next_arg: Some(r713) }
         r715: ? <- CArg { value: r65, next_arg: Some(r714) }
         r716: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r717: ? <- Call { callee: r716, first_arg: Some(r715) }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r490: ? <- Const { value: 7837800, size: 8 }
         r491: ? <- LoadMem { addr: r490, size: 4 }
         r498: ? <- IsZero(r491)
         r503: ? <- Not(r498)
         r504: ? <- SetJumpCondition(r503)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r507: ? <- Const { value: 7837932, size: 8 }
         r508: ? <- LoadMem { addr: r507, size: 4 }
         r510: ? <- ArithK(Add, r508, 1)
         r514: ? <- IsZero(r510)
         r517: ? <- SetJumpCondition(r514)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r520: ? <- ArithK(Add, r43, 16)
         r521: ? <- LoadMem { addr: r520, size: 8 }
         r525: ? <- IsZero(r521)
         r530: ? <- SetJumpCondition(r525)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r533: ? <- Const { value: 7837936, size: 8 }
         r534: ? <- LoadMem { addr: r533, size: 1 }
         r536: ? <- ArithK(BitAnd, r534, 1)
         r538: ? <- IsZero(r536)
         r543: ? <- SetJumpCondition(r538)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r556: ? <- CArg { value: r65, next_arg: None }
         r557: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r558: ? <- Call { callee: r557, first_arg: Some(r556) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r571: ? <- ArithK(Add, r12, 6951854)
         r573: ? <- Const { value: 5, size: 4 }
         r584: ? <- CArg { value: r571, next_arg: None }
         r585: ? <- CArg { value: r573, next_arg: Some(r584) }
         r586: ? <- CArg { value: r65, next_arg: Some(r585) }
         r587: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r588: ? <- Call { callee: r587, first_arg: Some(r586) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r617: ? <- SetReturnValue(r65)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r638: ? <- CArg { value: r65, next_arg: None }
         r639: redisFree <TypeID(298045v1)> <- Const { value: 5852928, size: 8 }
         r640: ? <- Call { callee: r639, first_arg: Some(r638) }
         r765: ? <- Upsilon { value: r65, phi_ref: r763 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r763: ? <- Phi
         r650: ? <- Part { src: r763, offset: 0, size: 4 }
         r651: ? <- Part { src: r763, offset: 0, size: 4 }
         r652: ? <- Arith(BitXor, r650, r651)
         r653: ? <- Part { src: r763, offset: 4, size: 4 }
         r654: ? <- Concat { lo: r652, hi: r653 }
         r680: ? <- SetReturnValue(r654)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:RBX;
  [[7837800]:8]:8(pre:arg0[8 .. 4] ++ 1,
                  pre:RSI[8 .. 4] ++ 272,
                  pre:RDX,
                  pre:RCX);
  ;
  r763 := pre:RBX;
  if IsZero (7837792) {
    goto T33
  }
  [7837792]:* := pre:RIP + 7837920;
  hi_sdsempty();
  [7837944]:* := hi_sdsempty();
  let r118: Bytes(8) = redisReaderCreate();
  [7837932]:* := 4294967295;
  [7837952]:* := r118;
  ;
  if IsZero ([7837944]:8) {
    goto T32
  }
  ;
  if IsZero (r118) {
    goto T32
  }
  let r160: Bytes(4) = [pre:arg0 + 4]:4;
  ;
  if ! IsZero (r160[1 .. 0] & 1) {
    goto T5
  }
  [7837936]:* := [7837936]:4 | 1;
  goto T5
  T5: {
    ;
    if IsZero (r160[1 .. 0] & 2) {
      goto T7
    }
    [7837936]:* := [7837936]:4 | 128;
    goto T7
    T7: {
      ;
      if IsZero (r160[1 .. 0] & 4) {
        goto T9
      }
      [7837936]:* := [7837936]:4 | 512;
      goto T9
      T9: {
        ;
        if IsZero (r160[1 .. 0] & 16) {
          goto T11
        }
        [7837936]:* := [7837936]:4 | 1024;
        goto T11
        T11: {
          ;
          if IsZero (r160[1 .. 0] & 32) {
            goto T13
          }
          [7837936]:* := [7837936]:4 | 2048;
          goto T13
          T13: {
            ;
            if IsZero (r160[1 .. 0] & 64) {
              goto T15
            }
            [7837936]:* := [7837936]:4 | 4096;
            goto T15
            T15: {
              let r316: Bytes(8) = [pre:arg0 + 64]:8;
              ;
              r760 := [pre:arg0 + 64]:8;
              if IsZero (r316) {
                ;
                if ! IsZero (r160[1 .. 0] & 8) {
                  goto T17
                }
                r760 := pre:RIP + 5846864;
                goto T16
              }
              goto T16
              T16: {
                let mut r760: Bytes(8);
                redisSetPushCallback(7837792,
                                     r760);
                goto T17
              }
              
              T17: {
                [7838032]:* := [pre:arg0 + 48]:8;
                [7838040]:* := [pre:arg0 + 56]:8;
                let r372: Bytes(8) = redisContextUpdateConnectTimeout(7837792,
                                                                      [pre:arg0 + 8]:8);
                ;
                if ! IsZero (r372[4 .. 0] & r372[4 .. 0]) {
                  goto T28
                }
                let r407: Bytes(8) = redisContextUpdateCommandTimeout(7837792,
                                                                      [pre:arg0 + 16]:8);
                ;
                if ! IsZero (r407[4 .. 0] & r407[4 .. 0]) {
                  goto T28
                }
                let r432: Bytes(4) = [pre:arg0]:4;
                ;
                if IsZero (r432) {
                  redisContextConnectBindTcp(7837792,
                                             [pre:arg0 + 32]:8,
                                             [pre:arg0 + 40]:4,
                                             [pre:arg0 + 8]:8,
                                             [pre:arg0 + 24]:8);
                  goto T23
                }
                ;
                if IsZero (r432 - 1) {
                  redisContextConnectUnix(7837792,
                                          [pre:arg0 + 24]:8,
                                          [pre:arg0 + 8]:8);
                  goto T23
                }
                ;
                if ! IsZero (r432 - 2) {
                  goto T32
                }
                TODO /* unsupported: movd xmm0,[rbp+18h] */;
                TODO /* unsupported: movd xmm1,eax */;
                TODO /* unsupported: punpckldq xmm0,xmm1 */;
                TODO /* unsupported: movq [rbx+8Ch],xmm0 */;
                goto T23
                T23: {
                  ;
                  if ! IsZero ([7837800]:4) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837932]:4 + 1) {
                    goto T29
                  }
                  ;
                  if IsZero ([pre:arg0 + 16]:8) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837936]:1 & 1) {
                    goto T29
                  }
                  redisContextSetTimeout(7837792);
                  goto T29
                }
                
                T28: {
                  __redisSetError(7837792,
                                  5,
                                  (pre:RIP + 6951854));
                  goto T29
                }
                
                T29: {
                  ;
                  return 7837792
                }
              
              }
            
            }
          
          }
        
        }
      
      }
    
    }
  
  }
  
  T32: {
    redisFree(7837792);
    r763 := 7837792;
    goto T33
  }
  
  T33: {
    let mut r763: Bytes(8);
    ;
    return r763[8 .. 4] ++ (r763[4 .. 0] ^ r763[4 .. 0])
  }

}
