---
source: decompiler/tests/test_tool.rs
expression: out
---
redisConnectWithOptions 0x595210+517 (file 0x195210)
          595210: 55                      push rbp
          595211: be 10 01 00 00          mov esi,110h
          595216: 48 89 fd                mov rbp,rdi
          595219: bf 01 00 00 00          mov edi,1
          59521e: 53                      push rbx
          59521f: 48 83 ec 08             sub rsp,8
          595223: 48 c7 c0 60 98 77 00    mov rax,779860h
          59522a: ff 50 08                call qword ptr [rax+8]
          59522d: 48 85 c0                test rax,rax
          595230: 0f 84 9a 01 00 00       je 00000000005953D0h
          595236: 48 89 c3                mov rbx,rax
          595239: 48 8d 05 a0 46 1e 00    lea rax,[7798E0h]
          595240: 48 89 03                mov [rbx],rax
          595243: e8 88 0d 00 00          call 0000000000595FD0h
          595248: 48 89 83 98 00 00 00    mov [rbx+98h],rax
          59524f: e8 9c fc ff ff          call 0000000000594EF0h
          595254: 48 83 bb 98 00 00 00 00 cmp qword ptr [rbx+98h],0
          59525c: c7 83 8c 00 00 00 ff ff mov dword ptr [rbx+8Ch],0FFFFFFFFh
          595266: 48 89 83 a0 00 00 00    mov [rbx+0A0h],rax
          59526d: 0f 84 55 01 00 00       je 00000000005953C8h
          595273: 48 85 c0                test rax,rax
          595276: 0f 84 4c 01 00 00       je 00000000005953C8h
          59527c: 8b 45 04                mov eax,[rbp+4]
          59527f: a8 01                   test al,1
          595281: 75 07                   jne short 000000000059528Ah
          595283: 83 8b 90 00 00 00 01    or dword ptr [rbx+90h],1
          59528a: a8 02                   test al,2
          59528c: 74 0a                   je short 0000000000595298h
          59528e: 81 8b 90 00 00 00 80 00 or dword ptr [rbx+90h],80h
          595298: a8 04                   test al,4
          59529a: 74 0a                   je short 00000000005952A6h
          59529c: 81 8b 90 00 00 00 00 02 or dword ptr [rbx+90h],200h
          5952a6: a8 10                   test al,10h
          5952a8: 74 0a                   je short 00000000005952B4h
          5952aa: 81 8b 90 00 00 00 00 04 or dword ptr [rbx+90h],400h
          5952b4: a8 20                   test al,20h
          5952b6: 74 0a                   je short 00000000005952C2h
          5952b8: 81 8b 90 00 00 00 00 08 or dword ptr [rbx+90h],800h
          5952c2: a8 40                   test al,40h
          5952c4: 74 0a                   je short 00000000005952D0h
          5952c6: 81 8b 90 00 00 00 00 10 or dword ptr [rbx+90h],1000h
          5952d0: 48 8b 75 40             mov rsi,[rbp+40h]
          5952d4: 48 85 f6                test rsi,rsi
          5952d7: 0f 84 d3 00 00 00       je 00000000005953B0h
          5952dd: 48 89 df                mov rdi,rbx
          5952e0: e8 1b ff ff ff          call 0000000000595200h
          5952e5: 48 8b 45 30             mov rax,[rbp+30h]
          5952e9: 48 8b 75 08             mov rsi,[rbp+8]
          5952ed: 48 89 df                mov rdi,rbx
          5952f0: 48 89 83 f0 00 00 00    mov [rbx+0F0h],rax
          5952f7: 48 8b 45 38             mov rax,[rbp+38h]
          5952fb: 48 89 83 f8 00 00 00    mov [rbx+0F8h],rax
          595302: e8 39 d4 ff ff          call 0000000000592740h
          595307: 85 c0                   test eax,eax
          595309: 0f 85 81 00 00 00       jne 0000000000595390h
          59530f: 48 8b 75 10             mov rsi,[rbp+10h]
          595313: 48 89 df                mov rdi,rbx
          595316: e8 c5 db ff ff          call 0000000000592EE0h
          59531b: 85 c0                   test eax,eax
          59531d: 75 71                   jne short 0000000000595390h
          59531f: 8b 45 00                mov eax,[rbp]
          595322: 85 c0                   test eax,eax
          595324: 0f 84 b6 00 00 00       je 00000000005953E0h
          59532a: 83 f8 01                cmp eax,1
          59532d: 0f 84 cd 00 00 00       je 0000000000595400h
          595333: 83 f8 02                cmp eax,2
          595336: 0f 85 8c 00 00 00       jne 00000000005953C8h
          59533c: 8b 83 90 00 00 00       mov eax,[rbx+90h]
          595342: 66 0f 6e 45 18          movd xmm0,[rbp+18h]
          595347: 83 c8 02                or eax,2
          59534a: 66 0f 6e c8             movd xmm1,eax
          59534e: 66 0f 62 c1             punpckldq xmm0,xmm1
          595352: 66 0f d6 83 8c 00 00 00 movq [rbx+8Ch],xmm0
          59535a: 8b 43 08                mov eax,[rbx+8]
          59535d: 85 c0                   test eax,eax
          59535f: 75 43                   jne short 00000000005953A4h
          595361: 83 bb 8c 00 00 00 ff    cmp dword ptr [rbx+8Ch],0FFFFFFFFh
          595368: 74 3a                   je short 00000000005953A4h
          59536a: 48 8b 45 10             mov rax,[rbp+10h]
          59536e: 48 85 c0                test rax,rax
          595371: 74 31                   je short 00000000005953A4h
          595373: f6 83 90 00 00 00 01    test byte ptr [rbx+90h],1
          59537a: 74 28                   je short 00000000005953A4h
          59537c: 48 8b 30                mov rsi,[rax]
          59537f: 48 8b 50 08             mov rdx,[rax+8]
          595383: 48 89 df                mov rdi,rbx
          595386: e8 b5 db ff ff          call 0000000000592F40h
          59538b: eb 17                   jmp short 00000000005953A4h
          59538d: 0f 1f 00                nop [rax]
          595390: 48 8d 15 17 c0 10 00    lea rdx,[6A13AEh]
          595397: be 05 00 00 00          mov esi,5
          59539c: 48 89 df                mov rdi,rbx
          59539f: e8 4c fa ff ff          call 0000000000594DF0h
          5953a4: 48 83 c4 08             add rsp,8
          5953a8: 48 89 d8                mov rax,rbx
          5953ab: 5b                      pop rbx
          5953ac: 5d                      pop rbp
          5953ad: c3                      ret
          5953ae: 66 90                   xchg ax,ax
          5953b0: a8 08                   test al,8
          5953b2: 0f 85 2d ff ff ff       jne 00000000005952E5h
          5953b8: 48 8d 35 91 e3 ff ff    lea rsi,[593750h]
          5953bf: e9 19 ff ff ff          jmp 00000000005952DDh
          5953c4: 0f 1f 40 00             nop [rax]
          5953c8: 48 89 df                mov rdi,rbx
          5953cb: e8 30 fb ff ff          call 0000000000594F00h
          5953d0: 31 db                   xor ebx,ebx
          5953d2: 48 83 c4 08             add rsp,8
          5953d6: 48 89 d8                mov rax,rbx
          5953d9: 5b                      pop rbx
          5953da: 5d                      pop rbp
          5953db: c3                      ret
          5953dc: 0f 1f 40 00             nop [rax]
          5953e0: 48 8b 4d 08             mov rcx,[rbp+8]
          5953e4: 8b 55 28                mov edx,[rbp+28h]
          5953e7: 48 89 df                mov rdi,rbx
          5953ea: 48 8b 75 20             mov rsi,[rbp+20h]
          5953ee: 4c 8b 45 18             mov r8,[rbp+18h]
          5953f2: e8 c9 dc ff ff          call 00000000005930C0h
          5953f7: e9 5e ff ff ff          jmp 000000000059535Ah
          5953fc: 0f 1f 40 00             nop [rax]
          595400: 48 8b 55 08             mov rdx,[rbp+8]
          595404: 48 8b 75 18             mov rsi,[rbp+18h]
          595408: 48 89 df                mov rdi,rbx
          59540b: e8 c0 dc ff ff          call 00000000005930D0h
          595410: e9 45 ff ff ff          jmp 000000000059535Ah

function type: "redisConnectWithOptions" func (options *?) *redisContext <TypeID(297540v1)>
#call: to address 0x595fd0, returning to 0x595248      -> resolved call to: TypeID(297702v1) = Type { name: "hi_sdsempty", ty: Subroutine(Subroutine { return_tyid: TypeID(297374v1), param_names: [], param_tyids: [] }) }
#call: to address 0x594ef0, returning to 0x595254      -> resolved call to: TypeID(298074v1) = Type { name: "redisReaderCreate", ty: Subroutine(Subroutine { return_tyid: TypeID(297536v1), param_names: [], param_tyids: [] }) }
#call: to address 0x595200, returning to 0x5952e5      -> resolved call to: TypeID(297899v1) = Type { name: "redisSetPushCallback", ty: Subroutine(Subroutine { return_tyid: TypeID(297482v1), param_names: [Some("c"), Some("fn")], param_tyids: [TypeID(297610v1), TypeID(297482v1)] }) }
#call: to address 0x592740, returning to 0x595307      -> resolved call to: TypeID(297630v1) = Type { name: "redisContextUpdateConnectTimeout", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None], param_tyids: [TypeID(297610v1), TypeID(297481v1)] }) }
#call: to address 0x592ee0, returning to 0x59531b      -> resolved call to: TypeID(297627v1) = Type { name: "redisContextUpdateCommandTimeout", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None], param_tyids: [TypeID(297610v1), TypeID(297481v1)] }) }
#call: to address 0x592f40, returning to 0x59538b      -> resolved call to: TypeID(297633v1) = Type { name: "redisContextSetTimeout", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None], param_tyids: [TypeID(297610v1), TypeID(297369v1)] }) }
#call: to address 0x594df0, returning to 0x5953a4      -> resolved call to: TypeID(298077v1) = Type { name: "__redisSetError", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [Some("c"), Some("type"), Some("str")], param_tyids: [TypeID(297610v1), TypeID(297248v1), TypeID(297417v1)] }) }
#call: to address 0x594f00, returning to 0x5953d0      -> resolved call to: TypeID(298045v1) = Type { name: "redisFree", ty: Subroutine(Subroutine { return_tyid: TypeID(1v1), param_names: [Some("c")], param_tyids: [TypeID(297610v1)] }) }
#call: to address 0x5930c0, returning to 0x5953f7      -> resolved call to: TypeID(297640v1) = Type { name: "redisContextConnectBindTcp", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None, None, None, None], param_tyids: [TypeID(297610v1), TypeID(297417v1), TypeID(297248v1), TypeID(297481v1), TypeID(297417v1)] }) }
#call: to address 0x5930d0, returning to 0x595410      -> resolved call to: TypeID(297636v1) = Type { name: "redisContextConnectUnix", ty: Subroutine(Subroutine { return_tyid: TypeID(297248v1), param_names: [None, None, None], param_tyids: [TypeID(297610v1), TypeID(297417v1), TypeID(297481v1)] }) }
2 warnings:
  #   0: no type hints for this callsite
  #   1: call: call resolved but only packed 1/2 params


mil program = 
program  779 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
0x595210:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x595211:
   47 r45: TypeID(2v1) <- Const { value: 272, size: 4 }
   48 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   49 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x595216:
   50 r11: TypeID(2v1) <- Get(r14)
0x595219:
   51 r45: TypeID(2v1) <- Const { value: 1, size: 4 }
   52 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
   53 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59521e:
   54 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   55 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x59521f:
   56 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   57 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   58 r12: TypeID(2v1) <- Get(r12)
   59 r10: TypeID(2v1) <- OverflowOf(r12)
   60 r2: TypeID(2v1) <- CarryOf(r12)
   61 r6: TypeID(2v1) <- SignOf(r12)
   62 r5: TypeID(2v1) <- IsZero(r12)
   63 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   64 r3: TypeID(2v1) <- Parity(r47)
0x595223:
   65 r45: TypeID(2v1) <- Const { value: 7837792, size: 8 }
   66 r16: TypeID(2v1) <- Get(r45)
0x59522a:
   67 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
   68 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
   69 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
   70 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
   71 r47: TypeID(2v1) <- Const { value: 8, size: 8 }
   72 r47: TypeID(2v1) <- Arith(Add, r47, r16)
   73 r46: TypeID(2v1) <- LoadMem { addr: r47, size: 8 }
   74 r46: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   75 r45: TypeID(2v1) <- Call { callee: r46, first_arg: Some(r45) }
   76 r2: TypeID(2v1) <- Undefined
   77 r3: TypeID(2v1) <- Undefined
   78 r4: TypeID(2v1) <- Undefined
   79 r5: TypeID(2v1) <- Undefined
   80 r6: TypeID(2v1) <- Undefined
   81 r7: TypeID(2v1) <- Undefined
   82 r8: TypeID(2v1) <- Undefined
   83 r9: TypeID(2v1) <- Undefined
   84 r10: TypeID(2v1) <- Undefined
   85 r45: TypeID(2v1) <- Get(r16)
0x59522d:
   86 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
   87 r6: TypeID(2v1) <- SignOf(r16)
   88 r5: TypeID(2v1) <- IsZero(r16)
   89 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   90 r3: TypeID(2v1) <- Parity(r16)
   91 r2: TypeID(2v1) <- False
   92 r10: TypeID(2v1) <- False
0x595230:
   93 r45: TypeID(2v1) <- SetJumpCondition(r5)
   94 r45: TypeID(2v1) <- Control(JmpIf(661))
0x595236:
   95 r17: TypeID(2v1) <- Get(r16)
0x595239:
   96 r45: TypeID(2v1) <- Const { value: 7837920, size: 8 }
   97 r45: TypeID(2v1) <- Arith(Add, r45, r13)
   98 r16: TypeID(2v1) <- Get(r45)
0x595240:
   99 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  100 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  101 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x595243:
  102 r46: TypeID(297702v1) <- Const { value: 5857232, size: 8 }
  103 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  104 r2: TypeID(2v1) <- Undefined
  105 r3: TypeID(2v1) <- Undefined
  106 r4: TypeID(2v1) <- Undefined
  107 r5: TypeID(2v1) <- Undefined
  108 r6: TypeID(2v1) <- Undefined
  109 r7: TypeID(2v1) <- Undefined
  110 r8: TypeID(2v1) <- Undefined
  111 r9: TypeID(2v1) <- Undefined
  112 r10: TypeID(2v1) <- Undefined
  113 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x595248:
  114 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  115 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  116 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x59524f:
  117 r46: TypeID(298074v1) <- Const { value: 5852912, size: 8 }
  118 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  119 r2: TypeID(2v1) <- Undefined
  120 r3: TypeID(2v1) <- Undefined
  121 r4: TypeID(2v1) <- Undefined
  122 r5: TypeID(2v1) <- Undefined
  123 r6: TypeID(2v1) <- Undefined
  124 r7: TypeID(2v1) <- Undefined
  125 r8: TypeID(2v1) <- Undefined
  126 r9: TypeID(2v1) <- Undefined
  127 r10: TypeID(2v1) <- Undefined
  128 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x595254:
  129 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  130 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  131 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  132 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  133 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  134 r10: TypeID(2v1) <- OverflowOf(r45)
  135 r2: TypeID(2v1) <- CarryOf(r45)
  136 r6: TypeID(2v1) <- SignOf(r45)
  137 r5: TypeID(2v1) <- IsZero(r45)
  138 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  139 r3: TypeID(2v1) <- Parity(r48)
0x59525c:
  140 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  141 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  142 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  143 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x595266:
  144 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  145 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  146 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x59526d:
  147 r45: TypeID(2v1) <- SetJumpCondition(r5)
  148 r45: TypeID(2v1) <- Control(JmpIf(645))
0x595273:
  149 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  150 r6: TypeID(2v1) <- SignOf(r16)
  151 r5: TypeID(2v1) <- IsZero(r16)
  152 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  153 r3: TypeID(2v1) <- Parity(r16)
  154 r2: TypeID(2v1) <- False
  155 r10: TypeID(2v1) <- False
0x595276:
  156 r45: TypeID(2v1) <- SetJumpCondition(r5)
  157 r45: TypeID(2v1) <- Control(JmpIf(645))
0x59527c:
  158 r46: TypeID(2v1) <- Const { value: 4, size: 8 }
  159 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  160 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  161 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  162 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59527f:
  163 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  164 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  165 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  166 r6: TypeID(2v1) <- SignOf(r46)
  167 r5: TypeID(2v1) <- IsZero(r46)
  168 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  169 r3: TypeID(2v1) <- Parity(r46)
  170 r2: TypeID(2v1) <- False
  171 r10: TypeID(2v1) <- False
0x595281:
  172 r45: TypeID(2v1) <- Not(r5)
  173 r46: TypeID(2v1) <- SetJumpCondition(r45)
  174 r46: TypeID(2v1) <- Control(JmpIf(189))
0x595283:
  175 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  176 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  177 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  178 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  179 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  180 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  181 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  182 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  183 r10: TypeID(2v1) <- False
  184 r2: TypeID(2v1) <- False
  185 r6: TypeID(2v1) <- SignOf(r45)
  186 r5: TypeID(2v1) <- IsZero(r45)
  187 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  188 r3: TypeID(2v1) <- Parity(r49)
0x59528a:
  189 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  190 r47: TypeID(2v1) <- Const { value: 2, size: 1 }
  191 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  192 r6: TypeID(2v1) <- SignOf(r46)
  193 r5: TypeID(2v1) <- IsZero(r46)
  194 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  195 r3: TypeID(2v1) <- Parity(r46)
  196 r2: TypeID(2v1) <- False
  197 r10: TypeID(2v1) <- False
0x59528c:
  198 r45: TypeID(2v1) <- SetJumpCondition(r5)
  199 r45: TypeID(2v1) <- Control(JmpIf(214))
0x59528e:
  200 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  201 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  202 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  203 r47: TypeID(2v1) <- Const { value: 128, size: 4 }
  204 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  205 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  206 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  207 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  208 r10: TypeID(2v1) <- False
  209 r2: TypeID(2v1) <- False
  210 r6: TypeID(2v1) <- SignOf(r45)
  211 r5: TypeID(2v1) <- IsZero(r45)
  212 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  213 r3: TypeID(2v1) <- Parity(r49)
0x595298:
  214 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  215 r47: TypeID(2v1) <- Const { value: 4, size: 1 }
  216 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  217 r6: TypeID(2v1) <- SignOf(r46)
  218 r5: TypeID(2v1) <- IsZero(r46)
  219 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  220 r3: TypeID(2v1) <- Parity(r46)
  221 r2: TypeID(2v1) <- False
  222 r10: TypeID(2v1) <- False
0x59529a:
  223 r45: TypeID(2v1) <- SetJumpCondition(r5)
  224 r45: TypeID(2v1) <- Control(JmpIf(239))
0x59529c:
  225 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  226 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  227 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  228 r47: TypeID(2v1) <- Const { value: 512, size: 4 }
  229 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  230 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  231 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  232 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  233 r10: TypeID(2v1) <- False
  234 r2: TypeID(2v1) <- False
  235 r6: TypeID(2v1) <- SignOf(r45)
  236 r5: TypeID(2v1) <- IsZero(r45)
  237 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  238 r3: TypeID(2v1) <- Parity(r49)
0x5952a6:
  239 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  240 r47: TypeID(2v1) <- Const { value: 16, size: 1 }
  241 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  242 r6: TypeID(2v1) <- SignOf(r46)
  243 r5: TypeID(2v1) <- IsZero(r46)
  244 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  245 r3: TypeID(2v1) <- Parity(r46)
  246 r2: TypeID(2v1) <- False
  247 r10: TypeID(2v1) <- False
0x5952a8:
  248 r45: TypeID(2v1) <- SetJumpCondition(r5)
  249 r45: TypeID(2v1) <- Control(JmpIf(264))
0x5952aa:
  250 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  251 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  252 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  253 r47: TypeID(2v1) <- Const { value: 1024, size: 4 }
  254 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  255 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  256 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  257 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  258 r10: TypeID(2v1) <- False
  259 r2: TypeID(2v1) <- False
  260 r6: TypeID(2v1) <- SignOf(r45)
  261 r5: TypeID(2v1) <- IsZero(r45)
  262 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  263 r3: TypeID(2v1) <- Parity(r49)
0x5952b4:
  264 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  265 r47: TypeID(2v1) <- Const { value: 32, size: 1 }
  266 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  267 r6: TypeID(2v1) <- SignOf(r46)
  268 r5: TypeID(2v1) <- IsZero(r46)
  269 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  270 r3: TypeID(2v1) <- Parity(r46)
  271 r2: TypeID(2v1) <- False
  272 r10: TypeID(2v1) <- False
0x5952b6:
  273 r45: TypeID(2v1) <- SetJumpCondition(r5)
  274 r45: TypeID(2v1) <- Control(JmpIf(289))
0x5952b8:
  275 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  276 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  277 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  278 r47: TypeID(2v1) <- Const { value: 2048, size: 4 }
  279 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  280 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  281 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  282 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  283 r10: TypeID(2v1) <- False
  284 r2: TypeID(2v1) <- False
  285 r6: TypeID(2v1) <- SignOf(r45)
  286 r5: TypeID(2v1) <- IsZero(r45)
  287 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  288 r3: TypeID(2v1) <- Parity(r49)
0x5952c2:
  289 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  290 r47: TypeID(2v1) <- Const { value: 64, size: 1 }
  291 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  292 r6: TypeID(2v1) <- SignOf(r46)
  293 r5: TypeID(2v1) <- IsZero(r46)
  294 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  295 r3: TypeID(2v1) <- Parity(r46)
  296 r2: TypeID(2v1) <- False
  297 r10: TypeID(2v1) <- False
0x5952c4:
  298 r45: TypeID(2v1) <- SetJumpCondition(r5)
  299 r45: TypeID(2v1) <- Control(JmpIf(314))
0x5952c6:
  300 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  301 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  302 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  303 r47: TypeID(2v1) <- Const { value: 4096, size: 4 }
  304 r45: TypeID(2v1) <- Arith(BitOr, r45, r47)
  305 r48: TypeID(2v1) <- Const { value: 144, size: 8 }
  306 r48: TypeID(2v1) <- Arith(Add, r48, r17)
  307 r48: TypeID(2v1) <- StoreMem { addr: r48, value: r45 }
  308 r10: TypeID(2v1) <- False
  309 r2: TypeID(2v1) <- False
  310 r6: TypeID(2v1) <- SignOf(r45)
  311 r5: TypeID(2v1) <- IsZero(r45)
  312 r49: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  313 r3: TypeID(2v1) <- Parity(r49)
0x5952d0:
  314 r46: TypeID(2v1) <- Const { value: 64, size: 8 }
  315 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  316 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  317 r15: TypeID(2v1) <- Get(r45)
0x5952d4:
  318 r15: TypeID(2v1) <- Arith(BitAnd, r15, r15)
  319 r6: TypeID(2v1) <- SignOf(r15)
  320 r5: TypeID(2v1) <- IsZero(r15)
  321 r47: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  322 r3: TypeID(2v1) <- Parity(r15)
  323 r2: TypeID(2v1) <- False
  324 r10: TypeID(2v1) <- False
0x5952d7:
  325 r45: TypeID(2v1) <- SetJumpCondition(r5)
  326 r45: TypeID(2v1) <- Control(JmpIf(629))
0x5952dd:
  327 r14: TypeID(2v1) <- Get(r17)
0x5952e0:
  328 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  329 r45: TypeID(2v1) <- Void
  330 r45: TypeID(2v1) <- Get(r14)
  331 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  332 r46: TypeID(2v1) <- Void
  333 r46: TypeID(2v1) <- Get(r15)
  334 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  335 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  336 r48: TypeID(297899v1) <- Const { value: 5853696, size: 8 }
  337 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  338 r2: TypeID(2v1) <- Undefined
  339 r3: TypeID(2v1) <- Undefined
  340 r4: TypeID(2v1) <- Undefined
  341 r5: TypeID(2v1) <- Undefined
  342 r6: TypeID(2v1) <- Undefined
  343 r7: TypeID(2v1) <- Undefined
  344 r8: TypeID(2v1) <- Undefined
  345 r9: TypeID(2v1) <- Undefined
  346 r10: TypeID(2v1) <- Undefined
  347 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x5952e5:
  348 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  349 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  350 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  351 r16: TypeID(2v1) <- Get(r45)
0x5952e9:
  352 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  353 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  354 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  355 r15: TypeID(2v1) <- Get(r45)
0x5952ed:
  356 r14: TypeID(2v1) <- Get(r17)
0x5952f0:
  357 r46: TypeID(2v1) <- Const { value: 240, size: 8 }
  358 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  359 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5952f7:
  360 r46: TypeID(2v1) <- Const { value: 56, size: 8 }
  361 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  362 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  363 r16: TypeID(2v1) <- Get(r45)
0x5952fb:
  364 r46: TypeID(2v1) <- Const { value: 248, size: 8 }
  365 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  366 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x595302:
  367 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  368 r45: TypeID(2v1) <- Void
  369 r45: TypeID(2v1) <- Get(r14)
  370 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  371 r46: TypeID(2v1) <- Void
  372 r46: TypeID(2v1) <- Get(r15)
  373 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  374 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  375 r48: TypeID(297630v1) <- Const { value: 5842752, size: 8 }
  376 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  377 r2: TypeID(2v1) <- Undefined
  378 r3: TypeID(2v1) <- Undefined
  379 r4: TypeID(2v1) <- Undefined
  380 r5: TypeID(2v1) <- Undefined
  381 r6: TypeID(2v1) <- Undefined
  382 r7: TypeID(2v1) <- Undefined
  383 r8: TypeID(2v1) <- Undefined
  384 r9: TypeID(2v1) <- Undefined
  385 r10: TypeID(2v1) <- Undefined
  386 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x595307:
  387 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  388 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  389 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  390 r6: TypeID(2v1) <- SignOf(r46)
  391 r5: TypeID(2v1) <- IsZero(r46)
  392 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  393 r3: TypeID(2v1) <- Parity(r46)
  394 r2: TypeID(2v1) <- False
  395 r10: TypeID(2v1) <- False
0x595309:
  396 r45: TypeID(2v1) <- Not(r5)
  397 r46: TypeID(2v1) <- SetJumpCondition(r45)
  398 r46: TypeID(2v1) <- Control(JmpIf(577))
0x59530f:
  399 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  400 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  401 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  402 r15: TypeID(2v1) <- Get(r45)
0x595313:
  403 r14: TypeID(2v1) <- Get(r17)
0x595316:
  404 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  405 r45: TypeID(2v1) <- Void
  406 r45: TypeID(2v1) <- Get(r14)
  407 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  408 r46: TypeID(2v1) <- Void
  409 r46: TypeID(2v1) <- Get(r15)
  410 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  411 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  412 r48: TypeID(297627v1) <- Const { value: 5844704, size: 8 }
  413 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  414 r2: TypeID(2v1) <- Undefined
  415 r3: TypeID(2v1) <- Undefined
  416 r4: TypeID(2v1) <- Undefined
  417 r5: TypeID(2v1) <- Undefined
  418 r6: TypeID(2v1) <- Undefined
  419 r7: TypeID(2v1) <- Undefined
  420 r8: TypeID(2v1) <- Undefined
  421 r9: TypeID(2v1) <- Undefined
  422 r10: TypeID(2v1) <- Undefined
  423 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x59531b:
  424 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  425 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  426 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  427 r6: TypeID(2v1) <- SignOf(r46)
  428 r5: TypeID(2v1) <- IsZero(r46)
  429 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  430 r3: TypeID(2v1) <- Parity(r46)
  431 r2: TypeID(2v1) <- False
  432 r10: TypeID(2v1) <- False
0x59531d:
  433 r45: TypeID(2v1) <- Not(r5)
  434 r46: TypeID(2v1) <- SetJumpCondition(r45)
  435 r46: TypeID(2v1) <- Control(JmpIf(577))
0x59531f:
  436 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  437 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  438 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  439 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  440 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x595322:
  441 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  442 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  443 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  444 r6: TypeID(2v1) <- SignOf(r46)
  445 r5: TypeID(2v1) <- IsZero(r46)
  446 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  447 r3: TypeID(2v1) <- Parity(r46)
  448 r2: TypeID(2v1) <- False
  449 r10: TypeID(2v1) <- False
0x595324:
  450 r45: TypeID(2v1) <- SetJumpCondition(r5)
  451 r45: TypeID(2v1) <- Control(JmpIf(693))
0x59532a:
  452 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  453 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  454 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  455 r10: TypeID(2v1) <- OverflowOf(r46)
  456 r2: TypeID(2v1) <- CarryOf(r46)
  457 r6: TypeID(2v1) <- SignOf(r46)
  458 r5: TypeID(2v1) <- IsZero(r46)
  459 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  460 r3: TypeID(2v1) <- Parity(r48)
0x59532d:
  461 r45: TypeID(2v1) <- SetJumpCondition(r5)
  462 r45: TypeID(2v1) <- Control(JmpIf(745))
0x595333:
  463 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  464 r47: TypeID(2v1) <- Const { value: 2, size: 4 }
  465 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  466 r10: TypeID(2v1) <- OverflowOf(r46)
  467 r2: TypeID(2v1) <- CarryOf(r46)
  468 r6: TypeID(2v1) <- SignOf(r46)
  469 r5: TypeID(2v1) <- IsZero(r46)
  470 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  471 r3: TypeID(2v1) <- Parity(r48)
0x595336:
  472 r45: TypeID(2v1) <- Not(r5)
  473 r46: TypeID(2v1) <- SetJumpCondition(r45)
  474 r46: TypeID(2v1) <- Control(JmpIf(645))
0x59533c:
  475 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  476 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  477 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  478 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  479 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x595342:
  480 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
0x595347:
  481 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  482 r47: TypeID(2v1) <- Const { value: 2, size: 4 }
  483 r46: TypeID(2v1) <- Arith(BitOr, r46, r47)
  484 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  485 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  486 r10: TypeID(2v1) <- False
  487 r2: TypeID(2v1) <- False
  488 r6: TypeID(2v1) <- SignOf(r46)
  489 r5: TypeID(2v1) <- IsZero(r46)
  490 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  491 r3: TypeID(2v1) <- Parity(r49)
0x59534a:
  492 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movd xmm1,eax")
0x59534e:
  493 r45: TypeID(2v1) <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
0x595352:
  494 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
0x59535a:
  495 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  496 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  497 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  498 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  499 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59535d:
  500 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  501 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  502 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  503 r6: TypeID(2v1) <- SignOf(r46)
  504 r5: TypeID(2v1) <- IsZero(r46)
  505 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  506 r3: TypeID(2v1) <- Parity(r46)
  507 r2: TypeID(2v1) <- False
  508 r10: TypeID(2v1) <- False
0x59535f:
  509 r45: TypeID(2v1) <- Not(r5)
  510 r46: TypeID(2v1) <- SetJumpCondition(r45)
  511 r46: TypeID(2v1) <- Control(JmpIf(608))
0x595361:
  512 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  513 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  514 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  515 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  516 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  517 r10: TypeID(2v1) <- OverflowOf(r45)
  518 r2: TypeID(2v1) <- CarryOf(r45)
  519 r6: TypeID(2v1) <- SignOf(r45)
  520 r5: TypeID(2v1) <- IsZero(r45)
  521 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  522 r3: TypeID(2v1) <- Parity(r48)
0x595368:
  523 r45: TypeID(2v1) <- SetJumpCondition(r5)
  524 r45: TypeID(2v1) <- Control(JmpIf(608))
0x59536a:
  525 r46: TypeID(2v1) <- Const { value: 16, size: 8 }
  526 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  527 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  528 r16: TypeID(2v1) <- Get(r45)
0x59536e:
  529 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  530 r6: TypeID(2v1) <- SignOf(r16)
  531 r5: TypeID(2v1) <- IsZero(r16)
  532 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  533 r3: TypeID(2v1) <- Parity(r16)
  534 r2: TypeID(2v1) <- False
  535 r10: TypeID(2v1) <- False
0x595371:
  536 r45: TypeID(2v1) <- SetJumpCondition(r5)
  537 r45: TypeID(2v1) <- Control(JmpIf(608))
0x595373:
  538 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  539 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  540 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  541 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  542 r45: TypeID(2v1) <- Arith(BitAnd, r45, r47)
  543 r6: TypeID(2v1) <- SignOf(r45)
  544 r5: TypeID(2v1) <- IsZero(r45)
  545 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  546 r3: TypeID(2v1) <- Parity(r45)
  547 r2: TypeID(2v1) <- False
  548 r10: TypeID(2v1) <- False
0x59537a:
  549 r45: TypeID(2v1) <- SetJumpCondition(r5)
  550 r45: TypeID(2v1) <- Control(JmpIf(608))
0x59537c:
  551 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  552 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  553 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  554 r15: TypeID(2v1) <- Get(r45)
0x59537f:
  555 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  556 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  557 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  558 r19: TypeID(2v1) <- Get(r45)
0x595383:
  559 r14: TypeID(2v1) <- Get(r17)
0x595386:
  560 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  561 r45: TypeID(2v1) <- Void
  562 r45: TypeID(2v1) <- Get(r14)
  563 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  564 r47: TypeID(297633v1) <- Const { value: 5844800, size: 8 }
  565 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  566 r2: TypeID(2v1) <- Undefined
  567 r3: TypeID(2v1) <- Undefined
  568 r4: TypeID(2v1) <- Undefined
  569 r5: TypeID(2v1) <- Undefined
  570 r6: TypeID(2v1) <- Undefined
  571 r7: TypeID(2v1) <- Undefined
  572 r8: TypeID(2v1) <- Undefined
  573 r9: TypeID(2v1) <- Undefined
  574 r10: TypeID(2v1) <- Undefined
  575 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59538b:
  576 r45: TypeID(2v1) <- Control(Jmp(608))
0x595390:
  577 r45: TypeID(2v1) <- Const { value: 6951854, size: 8 }
  578 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  579 r19: TypeID(2v1) <- Get(r45)
0x595397:
  580 r45: TypeID(2v1) <- Const { value: 5, size: 4 }
  581 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  582 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59539c:
  583 r14: TypeID(2v1) <- Get(r17)
0x59539f:
  584 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  585 r45: TypeID(2v1) <- Void
  586 r45: TypeID(2v1) <- Get(r14)
  587 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  588 r46: TypeID(2v1) <- Void
  589 r46: TypeID(2v1) <- Get(r15)
  590 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  591 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  592 r47: TypeID(2v1) <- Void
  593 r47: TypeID(2v1) <- Get(r19)
  594 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  595 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  596 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  597 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  598 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  599 r2: TypeID(2v1) <- Undefined
  600 r3: TypeID(2v1) <- Undefined
  601 r4: TypeID(2v1) <- Undefined
  602 r5: TypeID(2v1) <- Undefined
  603 r6: TypeID(2v1) <- Undefined
  604 r7: TypeID(2v1) <- Undefined
  605 r8: TypeID(2v1) <- Undefined
  606 r9: TypeID(2v1) <- Undefined
  607 r10: TypeID(2v1) <- Undefined
0x5953a4:
  608 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  609 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  610 r12: TypeID(2v1) <- Get(r12)
  611 r10: TypeID(2v1) <- OverflowOf(r12)
  612 r2: TypeID(2v1) <- CarryOf(r12)
  613 r6: TypeID(2v1) <- SignOf(r12)
  614 r5: TypeID(2v1) <- IsZero(r12)
  615 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  616 r3: TypeID(2v1) <- Parity(r47)
0x5953a8:
  617 r16: TypeID(2v1) <- Get(r17)
0x5953ab:
  618 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  619 r17: TypeID(2v1) <- Get(r45)
  620 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953ac:
  621 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  622 r11: TypeID(2v1) <- Get(r45)
  623 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953ad:
  624 r45: TypeID(2v1) <- Void
  625 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  626 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  627 r47: TypeID(2v1) <- SetReturnValue(r45)
  628 r47: TypeID(2v1) <- Control(Ret)
0x5953b0:
  629 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  630 r47: TypeID(2v1) <- Const { value: 8, size: 1 }
  631 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  632 r6: TypeID(2v1) <- SignOf(r46)
  633 r5: TypeID(2v1) <- IsZero(r46)
  634 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  635 r3: TypeID(2v1) <- Parity(r46)
  636 r2: TypeID(2v1) <- False
  637 r10: TypeID(2v1) <- False
0x5953b2:
  638 r45: TypeID(2v1) <- Not(r5)
  639 r46: TypeID(2v1) <- SetJumpCondition(r45)
  640 r46: TypeID(2v1) <- Control(JmpIf(348))
0x5953b8:
  641 r45: TypeID(2v1) <- Const { value: 5846864, size: 8 }
  642 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  643 r15: TypeID(2v1) <- Get(r45)
0x5953bf:
  644 r45: TypeID(2v1) <- Control(Jmp(327))
0x5953c8:
  645 r14: TypeID(2v1) <- Get(r17)
0x5953cb:
  646 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  647 r45: TypeID(2v1) <- Void
  648 r45: TypeID(2v1) <- Get(r14)
  649 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  650 r47: TypeID(298045v1) <- Const { value: 5852928, size: 8 }
  651 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  652 r2: TypeID(2v1) <- Undefined
  653 r3: TypeID(2v1) <- Undefined
  654 r4: TypeID(2v1) <- Undefined
  655 r5: TypeID(2v1) <- Undefined
  656 r6: TypeID(2v1) <- Undefined
  657 r7: TypeID(2v1) <- Undefined
  658 r8: TypeID(2v1) <- Undefined
  659 r9: TypeID(2v1) <- Undefined
  660 r10: TypeID(2v1) <- Undefined
0x5953d0:
  661 r46: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  662 r48: TypeID(2v1) <- Part { src: r17, offset: 0, size: 4 }
  663 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  664 r49: TypeID(2v1) <- Part { src: r17, offset: 4, size: 4 }
  665 r17: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  666 r10: TypeID(2v1) <- False
  667 r2: TypeID(2v1) <- False
  668 r6: TypeID(2v1) <- SignOf(r46)
  669 r5: TypeID(2v1) <- IsZero(r46)
  670 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  671 r3: TypeID(2v1) <- Parity(r50)
0x5953d2:
  672 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  673 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  674 r12: TypeID(2v1) <- Get(r12)
  675 r10: TypeID(2v1) <- OverflowOf(r12)
  676 r2: TypeID(2v1) <- CarryOf(r12)
  677 r6: TypeID(2v1) <- SignOf(r12)
  678 r5: TypeID(2v1) <- IsZero(r12)
  679 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  680 r3: TypeID(2v1) <- Parity(r47)
0x5953d6:
  681 r16: TypeID(2v1) <- Get(r17)
0x5953d9:
  682 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  683 r17: TypeID(2v1) <- Get(r45)
  684 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953da:
  685 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  686 r11: TypeID(2v1) <- Get(r45)
  687 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x5953db:
  688 r45: TypeID(2v1) <- Void
  689 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  690 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
  691 r47: TypeID(2v1) <- SetReturnValue(r45)
  692 r47: TypeID(2v1) <- Control(Ret)
0x5953e0:
  693 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  694 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  695 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  696 r18: TypeID(2v1) <- Get(r45)
0x5953e4:
  697 r46: TypeID(2v1) <- Const { value: 40, size: 8 }
  698 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  699 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  700 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  701 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x5953e7:
  702 r14: TypeID(2v1) <- Get(r17)
0x5953ea:
  703 r46: TypeID(2v1) <- Const { value: 32, size: 8 }
  704 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  705 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  706 r15: TypeID(2v1) <- Get(r45)
0x5953ee:
  707 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  708 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  709 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  710 r20: TypeID(2v1) <- Get(r45)
0x5953f2:
  711 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  712 r45: TypeID(2v1) <- Void
  713 r45: TypeID(2v1) <- Get(r14)
  714 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  715 r46: TypeID(2v1) <- Void
  716 r46: TypeID(2v1) <- Get(r15)
  717 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  718 r47: TypeID(2v1) <- Void
  719 r47: TypeID(2v1) <- Get(r19)
  720 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  721 r48: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
  722 r48: TypeID(2v1) <- Void
  723 r48: TypeID(2v1) <- Get(r18)
  724 r49: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
  725 r49: TypeID(2v1) <- Void
  726 r49: TypeID(2v1) <- Get(r20)
  727 r50: TypeID(2v1) <- CArg { value: r49, next_arg: None }
  728 r50: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r50) }
  729 r50: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r50) }
  730 r50: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r50) }
  731 r50: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r50) }
  732 r51: TypeID(297640v1) <- Const { value: 5845184, size: 8 }
  733 r50: TypeID(2v1) <- Call { callee: r51, first_arg: Some(r50) }
  734 r2: TypeID(2v1) <- Undefined
  735 r3: TypeID(2v1) <- Undefined
  736 r4: TypeID(2v1) <- Undefined
  737 r5: TypeID(2v1) <- Undefined
  738 r6: TypeID(2v1) <- Undefined
  739 r7: TypeID(2v1) <- Undefined
  740 r8: TypeID(2v1) <- Undefined
  741 r9: TypeID(2v1) <- Undefined
  742 r10: TypeID(2v1) <- Undefined
  743 r16: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
0x5953f7:
  744 r45: TypeID(2v1) <- Control(Jmp(495))
0x595400:
  745 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  746 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  747 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  748 r19: TypeID(2v1) <- Get(r45)
0x595404:
  749 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
  750 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  751 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  752 r15: TypeID(2v1) <- Get(r45)
0x595408:
  753 r14: TypeID(2v1) <- Get(r17)
0x59540b:
  754 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  755 r45: TypeID(2v1) <- Void
  756 r45: TypeID(2v1) <- Get(r14)
  757 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  758 r46: TypeID(2v1) <- Void
  759 r46: TypeID(2v1) <- Get(r15)
  760 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  761 r47: TypeID(2v1) <- Void
  762 r47: TypeID(2v1) <- Get(r19)
  763 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  764 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  765 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  766 r49: TypeID(297636v1) <- Const { value: 5845200, size: 8 }
  767 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  768 r2: TypeID(2v1) <- Undefined
  769 r3: TypeID(2v1) <- Undefined
  770 r4: TypeID(2v1) <- Undefined
  771 r5: TypeID(2v1) <- Undefined
  772 r6: TypeID(2v1) <- Undefined
  773 r7: TypeID(2v1) <- Undefined
  774 r8: TypeID(2v1) <- Undefined
  775 r9: TypeID(2v1) <- Undefined
  776 r10: TypeID(2v1) <- Undefined
  777 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x595410:
  778 r45: TypeID(2v1) <- Control(Jmp(495))


ssa pre-xform:
ssa program  792 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  2)  r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
  (  2)  r18: ? <- Ancestral(AncestralName("RDX"))
  ( 15)  r43: ? <- Ancestral(AncestralName("arg0"))
  (  2)  r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 272, size: 4 }
         r48: ? <- Part { src: r14, offset: 4, size: 4 }
         r49: ? <- Concat { lo: r47, hi: r48 }
         r51: ? <- Const { value: 1, size: 4 }
         r52: ? <- Part { src: r43, offset: 4, size: 4 }
         r53: ? <- Concat { lo: r51, hi: r52 }
         r54: ? <- ArithK(Add, r45, -8)
         r55: ? <- StoreMem { addr: r54, value: r16 }
  (  3)  r65: ? <- Const { value: 7837792, size: 8 }
         r67: ? <- CArg { value: r17, next_arg: None }
         r68: ? <- CArg { value: r18, next_arg: Some(r67) }
         r69: ? <- CArg { value: r49, next_arg: Some(r68) }
         r70: ? <- CArg { value: r53, next_arg: Some(r69) }
         r71: ? <- Const { value: 8, size: 8 }
         r72: ? <- Arith(Add, r71, r65)
         r73: ? <- LoadMem { addr: r72, size: 8 }
         r74: ? <- LoadMem { addr: r73, size: 8 }
         r75: ? <- Call { callee: r74, first_arg: Some(r70) }
  ( 34)  r86: ? <- Arith(BitAnd, r65, r65)
         r88: ? <- IsZero(r86)
         r93: ? <- SetJumpCondition(r88)
         r783: ? <- Upsilon { value: r16, phi_ref: r782 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r96: ? <- Const { value: 7837920, size: 8 }
         r97: ? <- Arith(Add, r96, r12)
         r99: ? <- Const { value: 0, size: 8 }
         r100: ? <- Arith(Add, r99, r86)
         r101: ? <- StoreMem { addr: r100, value: r97 }
         r102: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
         r113: ? <- Part { src: r103, offset: 0, size: 8 }
         r114: ? <- Const { value: 152, size: 8 }
         r115: ? <- Arith(Add, r114, r86)
         r116: ? <- StoreMem { addr: r115, value: r113 }
         r117: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
         r118: ? <- Call { callee: r117, first_arg: None }
  (  3)  r128: ? <- Part { src: r118, offset: 0, size: 8 }
         r129: ? <- Const { value: 152, size: 8 }
         r130: ? <- Arith(Add, r129, r86)
         r131: ? <- LoadMem { addr: r130, size: 8 }
         r132: ? <- Const { value: 0, size: 8 }
         r133: ? <- Arith(Sub, r131, r132)
         r137: ? <- IsZero(r133)
         r140: ? <- Const { value: 4294967295, size: 4 }
         r141: ? <- Const { value: 140, size: 8 }
         r142: ? <- Arith(Add, r141, r86)
         r143: ? <- StoreMem { addr: r142, value: r140 }
         r144: ? <- Const { value: 160, size: 8 }
         r145: ? <- Arith(Add, r144, r86)
         r146: ? <- StoreMem { addr: r145, value: r128 }
         r147: ? <- SetJumpCondition(r137)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
  (  2)  r149: ? <- Arith(BitAnd, r128, r128)
         r151: ? <- IsZero(r149)
         r156: ? <- SetJumpCondition(r151)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r158: ? <- Const { value: 4, size: 8 }
         r159: ? <- Arith(Add, r158, r43)
         r160: ? <- LoadMem { addr: r159, size: 4 }
         r161: ? <- Part { src: r149, offset: 4, size: 4 }
  (  7)  r162: ? <- Concat { lo: r160, hi: r161 }
         r163: ? <- Part { src: r162, offset: 0, size: 1 }
         r164: ? <- Const { value: 1, size: 1 }
         r165: ? <- Arith(BitAnd, r163, r164)
         r167: ? <- IsZero(r165)
         r172: ? <- Not(r167)
         r173: ? <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r175: ? <- Const { value: 144, size: 8 }
         r176: ? <- Arith(Add, r175, r86)
         r177: ? <- LoadMem { addr: r176, size: 4 }
         r178: ? <- Const { value: 1, size: 4 }
         r179: ? <- Arith(BitOr, r177, r178)
         r180: ? <- Const { value: 144, size: 8 }
         r181: ? <- Arith(Add, r180, r86)
         r182: ? <- StoreMem { addr: r181, value: r179 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r189: ? <- Part { src: r162, offset: 0, size: 1 }
         r190: ? <- Const { value: 2, size: 1 }
         r191: ? <- Arith(BitAnd, r189, r190)
         r193: ? <- IsZero(r191)
         r198: ? <- SetJumpCondition(r193)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r200: ? <- Const { value: 144, size: 8 }
         r201: ? <- Arith(Add, r200, r86)
         r202: ? <- LoadMem { addr: r201, size: 4 }
         r203: ? <- Const { value: 128, size: 4 }
         r204: ? <- Arith(BitOr, r202, r203)
         r205: ? <- Const { value: 144, size: 8 }
         r206: ? <- Arith(Add, r205, r86)
         r207: ? <- StoreMem { addr: r206, value: r204 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r214: ? <- Part { src: r162, offset: 0, size: 1 }
         r215: ? <- Const { value: 4, size: 1 }
         r216: ? <- Arith(BitAnd, r214, r215)
         r218: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r218)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r225: ? <- Const { value: 144, size: 8 }
         r226: ? <- Arith(Add, r225, r86)
         r227: ? <- LoadMem { addr: r226, size: 4 }
         r228: ? <- Const { value: 512, size: 4 }
         r229: ? <- Arith(BitOr, r227, r228)
         r230: ? <- Const { value: 144, size: 8 }
         r231: ? <- Arith(Add, r230, r86)
         r232: ? <- StoreMem { addr: r231, value: r229 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r239: ? <- Part { src: r162, offset: 0, size: 1 }
         r240: ? <- Const { value: 16, size: 1 }
         r241: ? <- Arith(BitAnd, r239, r240)
         r243: ? <- IsZero(r241)
         r248: ? <- SetJumpCondition(r243)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r250: ? <- Const { value: 144, size: 8 }
         r251: ? <- Arith(Add, r250, r86)
         r252: ? <- LoadMem { addr: r251, size: 4 }
         r253: ? <- Const { value: 1024, size: 4 }
         r254: ? <- Arith(BitOr, r252, r253)
         r255: ? <- Const { value: 144, size: 8 }
         r256: ? <- Arith(Add, r255, r86)
         r257: ? <- StoreMem { addr: r256, value: r254 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r264: ? <- Part { src: r162, offset: 0, size: 1 }
         r265: ? <- Const { value: 32, size: 1 }
         r266: ? <- Arith(BitAnd, r264, r265)
         r268: ? <- IsZero(r266)
         r273: ? <- SetJumpCondition(r268)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r275: ? <- Const { value: 144, size: 8 }
         r276: ? <- Arith(Add, r275, r86)
         r277: ? <- LoadMem { addr: r276, size: 4 }
         r278: ? <- Const { value: 2048, size: 4 }
         r279: ? <- Arith(BitOr, r277, r278)
         r280: ? <- Const { value: 144, size: 8 }
         r281: ? <- Arith(Add, r280, r86)
         r282: ? <- StoreMem { addr: r281, value: r279 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r289: ? <- Part { src: r162, offset: 0, size: 1 }
         r290: ? <- Const { value: 64, size: 1 }
         r291: ? <- Arith(BitAnd, r289, r290)
         r293: ? <- IsZero(r291)
         r298: ? <- SetJumpCondition(r293)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r300: ? <- Const { value: 144, size: 8 }
         r301: ? <- Arith(Add, r300, r86)
         r302: ? <- LoadMem { addr: r301, size: 4 }
         r303: ? <- Const { value: 4096, size: 4 }
         r304: ? <- Arith(BitOr, r302, r303)
         r305: ? <- Const { value: 144, size: 8 }
         r306: ? <- Arith(Add, r305, r86)
         r307: ? <- StoreMem { addr: r306, value: r304 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r314: ? <- Const { value: 64, size: 8 }
         r315: ? <- Arith(Add, r314, r43)
  (  2)  r316: ? <- LoadMem { addr: r315, size: 8 }
  (  2)  r318: ? <- Arith(BitAnd, r316, r316)
         r320: ? <- IsZero(r318)
         r325: ? <- SetJumpCondition(r320)
         r785: ? <- Upsilon { value: r318, phi_ref: r779 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r629: ? <- Part { src: r162, offset: 0, size: 1 }
         r630: ? <- Const { value: 8, size: 1 }
         r631: ? <- Arith(BitAnd, r629, r630)
         r633: ? <- IsZero(r631)
         r638: ? <- Not(r633)
         r639: ? <- SetJumpCondition(r638)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r641: ? <- Const { value: 5846864, size: 8 }
         r642: ? <- Arith(Add, r641, r12)
         r786: ? <- Upsilon { value: r642, phi_ref: r779 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r779: ? <- Phi
         r334: ? <- CArg { value: r779, next_arg: None }
         r335: ? <- CArg { value: r86, next_arg: Some(r334) }
         r336: redisSetPushCallback <TypeID(297899v1)> <- Const { value: 5853696, size: 8 }
         r337: ? <- Call { callee: r336, first_arg: Some(r335) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r348: ? <- Const { value: 48, size: 8 }
         r349: ? <- Arith(Add, r348, r43)
         r350: ? <- LoadMem { addr: r349, size: 8 }
         r352: ? <- Const { value: 8, size: 8 }
         r353: ? <- Arith(Add, r352, r43)
  (  2)  r354: ? <- LoadMem { addr: r353, size: 8 }
         r357: ? <- Const { value: 240, size: 8 }
         r358: ? <- Arith(Add, r357, r86)
         r359: ? <- StoreMem { addr: r358, value: r350 }
         r360: ? <- Const { value: 56, size: 8 }
         r361: ? <- Arith(Add, r360, r43)
         r362: ? <- LoadMem { addr: r361, size: 8 }
         r364: ? <- Const { value: 248, size: 8 }
         r365: ? <- Arith(Add, r364, r86)
         r366: ? <- StoreMem { addr: r365, value: r362 }
         r373: ? <- CArg { value: r354, next_arg: None }
         r374: ? <- CArg { value: r86, next_arg: Some(r373) }
         r375: redisContextUpdateConnectTimeout <TypeID(297630v1)> <- Const { value: 5842752, size: 8 }
         r376: ? <- Call { callee: r375, first_arg: Some(r374) }
  (  2)  r386: ? <- Part { src: r376, offset: 0, size: 8 }
         r387: ? <- Part { src: r386, offset: 0, size: 4 }
         r388: ? <- Part { src: r386, offset: 0, size: 4 }
         r389: ? <- Arith(BitAnd, r387, r388)
         r391: ? <- IsZero(r389)
         r396: ? <- Not(r391)
         r397: ? <- SetJumpCondition(r396)
         r787: ? <- Upsilon { value: r354, phi_ref: r781 }
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r399: ? <- Const { value: 16, size: 8 }
         r400: ? <- Arith(Add, r399, r43)
  (  2)  r401: ? <- LoadMem { addr: r400, size: 8 }
         r410: ? <- CArg { value: r401, next_arg: None }
         r411: ? <- CArg { value: r86, next_arg: Some(r410) }
         r412: redisContextUpdateCommandTimeout <TypeID(297627v1)> <- Const { value: 5844704, size: 8 }
         r413: ? <- Call { callee: r412, first_arg: Some(r411) }
  (  3)  r423: ? <- Part { src: r413, offset: 0, size: 8 }
         r424: ? <- Part { src: r423, offset: 0, size: 4 }
         r425: ? <- Part { src: r423, offset: 0, size: 4 }
         r426: ? <- Arith(BitAnd, r424, r425)
         r428: ? <- IsZero(r426)
         r433: ? <- Not(r428)
         r434: ? <- SetJumpCondition(r433)
         r788: ? <- Upsilon { value: r401, phi_ref: r781 }
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
         r436: ? <- Const { value: 0, size: 8 }
         r437: ? <- Arith(Add, r436, r43)
         r438: ? <- LoadMem { addr: r437, size: 4 }
         r439: ? <- Part { src: r423, offset: 4, size: 4 }
  (  5)  r440: ? <- Concat { lo: r438, hi: r439 }
         r441: ? <- Part { src: r440, offset: 0, size: 4 }
         r442: ? <- Part { src: r440, offset: 0, size: 4 }
         r443: ? <- Arith(BitAnd, r441, r442)
         r445: ? <- IsZero(r443)
         r450: ? <- SetJumpCondition(r445)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r452: ? <- Part { src: r440, offset: 0, size: 4 }
         r453: ? <- Const { value: 1, size: 4 }
         r454: ? <- Arith(Sub, r452, r453)
         r458: ? <- IsZero(r454)
         r461: ? <- SetJumpCondition(r458)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r463: ? <- Part { src: r440, offset: 0, size: 4 }
         r464: ? <- Const { value: 2, size: 4 }
         r465: ? <- Arith(Sub, r463, r464)
         r469: ? <- IsZero(r465)
         r472: ? <- Not(r469)
         r473: ? <- SetJumpCondition(r472)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r475: ? <- Const { value: 144, size: 8 }
         r476: ? <- Arith(Add, r475, r86)
         r477: ? <- LoadMem { addr: r476, size: 4 }
         r478: ? <- Part { src: r440, offset: 4, size: 4 }
  (  2)  r479: ? <- Concat { lo: r477, hi: r478 }
         r480: ? <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r481: ? <- Part { src: r479, offset: 0, size: 4 }
         r482: ? <- Const { value: 2, size: 4 }
         r483: ? <- Arith(BitOr, r481, r482)
         r484: ? <- Part { src: r479, offset: 4, size: 4 }
         r485: ? <- Concat { lo: r483, hi: r484 }
         r492: ? <- NotYetImplemented("unsupported: movd xmm1,eax")
         r493: ? <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r494: ? <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
         r791: ? <- Upsilon { value: r485, phi_ref: r780 }
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r745: ? <- Const { value: 8, size: 8 }
         r746: ? <- Arith(Add, r745, r43)
         r747: ? <- LoadMem { addr: r746, size: 8 }
         r749: ? <- Const { value: 24, size: 8 }
         r750: ? <- Arith(Add, r749, r43)
         r751: ? <- LoadMem { addr: r750, size: 8 }
         r763: ? <- CArg { value: r747, next_arg: None }
         r764: ? <- CArg { value: r751, next_arg: Some(r763) }
         r765: ? <- CArg { value: r86, next_arg: Some(r764) }
         r766: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r767: ? <- Call { callee: r766, first_arg: Some(r765) }
         r777: ? <- Part { src: r767, offset: 0, size: 8 }
         r790: ? <- Upsilon { value: r777, phi_ref: r780 }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r693: ? <- Const { value: 8, size: 8 }
         r694: ? <- Arith(Add, r693, r43)
         r695: ? <- LoadMem { addr: r694, size: 8 }
         r697: ? <- Const { value: 40, size: 8 }
         r698: ? <- Arith(Add, r697, r43)
         r699: ? <- LoadMem { addr: r698, size: 4 }
         r700: ? <- Part { src: r18, offset: 4, size: 4 }
         r701: ? <- Concat { lo: r699, hi: r700 }
         r703: ? <- Const { value: 32, size: 8 }
         r704: ? <- Arith(Add, r703, r43)
         r705: ? <- LoadMem { addr: r704, size: 8 }
         r707: ? <- Const { value: 24, size: 8 }
         r708: ? <- Arith(Add, r707, r43)
         r709: ? <- LoadMem { addr: r708, size: 8 }
         r720: ? <- Part { src: r701, offset: 0, size: 4 }
         r727: ? <- CArg { value: r709, next_arg: None }
         r728: ? <- CArg { value: r695, next_arg: Some(r727) }
         r729: ? <- CArg { value: r720, next_arg: Some(r728) }
         r730: ? <- CArg { value: r705, next_arg: Some(r729) }
         r731: ? <- CArg { value: r86, next_arg: Some(r730) }
         r732: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r733: ? <- Call { callee: r732, first_arg: Some(r731) }
         r743: ? <- Part { src: r733, offset: 0, size: 8 }
         r789: ? <- Upsilon { value: r743, phi_ref: r780 }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r780: ? <- Phi
         r495: ? <- Const { value: 8, size: 8 }
         r496: ? <- Arith(Add, r495, r86)
         r497: ? <- LoadMem { addr: r496, size: 4 }
         r498: ? <- Part { src: r780, offset: 4, size: 4 }
  (  2)  r499: ? <- Concat { lo: r497, hi: r498 }
         r500: ? <- Part { src: r499, offset: 0, size: 4 }
         r501: ? <- Part { src: r499, offset: 0, size: 4 }
         r502: ? <- Arith(BitAnd, r500, r501)
         r504: ? <- IsZero(r502)
         r509: ? <- Not(r504)
         r510: ? <- SetJumpCondition(r509)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r512: ? <- Const { value: 140, size: 8 }
         r513: ? <- Arith(Add, r512, r86)
         r514: ? <- LoadMem { addr: r513, size: 4 }
         r515: ? <- Const { value: -1, size: 4 }
         r516: ? <- Arith(Sub, r514, r515)
         r520: ? <- IsZero(r516)
         r523: ? <- SetJumpCondition(r520)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r525: ? <- Const { value: 16, size: 8 }
         r526: ? <- Arith(Add, r525, r43)
  (  2)  r527: ? <- LoadMem { addr: r526, size: 8 }
         r529: ? <- Arith(BitAnd, r527, r527)
         r531: ? <- IsZero(r529)
         r536: ? <- SetJumpCondition(r531)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r538: ? <- Const { value: 144, size: 8 }
         r539: ? <- Arith(Add, r538, r86)
         r540: ? <- LoadMem { addr: r539, size: 1 }
         r541: ? <- Const { value: 1, size: 1 }
         r542: ? <- Arith(BitAnd, r540, r541)
         r544: ? <- IsZero(r542)
         r549: ? <- SetJumpCondition(r544)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r563: ? <- CArg { value: r86, next_arg: None }
         r564: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r565: ? <- Call { callee: r564, first_arg: Some(r563) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r781: ? <- Phi
         r577: ? <- Const { value: 6951854, size: 8 }
         r578: ? <- Arith(Add, r577, r12)
         r580: ? <- Const { value: 5, size: 4 }
         r581: ? <- Part { src: r781, offset: 4, size: 4 }
         r582: ? <- Concat { lo: r580, hi: r581 }
         r590: ? <- Part { src: r582, offset: 0, size: 4 }
         r594: ? <- CArg { value: r578, next_arg: None }
         r595: ? <- CArg { value: r590, next_arg: Some(r594) }
         r596: ? <- CArg { value: r86, next_arg: Some(r595) }
         r597: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r598: ? <- Call { callee: r597, first_arg: Some(r596) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r625: ? <- Concat { lo: r624, hi: r86 }
         r626: ? <- Part { src: r625, offset: 0, size: 8 }
         r627: ? <- SetReturnValue(r626)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r649: ? <- CArg { value: r86, next_arg: None }
         r650: redisFree <TypeID(298045v1)> <- Const { value: 5852928, size: 8 }
         r651: ? <- Call { callee: r650, first_arg: Some(r649) }
         r784: ? <- Upsilon { value: r86, phi_ref: r782 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r782: ? <- Phi
         r661: ? <- Part { src: r782, offset: 0, size: 4 }
         r662: ? <- Part { src: r782, offset: 0, size: 4 }
         r663: ? <- Arith(BitXor, r661, r662)
         r664: ? <- Part { src: r782, offset: 4, size: 4 }
         r665: ? <- Concat { lo: r663, hi: r664 }
         r689: ? <- Concat { lo: r688, hi: r665 }
         r690: ? <- Part { src: r689, offset: 0, size: 8 }
         r691: ? <- SetReturnValue(r690)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) } [r10, r11, r12, r14, r16, r17, r18, r43, r45, r46, r47, r48, r49, r51, r52, r53, r54, r55, r65, r67, r68, r69, r70, r71, r72, r73, r74, r75, r86, r88, r93, r783]
  BlockID(1) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) } [r96, r97, r99, r100, r101, r102, r103, r113, r114, r115, r116, r117, r118, r128, r129, r130, r131, r132, r133, r137, r140, r141, r142, r143, r144, r145, r146, r147]
  BlockID(2) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) } [r149, r151, r156]
  BlockID(3) -> Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) } [r158, r159, r160, r161, r162, r163, r164, r165, r167, r172, r173]
  BlockID(4) -> Always(Block(BlockID(5))) [r175, r176, r177, r178, r179, r180, r181, r182]
  BlockID(5) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) } [r189, r190, r191, r193, r198]
  BlockID(6) -> Always(Block(BlockID(7))) [r200, r201, r202, r203, r204, r205, r206, r207]
  BlockID(7) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) } [r214, r215, r216, r218, r223]
  BlockID(8) -> Always(Block(BlockID(9))) [r225, r226, r227, r228, r229, r230, r231, r232]
  BlockID(9) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) } [r239, r240, r241, r243, r248]
  BlockID(10) -> Always(Block(BlockID(11))) [r250, r251, r252, r253, r254, r255, r256, r257]
  BlockID(11) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) } [r264, r265, r266, r268, r273]
  BlockID(12) -> Always(Block(BlockID(13))) [r275, r276, r277, r278, r279, r280, r281, r282]
  BlockID(13) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) } [r289, r290, r291, r293, r298]
  BlockID(14) -> Always(Block(BlockID(15))) [r300, r301, r302, r303, r304, r305, r306, r307]
  BlockID(15) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) } [r314, r315, r316, r318, r320, r325, r785]
  BlockID(16) -> Always(Block(BlockID(17))) [r779, r334, r335, r336, r337]
  BlockID(17) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) } [r348, r349, r350, r352, r353, r354, r357, r358, r359, r360, r361, r362, r364, r365, r366, r373, r374, r375, r376, r386, r387, r388, r389, r391, r396, r397, r787]
  BlockID(18) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) } [r399, r400, r401, r410, r411, r412, r413, r423, r424, r425, r426, r428, r433, r434, r788]
  BlockID(19) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) } [r436, r437, r438, r439, r440, r441, r442, r443, r445, r450]
  BlockID(20) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) } [r452, r453, r454, r458, r461]
  BlockID(21) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) } [r463, r464, r465, r469, r472, r473]
  BlockID(22) -> Always(Block(BlockID(23))) [r475, r476, r477, r478, r479, r480, r481, r482, r483, r484, r485, r492, r493, r494, r791]
  BlockID(23) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) } [r780, r495, r496, r497, r498, r499, r500, r501, r502, r504, r509, r510]
  BlockID(24) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) } [r512, r513, r514, r515, r516, r520, r523]
  BlockID(25) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) } [r525, r526, r527, r529, r531, r536]
  BlockID(26) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) } [r538, r539, r540, r541, r542, r544, r549]
  BlockID(27) -> Always(Block(BlockID(29))) [r563, r564, r565]
  BlockID(28) -> Always(Block(BlockID(29))) [r781, r577, r578, r580, r581, r582, r590, r594, r595, r596, r597, r598]
  BlockID(29) -> Always(Return) [r624, r625, r626, r627]
  BlockID(30) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) } [r629, r630, r631, r633, r638, r639]
  BlockID(31) -> Always(Block(BlockID(16))) [r641, r642, r786]
  BlockID(32) -> Always(Block(BlockID(33))) [r649, r650, r651, r784]
  BlockID(33) -> Always(Return) [r782, r661, r662, r663, r664, r665, r688, r689, r690, r691]
  BlockID(34) -> Always(Block(BlockID(23))) [r693, r694, r695, r697, r698, r699, r700, r701, r703, r704, r705, r707, r708, r709, r720, r727, r728, r729, r730, r731, r732, r733, r743, r789]
  BlockID(35) -> Always(Block(BlockID(23))) [r745, r746, r747, r749, r750, r751, r763, r764, r765, r766, r767, r777, r790]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  BlockID(5)
    |  |  |  |  |  BlockID(6)
    |  |  |  |  |  BlockID(7)
    |  |  |  |  |  |  BlockID(8)
    |  |  |  |  |  |  BlockID(9)
    |  |  |  |  |  |  |  BlockID(10)
    |  |  |  |  |  |  |  BlockID(11)
    |  |  |  |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  |  |  BlockID(14)
    |  |  |  |  |  |  |  |  |  BlockID(15)
    |  |  |  |  |  |  |  |  |  |  BlockID(16)
    |  |  |  |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(18)
    |  |  |  |  |  |  |  |  |  |  |  |  BlockID(19)
    |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(20)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(21)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(22)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(35)
    |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(23)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(24)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(25)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(26)
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(27)
    |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(34)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(28)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(29)
    |  |  |  |  |  |  |  |  |  |  BlockID(30)
    |  |  |  |  |  |  |  |  |  |  |  BlockID(31)
    |  |  BlockID(32)
    |  BlockID(33)

ssa post-xform:
ssa program  792 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r12: ? <- Ancestral(AncestralName("RIP"))
         r14: ? <- Ancestral(AncestralName("RSI"))
  (  2)  r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
         r18: ? <- Ancestral(AncestralName("RDX"))
  ( 15)  r43: ? <- Ancestral(AncestralName("arg0"))
         r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 272, size: 4 }
         r48: ? <- Part { src: r14, offset: 4, size: 4 }
         r49: ? <- Concat { lo: r47, hi: r48 }
         r51: ? <- Const { value: 1, size: 4 }
         r52: ? <- Part { src: r43, offset: 4, size: 4 }
         r53: ? <- Concat { lo: r51, hi: r52 }
         r54: ? <- ArithK(Add, r11, -16)
         r55: ? <- StoreMem { addr: r54, value: r16 }
  ( 11)  r65: ? <- Const { value: 7837792, size: 8 }
         r67: ? <- CArg { value: r17, next_arg: None }
         r68: ? <- CArg { value: r18, next_arg: Some(r67) }
         r69: ? <- CArg { value: r49, next_arg: Some(r68) }
         r70: ? <- CArg { value: r53, next_arg: Some(r69) }
         r72: ? <- Const { value: 7837800, size: 8 }
         r73: ? <- LoadMem { addr: r72, size: 8 }
         r74: ? <- LoadMem { addr: r73, size: 8 }
         r75: ? <- Call { callee: r74, first_arg: Some(r70) }
         r88: ? <- IsZero(r65)
         r93: ? <- SetJumpCondition(r88)
         r783: ? <- Upsilon { value: r16, phi_ref: r782 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r97: ? <- ArithK(Add, r12, 7837920)
         r100: ? <- Const { value: 7837792, size: 8 }
         r101: ? <- StoreMem { addr: r100, value: r97 }
         r102: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r103: ? <- Call { callee: r102, first_arg: None }
         r115: ? <- Const { value: 7837944, size: 8 }
         r116: ? <- StoreMem { addr: r115, value: r103 }
         r117: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
  (  2)  r118: ? <- Call { callee: r117, first_arg: None }
         r130: ? <- Const { value: 7837944, size: 8 }
         r131: ? <- LoadMem { addr: r130, size: 8 }
         r137: ? <- IsZero(r131)
         r140: ? <- Const { value: 4294967295, size: 4 }
         r142: ? <- Const { value: 7837932, size: 8 }
         r143: ? <- StoreMem { addr: r142, value: r140 }
         r145: ? <- Const { value: 7837952, size: 8 }
         r146: ? <- StoreMem { addr: r145, value: r118 }
         r147: ? <- SetJumpCondition(r137)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
         r151: ? <- IsZero(r118)
         r156: ? <- SetJumpCondition(r151)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r159: ? <- ArithK(Add, r43, 4)
  (  7)  r160: ? <- LoadMem { addr: r159, size: 4 }
         r163: ? <- Part { src: r160, offset: 0, size: 1 }
         r165: ? <- ArithK(BitAnd, r163, 1)
         r167: ? <- IsZero(r165)
         r172: ? <- Not(r167)
         r173: ? <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r176: ? <- Const { value: 7837936, size: 8 }
         r177: ? <- LoadMem { addr: r176, size: 4 }
         r179: ? <- ArithK(BitOr, r177, 1)
         r181: ? <- Const { value: 7837936, size: 8 }
         r182: ? <- StoreMem { addr: r181, value: r179 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r189: ? <- Part { src: r160, offset: 0, size: 1 }
         r191: ? <- ArithK(BitAnd, r189, 2)
         r193: ? <- IsZero(r191)
         r198: ? <- SetJumpCondition(r193)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r201: ? <- Const { value: 7837936, size: 8 }
         r202: ? <- LoadMem { addr: r201, size: 4 }
         r204: ? <- ArithK(BitOr, r202, 128)
         r206: ? <- Const { value: 7837936, size: 8 }
         r207: ? <- StoreMem { addr: r206, value: r204 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r214: ? <- Part { src: r160, offset: 0, size: 1 }
         r216: ? <- ArithK(BitAnd, r214, 4)
         r218: ? <- IsZero(r216)
         r223: ? <- SetJumpCondition(r218)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r226: ? <- Const { value: 7837936, size: 8 }
         r227: ? <- LoadMem { addr: r226, size: 4 }
         r229: ? <- ArithK(BitOr, r227, 512)
         r231: ? <- Const { value: 7837936, size: 8 }
         r232: ? <- StoreMem { addr: r231, value: r229 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r239: ? <- Part { src: r160, offset: 0, size: 1 }
         r241: ? <- ArithK(BitAnd, r239, 16)
         r243: ? <- IsZero(r241)
         r248: ? <- SetJumpCondition(r243)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r251: ? <- Const { value: 7837936, size: 8 }
         r252: ? <- LoadMem { addr: r251, size: 4 }
         r254: ? <- ArithK(BitOr, r252, 1024)
         r256: ? <- Const { value: 7837936, size: 8 }
         r257: ? <- StoreMem { addr: r256, value: r254 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r264: ? <- Part { src: r160, offset: 0, size: 1 }
         r266: ? <- ArithK(BitAnd, r264, 32)
         r268: ? <- IsZero(r266)
         r273: ? <- SetJumpCondition(r268)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r276: ? <- Const { value: 7837936, size: 8 }
         r277: ? <- LoadMem { addr: r276, size: 4 }
         r279: ? <- ArithK(BitOr, r277, 2048)
         r281: ? <- Const { value: 7837936, size: 8 }
         r282: ? <- StoreMem { addr: r281, value: r279 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r289: ? <- Part { src: r160, offset: 0, size: 1 }
         r291: ? <- ArithK(BitAnd, r289, 64)
         r293: ? <- IsZero(r291)
         r298: ? <- SetJumpCondition(r293)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r301: ? <- Const { value: 7837936, size: 8 }
         r302: ? <- LoadMem { addr: r301, size: 4 }
         r304: ? <- ArithK(BitOr, r302, 4096)
         r306: ? <- Const { value: 7837936, size: 8 }
         r307: ? <- StoreMem { addr: r306, value: r304 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r315: ? <- ArithK(Add, r43, 64)
  (  2)  r316: ? <- LoadMem { addr: r315, size: 8 }
         r320: ? <- IsZero(r316)
         r325: ? <- SetJumpCondition(r320)
         r785: ? <- Upsilon { value: r316, phi_ref: r779 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r629: ? <- Part { src: r160, offset: 0, size: 1 }
         r631: ? <- ArithK(BitAnd, r629, 8)
         r633: ? <- IsZero(r631)
         r638: ? <- Not(r633)
         r639: ? <- SetJumpCondition(r638)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r642: ? <- ArithK(Add, r12, 5846864)
         r786: ? <- Upsilon { value: r642, phi_ref: r779 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r779: ? <- Phi
         r334: ? <- CArg { value: r779, next_arg: None }
         r335: ? <- CArg { value: r65, next_arg: Some(r334) }
         r336: redisSetPushCallback <TypeID(297899v1)> <- Const { value: 5853696, size: 8 }
         r337: ? <- Call { callee: r336, first_arg: Some(r335) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r349: ? <- ArithK(Add, r43, 48)
         r350: ? <- LoadMem { addr: r349, size: 8 }
         r353: ? <- ArithK(Add, r43, 8)
         r354: ? <- LoadMem { addr: r353, size: 8 }
         r358: ? <- Const { value: 7838032, size: 8 }
         r359: ? <- StoreMem { addr: r358, value: r350 }
         r361: ? <- ArithK(Add, r43, 56)
         r362: ? <- LoadMem { addr: r361, size: 8 }
         r365: ? <- Const { value: 7838040, size: 8 }
         r366: ? <- StoreMem { addr: r365, value: r362 }
         r373: ? <- CArg { value: r354, next_arg: None }
         r374: ? <- CArg { value: r65, next_arg: Some(r373) }
         r375: redisContextUpdateConnectTimeout <TypeID(297630v1)> <- Const { value: 5842752, size: 8 }
  (  2)  r376: ? <- Call { callee: r375, first_arg: Some(r374) }
         r387: ? <- Part { src: r376, offset: 0, size: 4 }
         r388: ? <- Part { src: r376, offset: 0, size: 4 }
         r389: ? <- Arith(BitAnd, r387, r388)
         r391: ? <- IsZero(r389)
         r396: ? <- Not(r391)
         r397: ? <- SetJumpCondition(r396)
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r400: ? <- ArithK(Add, r43, 16)
         r401: ? <- LoadMem { addr: r400, size: 8 }
         r410: ? <- CArg { value: r401, next_arg: None }
         r411: ? <- CArg { value: r65, next_arg: Some(r410) }
         r412: redisContextUpdateCommandTimeout <TypeID(297627v1)> <- Const { value: 5844704, size: 8 }
  (  2)  r413: ? <- Call { callee: r412, first_arg: Some(r411) }
         r424: ? <- Part { src: r413, offset: 0, size: 4 }
         r425: ? <- Part { src: r413, offset: 0, size: 4 }
         r426: ? <- Arith(BitAnd, r424, r425)
         r428: ? <- IsZero(r426)
         r433: ? <- Not(r428)
         r434: ? <- SetJumpCondition(r433)
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
  (  3)  r438: ? <- LoadMem { addr: r43, size: 4 }
         r445: ? <- IsZero(r438)
         r450: ? <- SetJumpCondition(r445)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r454: ? <- ArithK(Add, r438, -1)
         r458: ? <- IsZero(r454)
         r461: ? <- SetJumpCondition(r458)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r465: ? <- ArithK(Add, r438, -2)
         r469: ? <- IsZero(r465)
         r472: ? <- Not(r469)
         r473: ? <- SetJumpCondition(r472)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r480: ? <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r492: ? <- NotYetImplemented("unsupported: movd xmm1,eax")
         r493: ? <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r494: ? <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r746: ? <- ArithK(Add, r43, 8)
         r747: ? <- LoadMem { addr: r746, size: 8 }
         r750: ? <- ArithK(Add, r43, 24)
         r751: ? <- LoadMem { addr: r750, size: 8 }
         r763: ? <- CArg { value: r747, next_arg: None }
         r764: ? <- CArg { value: r751, next_arg: Some(r763) }
         r765: ? <- CArg { value: r65, next_arg: Some(r764) }
         r766: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r767: ? <- Call { callee: r766, first_arg: Some(r765) }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r694: ? <- ArithK(Add, r43, 8)
         r695: ? <- LoadMem { addr: r694, size: 8 }
         r698: ? <- ArithK(Add, r43, 40)
         r699: ? <- LoadMem { addr: r698, size: 4 }
         r704: ? <- ArithK(Add, r43, 32)
         r705: ? <- LoadMem { addr: r704, size: 8 }
         r708: ? <- ArithK(Add, r43, 24)
         r709: ? <- LoadMem { addr: r708, size: 8 }
         r727: ? <- CArg { value: r709, next_arg: None }
         r728: ? <- CArg { value: r695, next_arg: Some(r727) }
         r729: ? <- CArg { value: r699, next_arg: Some(r728) }
         r730: ? <- CArg { value: r705, next_arg: Some(r729) }
         r731: ? <- CArg { value: r65, next_arg: Some(r730) }
         r732: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r733: ? <- Call { callee: r732, first_arg: Some(r731) }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r496: ? <- Const { value: 7837800, size: 8 }
         r497: ? <- LoadMem { addr: r496, size: 4 }
         r504: ? <- IsZero(r497)
         r509: ? <- Not(r504)
         r510: ? <- SetJumpCondition(r509)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r513: ? <- Const { value: 7837932, size: 8 }
         r514: ? <- LoadMem { addr: r513, size: 4 }
         r516: ? <- ArithK(Add, r514, 1)
         r520: ? <- IsZero(r516)
         r523: ? <- SetJumpCondition(r520)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r526: ? <- ArithK(Add, r43, 16)
         r527: ? <- LoadMem { addr: r526, size: 8 }
         r531: ? <- IsZero(r527)
         r536: ? <- SetJumpCondition(r531)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r539: ? <- Const { value: 7837936, size: 8 }
         r540: ? <- LoadMem { addr: r539, size: 1 }
         r542: ? <- ArithK(BitAnd, r540, 1)
         r544: ? <- IsZero(r542)
         r549: ? <- SetJumpCondition(r544)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r563: ? <- CArg { value: r65, next_arg: None }
         r564: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r565: ? <- Call { callee: r564, first_arg: Some(r563) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r578: ? <- ArithK(Add, r12, 6951854)
         r580: ? <- Const { value: 5, size: 4 }
         r594: ? <- CArg { value: r578, next_arg: None }
         r595: ? <- CArg { value: r580, next_arg: Some(r594) }
         r596: ? <- CArg { value: r65, next_arg: Some(r595) }
         r597: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r598: ? <- Call { callee: r597, first_arg: Some(r596) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r627: ? <- SetReturnValue(r65)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r649: ? <- CArg { value: r65, next_arg: None }
         r650: redisFree <TypeID(298045v1)> <- Const { value: 5852928, size: 8 }
         r651: ? <- Call { callee: r650, first_arg: Some(r649) }
         r784: ? <- Upsilon { value: r65, phi_ref: r782 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r782: ? <- Phi
         r661: ? <- Part { src: r782, offset: 0, size: 4 }
         r662: ? <- Part { src: r782, offset: 0, size: 4 }
         r663: ? <- Arith(BitXor, r661, r662)
         r664: ? <- Part { src: r782, offset: 4, size: 4 }
         r665: ? <- Concat { lo: r663, hi: r664 }
         r691: ? <- SetReturnValue(r665)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:RBX;
  [[7837800]:8]:8(pre:arg0[8 .. 4] ++ 1,
                  pre:RSI[8 .. 4] ++ 272,
                  pre:RDX,
                  pre:RCX);
  ;
  r782 := pre:RBX;
  if IsZero (7837792) {
    goto T33
  }
  [7837792]:* := pre:RIP + 7837920;
  hi_sdsempty();
  [7837944]:* := hi_sdsempty();
  let r118: Bytes(8) = redisReaderCreate();
  [7837932]:* := 4294967295;
  [7837952]:* := r118;
  ;
  if IsZero ([7837944]:8) {
    goto T32
  }
  ;
  if IsZero (r118) {
    goto T32
  }
  let r160: Bytes(4) = [pre:arg0 + 4]:4;
  ;
  if ! IsZero (r160[1 .. 0] & 1) {
    goto T5
  }
  [7837936]:* := [7837936]:4 | 1;
  goto T5
  T5: {
    ;
    if IsZero (r160[1 .. 0] & 2) {
      goto T7
    }
    [7837936]:* := [7837936]:4 | 128;
    goto T7
    T7: {
      ;
      if IsZero (r160[1 .. 0] & 4) {
        goto T9
      }
      [7837936]:* := [7837936]:4 | 512;
      goto T9
      T9: {
        ;
        if IsZero (r160[1 .. 0] & 16) {
          goto T11
        }
        [7837936]:* := [7837936]:4 | 1024;
        goto T11
        T11: {
          ;
          if IsZero (r160[1 .. 0] & 32) {
            goto T13
          }
          [7837936]:* := [7837936]:4 | 2048;
          goto T13
          T13: {
            ;
            if IsZero (r160[1 .. 0] & 64) {
              goto T15
            }
            [7837936]:* := [7837936]:4 | 4096;
            goto T15
            T15: {
              let r316: Bytes(8) = [pre:arg0 + 64]:8;
              ;
              r779 := [pre:arg0 + 64]:8;
              if IsZero (r316) {
                ;
                if ! IsZero (r160[1 .. 0] & 8) {
                  goto T17
                }
                r779 := pre:RIP + 5846864;
                goto T16
              }
              goto T16
              T16: {
                let mut r779: Bytes(8);
                redisSetPushCallback(7837792,
                                     r779);
                goto T17
              }
              
              T17: {
                [7838032]:* := [pre:arg0 + 48]:8;
                [7838040]:* := [pre:arg0 + 56]:8;
                let r376: Bytes(8) = redisContextUpdateConnectTimeout(7837792,
                                                                      [pre:arg0 + 8]:8);
                ;
                if ! IsZero (r376[4 .. 0] & r376[4 .. 0]) {
                  goto T28
                }
                let r413: Bytes(8) = redisContextUpdateCommandTimeout(7837792,
                                                                      [pre:arg0 + 16]:8);
                ;
                if ! IsZero (r413[4 .. 0] & r413[4 .. 0]) {
                  goto T28
                }
                let r438: Bytes(4) = [pre:arg0]:4;
                ;
                if IsZero (r438) {
                  redisContextConnectBindTcp(7837792,
                                             [pre:arg0 + 32]:8,
                                             [pre:arg0 + 40]:4,
                                             [pre:arg0 + 8]:8,
                                             [pre:arg0 + 24]:8);
                  goto T23
                }
                ;
                if IsZero (r438 - 1) {
                  redisContextConnectUnix(7837792,
                                          [pre:arg0 + 24]:8,
                                          [pre:arg0 + 8]:8);
                  goto T23
                }
                ;
                if ! IsZero (r438 - 2) {
                  goto T32
                }
                TODO /* unsupported: movd xmm0,[rbp+18h] */;
                TODO /* unsupported: movd xmm1,eax */;
                TODO /* unsupported: punpckldq xmm0,xmm1 */;
                TODO /* unsupported: movq [rbx+8Ch],xmm0 */;
                goto T23
                T23: {
                  ;
                  if ! IsZero ([7837800]:4) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837932]:4 + 1) {
                    goto T29
                  }
                  ;
                  if IsZero ([pre:arg0 + 16]:8) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837936]:1 & 1) {
                    goto T29
                  }
                  redisContextSetTimeout(7837792);
                  goto T29
                }
                
                T28: {
                  __redisSetError(7837792,
                                  5,
                                  (pre:RIP + 6951854));
                  goto T29
                }
                
                T29: {
                  ;
                  return 7837792
                }
              
              }
            
            }
          
          }
        
        }
      
      }
    
    }
  
  }
  
  T32: {
    redisFree(7837792);
    r782 := 7837792;
    goto T33
  }
  
  T33: {
    let mut r782: Bytes(8);
    ;
    return r782[8 .. 4] ++ (r782[4 .. 0] ^ r782[4 .. 0])
  }

}
