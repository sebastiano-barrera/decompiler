---
source: decompiler/tests/test_tool.rs
assertion_line: 138
expression: out
---
 --- mil
program  72 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), size: 8 }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), size: 0 }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), size: 0 }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), size: 0 }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), size: 0 }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), size: 0 }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), size: 0 }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), size: 0 }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), size: 0 }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), size: 8 }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), size: 8 }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), size: 8 }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), size: 8 }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), size: 8 }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), size: 8 }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), size: 8 }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), size: 64 }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), size: 64 }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), size: 64 }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), size: 64 }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), size: 64 }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), size: 64 }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), size: 64 }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), size: 64 }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), size: 64 }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), size: 64 }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), size: 64 }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), size: 64 }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), size: 64 }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), size: 64 }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
   43 r14 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), size: 8 }
   45 r15 <- Get(r46)
   46 r47 <- Ancestral { anc_name: AncestralName("arg2"), size: 8 }
   47 r19 <- Get(r47)
   48 r48 <- Ancestral { anc_name: AncestralName("arg3"), size: 8 }
   49 r18 <- Get(r48)
   50 r49 <- Ancestral { anc_name: AncestralName("arg4"), size: 16 }
   51 r50 <- Part { src: r49, offset: 0, size: 8 }
   52 r20 <- Get(r50)
   53 r51 <- Part { src: r49, offset: 8, size: 8 }
   54 r21 <- Get(r51)
   55 r52 <- Ancestral { anc_name: AncestralName("arg5"), size: 16 }
   56 r54 <- Part { src: r52, offset: 0, size: 8 }
   57 r53 <- ArithK(Add, r12, 8)
   58 r53 <- StoreMem { addr: r53, value: r54 }
   59 r54 <- Part { src: r52, offset: 8, size: 8 }
   60 r53 <- ArithK(Add, r12, 16)
   61 r53 <- StoreMem { addr: r53, value: r54 }
0x401374:
   62 r46 <- Const { value: 20, size: 8 }
   63 r46 <- Arith(Add, r46, r12)
   64 r45 <- LoadMem { addr: r46, size: 1 }
   65 r47 <- Part { src: r16, offset: 1, size: 7 }
   66 r16 <- Concat { lo: r45, hi: r47 }
0x401378:
   67 r45 <- Void
   68 r45 <- Concat { lo: r45, hi: r16 }
   69 r45 <- Part { src: r45, offset: 0, size: 1 }
   70 r47 <- SetReturnValue(r45)
   71 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  72 instrs
.B0:    ;;  → Always(Return).
  (  3)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
         r14 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
  (  2)  r55 <- Ancestral { anc_name: AncestralName("arg5"), size: 16 }
         r56 <- Part { src: r55, offset: 0, size: 8 }
         r57 <- ArithK(Add, r10, 8)
         r58 <- StoreMem { addr: r57, value: r56 }
         r59 <- Part { src: r55, offset: 8, size: 8 }
         r60 <- ArithK(Add, r10, 16)
         r61 <- StoreMem { addr: r60, value: r59 }
         r62 <- Const { value: 20, size: 8 }
         r63 <- Arith(Add, r62, r10)
         r64 <- LoadMem { addr: r63, size: 1 }
         r65 <- Part { src: r14, offset: 1, size: 7 }
         r66 <- Concat { lo: r64, hi: r65 }
         r68 <- Concat { lo: r67, hi: r66 }
         r69 <- Part { src: r68, offset: 0, size: 1 }
         r70 <- SetReturnValue(r69)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r10, r55, r56, r57, r58, r59, r60, r61, r73, r70]
  domtree:
    BlockID(0)

 --- ssa
ssa program  77 instrs
.B0:    ;;  → Always(Return).
  (  2)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  3)  r55 <- Ancestral { anc_name: AncestralName("arg5"), size: 16 }
         r56 <- StructGetMember { struct_value: r55, name: "member0", size: 16 }
         r57 <- ArithK(Add, r10, 8)
         r58 <- StoreMem { addr: r57, value: r56 }
         r59 <- Part { src: r55, offset: 8, size: 8 }
         r60 <- ArithK(Add, r10, 16)
         r61 <- StoreMem { addr: r60, value: r59 }
         r73 <- StructGetMember { struct_value: r55, name: "member2", size: 16 }
         r70 <- SetReturnValue(r73)


 --- ast

T0: {
  [pre:RSP + 8]:* := pre:arg5.member0;
  [pre:RSP + 16]:* := pre:arg5[16 .. 8];
  ;
  return pre:arg5.member2
}
