---
source: decompiler/tests/test_tool.rs
assertion_line: 126
expression: out
---
 --- mil
program  759 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), size: 8 }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), size: 0 }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), size: 0 }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), size: 0 }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), size: 0 }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), size: 0 }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), size: 0 }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), size: 0 }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), size: 0 }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), size: 8 }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), size: 8 }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), size: 8 }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), size: 8 }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), size: 8 }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), size: 8 }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), size: 8 }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), size: 8 }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), size: 8 }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), size: 8 }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), size: 64 }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), size: 64 }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), size: 64 }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), size: 64 }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), size: 64 }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), size: 64 }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), size: 64 }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), size: 64 }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), size: 64 }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), size: 64 }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), size: 64 }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), size: 64 }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), size: 64 }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), size: 64 }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), size: 64 }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), size: 64 }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
   43 r14 <- Get(r45)
0x595210:
   44 r12 <- ArithK(Add, r12, -8)
   45 r46 <- StoreMem { addr: r12, value: r11 }
0x595211:
   46 r45 <- Const { value: 272, size: 4 }
   47 r46 <- Part { src: r15, offset: 4, size: 4 }
   48 r15 <- Concat { lo: r45, hi: r46 }
0x595216:
   49 r11 <- Get(r14)
0x595219:
   50 r45 <- Const { value: 1, size: 4 }
   51 r46 <- Part { src: r14, offset: 4, size: 4 }
   52 r14 <- Concat { lo: r45, hi: r46 }
0x59521e:
   53 r12 <- ArithK(Add, r12, -8)
   54 r46 <- StoreMem { addr: r12, value: r17 }
0x59521f:
   55 r46 <- Const { value: 8, size: 8 }
   56 r12 <- Arith(Sub, r12, r46)
   57 r12 <- Get(r12)
   58 r10 <- OverflowOf(r12)
   59 r2 <- CarryOf(r12)
   60 r6 <- SignOf(r12)
   61 r5 <- IsZero(r12)
   62 r47 <- Part { src: r12, offset: 0, size: 1 }
   63 r3 <- Parity(r47)
0x595223:
   64 r45 <- Const { value: 7837792, size: 8 }
   65 r16 <- Get(r45)
0x59522a:
   66 r46 <- Const { value: 8, size: 8 }
   67 r46 <- Arith(Add, r46, r16)
   68 r45 <- LoadMem { addr: r46, size: 8 }
   69 r45 <- LoadMem { addr: r45, size: 8 }
   70 r47 <- CArg { value: r18, next_arg: None }
   71 r47 <- CArg { value: r19, next_arg: Some(r47) }
   72 r47 <- CArg { value: r15, next_arg: Some(r47) }
   73 r47 <- CArg { value: r14, next_arg: Some(r47) }
   74 r47 <- Call { callee: r45, first_arg: Some(r47) }
   75 r2 <- UndefinedBool
   76 r3 <- UndefinedBool
   77 r4 <- UndefinedBool
   78 r5 <- UndefinedBool
   79 r6 <- UndefinedBool
   80 r7 <- UndefinedBool
   81 r8 <- UndefinedBool
   82 r9 <- UndefinedBool
   83 r10 <- UndefinedBool
   84 r47 <- Get(r16)
0x59522d:
   85 r16 <- Arith(BitAnd, r16, r16)
   86 r6 <- SignOf(r16)
   87 r5 <- IsZero(r16)
   88 r47 <- Part { src: r16, offset: 0, size: 1 }
   89 r3 <- Parity(r16)
   90 r2 <- False
   91 r10 <- False
0x595230:
   92 r45 <- SetJumpCondition(r5)
   93 r45 <- Control(JmpExtIf(5854160))
0x595236:
   94 r17 <- Get(r16)
0x595239:
   95 r45 <- Const { value: 7837920, size: 8 }
   96 r45 <- Arith(Add, r45, r13)
   97 r16 <- Get(r45)
0x595240:
   98 r46 <- Const { value: 0, size: 8 }
   99 r46 <- Arith(Add, r46, r17)
  100 r46 <- StoreMem { addr: r46, value: r16 }
0x595243:
  101 r45 <- Const { value: 5857232, size: 8 }
  102 r46 <- Call { callee: r45, first_arg: None }
  103 r2 <- UndefinedBool
  104 r3 <- UndefinedBool
  105 r4 <- UndefinedBool
  106 r5 <- UndefinedBool
  107 r6 <- UndefinedBool
  108 r7 <- UndefinedBool
  109 r8 <- UndefinedBool
  110 r9 <- UndefinedBool
  111 r10 <- UndefinedBool
  112 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595248:
  113 r46 <- Const { value: 152, size: 8 }
  114 r46 <- Arith(Add, r46, r17)
  115 r46 <- StoreMem { addr: r46, value: r16 }
0x59524f:
  116 r45 <- Const { value: 5852912, size: 8 }
  117 r46 <- Call { callee: r45, first_arg: None }
  118 r2 <- UndefinedBool
  119 r3 <- UndefinedBool
  120 r4 <- UndefinedBool
  121 r5 <- UndefinedBool
  122 r6 <- UndefinedBool
  123 r7 <- UndefinedBool
  124 r8 <- UndefinedBool
  125 r9 <- UndefinedBool
  126 r10 <- UndefinedBool
  127 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595254:
  128 r46 <- Const { value: 152, size: 8 }
  129 r46 <- Arith(Add, r46, r17)
  130 r45 <- LoadMem { addr: r46, size: 8 }
  131 r47 <- Const { value: 0, size: 8 }
  132 r45 <- Arith(Sub, r45, r47)
  133 r10 <- OverflowOf(r45)
  134 r2 <- CarryOf(r45)
  135 r6 <- SignOf(r45)
  136 r5 <- IsZero(r45)
  137 r48 <- Part { src: r45, offset: 0, size: 1 }
  138 r3 <- Parity(r48)
0x59525c:
  139 r45 <- Const { value: 4294967295, size: 4 }
  140 r46 <- Const { value: 140, size: 8 }
  141 r46 <- Arith(Add, r46, r17)
  142 r46 <- StoreMem { addr: r46, value: r45 }
0x595266:
  143 r46 <- Const { value: 160, size: 8 }
  144 r46 <- Arith(Add, r46, r17)
  145 r46 <- StoreMem { addr: r46, value: r16 }
0x59526d:
  146 r45 <- SetJumpCondition(r5)
  147 r45 <- Control(JmpExtIf(5854152))
0x595273:
  148 r16 <- Arith(BitAnd, r16, r16)
  149 r6 <- SignOf(r16)
  150 r5 <- IsZero(r16)
  151 r47 <- Part { src: r16, offset: 0, size: 1 }
  152 r3 <- Parity(r16)
  153 r2 <- False
  154 r10 <- False
0x595276:
  155 r45 <- SetJumpCondition(r5)
  156 r45 <- Control(JmpExtIf(5854152))
0x59527c:
  157 r46 <- Const { value: 4, size: 8 }
  158 r46 <- Arith(Add, r46, r11)
  159 r45 <- LoadMem { addr: r46, size: 4 }
  160 r47 <- Part { src: r16, offset: 4, size: 4 }
  161 r16 <- Concat { lo: r45, hi: r47 }
0x59527f:
  162 r46 <- Part { src: r16, offset: 0, size: 1 }
  163 r47 <- Const { value: 1, size: 1 }
  164 r46 <- Arith(BitAnd, r46, r47)
  165 r6 <- SignOf(r46)
  166 r5 <- IsZero(r46)
  167 r48 <- Part { src: r46, offset: 0, size: 1 }
  168 r3 <- Parity(r46)
  169 r2 <- False
  170 r10 <- False
0x595281:
  171 r45 <- Not(r5)
  172 r46 <- SetJumpCondition(r45)
  173 r46 <- Control(JmpExtIf(5853834))
0x595283:
  174 r46 <- Const { value: 144, size: 8 }
  175 r46 <- Arith(Add, r46, r17)
  176 r45 <- LoadMem { addr: r46, size: 4 }
  177 r47 <- Const { value: 1, size: 4 }
  178 r45 <- Arith(BitOr, r45, r47)
  179 r48 <- Const { value: 144, size: 8 }
  180 r48 <- Arith(Add, r48, r17)
  181 r48 <- StoreMem { addr: r48, value: r45 }
  182 r10 <- False
  183 r2 <- False
  184 r6 <- SignOf(r45)
  185 r5 <- IsZero(r45)
  186 r49 <- Part { src: r45, offset: 0, size: 1 }
  187 r3 <- Parity(r49)
0x59528a:
  188 r46 <- Part { src: r16, offset: 0, size: 1 }
  189 r47 <- Const { value: 2, size: 1 }
  190 r46 <- Arith(BitAnd, r46, r47)
  191 r6 <- SignOf(r46)
  192 r5 <- IsZero(r46)
  193 r48 <- Part { src: r46, offset: 0, size: 1 }
  194 r3 <- Parity(r46)
  195 r2 <- False
  196 r10 <- False
0x59528c:
  197 r45 <- SetJumpCondition(r5)
  198 r45 <- Control(JmpExtIf(5853848))
0x59528e:
  199 r46 <- Const { value: 144, size: 8 }
  200 r46 <- Arith(Add, r46, r17)
  201 r45 <- LoadMem { addr: r46, size: 4 }
  202 r47 <- Const { value: 128, size: 4 }
  203 r45 <- Arith(BitOr, r45, r47)
  204 r48 <- Const { value: 144, size: 8 }
  205 r48 <- Arith(Add, r48, r17)
  206 r48 <- StoreMem { addr: r48, value: r45 }
  207 r10 <- False
  208 r2 <- False
  209 r6 <- SignOf(r45)
  210 r5 <- IsZero(r45)
  211 r49 <- Part { src: r45, offset: 0, size: 1 }
  212 r3 <- Parity(r49)
0x595298:
  213 r46 <- Part { src: r16, offset: 0, size: 1 }
  214 r47 <- Const { value: 4, size: 1 }
  215 r46 <- Arith(BitAnd, r46, r47)
  216 r6 <- SignOf(r46)
  217 r5 <- IsZero(r46)
  218 r48 <- Part { src: r46, offset: 0, size: 1 }
  219 r3 <- Parity(r46)
  220 r2 <- False
  221 r10 <- False
0x59529a:
  222 r45 <- SetJumpCondition(r5)
  223 r45 <- Control(JmpExtIf(5853862))
0x59529c:
  224 r46 <- Const { value: 144, size: 8 }
  225 r46 <- Arith(Add, r46, r17)
  226 r45 <- LoadMem { addr: r46, size: 4 }
  227 r47 <- Const { value: 512, size: 4 }
  228 r45 <- Arith(BitOr, r45, r47)
  229 r48 <- Const { value: 144, size: 8 }
  230 r48 <- Arith(Add, r48, r17)
  231 r48 <- StoreMem { addr: r48, value: r45 }
  232 r10 <- False
  233 r2 <- False
  234 r6 <- SignOf(r45)
  235 r5 <- IsZero(r45)
  236 r49 <- Part { src: r45, offset: 0, size: 1 }
  237 r3 <- Parity(r49)
0x5952a6:
  238 r46 <- Part { src: r16, offset: 0, size: 1 }
  239 r47 <- Const { value: 16, size: 1 }
  240 r46 <- Arith(BitAnd, r46, r47)
  241 r6 <- SignOf(r46)
  242 r5 <- IsZero(r46)
  243 r48 <- Part { src: r46, offset: 0, size: 1 }
  244 r3 <- Parity(r46)
  245 r2 <- False
  246 r10 <- False
0x5952a8:
  247 r45 <- SetJumpCondition(r5)
  248 r45 <- Control(JmpExtIf(5853876))
0x5952aa:
  249 r46 <- Const { value: 144, size: 8 }
  250 r46 <- Arith(Add, r46, r17)
  251 r45 <- LoadMem { addr: r46, size: 4 }
  252 r47 <- Const { value: 1024, size: 4 }
  253 r45 <- Arith(BitOr, r45, r47)
  254 r48 <- Const { value: 144, size: 8 }
  255 r48 <- Arith(Add, r48, r17)
  256 r48 <- StoreMem { addr: r48, value: r45 }
  257 r10 <- False
  258 r2 <- False
  259 r6 <- SignOf(r45)
  260 r5 <- IsZero(r45)
  261 r49 <- Part { src: r45, offset: 0, size: 1 }
  262 r3 <- Parity(r49)
0x5952b4:
  263 r46 <- Part { src: r16, offset: 0, size: 1 }
  264 r47 <- Const { value: 32, size: 1 }
  265 r46 <- Arith(BitAnd, r46, r47)
  266 r6 <- SignOf(r46)
  267 r5 <- IsZero(r46)
  268 r48 <- Part { src: r46, offset: 0, size: 1 }
  269 r3 <- Parity(r46)
  270 r2 <- False
  271 r10 <- False
0x5952b6:
  272 r45 <- SetJumpCondition(r5)
  273 r45 <- Control(JmpExtIf(5853890))
0x5952b8:
  274 r46 <- Const { value: 144, size: 8 }
  275 r46 <- Arith(Add, r46, r17)
  276 r45 <- LoadMem { addr: r46, size: 4 }
  277 r47 <- Const { value: 2048, size: 4 }
  278 r45 <- Arith(BitOr, r45, r47)
  279 r48 <- Const { value: 144, size: 8 }
  280 r48 <- Arith(Add, r48, r17)
  281 r48 <- StoreMem { addr: r48, value: r45 }
  282 r10 <- False
  283 r2 <- False
  284 r6 <- SignOf(r45)
  285 r5 <- IsZero(r45)
  286 r49 <- Part { src: r45, offset: 0, size: 1 }
  287 r3 <- Parity(r49)
0x5952c2:
  288 r46 <- Part { src: r16, offset: 0, size: 1 }
  289 r47 <- Const { value: 64, size: 1 }
  290 r46 <- Arith(BitAnd, r46, r47)
  291 r6 <- SignOf(r46)
  292 r5 <- IsZero(r46)
  293 r48 <- Part { src: r46, offset: 0, size: 1 }
  294 r3 <- Parity(r46)
  295 r2 <- False
  296 r10 <- False
0x5952c4:
  297 r45 <- SetJumpCondition(r5)
  298 r45 <- Control(JmpExtIf(5853904))
0x5952c6:
  299 r46 <- Const { value: 144, size: 8 }
  300 r46 <- Arith(Add, r46, r17)
  301 r45 <- LoadMem { addr: r46, size: 4 }
  302 r47 <- Const { value: 4096, size: 4 }
  303 r45 <- Arith(BitOr, r45, r47)
  304 r48 <- Const { value: 144, size: 8 }
  305 r48 <- Arith(Add, r48, r17)
  306 r48 <- StoreMem { addr: r48, value: r45 }
  307 r10 <- False
  308 r2 <- False
  309 r6 <- SignOf(r45)
  310 r5 <- IsZero(r45)
  311 r49 <- Part { src: r45, offset: 0, size: 1 }
  312 r3 <- Parity(r49)
0x5952d0:
  313 r46 <- Const { value: 64, size: 8 }
  314 r46 <- Arith(Add, r46, r11)
  315 r45 <- LoadMem { addr: r46, size: 8 }
  316 r15 <- Get(r45)
0x5952d4:
  317 r15 <- Arith(BitAnd, r15, r15)
  318 r6 <- SignOf(r15)
  319 r5 <- IsZero(r15)
  320 r47 <- Part { src: r15, offset: 0, size: 1 }
  321 r3 <- Parity(r15)
  322 r2 <- False
  323 r10 <- False
0x5952d7:
  324 r45 <- SetJumpCondition(r5)
  325 r45 <- Control(JmpExtIf(5854128))
0x5952dd:
  326 r14 <- Get(r17)
0x5952e0:
  327 r45 <- Const { value: 5853696, size: 8 }
  328 r47 <- Void
  329 r47 <- Get(r14)
  330 r48 <- Void
  331 r48 <- Get(r15)
  332 r46 <- CArg { value: r48, next_arg: None }
  333 r46 <- CArg { value: r47, next_arg: Some(r46) }
  334 r46 <- Call { callee: r45, first_arg: Some(r46) }
  335 r2 <- UndefinedBool
  336 r3 <- UndefinedBool
  337 r4 <- UndefinedBool
  338 r5 <- UndefinedBool
  339 r6 <- UndefinedBool
  340 r7 <- UndefinedBool
  341 r8 <- UndefinedBool
  342 r9 <- UndefinedBool
  343 r10 <- UndefinedBool
  344 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5952e5:
  345 r46 <- Const { value: 48, size: 8 }
  346 r46 <- Arith(Add, r46, r11)
  347 r45 <- LoadMem { addr: r46, size: 8 }
  348 r16 <- Get(r45)
0x5952e9:
  349 r46 <- Const { value: 8, size: 8 }
  350 r46 <- Arith(Add, r46, r11)
  351 r45 <- LoadMem { addr: r46, size: 8 }
  352 r15 <- Get(r45)
0x5952ed:
  353 r14 <- Get(r17)
0x5952f0:
  354 r46 <- Const { value: 240, size: 8 }
  355 r46 <- Arith(Add, r46, r17)
  356 r46 <- StoreMem { addr: r46, value: r16 }
0x5952f7:
  357 r46 <- Const { value: 56, size: 8 }
  358 r46 <- Arith(Add, r46, r11)
  359 r45 <- LoadMem { addr: r46, size: 8 }
  360 r16 <- Get(r45)
0x5952fb:
  361 r46 <- Const { value: 248, size: 8 }
  362 r46 <- Arith(Add, r46, r17)
  363 r46 <- StoreMem { addr: r46, value: r16 }
0x595302:
  364 r45 <- Const { value: 5842752, size: 8 }
  365 r47 <- Void
  366 r47 <- Get(r14)
  367 r48 <- Void
  368 r48 <- Get(r15)
  369 r46 <- CArg { value: r48, next_arg: None }
  370 r46 <- CArg { value: r47, next_arg: Some(r46) }
  371 r46 <- Call { callee: r45, first_arg: Some(r46) }
  372 r2 <- UndefinedBool
  373 r3 <- UndefinedBool
  374 r4 <- UndefinedBool
  375 r5 <- UndefinedBool
  376 r6 <- UndefinedBool
  377 r7 <- UndefinedBool
  378 r8 <- UndefinedBool
  379 r9 <- UndefinedBool
  380 r10 <- UndefinedBool
  381 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595307:
  382 r46 <- Part { src: r16, offset: 0, size: 4 }
  383 r48 <- Part { src: r16, offset: 0, size: 4 }
  384 r46 <- Arith(BitAnd, r46, r48)
  385 r6 <- SignOf(r46)
  386 r5 <- IsZero(r46)
  387 r49 <- Part { src: r46, offset: 0, size: 1 }
  388 r3 <- Parity(r46)
  389 r2 <- False
  390 r10 <- False
0x595309:
  391 r45 <- Not(r5)
  392 r46 <- SetJumpCondition(r45)
  393 r46 <- Control(JmpExtIf(5854096))
0x59530f:
  394 r46 <- Const { value: 16, size: 8 }
  395 r46 <- Arith(Add, r46, r11)
  396 r45 <- LoadMem { addr: r46, size: 8 }
  397 r15 <- Get(r45)
0x595313:
  398 r14 <- Get(r17)
0x595316:
  399 r45 <- Const { value: 5844704, size: 8 }
  400 r47 <- Void
  401 r47 <- Get(r14)
  402 r48 <- Void
  403 r48 <- Get(r15)
  404 r46 <- CArg { value: r48, next_arg: None }
  405 r46 <- CArg { value: r47, next_arg: Some(r46) }
  406 r46 <- Call { callee: r45, first_arg: Some(r46) }
  407 r2 <- UndefinedBool
  408 r3 <- UndefinedBool
  409 r4 <- UndefinedBool
  410 r5 <- UndefinedBool
  411 r6 <- UndefinedBool
  412 r7 <- UndefinedBool
  413 r8 <- UndefinedBool
  414 r9 <- UndefinedBool
  415 r10 <- UndefinedBool
  416 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59531b:
  417 r46 <- Part { src: r16, offset: 0, size: 4 }
  418 r48 <- Part { src: r16, offset: 0, size: 4 }
  419 r46 <- Arith(BitAnd, r46, r48)
  420 r6 <- SignOf(r46)
  421 r5 <- IsZero(r46)
  422 r49 <- Part { src: r46, offset: 0, size: 1 }
  423 r3 <- Parity(r46)
  424 r2 <- False
  425 r10 <- False
0x59531d:
  426 r45 <- Not(r5)
  427 r46 <- SetJumpCondition(r45)
  428 r46 <- Control(JmpExtIf(5854096))
0x59531f:
  429 r46 <- Const { value: 0, size: 8 }
  430 r46 <- Arith(Add, r46, r11)
  431 r45 <- LoadMem { addr: r46, size: 4 }
  432 r47 <- Part { src: r16, offset: 4, size: 4 }
  433 r16 <- Concat { lo: r45, hi: r47 }
0x595322:
  434 r46 <- Part { src: r16, offset: 0, size: 4 }
  435 r48 <- Part { src: r16, offset: 0, size: 4 }
  436 r46 <- Arith(BitAnd, r46, r48)
  437 r6 <- SignOf(r46)
  438 r5 <- IsZero(r46)
  439 r49 <- Part { src: r46, offset: 0, size: 1 }
  440 r3 <- Parity(r46)
  441 r2 <- False
  442 r10 <- False
0x595324:
  443 r45 <- SetJumpCondition(r5)
  444 r45 <- Control(JmpExtIf(5854176))
0x59532a:
  445 r46 <- Part { src: r16, offset: 0, size: 4 }
  446 r47 <- Const { value: 1, size: 4 }
  447 r46 <- Arith(Sub, r46, r47)
  448 r10 <- OverflowOf(r46)
  449 r2 <- CarryOf(r46)
  450 r6 <- SignOf(r46)
  451 r5 <- IsZero(r46)
  452 r48 <- Part { src: r46, offset: 0, size: 1 }
  453 r3 <- Parity(r48)
0x59532d:
  454 r45 <- SetJumpCondition(r5)
  455 r45 <- Control(JmpExtIf(5854208))
0x595333:
  456 r46 <- Part { src: r16, offset: 0, size: 4 }
  457 r47 <- Const { value: 2, size: 4 }
  458 r46 <- Arith(Sub, r46, r47)
  459 r10 <- OverflowOf(r46)
  460 r2 <- CarryOf(r46)
  461 r6 <- SignOf(r46)
  462 r5 <- IsZero(r46)
  463 r48 <- Part { src: r46, offset: 0, size: 1 }
  464 r3 <- Parity(r48)
0x595336:
  465 r45 <- Not(r5)
  466 r46 <- SetJumpCondition(r45)
  467 r46 <- Control(JmpExtIf(5854152))
0x59533c:
  468 r46 <- Const { value: 144, size: 8 }
  469 r46 <- Arith(Add, r46, r17)
  470 r45 <- LoadMem { addr: r46, size: 4 }
  471 r47 <- Part { src: r16, offset: 4, size: 4 }
  472 r16 <- Concat { lo: r45, hi: r47 }
0x595342:
  473 r45 <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
0x595347:
  474 r46 <- Part { src: r16, offset: 0, size: 4 }
  475 r47 <- Const { value: 2, size: 4 }
  476 r46 <- Arith(BitOr, r46, r47)
  477 r48 <- Part { src: r16, offset: 4, size: 4 }
  478 r16 <- Concat { lo: r46, hi: r48 }
  479 r10 <- False
  480 r2 <- False
  481 r6 <- SignOf(r46)
  482 r5 <- IsZero(r46)
  483 r49 <- Part { src: r46, offset: 0, size: 1 }
  484 r3 <- Parity(r49)
0x59534a:
  485 r45 <- NotYetImplemented("unsupported: movd xmm1,eax")
0x59534e:
  486 r45 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
0x595352:
  487 r45 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
0x59535a:
  488 r46 <- Const { value: 8, size: 8 }
  489 r46 <- Arith(Add, r46, r17)
  490 r45 <- LoadMem { addr: r46, size: 4 }
  491 r47 <- Part { src: r16, offset: 4, size: 4 }
  492 r16 <- Concat { lo: r45, hi: r47 }
0x59535d:
  493 r46 <- Part { src: r16, offset: 0, size: 4 }
  494 r48 <- Part { src: r16, offset: 0, size: 4 }
  495 r46 <- Arith(BitAnd, r46, r48)
  496 r6 <- SignOf(r46)
  497 r5 <- IsZero(r46)
  498 r49 <- Part { src: r46, offset: 0, size: 1 }
  499 r3 <- Parity(r46)
  500 r2 <- False
  501 r10 <- False
0x59535f:
  502 r45 <- Not(r5)
  503 r46 <- SetJumpCondition(r45)
  504 r46 <- Control(JmpExtIf(5854116))
0x595361:
  505 r46 <- Const { value: 140, size: 8 }
  506 r46 <- Arith(Add, r46, r17)
  507 r45 <- LoadMem { addr: r46, size: 4 }
  508 r47 <- Const { value: -1, size: 4 }
  509 r45 <- Arith(Sub, r45, r47)
  510 r10 <- OverflowOf(r45)
  511 r2 <- CarryOf(r45)
  512 r6 <- SignOf(r45)
  513 r5 <- IsZero(r45)
  514 r48 <- Part { src: r45, offset: 0, size: 1 }
  515 r3 <- Parity(r48)
0x595368:
  516 r45 <- SetJumpCondition(r5)
  517 r45 <- Control(JmpExtIf(5854116))
0x59536a:
  518 r46 <- Const { value: 16, size: 8 }
  519 r46 <- Arith(Add, r46, r11)
  520 r45 <- LoadMem { addr: r46, size: 8 }
  521 r16 <- Get(r45)
0x59536e:
  522 r16 <- Arith(BitAnd, r16, r16)
  523 r6 <- SignOf(r16)
  524 r5 <- IsZero(r16)
  525 r47 <- Part { src: r16, offset: 0, size: 1 }
  526 r3 <- Parity(r16)
  527 r2 <- False
  528 r10 <- False
0x595371:
  529 r45 <- SetJumpCondition(r5)
  530 r45 <- Control(JmpExtIf(5854116))
0x595373:
  531 r46 <- Const { value: 144, size: 8 }
  532 r46 <- Arith(Add, r46, r17)
  533 r45 <- LoadMem { addr: r46, size: 1 }
  534 r47 <- Const { value: 1, size: 1 }
  535 r45 <- Arith(BitAnd, r45, r47)
  536 r6 <- SignOf(r45)
  537 r5 <- IsZero(r45)
  538 r48 <- Part { src: r45, offset: 0, size: 1 }
  539 r3 <- Parity(r45)
  540 r2 <- False
  541 r10 <- False
0x59537a:
  542 r45 <- SetJumpCondition(r5)
  543 r45 <- Control(JmpExtIf(5854116))
0x59537c:
  544 r46 <- Const { value: 0, size: 8 }
  545 r46 <- Arith(Add, r46, r16)
  546 r45 <- LoadMem { addr: r46, size: 8 }
  547 r15 <- Get(r45)
0x59537f:
  548 r46 <- Const { value: 8, size: 8 }
  549 r46 <- Arith(Add, r46, r16)
  550 r45 <- LoadMem { addr: r46, size: 8 }
  551 r19 <- Get(r45)
0x595383:
  552 r14 <- Get(r17)
0x595386:
  553 r45 <- Const { value: 5844800, size: 8 }
  554 r47 <- Void
  555 r47 <- Get(r14)
  556 r46 <- CArg { value: r47, next_arg: None }
  557 r46 <- Call { callee: r45, first_arg: Some(r46) }
  558 r2 <- UndefinedBool
  559 r3 <- UndefinedBool
  560 r4 <- UndefinedBool
  561 r5 <- UndefinedBool
  562 r6 <- UndefinedBool
  563 r7 <- UndefinedBool
  564 r8 <- UndefinedBool
  565 r9 <- UndefinedBool
  566 r10 <- UndefinedBool
  567 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59538b:
  568 r45 <- Control(JmpExt(5854116))
0x595390:
  569 r45 <- Const { value: 6951854, size: 8 }
  570 r45 <- Arith(Add, r45, r13)
  571 r19 <- Get(r45)
0x595397:
  572 r45 <- Const { value: 5, size: 4 }
  573 r46 <- Part { src: r15, offset: 4, size: 4 }
  574 r15 <- Concat { lo: r45, hi: r46 }
0x59539c:
  575 r14 <- Get(r17)
0x59539f:
  576 r45 <- Const { value: 5852656, size: 8 }
  577 r47 <- Void
  578 r47 <- Get(r14)
  579 r48 <- Void
  580 r48 <- Get(r15)
  581 r48 <- Part { src: r48, offset: 0, size: 4 }
  582 r49 <- Void
  583 r49 <- Get(r19)
  584 r46 <- CArg { value: r49, next_arg: None }
  585 r46 <- CArg { value: r48, next_arg: Some(r46) }
  586 r46 <- CArg { value: r47, next_arg: Some(r46) }
  587 r46 <- Call { callee: r45, first_arg: Some(r46) }
  588 r2 <- UndefinedBool
  589 r3 <- UndefinedBool
  590 r4 <- UndefinedBool
  591 r5 <- UndefinedBool
  592 r6 <- UndefinedBool
  593 r7 <- UndefinedBool
  594 r8 <- UndefinedBool
  595 r9 <- UndefinedBool
  596 r10 <- UndefinedBool
0x5953a4:
  597 r46 <- Const { value: 8, size: 8 }
  598 r12 <- Arith(Add, r12, r46)
  599 r12 <- Get(r12)
  600 r10 <- OverflowOf(r12)
  601 r2 <- CarryOf(r12)
  602 r6 <- SignOf(r12)
  603 r5 <- IsZero(r12)
  604 r47 <- Part { src: r12, offset: 0, size: 1 }
  605 r3 <- Parity(r47)
0x5953a8:
  606 r16 <- Get(r17)
0x5953ab:
  607 r45 <- LoadMem { addr: r12, size: 8 }
  608 r17 <- Get(r45)
  609 r12 <- ArithK(Add, r12, 8)
0x5953ac:
  610 r45 <- LoadMem { addr: r12, size: 8 }
  611 r11 <- Get(r45)
  612 r12 <- ArithK(Add, r12, 8)
0x5953ad:
  613 r45 <- Void
  614 r45 <- Concat { lo: r45, hi: r16 }
  615 r45 <- Part { src: r45, offset: 0, size: 8 }
  616 r47 <- SetReturnValue(r45)
  617 r47 <- Control(Ret)
0x5953b0:
  618 r46 <- Part { src: r16, offset: 0, size: 1 }
  619 r47 <- Const { value: 8, size: 1 }
  620 r46 <- Arith(BitAnd, r46, r47)
  621 r6 <- SignOf(r46)
  622 r5 <- IsZero(r46)
  623 r48 <- Part { src: r46, offset: 0, size: 1 }
  624 r3 <- Parity(r46)
  625 r2 <- False
  626 r10 <- False
0x5953b2:
  627 r45 <- Not(r5)
  628 r46 <- SetJumpCondition(r45)
  629 r46 <- Control(JmpExtIf(5853925))
0x5953b8:
  630 r45 <- Const { value: 5846864, size: 8 }
  631 r45 <- Arith(Add, r45, r13)
  632 r15 <- Get(r45)
0x5953bf:
  633 r45 <- Control(JmpExt(5853917))
0x5953c8:
  634 r14 <- Get(r17)
0x5953cb:
  635 r45 <- Const { value: 5852928, size: 8 }
  636 r47 <- Void
  637 r47 <- Get(r14)
  638 r46 <- CArg { value: r47, next_arg: None }
  639 r46 <- Call { callee: r45, first_arg: Some(r46) }
  640 r2 <- UndefinedBool
  641 r3 <- UndefinedBool
  642 r4 <- UndefinedBool
  643 r5 <- UndefinedBool
  644 r6 <- UndefinedBool
  645 r7 <- UndefinedBool
  646 r8 <- UndefinedBool
  647 r9 <- UndefinedBool
  648 r10 <- UndefinedBool
0x5953d0:
  649 r46 <- Part { src: r17, offset: 0, size: 4 }
  650 r48 <- Part { src: r17, offset: 0, size: 4 }
  651 r46 <- Arith(BitXor, r46, r48)
  652 r49 <- Part { src: r17, offset: 4, size: 4 }
  653 r17 <- Concat { lo: r46, hi: r49 }
  654 r10 <- False
  655 r2 <- False
  656 r6 <- SignOf(r46)
  657 r5 <- IsZero(r46)
  658 r50 <- Part { src: r46, offset: 0, size: 1 }
  659 r3 <- Parity(r50)
0x5953d2:
  660 r46 <- Const { value: 8, size: 8 }
  661 r12 <- Arith(Add, r12, r46)
  662 r12 <- Get(r12)
  663 r10 <- OverflowOf(r12)
  664 r2 <- CarryOf(r12)
  665 r6 <- SignOf(r12)
  666 r5 <- IsZero(r12)
  667 r47 <- Part { src: r12, offset: 0, size: 1 }
  668 r3 <- Parity(r47)
0x5953d6:
  669 r16 <- Get(r17)
0x5953d9:
  670 r45 <- LoadMem { addr: r12, size: 8 }
  671 r17 <- Get(r45)
  672 r12 <- ArithK(Add, r12, 8)
0x5953da:
  673 r45 <- LoadMem { addr: r12, size: 8 }
  674 r11 <- Get(r45)
  675 r12 <- ArithK(Add, r12, 8)
0x5953db:
  676 r45 <- Void
  677 r45 <- Concat { lo: r45, hi: r16 }
  678 r45 <- Part { src: r45, offset: 0, size: 8 }
  679 r47 <- SetReturnValue(r45)
  680 r47 <- Control(Ret)
0x5953e0:
  681 r46 <- Const { value: 8, size: 8 }
  682 r46 <- Arith(Add, r46, r11)
  683 r45 <- LoadMem { addr: r46, size: 8 }
  684 r18 <- Get(r45)
0x5953e4:
  685 r46 <- Const { value: 40, size: 8 }
  686 r46 <- Arith(Add, r46, r11)
  687 r45 <- LoadMem { addr: r46, size: 4 }
  688 r47 <- Part { src: r19, offset: 4, size: 4 }
  689 r19 <- Concat { lo: r45, hi: r47 }
0x5953e7:
  690 r14 <- Get(r17)
0x5953ea:
  691 r46 <- Const { value: 32, size: 8 }
  692 r46 <- Arith(Add, r46, r11)
  693 r45 <- LoadMem { addr: r46, size: 8 }
  694 r15 <- Get(r45)
0x5953ee:
  695 r46 <- Const { value: 24, size: 8 }
  696 r46 <- Arith(Add, r46, r11)
  697 r45 <- LoadMem { addr: r46, size: 8 }
  698 r20 <- Get(r45)
0x5953f2:
  699 r45 <- Const { value: 5845184, size: 8 }
  700 r47 <- Void
  701 r47 <- Get(r14)
  702 r48 <- Void
  703 r48 <- Get(r15)
  704 r49 <- Void
  705 r49 <- Get(r19)
  706 r49 <- Part { src: r49, offset: 0, size: 4 }
  707 r50 <- Void
  708 r50 <- Get(r18)
  709 r51 <- Void
  710 r51 <- Get(r20)
  711 r46 <- CArg { value: r51, next_arg: None }
  712 r46 <- CArg { value: r50, next_arg: Some(r46) }
  713 r46 <- CArg { value: r49, next_arg: Some(r46) }
  714 r46 <- CArg { value: r48, next_arg: Some(r46) }
  715 r46 <- CArg { value: r47, next_arg: Some(r46) }
  716 r46 <- Call { callee: r45, first_arg: Some(r46) }
  717 r2 <- UndefinedBool
  718 r3 <- UndefinedBool
  719 r4 <- UndefinedBool
  720 r5 <- UndefinedBool
  721 r6 <- UndefinedBool
  722 r7 <- UndefinedBool
  723 r8 <- UndefinedBool
  724 r9 <- UndefinedBool
  725 r10 <- UndefinedBool
  726 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5953f7:
  727 r45 <- Control(JmpExt(5854042))
0x595400:
  728 r46 <- Const { value: 8, size: 8 }
  729 r46 <- Arith(Add, r46, r11)
  730 r45 <- LoadMem { addr: r46, size: 8 }
  731 r19 <- Get(r45)
0x595404:
  732 r46 <- Const { value: 24, size: 8 }
  733 r46 <- Arith(Add, r46, r11)
  734 r45 <- LoadMem { addr: r46, size: 8 }
  735 r15 <- Get(r45)
0x595408:
  736 r14 <- Get(r17)
0x59540b:
  737 r45 <- Const { value: 5845200, size: 8 }
  738 r47 <- Void
  739 r47 <- Get(r14)
  740 r48 <- Void
  741 r48 <- Get(r15)
  742 r49 <- Void
  743 r49 <- Get(r19)
  744 r46 <- CArg { value: r49, next_arg: None }
  745 r46 <- CArg { value: r48, next_arg: Some(r46) }
  746 r46 <- CArg { value: r47, next_arg: Some(r46) }
  747 r46 <- Call { callee: r45, first_arg: Some(r46) }
  748 r2 <- UndefinedBool
  749 r3 <- UndefinedBool
  750 r4 <- UndefinedBool
  751 r5 <- UndefinedBool
  752 r6 <- UndefinedBool
  753 r7 <- UndefinedBool
  754 r8 <- UndefinedBool
  755 r9 <- UndefinedBool
  756 r10 <- UndefinedBool
  757 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595410:
  758 r45 <- Control(JmpExt(5854042))


 --- ssa pre-xform
ssa program  772 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  3)  r11 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
         r13 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
  (  2)  r15 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
  (  2)  r17 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
  ( 15)  r42 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
  (  2)  r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
         r46 <- Const { value: 272, size: 4 }
         r47 <- Part { src: r13, offset: 4, size: 4 }
         r48 <- Concat { lo: r46, hi: r47 }
         r50 <- Const { value: 1, size: 4 }
         r51 <- Part { src: r42, offset: 4, size: 4 }
         r52 <- Concat { lo: r50, hi: r51 }
         r53 <- ArithK(Add, r44, -8)
         r54 <- StoreMem { addr: r53, value: r15 }
  (  3)  r64 <- Const { value: 7837792, size: 8 }
         r66 <- Const { value: 8, size: 8 }
         r67 <- Arith(Add, r66, r64)
         r68 <- LoadMem { addr: r67, size: 8 }
         r69 <- LoadMem { addr: r68, size: 8 }
         r70 <- CArg { value: r16, next_arg: None }
         r71 <- CArg { value: r17, next_arg: Some(r70) }
         r72 <- CArg { value: r48, next_arg: Some(r71) }
         r73 <- CArg { value: r52, next_arg: Some(r72) }
         r74 <- Call { callee: r69, first_arg: Some(r73) }
  ( 34)  r85 <- Arith(BitAnd, r64, r64)
         r87 <- IsZero(r85)
         r92 <- SetJumpCondition(r87)
         r763 <- Upsilon { value: r15, phi_ref: r762 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r95 <- Const { value: 7837920, size: 8 }
         r96 <- Arith(Add, r95, r11)
         r98 <- Const { value: 0, size: 8 }
         r99 <- Arith(Add, r98, r85)
         r100 <- StoreMem { addr: r99, value: r96 }
         r101 <- Const { value: 5857232, size: 8 }
         r102 <- Call { callee: r101, first_arg: None }
         r112 <- Part { src: r102, offset: 0, size: 8 }
         r113 <- Const { value: 152, size: 8 }
         r114 <- Arith(Add, r113, r85)
         r115 <- StoreMem { addr: r114, value: r112 }
         r116 <- Const { value: 5852912, size: 8 }
         r117 <- Call { callee: r116, first_arg: None }
  (  3)  r127 <- Part { src: r117, offset: 0, size: 8 }
         r128 <- Const { value: 152, size: 8 }
         r129 <- Arith(Add, r128, r85)
         r130 <- LoadMem { addr: r129, size: 8 }
         r131 <- Const { value: 0, size: 8 }
         r132 <- Arith(Sub, r130, r131)
         r136 <- IsZero(r132)
         r139 <- Const { value: 4294967295, size: 4 }
         r140 <- Const { value: 140, size: 8 }
         r141 <- Arith(Add, r140, r85)
         r142 <- StoreMem { addr: r141, value: r139 }
         r143 <- Const { value: 160, size: 8 }
         r144 <- Arith(Add, r143, r85)
         r145 <- StoreMem { addr: r144, value: r127 }
         r146 <- SetJumpCondition(r136)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
  (  2)  r148 <- Arith(BitAnd, r127, r127)
         r150 <- IsZero(r148)
         r155 <- SetJumpCondition(r150)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r157 <- Const { value: 4, size: 8 }
         r158 <- Arith(Add, r157, r42)
         r159 <- LoadMem { addr: r158, size: 4 }
         r160 <- Part { src: r148, offset: 4, size: 4 }
  (  7)  r161 <- Concat { lo: r159, hi: r160 }
         r162 <- Part { src: r161, offset: 0, size: 1 }
         r163 <- Const { value: 1, size: 1 }
         r164 <- Arith(BitAnd, r162, r163)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r174 <- Const { value: 144, size: 8 }
         r175 <- Arith(Add, r174, r85)
         r176 <- LoadMem { addr: r175, size: 4 }
         r177 <- Const { value: 1, size: 4 }
         r178 <- Arith(BitOr, r176, r177)
         r179 <- Const { value: 144, size: 8 }
         r180 <- Arith(Add, r179, r85)
         r181 <- StoreMem { addr: r180, value: r178 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r188 <- Part { src: r161, offset: 0, size: 1 }
         r189 <- Const { value: 2, size: 1 }
         r190 <- Arith(BitAnd, r188, r189)
         r192 <- IsZero(r190)
         r197 <- SetJumpCondition(r192)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r199 <- Const { value: 144, size: 8 }
         r200 <- Arith(Add, r199, r85)
         r201 <- LoadMem { addr: r200, size: 4 }
         r202 <- Const { value: 128, size: 4 }
         r203 <- Arith(BitOr, r201, r202)
         r204 <- Const { value: 144, size: 8 }
         r205 <- Arith(Add, r204, r85)
         r206 <- StoreMem { addr: r205, value: r203 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r213 <- Part { src: r161, offset: 0, size: 1 }
         r214 <- Const { value: 4, size: 1 }
         r215 <- Arith(BitAnd, r213, r214)
         r217 <- IsZero(r215)
         r222 <- SetJumpCondition(r217)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r224 <- Const { value: 144, size: 8 }
         r225 <- Arith(Add, r224, r85)
         r226 <- LoadMem { addr: r225, size: 4 }
         r227 <- Const { value: 512, size: 4 }
         r228 <- Arith(BitOr, r226, r227)
         r229 <- Const { value: 144, size: 8 }
         r230 <- Arith(Add, r229, r85)
         r231 <- StoreMem { addr: r230, value: r228 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r238 <- Part { src: r161, offset: 0, size: 1 }
         r239 <- Const { value: 16, size: 1 }
         r240 <- Arith(BitAnd, r238, r239)
         r242 <- IsZero(r240)
         r247 <- SetJumpCondition(r242)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r249 <- Const { value: 144, size: 8 }
         r250 <- Arith(Add, r249, r85)
         r251 <- LoadMem { addr: r250, size: 4 }
         r252 <- Const { value: 1024, size: 4 }
         r253 <- Arith(BitOr, r251, r252)
         r254 <- Const { value: 144, size: 8 }
         r255 <- Arith(Add, r254, r85)
         r256 <- StoreMem { addr: r255, value: r253 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r263 <- Part { src: r161, offset: 0, size: 1 }
         r264 <- Const { value: 32, size: 1 }
         r265 <- Arith(BitAnd, r263, r264)
         r267 <- IsZero(r265)
         r272 <- SetJumpCondition(r267)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r274 <- Const { value: 144, size: 8 }
         r275 <- Arith(Add, r274, r85)
         r276 <- LoadMem { addr: r275, size: 4 }
         r277 <- Const { value: 2048, size: 4 }
         r278 <- Arith(BitOr, r276, r277)
         r279 <- Const { value: 144, size: 8 }
         r280 <- Arith(Add, r279, r85)
         r281 <- StoreMem { addr: r280, value: r278 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r288 <- Part { src: r161, offset: 0, size: 1 }
         r289 <- Const { value: 64, size: 1 }
         r290 <- Arith(BitAnd, r288, r289)
         r292 <- IsZero(r290)
         r297 <- SetJumpCondition(r292)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r299 <- Const { value: 144, size: 8 }
         r300 <- Arith(Add, r299, r85)
         r301 <- LoadMem { addr: r300, size: 4 }
         r302 <- Const { value: 4096, size: 4 }
         r303 <- Arith(BitOr, r301, r302)
         r304 <- Const { value: 144, size: 8 }
         r305 <- Arith(Add, r304, r85)
         r306 <- StoreMem { addr: r305, value: r303 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r313 <- Const { value: 64, size: 8 }
         r314 <- Arith(Add, r313, r42)
  (  2)  r315 <- LoadMem { addr: r314, size: 8 }
  (  2)  r317 <- Arith(BitAnd, r315, r315)
         r319 <- IsZero(r317)
         r324 <- SetJumpCondition(r319)
         r765 <- Upsilon { value: r317, phi_ref: r759 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r618 <- Part { src: r161, offset: 0, size: 1 }
         r619 <- Const { value: 8, size: 1 }
         r620 <- Arith(BitAnd, r618, r619)
         r622 <- IsZero(r620)
         r627 <- Not(r622)
         r628 <- SetJumpCondition(r627)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r630 <- Const { value: 5846864, size: 8 }
         r631 <- Arith(Add, r630, r11)
         r766 <- Upsilon { value: r631, phi_ref: r759 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r759 <- Phi
         r327 <- Const { value: 5853696, size: 8 }
         r332 <- CArg { value: r759, next_arg: None }
         r333 <- CArg { value: r85, next_arg: Some(r332) }
         r334 <- Call { callee: r327, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r345 <- Const { value: 48, size: 8 }
         r346 <- Arith(Add, r345, r42)
         r347 <- LoadMem { addr: r346, size: 8 }
         r349 <- Const { value: 8, size: 8 }
         r350 <- Arith(Add, r349, r42)
  (  2)  r351 <- LoadMem { addr: r350, size: 8 }
         r354 <- Const { value: 240, size: 8 }
         r355 <- Arith(Add, r354, r85)
         r356 <- StoreMem { addr: r355, value: r347 }
         r357 <- Const { value: 56, size: 8 }
         r358 <- Arith(Add, r357, r42)
         r359 <- LoadMem { addr: r358, size: 8 }
         r361 <- Const { value: 248, size: 8 }
         r362 <- Arith(Add, r361, r85)
         r363 <- StoreMem { addr: r362, value: r359 }
         r364 <- Const { value: 5842752, size: 8 }
         r369 <- CArg { value: r351, next_arg: None }
         r370 <- CArg { value: r85, next_arg: Some(r369) }
         r371 <- Call { callee: r364, first_arg: Some(r370) }
  (  2)  r381 <- Part { src: r371, offset: 0, size: 8 }
         r382 <- Part { src: r381, offset: 0, size: 4 }
         r383 <- Part { src: r381, offset: 0, size: 4 }
         r384 <- Arith(BitAnd, r382, r383)
         r386 <- IsZero(r384)
         r391 <- Not(r386)
         r392 <- SetJumpCondition(r391)
         r767 <- Upsilon { value: r351, phi_ref: r761 }
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r394 <- Const { value: 16, size: 8 }
         r395 <- Arith(Add, r394, r42)
  (  2)  r396 <- LoadMem { addr: r395, size: 8 }
         r399 <- Const { value: 5844704, size: 8 }
         r404 <- CArg { value: r396, next_arg: None }
         r405 <- CArg { value: r85, next_arg: Some(r404) }
         r406 <- Call { callee: r399, first_arg: Some(r405) }
  (  3)  r416 <- Part { src: r406, offset: 0, size: 8 }
         r417 <- Part { src: r416, offset: 0, size: 4 }
         r418 <- Part { src: r416, offset: 0, size: 4 }
         r419 <- Arith(BitAnd, r417, r418)
         r421 <- IsZero(r419)
         r426 <- Not(r421)
         r427 <- SetJumpCondition(r426)
         r768 <- Upsilon { value: r396, phi_ref: r761 }
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
         r429 <- Const { value: 0, size: 8 }
         r430 <- Arith(Add, r429, r42)
         r431 <- LoadMem { addr: r430, size: 4 }
         r432 <- Part { src: r416, offset: 4, size: 4 }
  (  5)  r433 <- Concat { lo: r431, hi: r432 }
         r434 <- Part { src: r433, offset: 0, size: 4 }
         r435 <- Part { src: r433, offset: 0, size: 4 }
         r436 <- Arith(BitAnd, r434, r435)
         r438 <- IsZero(r436)
         r443 <- SetJumpCondition(r438)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r445 <- Part { src: r433, offset: 0, size: 4 }
         r446 <- Const { value: 1, size: 4 }
         r447 <- Arith(Sub, r445, r446)
         r451 <- IsZero(r447)
         r454 <- SetJumpCondition(r451)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r456 <- Part { src: r433, offset: 0, size: 4 }
         r457 <- Const { value: 2, size: 4 }
         r458 <- Arith(Sub, r456, r457)
         r462 <- IsZero(r458)
         r465 <- Not(r462)
         r466 <- SetJumpCondition(r465)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r468 <- Const { value: 144, size: 8 }
         r469 <- Arith(Add, r468, r85)
         r470 <- LoadMem { addr: r469, size: 4 }
         r471 <- Part { src: r433, offset: 4, size: 4 }
  (  2)  r472 <- Concat { lo: r470, hi: r471 }
         r473 <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r474 <- Part { src: r472, offset: 0, size: 4 }
         r475 <- Const { value: 2, size: 4 }
         r476 <- Arith(BitOr, r474, r475)
         r477 <- Part { src: r472, offset: 4, size: 4 }
         r478 <- Concat { lo: r476, hi: r477 }
         r485 <- NotYetImplemented("unsupported: movd xmm1,eax")
         r486 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r487 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
         r771 <- Upsilon { value: r478, phi_ref: r760 }
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r728 <- Const { value: 8, size: 8 }
         r729 <- Arith(Add, r728, r42)
         r730 <- LoadMem { addr: r729, size: 8 }
         r732 <- Const { value: 24, size: 8 }
         r733 <- Arith(Add, r732, r42)
         r734 <- LoadMem { addr: r733, size: 8 }
         r737 <- Const { value: 5845200, size: 8 }
         r744 <- CArg { value: r730, next_arg: None }
         r745 <- CArg { value: r734, next_arg: Some(r744) }
         r746 <- CArg { value: r85, next_arg: Some(r745) }
         r747 <- Call { callee: r737, first_arg: Some(r746) }
         r757 <- Part { src: r747, offset: 0, size: 8 }
         r770 <- Upsilon { value: r757, phi_ref: r760 }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r681 <- Const { value: 8, size: 8 }
         r682 <- Arith(Add, r681, r42)
         r683 <- LoadMem { addr: r682, size: 8 }
         r685 <- Const { value: 40, size: 8 }
         r686 <- Arith(Add, r685, r42)
         r687 <- LoadMem { addr: r686, size: 4 }
         r688 <- Part { src: r17, offset: 4, size: 4 }
         r689 <- Concat { lo: r687, hi: r688 }
         r691 <- Const { value: 32, size: 8 }
         r692 <- Arith(Add, r691, r42)
         r693 <- LoadMem { addr: r692, size: 8 }
         r695 <- Const { value: 24, size: 8 }
         r696 <- Arith(Add, r695, r42)
         r697 <- LoadMem { addr: r696, size: 8 }
         r699 <- Const { value: 5845184, size: 8 }
         r706 <- Part { src: r689, offset: 0, size: 4 }
         r711 <- CArg { value: r697, next_arg: None }
         r712 <- CArg { value: r683, next_arg: Some(r711) }
         r713 <- CArg { value: r706, next_arg: Some(r712) }
         r714 <- CArg { value: r693, next_arg: Some(r713) }
         r715 <- CArg { value: r85, next_arg: Some(r714) }
         r716 <- Call { callee: r699, first_arg: Some(r715) }
         r726 <- Part { src: r716, offset: 0, size: 8 }
         r769 <- Upsilon { value: r726, phi_ref: r760 }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r760 <- Phi
         r488 <- Const { value: 8, size: 8 }
         r489 <- Arith(Add, r488, r85)
         r490 <- LoadMem { addr: r489, size: 4 }
         r491 <- Part { src: r760, offset: 4, size: 4 }
  (  2)  r492 <- Concat { lo: r490, hi: r491 }
         r493 <- Part { src: r492, offset: 0, size: 4 }
         r494 <- Part { src: r492, offset: 0, size: 4 }
         r495 <- Arith(BitAnd, r493, r494)
         r497 <- IsZero(r495)
         r502 <- Not(r497)
         r503 <- SetJumpCondition(r502)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r505 <- Const { value: 140, size: 8 }
         r506 <- Arith(Add, r505, r85)
         r507 <- LoadMem { addr: r506, size: 4 }
         r508 <- Const { value: -1, size: 4 }
         r509 <- Arith(Sub, r507, r508)
         r513 <- IsZero(r509)
         r516 <- SetJumpCondition(r513)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r518 <- Const { value: 16, size: 8 }
         r519 <- Arith(Add, r518, r42)
  (  2)  r520 <- LoadMem { addr: r519, size: 8 }
         r522 <- Arith(BitAnd, r520, r520)
         r524 <- IsZero(r522)
         r529 <- SetJumpCondition(r524)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r531 <- Const { value: 144, size: 8 }
         r532 <- Arith(Add, r531, r85)
         r533 <- LoadMem { addr: r532, size: 1 }
         r534 <- Const { value: 1, size: 1 }
         r535 <- Arith(BitAnd, r533, r534)
         r537 <- IsZero(r535)
         r542 <- SetJumpCondition(r537)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r553 <- Const { value: 5844800, size: 8 }
         r556 <- CArg { value: r85, next_arg: None }
         r557 <- Call { callee: r553, first_arg: Some(r556) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r761 <- Phi
         r569 <- Const { value: 6951854, size: 8 }
         r570 <- Arith(Add, r569, r11)
         r572 <- Const { value: 5, size: 4 }
         r573 <- Part { src: r761, offset: 4, size: 4 }
         r574 <- Concat { lo: r572, hi: r573 }
         r576 <- Const { value: 5852656, size: 8 }
         r581 <- Part { src: r574, offset: 0, size: 4 }
         r584 <- CArg { value: r570, next_arg: None }
         r585 <- CArg { value: r581, next_arg: Some(r584) }
         r586 <- CArg { value: r85, next_arg: Some(r585) }
         r587 <- Call { callee: r576, first_arg: Some(r586) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r614 <- Concat { lo: r613, hi: r85 }
         r615 <- Part { src: r614, offset: 0, size: 8 }
         r616 <- SetReturnValue(r615)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r635 <- Const { value: 5852928, size: 8 }
         r638 <- CArg { value: r85, next_arg: None }
         r639 <- Call { callee: r635, first_arg: Some(r638) }
         r764 <- Upsilon { value: r85, phi_ref: r762 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r762 <- Phi
         r649 <- Part { src: r762, offset: 0, size: 4 }
         r650 <- Part { src: r762, offset: 0, size: 4 }
         r651 <- Arith(BitXor, r649, r650)
         r652 <- Part { src: r762, offset: 4, size: 4 }
         r653 <- Concat { lo: r651, hi: r652 }
         r677 <- Concat { lo: r676, hi: r653 }
         r678 <- Part { src: r677, offset: 0, size: 8 }
         r679 <- SetReturnValue(r678)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) } [r9, r10, r11, r13, r15, r16, r17, r42, r44, r45, r46, r47, r48, r50, r51, r52, r53, r54, r64, r67, r68, r69, r70, r71, r72, r73, r74, r87, r92, r763]
  BlockID(1) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) } [r96, r99, r100, r101, r102, r114, r115, r116, r117, r129, r130, r136, r139, r141, r142, r144, r145, r146]
  BlockID(2) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) } [r150, r155]
  BlockID(3) -> Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) } [r158, r159, r162, r164, r166, r171, r172]
  BlockID(4) -> Always(Block(BlockID(5))) [r175, r176, r178, r180, r181]
  BlockID(5) -> Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) } [r188, r190, r192, r197]
  BlockID(6) -> Always(Block(BlockID(7))) [r200, r201, r203, r205, r206]
  BlockID(7) -> Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) } [r213, r215, r217, r222]
  BlockID(8) -> Always(Block(BlockID(9))) [r225, r226, r228, r230, r231]
  BlockID(9) -> Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) } [r238, r240, r242, r247]
  BlockID(10) -> Always(Block(BlockID(11))) [r250, r251, r253, r255, r256]
  BlockID(11) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) } [r263, r265, r267, r272]
  BlockID(12) -> Always(Block(BlockID(13))) [r275, r276, r278, r280, r281]
  BlockID(13) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) } [r288, r290, r292, r297]
  BlockID(14) -> Always(Block(BlockID(15))) [r300, r301, r303, r305, r306]
  BlockID(15) -> Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) } [r314, r315, r319, r324, r765]
  BlockID(16) -> Always(Block(BlockID(17))) [r759, r327, r332, r333, r334]
  BlockID(17) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) } [r346, r347, r350, r351, r355, r356, r358, r359, r362, r363, r364, r369, r370, r371, r382, r383, r384, r386, r391, r392]
  BlockID(18) -> Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) } [r395, r396, r399, r404, r405, r406, r417, r418, r419, r421, r426, r427]
  BlockID(19) -> Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) } [r431, r438, r443]
  BlockID(20) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) } [r447, r451, r454]
  BlockID(21) -> Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) } [r458, r462, r465, r466]
  BlockID(22) -> Always(Block(BlockID(23))) [r473, r485, r486, r487]
  BlockID(23) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) } [r489, r490, r497, r502, r503]
  BlockID(24) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) } [r506, r507, r509, r513, r516]
  BlockID(25) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) } [r519, r520, r524, r529]
  BlockID(26) -> Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) } [r532, r533, r535, r537, r542]
  BlockID(27) -> Always(Block(BlockID(29))) [r553, r556, r557]
  BlockID(28) -> Always(Block(BlockID(29))) [r570, r572, r576, r584, r585, r586, r587]
  BlockID(29) -> Always(Return) [r616]
  BlockID(30) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) } [r618, r620, r622, r627, r628]
  BlockID(31) -> Always(Block(BlockID(16))) [r631, r766]
  BlockID(32) -> Always(Block(BlockID(33))) [r635, r638, r639, r764]
  BlockID(33) -> Always(Return) [r762, r649, r650, r651, r652, r653, r679]
  BlockID(34) -> Always(Block(BlockID(23))) [r682, r683, r686, r687, r692, r693, r696, r697, r699, r711, r712, r713, r714, r715, r716]
  BlockID(35) -> Always(Block(BlockID(23))) [r729, r730, r733, r734, r737, r744, r745, r746, r747]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  |  |  BlockID(3)
|  |  |  |  BlockID(4)
|  |  |  |  BlockID(5)
|  |  |  |  |  BlockID(6)
|  |  |  |  |  BlockID(7)
|  |  |  |  |  |  BlockID(8)
|  |  |  |  |  |  BlockID(9)
|  |  |  |  |  |  |  BlockID(10)
|  |  |  |  |  |  |  BlockID(11)
|  |  |  |  |  |  |  |  BlockID(12)
|  |  |  |  |  |  |  |  BlockID(13)
|  |  |  |  |  |  |  |  |  BlockID(14)
|  |  |  |  |  |  |  |  |  BlockID(15)
|  |  |  |  |  |  |  |  |  |  BlockID(16)
|  |  |  |  |  |  |  |  |  |  BlockID(17)
|  |  |  |  |  |  |  |  |  |  |  BlockID(18)
|  |  |  |  |  |  |  |  |  |  |  |  BlockID(19)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(20)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(21)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(22)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(35)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(23)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(24)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(25)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(26)
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(27)
|  |  |  |  |  |  |  |  |  |  |  |  |  BlockID(34)
|  |  |  |  |  |  |  |  |  |  |  BlockID(28)
|  |  |  |  |  |  |  |  |  |  |  BlockID(29)
|  |  |  |  |  |  |  |  |  |  BlockID(30)
|  |  |  |  |  |  |  |  |  |  |  BlockID(31)
|  |  BlockID(32)
|  BlockID(33)

 --- ssa
ssa program  772 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(33)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), size: 8 }
  (  2)  r10 <- Ancestral { anc_name: AncestralName("RSP"), size: 8 }
  (  3)  r11 <- Ancestral { anc_name: AncestralName("RIP"), size: 8 }
         r13 <- Ancestral { anc_name: AncestralName("RSI"), size: 8 }
  (  2)  r15 <- Ancestral { anc_name: AncestralName("RBX"), size: 8 }
         r16 <- Ancestral { anc_name: AncestralName("RCX"), size: 8 }
         r17 <- Ancestral { anc_name: AncestralName("RDX"), size: 8 }
  ( 15)  r42 <- Ancestral { anc_name: AncestralName("arg0"), size: 8 }
         r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
         r46 <- Const { value: 272, size: 4 }
         r47 <- Part { src: r13, offset: 4, size: 4 }
         r48 <- Concat { lo: r46, hi: r47 }
         r50 <- Const { value: 1, size: 4 }
         r51 <- Part { src: r42, offset: 4, size: 4 }
         r52 <- Concat { lo: r50, hi: r51 }
         r53 <- ArithK(Add, r10, -16)
         r54 <- StoreMem { addr: r53, value: r15 }
  ( 11)  r64 <- Const { value: 7837792, size: 8 }
         r67 <- Const { value: 7837800, size: 8 }
         r68 <- LoadMem { addr: r67, size: 8 }
         r69 <- LoadMem { addr: r68, size: 8 }
         r70 <- CArg { value: r16, next_arg: None }
         r71 <- CArg { value: r17, next_arg: Some(r70) }
         r72 <- CArg { value: r48, next_arg: Some(r71) }
         r73 <- CArg { value: r52, next_arg: Some(r72) }
         r74 <- Call { callee: r69, first_arg: Some(r73) }
         r87 <- IsZero(r64)
         r92 <- SetJumpCondition(r87)
         r763 <- Upsilon { value: r15, phi_ref: r762 }
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(2)) }.
         r96 <- ArithK(Add, r11, 7837920)
         r99 <- Const { value: 7837792, size: 8 }
         r100 <- StoreMem { addr: r99, value: r96 }
         r101 <- Const { value: 5857232, size: 8 }
         r102 <- Call { callee: r101, first_arg: None }
         r114 <- Const { value: 7837944, size: 8 }
         r115 <- StoreMem { addr: r114, value: r102 }
         r116 <- Const { value: 5852912, size: 8 }
  (  2)  r117 <- Call { callee: r116, first_arg: None }
         r129 <- Const { value: 7837944, size: 8 }
         r130 <- LoadMem { addr: r129, size: 8 }
         r136 <- IsZero(r130)
         r139 <- Const { value: 4294967295, size: 4 }
         r141 <- Const { value: 7837932, size: 8 }
         r142 <- StoreMem { addr: r141, value: r139 }
         r144 <- Const { value: 7837952, size: 8 }
         r145 <- StoreMem { addr: r144, value: r117 }
         r146 <- SetJumpCondition(r136)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(3)) }.
         r150 <- IsZero(r117)
         r155 <- SetJumpCondition(r150)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(5)), neg: Block(BlockID(4)) }.
         r158 <- ArithK(Add, r42, 4)
  (  7)  r159 <- LoadMem { addr: r158, size: 4 }
         r162 <- Part { src: r159, offset: 0, size: 1 }
         r164 <- ArithK(BitAnd, r162, 1)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Always(Block(BlockID(5))).
         r175 <- Const { value: 7837936, size: 8 }
         r176 <- LoadMem { addr: r175, size: 4 }
         r178 <- ArithK(BitOr, r176, 1)
         r180 <- Const { value: 7837936, size: 8 }
         r181 <- StoreMem { addr: r180, value: r178 }
.B5:    ;; preds:B3,B4  → Conditional { pos: Block(BlockID(7)), neg: Block(BlockID(6)) }.
         r188 <- Part { src: r159, offset: 0, size: 1 }
         r190 <- ArithK(BitAnd, r188, 2)
         r192 <- IsZero(r190)
         r197 <- SetJumpCondition(r192)
.B6:    ;; preds:B5  → Always(Block(BlockID(7))).
         r200 <- Const { value: 7837936, size: 8 }
         r201 <- LoadMem { addr: r200, size: 4 }
         r203 <- ArithK(BitOr, r201, 128)
         r205 <- Const { value: 7837936, size: 8 }
         r206 <- StoreMem { addr: r205, value: r203 }
.B7:    ;; preds:B5,B6  → Conditional { pos: Block(BlockID(9)), neg: Block(BlockID(8)) }.
         r213 <- Part { src: r159, offset: 0, size: 1 }
         r215 <- ArithK(BitAnd, r213, 4)
         r217 <- IsZero(r215)
         r222 <- SetJumpCondition(r217)
.B8:    ;; preds:B7  → Always(Block(BlockID(9))).
         r225 <- Const { value: 7837936, size: 8 }
         r226 <- LoadMem { addr: r225, size: 4 }
         r228 <- ArithK(BitOr, r226, 512)
         r230 <- Const { value: 7837936, size: 8 }
         r231 <- StoreMem { addr: r230, value: r228 }
.B9:    ;; preds:B7,B8  → Conditional { pos: Block(BlockID(11)), neg: Block(BlockID(10)) }.
         r238 <- Part { src: r159, offset: 0, size: 1 }
         r240 <- ArithK(BitAnd, r238, 16)
         r242 <- IsZero(r240)
         r247 <- SetJumpCondition(r242)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r250 <- Const { value: 7837936, size: 8 }
         r251 <- LoadMem { addr: r250, size: 4 }
         r253 <- ArithK(BitOr, r251, 1024)
         r255 <- Const { value: 7837936, size: 8 }
         r256 <- StoreMem { addr: r255, value: r253 }
.B11:    ;; preds:B9,B10  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(12)) }.
         r263 <- Part { src: r159, offset: 0, size: 1 }
         r265 <- ArithK(BitAnd, r263, 32)
         r267 <- IsZero(r265)
         r272 <- SetJumpCondition(r267)
.B12:    ;; preds:B11  → Always(Block(BlockID(13))).
         r275 <- Const { value: 7837936, size: 8 }
         r276 <- LoadMem { addr: r275, size: 4 }
         r278 <- ArithK(BitOr, r276, 2048)
         r280 <- Const { value: 7837936, size: 8 }
         r281 <- StoreMem { addr: r280, value: r278 }
.B13:    ;; preds:B11,B12  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(14)) }.
         r288 <- Part { src: r159, offset: 0, size: 1 }
         r290 <- ArithK(BitAnd, r288, 64)
         r292 <- IsZero(r290)
         r297 <- SetJumpCondition(r292)
.B14:    ;; preds:B13  → Always(Block(BlockID(15))).
         r300 <- Const { value: 7837936, size: 8 }
         r301 <- LoadMem { addr: r300, size: 4 }
         r303 <- ArithK(BitOr, r301, 4096)
         r305 <- Const { value: 7837936, size: 8 }
         r306 <- StoreMem { addr: r305, value: r303 }
.B15:    ;; preds:B13,B14  → Conditional { pos: Block(BlockID(30)), neg: Block(BlockID(16)) }.
         r314 <- ArithK(Add, r42, 64)
  (  2)  r315 <- LoadMem { addr: r314, size: 8 }
         r319 <- IsZero(r315)
         r324 <- SetJumpCondition(r319)
         r765 <- Upsilon { value: r315, phi_ref: r759 }
.B30:    ;; preds:B15  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(31)) }.
         r618 <- Part { src: r159, offset: 0, size: 1 }
         r620 <- ArithK(BitAnd, r618, 8)
         r622 <- IsZero(r620)
         r627 <- Not(r622)
         r628 <- SetJumpCondition(r627)
.B31:    ;; preds:B30  → Always(Block(BlockID(16))).
         r631 <- ArithK(Add, r11, 5846864)
         r766 <- Upsilon { value: r631, phi_ref: r759 }
.B16:    ;; preds:B15,B31  → Always(Block(BlockID(17))).
         r759 <- Phi
         r327 <- Const { value: 5853696, size: 8 }
         r332 <- CArg { value: r759, next_arg: None }
         r333 <- CArg { value: r64, next_arg: Some(r332) }
         r334 <- Call { callee: r327, first_arg: Some(r333) }
.B17:    ;; preds:B16,B30  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(18)) }.
         r346 <- ArithK(Add, r42, 48)
         r347 <- LoadMem { addr: r346, size: 8 }
         r350 <- ArithK(Add, r42, 8)
         r351 <- LoadMem { addr: r350, size: 8 }
         r355 <- Const { value: 7838032, size: 8 }
         r356 <- StoreMem { addr: r355, value: r347 }
         r358 <- ArithK(Add, r42, 56)
         r359 <- LoadMem { addr: r358, size: 8 }
         r362 <- Const { value: 7838040, size: 8 }
         r363 <- StoreMem { addr: r362, value: r359 }
         r364 <- Const { value: 5842752, size: 8 }
         r369 <- CArg { value: r351, next_arg: None }
         r370 <- CArg { value: r64, next_arg: Some(r369) }
  (  2)  r371 <- Call { callee: r364, first_arg: Some(r370) }
         r382 <- Part { src: r371, offset: 0, size: 4 }
         r383 <- Part { src: r371, offset: 0, size: 4 }
         r384 <- Arith(BitAnd, r382, r383)
         r386 <- IsZero(r384)
         r391 <- Not(r386)
         r392 <- SetJumpCondition(r391)
.B18:    ;; preds:B17  → Conditional { pos: Block(BlockID(28)), neg: Block(BlockID(19)) }.
         r395 <- ArithK(Add, r42, 16)
         r396 <- LoadMem { addr: r395, size: 8 }
         r399 <- Const { value: 5844704, size: 8 }
         r404 <- CArg { value: r396, next_arg: None }
         r405 <- CArg { value: r64, next_arg: Some(r404) }
  (  2)  r406 <- Call { callee: r399, first_arg: Some(r405) }
         r417 <- Part { src: r406, offset: 0, size: 4 }
         r418 <- Part { src: r406, offset: 0, size: 4 }
         r419 <- Arith(BitAnd, r417, r418)
         r421 <- IsZero(r419)
         r426 <- Not(r421)
         r427 <- SetJumpCondition(r426)
.B19:    ;; preds:B18  → Conditional { pos: Block(BlockID(34)), neg: Block(BlockID(20)) }.
  (  3)  r431 <- LoadMem { addr: r42, size: 4 }
         r438 <- IsZero(r431)
         r443 <- SetJumpCondition(r438)
.B20:    ;; preds:B19  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(21)) }.
         r447 <- ArithK(Add, r431, -1)
         r451 <- IsZero(r447)
         r454 <- SetJumpCondition(r451)
.B21:    ;; preds:B20  → Conditional { pos: Block(BlockID(32)), neg: Block(BlockID(22)) }.
         r458 <- ArithK(Add, r431, -2)
         r462 <- IsZero(r458)
         r465 <- Not(r462)
         r466 <- SetJumpCondition(r465)
.B22:    ;; preds:B21  → Always(Block(BlockID(23))).
         r473 <- NotYetImplemented("unsupported: movd xmm0,[rbp+18h]")
         r485 <- NotYetImplemented("unsupported: movd xmm1,eax")
         r486 <- NotYetImplemented("unsupported: punpckldq xmm0,xmm1")
         r487 <- NotYetImplemented("unsupported: movq [rbx+8Ch],xmm0")
.B35:    ;; preds:B20  → Always(Block(BlockID(23))).
         r729 <- ArithK(Add, r42, 8)
         r730 <- LoadMem { addr: r729, size: 8 }
         r733 <- ArithK(Add, r42, 24)
         r734 <- LoadMem { addr: r733, size: 8 }
         r737 <- Const { value: 5845200, size: 8 }
         r744 <- CArg { value: r730, next_arg: None }
         r745 <- CArg { value: r734, next_arg: Some(r744) }
         r746 <- CArg { value: r64, next_arg: Some(r745) }
         r747 <- Call { callee: r737, first_arg: Some(r746) }
.B34:    ;; preds:B19  → Always(Block(BlockID(23))).
         r682 <- ArithK(Add, r42, 8)
         r683 <- LoadMem { addr: r682, size: 8 }
         r686 <- ArithK(Add, r42, 40)
         r687 <- LoadMem { addr: r686, size: 4 }
         r692 <- ArithK(Add, r42, 32)
         r693 <- LoadMem { addr: r692, size: 8 }
         r696 <- ArithK(Add, r42, 24)
         r697 <- LoadMem { addr: r696, size: 8 }
         r699 <- Const { value: 5845184, size: 8 }
         r711 <- CArg { value: r697, next_arg: None }
         r712 <- CArg { value: r683, next_arg: Some(r711) }
         r713 <- CArg { value: r687, next_arg: Some(r712) }
         r714 <- CArg { value: r693, next_arg: Some(r713) }
         r715 <- CArg { value: r64, next_arg: Some(r714) }
         r716 <- Call { callee: r699, first_arg: Some(r715) }
.B23:    ;; preds:B22,B34,B35  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(24)) }.
         r489 <- Const { value: 7837800, size: 8 }
         r490 <- LoadMem { addr: r489, size: 4 }
         r497 <- IsZero(r490)
         r502 <- Not(r497)
         r503 <- SetJumpCondition(r502)
.B24:    ;; preds:B23  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(25)) }.
         r506 <- Const { value: 7837932, size: 8 }
         r507 <- LoadMem { addr: r506, size: 4 }
         r509 <- ArithK(Add, r507, 1)
         r513 <- IsZero(r509)
         r516 <- SetJumpCondition(r513)
.B25:    ;; preds:B24  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(26)) }.
         r519 <- ArithK(Add, r42, 16)
         r520 <- LoadMem { addr: r519, size: 8 }
         r524 <- IsZero(r520)
         r529 <- SetJumpCondition(r524)
.B26:    ;; preds:B25  → Conditional { pos: Block(BlockID(29)), neg: Block(BlockID(27)) }.
         r532 <- Const { value: 7837936, size: 8 }
         r533 <- LoadMem { addr: r532, size: 1 }
         r535 <- ArithK(BitAnd, r533, 1)
         r537 <- IsZero(r535)
         r542 <- SetJumpCondition(r537)
.B27:    ;; preds:B26  → Always(Block(BlockID(29))).
         r553 <- Const { value: 5844800, size: 8 }
         r556 <- CArg { value: r64, next_arg: None }
         r557 <- Call { callee: r553, first_arg: Some(r556) }
.B28:    ;; preds:B17,B18  → Always(Block(BlockID(29))).
         r570 <- ArithK(Add, r11, 6951854)
         r572 <- Const { value: 5, size: 4 }
         r576 <- Const { value: 5852656, size: 8 }
         r584 <- CArg { value: r570, next_arg: None }
         r585 <- CArg { value: r572, next_arg: Some(r584) }
         r586 <- CArg { value: r64, next_arg: Some(r585) }
         r587 <- Call { callee: r576, first_arg: Some(r586) }
.B29:    ;; preds:B23,B24,B25,B26,B27,B28  → Always(Return).
         r616 <- SetReturnValue(r64)
.B32:    ;; preds:B1,B2,B21  → Always(Block(BlockID(33))).
         r635 <- Const { value: 5852928, size: 8 }
         r638 <- CArg { value: r64, next_arg: None }
         r639 <- Call { callee: r635, first_arg: Some(r638) }
         r764 <- Upsilon { value: r64, phi_ref: r762 }
.B33:    ;; preds:B0,B32  → Always(Return).
  (  3)  r762 <- Phi
         r649 <- Part { src: r762, offset: 0, size: 4 }
         r650 <- Part { src: r762, offset: 0, size: 4 }
         r651 <- Arith(BitXor, r649, r650)
         r652 <- Part { src: r762, offset: 4, size: 4 }
         r653 <- Concat { lo: r651, hi: r652 }
         r679 <- SetReturnValue(r653)


 --- ast

T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:RBX;
  [[7837800]:8]:8(pre:arg0[8 .. 4] ++ 1,
                  pre:RSI[8 .. 4] ++ 272,
                  pre:RDX,
                  pre:RCX);
  ;
  r762 := pre:RBX;
  if IsZero (7837792) {
    goto T33
  }
  [7837792]:* := pre:RIP + 7837920;
  5857232();
  [7837944]:* := 5857232();
  let r117: Bytes(8) = 5852912();
  [7837932]:* := 4294967295;
  [7837952]:* := r117;
  ;
  if IsZero ([7837944]:8) {
    goto T32
  }
  ;
  if IsZero (r117) {
    goto T32
  }
  let r159: Bytes(4) = [pre:arg0 + 4]:4;
  ;
  if ! IsZero (r159[1 .. 0] & 1) {
    goto T5
  }
  [7837936]:* := [7837936]:4 | 1;
  goto T5
  T5: {
    ;
    if IsZero (r159[1 .. 0] & 2) {
      goto T7
    }
    [7837936]:* := [7837936]:4 | 128;
    goto T7
    T7: {
      ;
      if IsZero (r159[1 .. 0] & 4) {
        goto T9
      }
      [7837936]:* := [7837936]:4 | 512;
      goto T9
      T9: {
        ;
        if IsZero (r159[1 .. 0] & 16) {
          goto T11
        }
        [7837936]:* := [7837936]:4 | 1024;
        goto T11
        T11: {
          ;
          if IsZero (r159[1 .. 0] & 32) {
            goto T13
          }
          [7837936]:* := [7837936]:4 | 2048;
          goto T13
          T13: {
            ;
            if IsZero (r159[1 .. 0] & 64) {
              goto T15
            }
            [7837936]:* := [7837936]:4 | 4096;
            goto T15
            T15: {
              let r315: Bytes(8) = [pre:arg0 + 64]:8;
              ;
              r759 := [pre:arg0 + 64]:8;
              if IsZero (r315) {
                ;
                if ! IsZero (r159[1 .. 0] & 8) {
                  goto T17
                }
                r759 := pre:RIP + 5846864;
                goto T16
              }
              goto T16
              T16: {
                let mut r759: Bytes(8);
                5853696(7837792,
                        r759);
                goto T17
              }
              
              T17: {
                [7838032]:* := [pre:arg0 + 48]:8;
                [7838040]:* := [pre:arg0 + 56]:8;
                let r371: Bytes(8) = 5842752(7837792,
                                             [pre:arg0 + 8]:8);
                ;
                if ! IsZero (r371[4 .. 0] & r371[4 .. 0]) {
                  goto T28
                }
                let r406: Bytes(8) = 5844704(7837792,
                                             [pre:arg0 + 16]:8);
                ;
                if ! IsZero (r406[4 .. 0] & r406[4 .. 0]) {
                  goto T28
                }
                let r431: Bytes(4) = [pre:arg0]:4;
                ;
                if IsZero (r431) {
                  5845184(7837792,
                          [pre:arg0 + 32]:8,
                          [pre:arg0 + 40]:4,
                          [pre:arg0 + 8]:8,
                          [pre:arg0 + 24]:8);
                  goto T23
                }
                ;
                if IsZero (r431 - 1) {
                  5845200(7837792,
                          [pre:arg0 + 24]:8,
                          [pre:arg0 + 8]:8);
                  goto T23
                }
                ;
                if ! IsZero (r431 - 2) {
                  goto T32
                }
                TODO /* unsupported: movd xmm0,[rbp+18h] */;
                TODO /* unsupported: movd xmm1,eax */;
                TODO /* unsupported: punpckldq xmm0,xmm1 */;
                TODO /* unsupported: movq [rbx+8Ch],xmm0 */;
                goto T23
                T23: {
                  ;
                  if ! IsZero ([7837800]:4) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837932]:4 + 1) {
                    goto T29
                  }
                  ;
                  if IsZero ([pre:arg0 + 16]:8) {
                    goto T29
                  }
                  ;
                  if IsZero ([7837936]:1 & 1) {
                    goto T29
                  }
                  5844800(7837792);
                  goto T29
                }
                
                T28: {
                  5852656(7837792,
                          5,
                          (pre:RIP + 6951854));
                  goto T29
                }
                
                T29: {
                  ;
                  return 7837792
                }
              
              }
            
            }
          
          }
        
        }
      
      }
    
    }
  
  }
  
  T32: {
    5852928(7837792);
    r762 := 7837792;
    goto T33
  }
  
  T33: {
    let mut r762: Bytes(8);
    ;
    return r762[8 .. 4] ++ (r762[4 .. 0] ^ r762[4 .. 0])
  }

}
