---
source: decompiler/tests/test_tool.rs
expression: out
---
func082 0x4012a7+7 (file 0x12a7)
          4012a7: f2 0f 10 44 24 10       movsd xmm0,[rsp+10h]
          4012ad: c3                      ret

function type: "func082" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 small <TypeID(784v1)>,
                               arg3 big <TypeID(794v1)>) double <TypeID(783v1)>
0 warnings.


mil program = 
program  86 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
                65 r45 <- Ancestral(AncestralName("arg0"))
                66 r15 <- Get(r45)
                67 r46 <- Ancestral(AncestralName("arg1"))
                68 r19 <- Get(r46)
                69 r47 <- Ancestral(AncestralName("arg2"))
                70 r48 <- Part { src: r47, offset: 0, size: 8 }
                71 r18 <- Get(r48)
                72 r49 <- Part { src: r47, offset: 8, size: 8 }
                73 r20 <- Get(r49)
0x4012a7:
                74 r46 <- Const { value: 16, size: 8 }
                75 r46 <- Arith(Add, r46, r12)
                76 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
                77 r45 <- Widen { reg: r45, target_size: 16, sign: false }
                78 r47 <- Part { src: r28, offset: 8, size: 56 }
                79 r28 <- Concat { lo: r45, hi: r47 }
0x4012ad:
                80 r45 <- Void
                81 r46 <- Part { src: r28, offset: 0, size: 8 }
                82 r45 <- Concat { lo: r45, hi: r46 }
                83 r45 <- Part { src: r45, offset: 0, size: 8 }
                84 r47 <- SetReturnValue(r45)
                85 r47 <- Control(Ret)


ssa pre-xform:
ssa program  86 instrs
.B0:    ;;  → Always(Return).
         r11 <- Ancestral(AncestralName("RSP"))
         r27 <- Ancestral(AncestralName("ZMM0"))
         r43 <- Ancestral(AncestralName("memory"))
         r74 <- Const { value: 16, size: 8 }
         r75 <- Arith(Add, r74, r11)
         r76 <- LoadMem { mem: r43, addr: r75, size: 8 }
         r77 <- Widen { reg: r76, target_size: 16, sign: false }
         r78 <- Part { src: r27, offset: 8, size: 56 }
         r79 <- Concat { lo: r77, hi: r78 }
         r81 <- Part { src: r79, offset: 0, size: 8 }
         r82 <- Concat { lo: r80, hi: r81 }
         r83 <- Part { src: r82, offset: 0, size: 8 }
         r84 <- SetReturnValue(r83)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r27, r43, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  86 instrs
.B0:    ;;  → Always(Return).
         r11 <- Ancestral(AncestralName("RSP"))
         r27 <- Ancestral(AncestralName("ZMM0"))
         r43 <- Ancestral(AncestralName("memory"))
         r74 <- Const { value: 16, size: 8 }
         r75 <- ArithK(Add, r11, 16)
  (  5)  r76 <- LoadMem { mem: r43, addr: r75, size: 8 }
         r77 <- Widen { reg: r76, target_size: 16, sign: false }
         r78 <- Part { src: r27, offset: 8, size: 56 }
         r79 <- Concat { lo: r77, hi: r78 }
         r81 <- Get(r76)
         r82 <- Get(r76)
         r83 <- Get(r76)
         r84 <- SetReturnValue(r76)



T0: {
  let r76: Bytes(8) = [pre:RSP + 16]:8;
  ;
  return r76
}
