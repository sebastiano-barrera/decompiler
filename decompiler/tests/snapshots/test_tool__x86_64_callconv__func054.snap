---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  68 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- Ancestral { anc_name: AncestralName("arg0"), reg_type: Bytes(8) }
   43 r14 <- Get(r45)
   44 r46 <- Ancestral { anc_name: AncestralName("arg1"), reg_type: Bytes(16) }
   45 r47 <- Part { src: r46, offset: 0, size: 8 }
   46 r15 <- Get(r47)
   47 r48 <- Part { src: r46, offset: 8, size: 8 }
   48 r19 <- Get(r48)
   49 r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(16) }
   50 r50 <- Part { src: r49, offset: 0, size: 8 }
   51 r18 <- Get(r50)
   52 r51 <- Part { src: r49, offset: 8, size: 8 }
   53 r20 <- Get(r51)
0x40120b:
   54 r16 <- Get(r20)
0x40120e:
   55 r46 <- Const { value: 32, size: 1 }
   56 r46 <- Widen { reg: r46, target_size: 8, sign: false }
   57 r16 <- Arith(Shr, r16, r46)
   58 r16 <- Get(r16)
   59 r6 <- SignOf(r16)
   60 r5 <- IsZero(r16)
   61 r47 <- Part { src: r16, offset: 0, size: 1 }
   62 r3 <- Parity(r47)
0x401212:
   63 r45 <- Void
   64 r45 <- Concat { lo: r45, hi: r16 }
   65 r45 <- Part { src: r45, offset: 0, size: 1 }
   66 r47 <- SetReturnValue(r45)
   67 r47 <- Control(Ret)


 --- ssa pre-xform
ssa program  68 instrs
.B0:    ;;  → Always(Return).
         r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(16) }
         r52 <- Part { src: r49, offset: 8, size: 8 }
         r55 <- Const { value: 32, size: 1 }
         r56 <- Widen { reg: r55, target_size: 8, sign: false }
         r57 <- Arith(Shr, r52, r56)
         r64 <- Concat { lo: r63, hi: r57 }
         r65 <- Part { src: r64, offset: 0, size: 1 }
         r66 <- SetReturnValue(r65)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r49, r52, r55, r56, r57, r65, r66]
  domtree:
    BlockID(0)

 --- ssa
ssa program  68 instrs
.B0:    ;;  → Always(Return).
         r49 <- Ancestral { anc_name: AncestralName("arg2"), reg_type: Bytes(16) }
         r52 <- Part { src: r49, offset: 8, size: 8 }
         r55 <- Const { value: 32, size: 1 }
         r56 <- Widen { reg: r55, target_size: 8, sign: false }
         r57 <- Arith(Shr, r52, r56)
         r65 <- Part { src: r57, offset: 0, size: 1 }
         r66 <- SetReturnValue(r65)


 --- ast

T0: {
  ;
  return (pre:arg2[16 .. 8] >> 32 as u64)[1 .. 0]
}
