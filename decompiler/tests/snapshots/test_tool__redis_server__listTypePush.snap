---
source: decompiler/tests/test_tool.rs
expression: out
---
listTypePush 0x485d60+534 (file 0x85d60)
          485d60: 55                      push rbp
          485d61: 48 89 e5                mov rbp,rsp
          485d64: 41 54                   push r12
          485d66: 53                      push rbx
          485d67: 48 89 fb                mov rbx,rdi
          485d6a: 48 83 ec 30             sub rsp,30h
          485d6e: 0f b6 07                movzx eax,byte ptr [rdi]
          485d71: 83 e0 f0                and eax,0FFFFFFF0h
          485d74: 3c 90                   cmp al,90h
          485d76: 74 68                   je short 0000000000485DE0h
          485d78: 3c b0                   cmp al,0B0h
          485d7a: 0f 85 e0 01 00 00       jne 0000000000485F60h
          485d80: 0f b6 06                movzx eax,byte ptr [rsi]
          485d83: 48 8b 4e 08             mov rcx,[rsi+8]
          485d87: 48 8b 7f 08             mov rdi,[rdi+8]
          485d8b: 83 e0 f0                and eax,0FFFFFFF0h
          485d8e: 3c 10                   cmp al,10h
          485d90: 74 26                   je short 0000000000485DB8h
          485d92: 0f b6 71 ff             movzx esi,byte ptr [rcx-1]
          485d96: 89 f0                   mov eax,esi
          485d98: 83 e0 07                and eax,7
          485d9b: 85 d2                   test edx,edx
          485d9d: 75 71                   jne short 0000000000485E10h
          485d9f: 3c 04                   cmp al,4
          485da1: 0f 87 a6 c6 f7 ff       ja 000000000040244Dh
          485da7: 0f b6 c0                movzx eax,al
          485daa: ff 24 c5 30 8c 68 00    jmp qword ptr [rax*8+688C30h]
          485db1: 0f 1f 80 00 00 00 00    nop [rax]
          485db8: 48 89 ce                mov rsi,rcx
          485dbb: 85 d2                   test edx,edx
          485dbd: 74 69                   je short 0000000000485E28h
          485dbf: e8 ec 7e 0d 00          call 000000000055DCB0h
          485dc4: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          485dcf: 90                      nop
          485dd0: 48 89 43 08             mov [rbx+8],rax
          485dd4: 48 83 c4 30             add rsp,30h
          485dd8: 5b                      pop rbx
          485dd9: 41 5c                   pop r12
          485ddb: 5d                      pop rbp
          485ddc: c3                      ret
          485ddd: 0f 1f 00                nop [rax]
          485de0: 0f b6 06                movzx eax,byte ptr [rsi]
          485de3: f7 da                   neg edx
          485de5: 48 8b 7e 08             mov rdi,[rsi+8]
          485de9: 19 c9                   sbb ecx,ecx
          485deb: 83 e0 f0                and eax,0FFFFFFF0h
          485dee: 3c 10                   cmp al,10h
          485df0: 74 3e                   je short 0000000000485E30h
          485df2: 0f b6 57 ff             movzx edx,byte ptr [rdi-1]
          485df6: 89 d0                   mov eax,edx
          485df8: 83 e0 07                and eax,7
          485dfb: 3c 04                   cmp al,4
          485dfd: 0f 87 43 c6 f7 ff       ja 0000000000402446h
          485e03: 0f b6 c0                movzx eax,al
          485e06: ff 24 c5 58 8c 68 00    jmp qword ptr [rax*8+688C58h]
          485e0d: 0f 1f 00                nop [rax]
          485e10: 3c 04                   cmp al,4
          485e12: 0f 87 3c c6 f7 ff       ja 0000000000402454h
          485e18: 0f b6 c0                movzx eax,al
          485e1b: ff 24 c5 80 8c 68 00    jmp qword ptr [rax*8+688C80h]
          485e22: 66 0f 1f 44 00 00       nop [rax+rax]
          485e28: e8 b3 7f 0d 00          call 000000000055DDE0h
          485e2d: eb a1                   jmp short 0000000000485DD0h
          485e2f: 90                      nop
          485e30: 4c 8d 65 d0             lea r12,[rbp-30h]
          485e34: 48 89 fa                mov rdx,rdi
          485e37: be 20 00 00 00          mov esi,20h
          485e3c: 89 4d cc                mov [rbp-34h],ecx
          485e3f: 4c 89 e7                mov rdi,r12
          485e42: e8 59 9b fc ff          call 000000000044F9A0h
          485e47: 4c 89 e7                mov rdi,r12
          485e4a: e8 91 b4 f7 ff          call 00000000004012E0h
          485e4f: 48 8b 7b 08             mov rdi,[rbx+8]
          485e53: 8b 4d cc                mov ecx,[rbp-34h]
          485e56: 4c 89 e6                mov rsi,r12
          485e59: 48 89 c2                mov rdx,rax
          485e5c: e8 0f 26 f9 ff          call 0000000000418470h
          485e61: e9 6e ff ff ff          jmp 0000000000485DD4h
          485e66: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485e70: 8b 57 f7                mov edx,[rdi-9]
          485e73: 48 8b 43 08             mov rax,[rbx+8]
          485e77: 48 83 c4 30             add rsp,30h
          485e7b: 48 89 fe                mov rsi,rdi
          485e7e: 5b                      pop rbx
          485e7f: 41 5c                   pop r12
          485e81: 48 89 c7                mov rdi,rax
          485e84: 5d                      pop rbp
          485e85: e9 e6 25 f9 ff          jmp 0000000000418470h
          485e8a: 66 0f 1f 44 00 00       nop [rax+rax]
          485e90: 48 8b 57 ef             mov rdx,[rdi-11h]
          485e94: eb dd                   jmp short 0000000000485E73h
          485e96: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ea0: c0 ea 03                shr dl,3
          485ea3: 0f b6 d2                movzx edx,dl
          485ea6: eb cb                   jmp short 0000000000485E73h
          485ea8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485eb0: 0f b6 57 fd             movzx edx,byte ptr [rdi-3]
          485eb4: eb bd                   jmp short 0000000000485E73h
          485eb6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ec0: 0f b7 57 fb             movzx edx,word ptr [rdi-5]
          485ec4: eb ad                   jmp short 0000000000485E73h
          485ec6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ed0: 40 c0 ee 03             shr sil,3
          485ed4: 40 0f b6 d6             movzx edx,sil
          485ed8: 48 89 ce                mov rsi,rcx
          485edb: e8 40 7d 0d 00          call 000000000055DC20h
          485ee0: e9 eb fe ff ff          jmp 0000000000485DD0h
          485ee5: 0f 1f 00                nop [rax]
          485ee8: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485eec: eb ea                   jmp short 0000000000485ED8h
          485eee: 66 90                   xchg ax,ax
          485ef0: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485ef4: eb e2                   jmp short 0000000000485ED8h
          485ef6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f00: 8b 51 f7                mov edx,[rcx-9]
          485f03: eb d3                   jmp short 0000000000485ED8h
          485f05: 0f 1f 00                nop [rax]
          485f08: 8b 51 ef                mov edx,[rcx-11h]
          485f0b: 48 89 ce                mov rsi,rcx
          485f0e: e8 ed 7c 0d 00          call 000000000055DC00h
          485f13: e9 b8 fe ff ff          jmp 0000000000485DD0h
          485f18: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485f20: 40 c0 ee 03             shr sil,3
          485f24: 40 0f b6 d6             movzx edx,sil
          485f28: eb e1                   jmp short 0000000000485F0Bh
          485f2a: 66 0f 1f 44 00 00       nop [rax+rax]
          485f30: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485f34: eb d5                   jmp short 0000000000485F0Bh
          485f36: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f40: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485f44: eb c5                   jmp short 0000000000485F0Bh
          485f46: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f50: 8b 51 f7                mov edx,[rcx-9]
          485f53: eb b6                   jmp short 0000000000485F0Bh
          485f55: 0f 1f 00                nop [rax]
          485f58: 8b 51 ef                mov edx,[rcx-11h]
          485f5b: e9 78 ff ff ff          jmp 0000000000485ED8h
          485f60: ba bb 80 6a 00          mov edx,6A80BBh
          485f65: be a5 00 00 00          mov esi,0A5h
          485f6a: bf 3b 8b 6a 00          mov edi,6A8B3Bh
          485f6f: 31 c0                   xor eax,eax
          485f71: e8 fa c5 03 00          call 00000000004C2570h

function type: 0x485d60: no type info
2 warnings:
  #   0: no function type
  #   1: call: call resolved but only packed 2/4 params


mil program = 
program  617 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
0x485d60:
   43 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   44 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x485d61:
   45 r11: TypeID(2v1) <- Get(r12)
0x485d64:
   46 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   47 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r24 }
0x485d66:
   48 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   49 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x485d67:
   50 r17: TypeID(2v1) <- Get(r14)
0x485d6a:
   51 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
   52 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   53 r12: TypeID(2v1) <- Get(r12)
   54 r10: TypeID(2v1) <- OverflowOf(r12)
   55 r2: TypeID(2v1) <- CarryOf(r12)
   56 r6: TypeID(2v1) <- SignOf(r12)
   57 r5: TypeID(2v1) <- IsZero(r12)
   58 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   59 r3: TypeID(2v1) <- Parity(r47)
0x485d6e:
   60 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
0x485d71:
   61 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
   62 r47: TypeID(2v1) <- Const { value: -16, size: 4 }
   63 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
   64 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
   65 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
   66 r10: TypeID(2v1) <- False
   67 r2: TypeID(2v1) <- False
   68 r6: TypeID(2v1) <- SignOf(r46)
   69 r5: TypeID(2v1) <- IsZero(r46)
   70 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   71 r3: TypeID(2v1) <- Parity(r49)
0x485d74:
   72 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   73 r47: TypeID(2v1) <- Const { value: 144, size: 1 }
   74 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
   75 r10: TypeID(2v1) <- OverflowOf(r46)
   76 r2: TypeID(2v1) <- CarryOf(r46)
   77 r6: TypeID(2v1) <- SignOf(r46)
   78 r5: TypeID(2v1) <- IsZero(r46)
   79 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   80 r3: TypeID(2v1) <- Parity(r48)
0x485d76:
   81 r45: TypeID(2v1) <- SetJumpCondition(r5)
   82 r45: TypeID(2v1) <- Control(JmpIf(228))
0x485d78:
   83 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   84 r47: TypeID(2v1) <- Const { value: 176, size: 1 }
   85 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
   86 r10: TypeID(2v1) <- OverflowOf(r46)
   87 r2: TypeID(2v1) <- CarryOf(r46)
   88 r6: TypeID(2v1) <- SignOf(r46)
   89 r5: TypeID(2v1) <- IsZero(r46)
   90 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   91 r3: TypeID(2v1) <- Parity(r48)
0x485d7a:
   92 r45: TypeID(2v1) <- Not(r5)
   93 r46: TypeID(2v1) <- SetJumpCondition(r45)
   94 r46: TypeID(2v1) <- Control(JmpIf(573))
0x485d80:
   95 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485d83:
   96 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   97 r46: TypeID(2v1) <- Arith(Add, r46, r15)
   98 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
   99 r18: TypeID(2v1) <- Get(r45)
0x485d87:
  100 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  101 r46: TypeID(2v1) <- Arith(Add, r46, r14)
  102 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  103 r14: TypeID(2v1) <- Get(r45)
0x485d8b:
  104 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  105 r47: TypeID(2v1) <- Const { value: -16, size: 4 }
  106 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  107 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  108 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  109 r10: TypeID(2v1) <- False
  110 r2: TypeID(2v1) <- False
  111 r6: TypeID(2v1) <- SignOf(r46)
  112 r5: TypeID(2v1) <- IsZero(r46)
  113 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  114 r3: TypeID(2v1) <- Parity(r49)
0x485d8e:
  115 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  116 r47: TypeID(2v1) <- Const { value: 16, size: 1 }
  117 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  118 r10: TypeID(2v1) <- OverflowOf(r46)
  119 r2: TypeID(2v1) <- CarryOf(r46)
  120 r6: TypeID(2v1) <- SignOf(r46)
  121 r5: TypeID(2v1) <- IsZero(r46)
  122 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  123 r3: TypeID(2v1) <- Parity(r48)
0x485d90:
  124 r45: TypeID(2v1) <- SetJumpCondition(r5)
  125 r45: TypeID(2v1) <- Control(JmpIf(173))
0x485d92:
  126 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
0x485d96:
  127 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
  128 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  129 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x485d98:
  130 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  131 r47: TypeID(2v1) <- Const { value: 7, size: 4 }
  132 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  133 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  134 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  135 r10: TypeID(2v1) <- False
  136 r2: TypeID(2v1) <- False
  137 r6: TypeID(2v1) <- SignOf(r46)
  138 r5: TypeID(2v1) <- IsZero(r46)
  139 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  140 r3: TypeID(2v1) <- Parity(r49)
0x485d9b:
  141 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
  142 r48: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
  143 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  144 r6: TypeID(2v1) <- SignOf(r46)
  145 r5: TypeID(2v1) <- IsZero(r46)
  146 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  147 r3: TypeID(2v1) <- Parity(r46)
  148 r2: TypeID(2v1) <- False
  149 r10: TypeID(2v1) <- False
0x485d9d:
  150 r45: TypeID(2v1) <- Not(r5)
  151 r46: TypeID(2v1) <- SetJumpCondition(r45)
  152 r46: TypeID(2v1) <- Control(JmpIf(292))
0x485d9f:
  153 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  154 r47: TypeID(2v1) <- Const { value: 4, size: 1 }
  155 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  156 r10: TypeID(2v1) <- OverflowOf(r46)
  157 r2: TypeID(2v1) <- CarryOf(r46)
  158 r6: TypeID(2v1) <- SignOf(r46)
  159 r5: TypeID(2v1) <- IsZero(r46)
  160 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  161 r3: TypeID(2v1) <- Parity(r48)
0x485da1:
  162 r45: TypeID(2v1) <- Not(r6)
  163 r46: TypeID(2v1) <- Not(r5)
  164 r45: TypeID(2v1) <- Bool(And, r45, r46)
  165 r47: TypeID(2v1) <- SetJumpCondition(r45)
  166 r47: TypeID(2v1) <- Control(JmpExtIf(4203597))
0x485da7:
  167 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,al")
0x485daa:
  168 r46: TypeID(2v1) <- Const { value: 6851632, size: 8 }
  169 r47: TypeID(2v1) <- ArithK(Mul, r16, 8)
  170 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  171 r46: TypeID(2v1) <- SetJumpTarget(r46)
  172 r45: TypeID(2v1) <- Control(JmpIndirect)
0x485db8:
  173 r15: TypeID(2v1) <- Get(r18)
0x485dbb:
  174 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
  175 r48: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
  176 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  177 r6: TypeID(2v1) <- SignOf(r46)
  178 r5: TypeID(2v1) <- IsZero(r46)
  179 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  180 r3: TypeID(2v1) <- Parity(r46)
  181 r2: TypeID(2v1) <- False
  182 r10: TypeID(2v1) <- False
0x485dbd:
  183 r45: TypeID(2v1) <- SetJumpCondition(r5)
  184 r45: TypeID(2v1) <- Control(JmpIf(312))
0x485dbf:
  185 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  186 r45: TypeID(2v1) <- Void
  187 r45: TypeID(2v1) <- Get(r14)
  188 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  189 r46: TypeID(2v1) <- Void
  190 r46: TypeID(2v1) <- Get(r15)
  191 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  192 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  193 r48: TypeID(48714v1) <- Const { value: 5627056, size: 8 }
  194 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  195 r2: TypeID(2v1) <- Undefined
  196 r3: TypeID(2v1) <- Undefined
  197 r4: TypeID(2v1) <- Undefined
  198 r5: TypeID(2v1) <- Undefined
  199 r6: TypeID(2v1) <- Undefined
  200 r7: TypeID(2v1) <- Undefined
  201 r8: TypeID(2v1) <- Undefined
  202 r9: TypeID(2v1) <- Undefined
  203 r10: TypeID(2v1) <- Undefined
  204 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x485dd0:
  205 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  206 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  207 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x485dd4:
  208 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  209 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  210 r12: TypeID(2v1) <- Get(r12)
  211 r10: TypeID(2v1) <- OverflowOf(r12)
  212 r2: TypeID(2v1) <- CarryOf(r12)
  213 r6: TypeID(2v1) <- SignOf(r12)
  214 r5: TypeID(2v1) <- IsZero(r12)
  215 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  216 r3: TypeID(2v1) <- Parity(r47)
0x485dd8:
  217 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  218 r17: TypeID(2v1) <- Get(r45)
  219 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485dd9:
  220 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  221 r24: TypeID(2v1) <- Get(r45)
  222 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485ddb:
  223 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  224 r11: TypeID(2v1) <- Get(r45)
  225 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485ddc:
  226 r45: TypeID(2v1) <- SetReturnValue(r16)
  227 r45: TypeID(2v1) <- Control(Ret)
0x485de0:
  228 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485de3:
  229 r45: TypeID(2v1) <- NotYetImplemented("unsupported: neg edx")
0x485de5:
  230 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  231 r46: TypeID(2v1) <- Arith(Add, r46, r15)
  232 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  233 r14: TypeID(2v1) <- Get(r45)
0x485de9:
  234 r45: TypeID(2v1) <- NotYetImplemented("unsupported: sbb ecx,ecx")
0x485deb:
  235 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  236 r47: TypeID(2v1) <- Const { value: -16, size: 4 }
  237 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  238 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  239 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  240 r10: TypeID(2v1) <- False
  241 r2: TypeID(2v1) <- False
  242 r6: TypeID(2v1) <- SignOf(r46)
  243 r5: TypeID(2v1) <- IsZero(r46)
  244 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  245 r3: TypeID(2v1) <- Parity(r49)
0x485dee:
  246 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  247 r47: TypeID(2v1) <- Const { value: 16, size: 1 }
  248 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  249 r10: TypeID(2v1) <- OverflowOf(r46)
  250 r2: TypeID(2v1) <- CarryOf(r46)
  251 r6: TypeID(2v1) <- SignOf(r46)
  252 r5: TypeID(2v1) <- IsZero(r46)
  253 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  254 r3: TypeID(2v1) <- Parity(r48)
0x485df0:
  255 r45: TypeID(2v1) <- SetJumpCondition(r5)
  256 r45: TypeID(2v1) <- Control(JmpIf(333))
0x485df2:
  257 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
0x485df6:
  258 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 4 }
  259 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  260 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x485df8:
  261 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  262 r47: TypeID(2v1) <- Const { value: 7, size: 4 }
  263 r46: TypeID(2v1) <- Arith(BitAnd, r46, r47)
  264 r48: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  265 r16: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  266 r10: TypeID(2v1) <- False
  267 r2: TypeID(2v1) <- False
  268 r6: TypeID(2v1) <- SignOf(r46)
  269 r5: TypeID(2v1) <- IsZero(r46)
  270 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  271 r3: TypeID(2v1) <- Parity(r49)
0x485dfb:
  272 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  273 r47: TypeID(2v1) <- Const { value: 4, size: 1 }
  274 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  275 r10: TypeID(2v1) <- OverflowOf(r46)
  276 r2: TypeID(2v1) <- CarryOf(r46)
  277 r6: TypeID(2v1) <- SignOf(r46)
  278 r5: TypeID(2v1) <- IsZero(r46)
  279 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  280 r3: TypeID(2v1) <- Parity(r48)
0x485dfd:
  281 r45: TypeID(2v1) <- Not(r6)
  282 r46: TypeID(2v1) <- Not(r5)
  283 r45: TypeID(2v1) <- Bool(And, r45, r46)
  284 r47: TypeID(2v1) <- SetJumpCondition(r45)
  285 r47: TypeID(2v1) <- Control(JmpExtIf(4203590))
0x485e03:
  286 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,al")
0x485e06:
  287 r46: TypeID(2v1) <- Const { value: 6851672, size: 8 }
  288 r47: TypeID(2v1) <- ArithK(Mul, r16, 8)
  289 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  290 r46: TypeID(2v1) <- SetJumpTarget(r46)
  291 r45: TypeID(2v1) <- Control(JmpIndirect)
0x485e10:
  292 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  293 r47: TypeID(2v1) <- Const { value: 4, size: 1 }
  294 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  295 r10: TypeID(2v1) <- OverflowOf(r46)
  296 r2: TypeID(2v1) <- CarryOf(r46)
  297 r6: TypeID(2v1) <- SignOf(r46)
  298 r5: TypeID(2v1) <- IsZero(r46)
  299 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  300 r3: TypeID(2v1) <- Parity(r48)
0x485e12:
  301 r45: TypeID(2v1) <- Not(r6)
  302 r46: TypeID(2v1) <- Not(r5)
  303 r45: TypeID(2v1) <- Bool(And, r45, r46)
  304 r47: TypeID(2v1) <- SetJumpCondition(r45)
  305 r47: TypeID(2v1) <- Control(JmpExtIf(4203604))
0x485e18:
  306 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx eax,al")
0x485e1b:
  307 r46: TypeID(2v1) <- Const { value: 6851712, size: 8 }
  308 r47: TypeID(2v1) <- ArithK(Mul, r16, 8)
  309 r46: TypeID(2v1) <- Arith(Add, r46, r47)
  310 r46: TypeID(2v1) <- SetJumpTarget(r46)
  311 r45: TypeID(2v1) <- Control(JmpIndirect)
0x485e28:
  312 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  313 r45: TypeID(2v1) <- Void
  314 r45: TypeID(2v1) <- Get(r14)
  315 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  316 r46: TypeID(2v1) <- Void
  317 r46: TypeID(2v1) <- Get(r15)
  318 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  319 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  320 r48: TypeID(48715v1) <- Const { value: 5627360, size: 8 }
  321 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  322 r2: TypeID(2v1) <- Undefined
  323 r3: TypeID(2v1) <- Undefined
  324 r4: TypeID(2v1) <- Undefined
  325 r5: TypeID(2v1) <- Undefined
  326 r6: TypeID(2v1) <- Undefined
  327 r7: TypeID(2v1) <- Undefined
  328 r8: TypeID(2v1) <- Undefined
  329 r9: TypeID(2v1) <- Undefined
  330 r10: TypeID(2v1) <- Undefined
  331 r16: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
0x485e2d:
  332 r45: TypeID(2v1) <- Control(Jmp(205))
0x485e30:
  333 r45: TypeID(2v1) <- Const { value: -48, size: 8 }
  334 r45: TypeID(2v1) <- Arith(Add, r45, r11)
  335 r24: TypeID(2v1) <- Get(r45)
0x485e34:
  336 r19: TypeID(2v1) <- Get(r14)
0x485e37:
  337 r45: TypeID(2v1) <- Const { value: 32, size: 4 }
  338 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  339 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x485e3c:
  340 r46: TypeID(2v1) <- Part { src: r18, offset: 0, size: 4 }
  341 r47: TypeID(2v1) <- Const { value: -52, size: 8 }
  342 r47: TypeID(2v1) <- Arith(Add, r47, r11)
  343 r47: TypeID(2v1) <- StoreMem { addr: r47, value: r46 }
0x485e3f:
  344 r14: TypeID(2v1) <- Get(r24)
0x485e42:
  345 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  346 r45: TypeID(2v1) <- Void
  347 r45: TypeID(2v1) <- Get(r14)
  348 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  349 r46: TypeID(2v1) <- Void
  350 r46: TypeID(2v1) <- Get(r15)
  351 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  352 r47: TypeID(2v1) <- Void
  353 r47: TypeID(2v1) <- Get(r19)
  354 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  355 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  356 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  357 r49: TypeID(47972v1) <- Const { value: 4520352, size: 8 }
  358 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  359 r2: TypeID(2v1) <- Undefined
  360 r3: TypeID(2v1) <- Undefined
  361 r4: TypeID(2v1) <- Undefined
  362 r5: TypeID(2v1) <- Undefined
  363 r6: TypeID(2v1) <- Undefined
  364 r7: TypeID(2v1) <- Undefined
  365 r8: TypeID(2v1) <- Undefined
  366 r9: TypeID(2v1) <- Undefined
  367 r10: TypeID(2v1) <- Undefined
  368 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x485e47:
  369 r14: TypeID(2v1) <- Get(r24)
0x485e4a:
  370 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  371 r45: TypeID(2v1) <- Void
  372 r45: TypeID(2v1) <- Get(r14)
  373 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  374 r47: TypeID(48716v1) <- Const { value: 4199136, size: 8 }
  375 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  376 r2: TypeID(2v1) <- Undefined
  377 r3: TypeID(2v1) <- Undefined
  378 r4: TypeID(2v1) <- Undefined
  379 r5: TypeID(2v1) <- Undefined
  380 r6: TypeID(2v1) <- Undefined
  381 r7: TypeID(2v1) <- Undefined
  382 r8: TypeID(2v1) <- Undefined
  383 r9: TypeID(2v1) <- Undefined
  384 r10: TypeID(2v1) <- Undefined
  385 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x485e4f:
  386 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  387 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  388 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  389 r14: TypeID(2v1) <- Get(r45)
0x485e53:
  390 r46: TypeID(2v1) <- Const { value: -52, size: 8 }
  391 r46: TypeID(2v1) <- Arith(Add, r46, r11)
  392 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  393 r47: TypeID(2v1) <- Part { src: r18, offset: 4, size: 4 }
  394 r18: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485e56:
  395 r15: TypeID(2v1) <- Get(r24)
0x485e59:
  396 r19: TypeID(2v1) <- Get(r16)
0x485e5c:
  397 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  398 r45: TypeID(2v1) <- Void
  399 r45: TypeID(2v1) <- Get(r14)
  400 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  401 r46: TypeID(2v1) <- Void
  402 r46: TypeID(2v1) <- Get(r15)
  403 r47: TypeID(2v1) <- CArg { value: r46, next_arg: None }
  404 r47: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r47) }
  405 r48: TypeID(48717v1) <- Const { value: 4293744, size: 8 }
  406 r47: TypeID(2v1) <- Call { callee: r48, first_arg: Some(r47) }
  407 r2: TypeID(2v1) <- Undefined
  408 r3: TypeID(2v1) <- Undefined
  409 r4: TypeID(2v1) <- Undefined
  410 r5: TypeID(2v1) <- Undefined
  411 r6: TypeID(2v1) <- Undefined
  412 r7: TypeID(2v1) <- Undefined
  413 r8: TypeID(2v1) <- Undefined
  414 r9: TypeID(2v1) <- Undefined
  415 r10: TypeID(2v1) <- Undefined
0x485e61:
  416 r45: TypeID(2v1) <- Control(Jmp(208))
0x485e70:
  417 r46: TypeID(2v1) <- Const { value: -9, size: 8 }
  418 r46: TypeID(2v1) <- Arith(Add, r46, r14)
  419 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  420 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  421 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485e73:
  422 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  423 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  424 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  425 r16: TypeID(2v1) <- Get(r45)
0x485e77:
  426 r46: TypeID(2v1) <- Const { value: 48, size: 8 }
  427 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  428 r12: TypeID(2v1) <- Get(r12)
  429 r10: TypeID(2v1) <- OverflowOf(r12)
  430 r2: TypeID(2v1) <- CarryOf(r12)
  431 r6: TypeID(2v1) <- SignOf(r12)
  432 r5: TypeID(2v1) <- IsZero(r12)
  433 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  434 r3: TypeID(2v1) <- Parity(r47)
0x485e7b:
  435 r15: TypeID(2v1) <- Get(r14)
0x485e7e:
  436 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  437 r17: TypeID(2v1) <- Get(r45)
  438 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485e7f:
  439 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  440 r24: TypeID(2v1) <- Get(r45)
  441 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485e81:
  442 r14: TypeID(2v1) <- Get(r16)
0x485e84:
  443 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  444 r11: TypeID(2v1) <- Get(r45)
  445 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x485e85:
  446 r45: TypeID(2v1) <- Control(JmpExt(4293744))
0x485e90:
  447 r46: TypeID(2v1) <- Const { value: -17, size: 8 }
  448 r46: TypeID(2v1) <- Arith(Add, r46, r14)
  449 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  450 r19: TypeID(2v1) <- Get(r45)
0x485e94:
  451 r45: TypeID(2v1) <- Control(Jmp(422))
0x485ea0:
  452 r46: TypeID(2v1) <- Part { src: r19, offset: 0, size: 1 }
  453 r47: TypeID(2v1) <- Const { value: 3, size: 1 }
  454 r46: TypeID(2v1) <- Arith(Shr, r46, r47)
  455 r48: TypeID(2v1) <- Part { src: r19, offset: 1, size: 7 }
  456 r19: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  457 r6: TypeID(2v1) <- SignOf(r46)
  458 r5: TypeID(2v1) <- IsZero(r46)
  459 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  460 r3: TypeID(2v1) <- Parity(r49)
0x485ea3:
  461 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,dl")
0x485ea6:
  462 r45: TypeID(2v1) <- Control(Jmp(422))
0x485eb0:
  463 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-3]")
0x485eb4:
  464 r45: TypeID(2v1) <- Control(Jmp(422))
0x485ec0:
  465 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,word ptr [rdi-5]")
0x485ec4:
  466 r45: TypeID(2v1) <- Control(Jmp(422))
0x485ed0:
  467 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  468 r47: TypeID(2v1) <- Const { value: 3, size: 1 }
  469 r46: TypeID(2v1) <- Arith(Shr, r46, r47)
  470 r48: TypeID(2v1) <- Part { src: r15, offset: 1, size: 7 }
  471 r15: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  472 r6: TypeID(2v1) <- SignOf(r46)
  473 r5: TypeID(2v1) <- IsZero(r46)
  474 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  475 r3: TypeID(2v1) <- Parity(r49)
0x485ed4:
  476 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,sil")
0x485ed8:
  477 r15: TypeID(2v1) <- Get(r18)
0x485edb:
  478 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  479 r45: TypeID(2v1) <- Void
  480 r45: TypeID(2v1) <- Get(r14)
  481 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  482 r46: TypeID(2v1) <- Void
  483 r46: TypeID(2v1) <- Get(r15)
  484 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  485 r47: TypeID(2v1) <- Void
  486 r47: TypeID(2v1) <- Get(r19)
  487 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  488 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  489 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  490 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  491 r49: TypeID(48718v1) <- Const { value: 5626912, size: 8 }
  492 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  493 r2: TypeID(2v1) <- Undefined
  494 r3: TypeID(2v1) <- Undefined
  495 r4: TypeID(2v1) <- Undefined
  496 r5: TypeID(2v1) <- Undefined
  497 r6: TypeID(2v1) <- Undefined
  498 r7: TypeID(2v1) <- Undefined
  499 r8: TypeID(2v1) <- Undefined
  500 r9: TypeID(2v1) <- Undefined
  501 r10: TypeID(2v1) <- Undefined
  502 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x485ee0:
  503 r45: TypeID(2v1) <- Control(Jmp(205))
0x485ee8:
  504 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485eec:
  505 r45: TypeID(2v1) <- Control(Jmp(477))
0x485ef0:
  506 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485ef4:
  507 r45: TypeID(2v1) <- Control(Jmp(477))
0x485f00:
  508 r46: TypeID(2v1) <- Const { value: -9, size: 8 }
  509 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  510 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  511 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  512 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485f03:
  513 r45: TypeID(2v1) <- Control(Jmp(477))
0x485f08:
  514 r46: TypeID(2v1) <- Const { value: -17, size: 8 }
  515 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  516 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  517 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  518 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485f0b:
  519 r15: TypeID(2v1) <- Get(r18)
0x485f0e:
  520 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  521 r45: TypeID(2v1) <- Void
  522 r45: TypeID(2v1) <- Get(r14)
  523 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  524 r46: TypeID(2v1) <- Void
  525 r46: TypeID(2v1) <- Get(r15)
  526 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  527 r47: TypeID(2v1) <- Void
  528 r47: TypeID(2v1) <- Get(r19)
  529 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  530 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  531 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  532 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  533 r49: TypeID(45900v1) <- Const { value: 5626880, size: 8 }
  534 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  535 r2: TypeID(2v1) <- Undefined
  536 r3: TypeID(2v1) <- Undefined
  537 r4: TypeID(2v1) <- Undefined
  538 r5: TypeID(2v1) <- Undefined
  539 r6: TypeID(2v1) <- Undefined
  540 r7: TypeID(2v1) <- Undefined
  541 r8: TypeID(2v1) <- Undefined
  542 r9: TypeID(2v1) <- Undefined
  543 r10: TypeID(2v1) <- Undefined
  544 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x485f13:
  545 r45: TypeID(2v1) <- Control(Jmp(205))
0x485f20:
  546 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 1 }
  547 r47: TypeID(2v1) <- Const { value: 3, size: 1 }
  548 r46: TypeID(2v1) <- Arith(Shr, r46, r47)
  549 r48: TypeID(2v1) <- Part { src: r15, offset: 1, size: 7 }
  550 r15: TypeID(2v1) <- Concat { lo: r46, hi: r48 }
  551 r6: TypeID(2v1) <- SignOf(r46)
  552 r5: TypeID(2v1) <- IsZero(r46)
  553 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  554 r3: TypeID(2v1) <- Parity(r49)
0x485f24:
  555 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,sil")
0x485f28:
  556 r45: TypeID(2v1) <- Control(Jmp(519))
0x485f30:
  557 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485f34:
  558 r45: TypeID(2v1) <- Control(Jmp(519))
0x485f40:
  559 r45: TypeID(2v1) <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485f44:
  560 r45: TypeID(2v1) <- Control(Jmp(519))
0x485f50:
  561 r46: TypeID(2v1) <- Const { value: -9, size: 8 }
  562 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  563 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  564 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  565 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485f53:
  566 r45: TypeID(2v1) <- Control(Jmp(519))
0x485f58:
  567 r46: TypeID(2v1) <- Const { value: -17, size: 8 }
  568 r46: TypeID(2v1) <- Arith(Add, r46, r18)
  569 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  570 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  571 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x485f5b:
  572 r45: TypeID(2v1) <- Control(Jmp(477))
0x485f60:
  573 r45: TypeID(2v1) <- Const { value: 6979771, size: 4 }
  574 r46: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  575 r19: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x485f65:
  576 r45: TypeID(2v1) <- Const { value: 165, size: 4 }
  577 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  578 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x485f6a:
  579 r45: TypeID(2v1) <- Const { value: 6982459, size: 4 }
  580 r46: TypeID(2v1) <- Part { src: r14, offset: 4, size: 4 }
  581 r14: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x485f6f:
  582 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  583 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  584 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
  585 r49: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  586 r16: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
  587 r10: TypeID(2v1) <- False
  588 r2: TypeID(2v1) <- False
  589 r6: TypeID(2v1) <- SignOf(r46)
  590 r5: TypeID(2v1) <- IsZero(r46)
  591 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  592 r3: TypeID(2v1) <- Parity(r50)
0x485f71:
  593 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  594 r45: TypeID(2v1) <- Void
  595 r45: TypeID(2v1) <- Get(r14)
  596 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  597 r46: TypeID(2v1) <- Void
  598 r46: TypeID(2v1) <- Get(r15)
  599 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  600 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  601 r47: TypeID(2v1) <- Void
  602 r47: TypeID(2v1) <- Get(r19)
  603 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  604 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  605 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  606 r49: TypeID(46168v1) <- Const { value: 4990320, size: 8 }
  607 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  608 r2: TypeID(2v1) <- Undefined
  609 r3: TypeID(2v1) <- Undefined
  610 r4: TypeID(2v1) <- Undefined
  611 r5: TypeID(2v1) <- Undefined
  612 r6: TypeID(2v1) <- Undefined
  613 r7: TypeID(2v1) <- Undefined
  614 r8: TypeID(2v1) <- Undefined
  615 r9: TypeID(2v1) <- Undefined
  616 r10: TypeID(2v1) <- Undefined


ssa pre-xform:
ssa program  623 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  4)  r13: ? <- Ancestral(AncestralName("RDI"))
  (  5)  r14: ? <- Ancestral(AncestralName("RSI"))
  (  2)  r15: ? <- Ancestral(AncestralName("RAX"))
         r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
  (  6)  r18: ? <- Ancestral(AncestralName("RDX"))
         r23: ? <- Ancestral(AncestralName("R12"))
  (  4)  r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r10 }
  (  2)  r46: ? <- ArithK(Add, r43, -8)
         r47: ? <- StoreMem { addr: r46, value: r23 }
         r48: ? <- ArithK(Add, r46, -8)
         r49: ? <- StoreMem { addr: r48, value: r16 }
         r60: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r61: ? <- Part { src: r15, offset: 0, size: 4 }
         r62: ? <- Const { value: -16, size: 4 }
         r63: ? <- Arith(BitAnd, r61, r62)
         r64: ? <- Part { src: r15, offset: 4, size: 4 }
  (  6)  r65: ? <- Concat { lo: r63, hi: r64 }
         r72: ? <- Part { src: r65, offset: 0, size: 1 }
         r73: ? <- Const { value: 144, size: 1 }
         r74: ? <- Arith(Sub, r72, r73)
         r78: ? <- IsZero(r74)
         r81: ? <- SetJumpCondition(r78)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r83: ? <- Part { src: r65, offset: 0, size: 1 }
         r84: ? <- Const { value: 176, size: 1 }
         r85: ? <- Arith(Sub, r83, r84)
         r89: ? <- IsZero(r85)
         r92: ? <- Not(r89)
         r93: ? <- SetJumpCondition(r92)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r95: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r96: ? <- Const { value: 8, size: 8 }
         r97: ? <- Arith(Add, r96, r14)
  (  2)  r98: ? <- LoadMem { addr: r97, size: 8 }
         r100: ? <- Const { value: 8, size: 8 }
         r101: ? <- Arith(Add, r100, r13)
  (  2)  r102: ? <- LoadMem { addr: r101, size: 8 }
         r104: ? <- Part { src: r65, offset: 0, size: 4 }
         r105: ? <- Const { value: -16, size: 4 }
         r106: ? <- Arith(BitAnd, r104, r105)
         r107: ? <- Part { src: r65, offset: 4, size: 4 }
  (  2)  r108: ? <- Concat { lo: r106, hi: r107 }
         r115: ? <- Part { src: r108, offset: 0, size: 1 }
         r116: ? <- Const { value: 16, size: 1 }
         r117: ? <- Arith(Sub, r115, r116)
         r121: ? <- IsZero(r117)
         r124: ? <- SetJumpCondition(r121)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r126: ? <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r127: ? <- Part { src: r14, offset: 0, size: 4 }
         r128: ? <- Part { src: r108, offset: 4, size: 4 }
  (  2)  r129: ? <- Concat { lo: r127, hi: r128 }
         r130: ? <- Part { src: r129, offset: 0, size: 4 }
         r131: ? <- Const { value: 7, size: 4 }
         r132: ? <- Arith(BitAnd, r130, r131)
         r133: ? <- Part { src: r129, offset: 4, size: 4 }
  (  4)  r134: ? <- Concat { lo: r132, hi: r133 }
         r141: ? <- Part { src: r18, offset: 0, size: 4 }
         r142: ? <- Part { src: r18, offset: 0, size: 4 }
         r143: ? <- Arith(BitAnd, r141, r142)
         r145: ? <- IsZero(r143)
         r150: ? <- Not(r145)
         r151: ? <- SetJumpCondition(r150)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r153: ? <- Part { src: r134, offset: 0, size: 1 }
         r154: ? <- Const { value: 4, size: 1 }
  (  2)  r155: ? <- Arith(Sub, r153, r154)
         r158: ? <- SignOf(r155)
         r159: ? <- IsZero(r155)
         r162: ? <- Not(r158)
         r163: ? <- Not(r159)
         r164: ? <- Bool(And, r162, r163)
         r165: ? <- SetJumpCondition(r164)
.B5:    ;; preds:B4  → Always(Indirect).
         r167: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r168: ? <- Const { value: 6851632, size: 8 }
         r169: ? <- ArithK(Mul, r134, 8)
         r170: ? <- Arith(Add, r168, r169)
         r171: ? <- SetJumpTarget(r170)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r292: ? <- Part { src: r134, offset: 0, size: 1 }
         r293: ? <- Const { value: 4, size: 1 }
  (  2)  r294: ? <- Arith(Sub, r292, r293)
         r297: ? <- SignOf(r294)
         r298: ? <- IsZero(r294)
         r301: ? <- Not(r297)
         r302: ? <- Not(r298)
         r303: ? <- Bool(And, r301, r302)
         r304: ? <- SetJumpCondition(r303)
.B14:    ;; preds:B13  → Always(Indirect).
         r306: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r307: ? <- Const { value: 6851712, size: 8 }
         r308: ? <- ArithK(Mul, r134, 8)
         r309: ? <- Arith(Add, r307, r308)
         r310: ? <- SetJumpTarget(r309)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r174: ? <- Part { src: r18, offset: 0, size: 4 }
         r175: ? <- Part { src: r18, offset: 0, size: 4 }
         r176: ? <- Arith(BitAnd, r174, r175)
         r178: ? <- IsZero(r176)
         r183: ? <- SetJumpCondition(r178)
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r191: ? <- CArg { value: r98, next_arg: None }
         r192: ? <- CArg { value: r102, next_arg: Some(r191) }
         r193: lpAppendInteger <TypeID(266439v1)> <- Const { value: 5627056, size: 8 }
         r194: ? <- Call { callee: r193, first_arg: Some(r192) }
         r204: ? <- Part { src: r194, offset: 0, size: 8 }
         r622: ? <- Upsilon { value: r204, phi_ref: r617 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r318: ? <- CArg { value: r98, next_arg: None }
         r319: ? <- CArg { value: r102, next_arg: Some(r318) }
         r320: lpPrependInteger <TypeID(266450v1)> <- Const { value: 5627360, size: 8 }
         r321: ? <- Call { callee: r320, first_arg: Some(r319) }
         r331: ? <- Part { src: r321, offset: 0, size: 8 }
         r620: ? <- Upsilon { value: r331, phi_ref: r617 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r617: ? <- Phi
         r205: ? <- Const { value: 8, size: 8 }
         r206: ? <- Arith(Add, r205, r13)
         r207: ? <- StoreMem { addr: r206, value: r617 }
         r621: ? <- Upsilon { value: r617, phi_ref: r618 }
.B35:    ;; preds:B1  → Always(Undefined).
         r573: ? <- Const { value: 6979771, size: 4 }
         r574: ? <- Part { src: r18, offset: 4, size: 4 }
         r575: ? <- Concat { lo: r573, hi: r574 }
         r576: ? <- Const { value: 165, size: 4 }
         r577: ? <- Part { src: r14, offset: 4, size: 4 }
         r578: ? <- Concat { lo: r576, hi: r577 }
         r579: ? <- Const { value: 6982459, size: 4 }
         r580: ? <- Part { src: r13, offset: 4, size: 4 }
         r581: ? <- Concat { lo: r579, hi: r580 }
         r599: ? <- Part { src: r578, offset: 0, size: 4 }
         r603: ? <- CArg { value: r575, next_arg: None }
         r604: ? <- CArg { value: r599, next_arg: Some(r603) }
         r605: ? <- CArg { value: r581, next_arg: Some(r604) }
         r606: _serverPanic <TypeID(214854v1)> <- Const { value: 4990320, size: 8 }
         r607: ? <- Call { callee: r606, first_arg: Some(r605) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r228: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r229: ? <- NotYetImplemented("unsupported: neg edx")
         r230: ? <- Const { value: 8, size: 8 }
         r231: ? <- Arith(Add, r230, r14)
         r232: ? <- LoadMem { addr: r231, size: 8 }
         r234: ? <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r235: ? <- Part { src: r65, offset: 0, size: 4 }
         r236: ? <- Const { value: -16, size: 4 }
         r237: ? <- Arith(BitAnd, r235, r236)
         r238: ? <- Part { src: r65, offset: 4, size: 4 }
  (  2)  r239: ? <- Concat { lo: r237, hi: r238 }
         r246: ? <- Part { src: r239, offset: 0, size: 1 }
         r247: ? <- Const { value: 16, size: 1 }
         r248: ? <- Arith(Sub, r246, r247)
         r252: ? <- IsZero(r248)
         r255: ? <- SetJumpCondition(r252)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r257: ? <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r258: ? <- Part { src: r18, offset: 0, size: 4 }
         r259: ? <- Part { src: r239, offset: 4, size: 4 }
  (  2)  r260: ? <- Concat { lo: r258, hi: r259 }
         r261: ? <- Part { src: r260, offset: 0, size: 4 }
         r262: ? <- Const { value: 7, size: 4 }
         r263: ? <- Arith(BitAnd, r261, r262)
         r264: ? <- Part { src: r260, offset: 4, size: 4 }
  (  2)  r265: ? <- Concat { lo: r263, hi: r264 }
         r272: ? <- Part { src: r265, offset: 0, size: 1 }
         r273: ? <- Const { value: 4, size: 1 }
  (  2)  r274: ? <- Arith(Sub, r272, r273)
         r277: ? <- SignOf(r274)
         r278: ? <- IsZero(r274)
         r281: ? <- Not(r277)
         r282: ? <- Not(r278)
         r283: ? <- Bool(And, r281, r282)
         r284: ? <- SetJumpCondition(r283)
.B12:    ;; preds:B11  → Always(Indirect).
         r286: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r287: ? <- Const { value: 6851672, size: 8 }
         r288: ? <- ArithK(Mul, r265, 8)
         r289: ? <- Arith(Add, r287, r288)
         r290: ? <- SetJumpTarget(r289)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
         r333: ? <- Const { value: -48, size: 8 }
  (  3)  r334: ? <- Arith(Add, r333, r43)
         r337: ? <- Const { value: 32, size: 4 }
         r338: ? <- Part { src: r14, offset: 4, size: 4 }
         r339: ? <- Concat { lo: r337, hi: r338 }
         r340: ? <- Part { src: r17, offset: 0, size: 4 }
         r341: ? <- Const { value: -52, size: 8 }
         r342: ? <- Arith(Add, r341, r43)
         r343: ? <- StoreMem { addr: r342, value: r340 }
         r354: ? <- CArg { value: r232, next_arg: None }
         r355: ? <- CArg { value: r339, next_arg: Some(r354) }
         r356: ? <- CArg { value: r334, next_arg: Some(r355) }
         r357: ll2string <TypeID(177640v1)> <- Const { value: 4520352, size: 8 }
         r358: ? <- Call { callee: r357, first_arg: Some(r356) }
         r373: ? <- CArg { value: r334, next_arg: None }
         r374: strlen <TypeID(164963v1)> <- Const { value: 4199136, size: 8 }
         r375: ? <- Call { callee: r374, first_arg: Some(r373) }
         r385: ? <- Part { src: r375, offset: 0, size: 8 }
         r386: ? <- Const { value: 8, size: 8 }
         r387: ? <- Arith(Add, r386, r13)
         r388: ? <- LoadMem { addr: r387, size: 8 }
         r403: ? <- CArg { value: r334, next_arg: None }
         r404: ? <- CArg { value: r388, next_arg: Some(r403) }
         r405: quicklistPush <TypeID(164115v1)> <- Const { value: 4293744, size: 8 }
         r406: ? <- Call { callee: r405, first_arg: Some(r404) }
         r619: ? <- Upsilon { value: r385, phi_ref: r618 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r618: ? <- Phi
         r226: ? <- SetReturnValue(r618)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r18, r23, r43, r44, r46, r47, r48, r49, r60, r61, r62, r63, r64, r65, r72, r73, r74, r78, r81]
  BlockID(1) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) } [r83, r84, r85, r89, r92, r93]
  BlockID(2) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) } [r95, r96, r97, r98, r100, r101, r102, r104, r105, r106, r107, r108, r115, r116, r117, r121, r124]
  BlockID(3) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) } [r126, r127, r128, r129, r130, r131, r132, r133, r134, r141, r142, r143, r145, r150, r151]
  BlockID(4) -> Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) } [r153, r154, r155, r158, r159, r162, r163, r164, r165]
  BlockID(5) -> Always(Indirect) [r167, r168, r169, r170, r171]
  BlockID(6) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) } [r174, r175, r176, r178, r183]
  BlockID(7) -> Always(Block(BlockID(8))) [r191, r192, r193, r194, r204, r622]
  BlockID(8) -> Always(Block(BlockID(9))) [r617, r205, r206, r207, r621]
  BlockID(9) -> Always(Return) [r618, r226]
  BlockID(10) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) } [r228, r229, r230, r231, r232, r234, r235, r236, r237, r238, r239, r246, r247, r248, r252, r255]
  BlockID(11) -> Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) } [r257, r258, r259, r260, r261, r262, r263, r264, r265, r272, r273, r274, r277, r278, r281, r282, r283, r284]
  BlockID(12) -> Always(Indirect) [r286, r287, r288, r289, r290]
  BlockID(13) -> Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) } [r292, r293, r294, r297, r298, r301, r302, r303, r304]
  BlockID(14) -> Always(Indirect) [r306, r307, r308, r309, r310]
  BlockID(15) -> Always(Block(BlockID(8))) [r318, r319, r320, r321, r331, r620]
  BlockID(16) -> Always(Block(BlockID(9))) [r333, r334, r337, r338, r339, r340, r341, r342, r343, r354, r355, r356, r357, r358, r373, r374, r375, r385, r386, r387, r388, r403, r404, r405, r406, r619]
  BlockID(17) -> Always(Undefined) []
  BlockID(18) -> Always(Undefined) []
  BlockID(19) -> Always(Undefined) []
  BlockID(20) -> Always(Undefined) [r461]
  BlockID(21) -> Always(Undefined) [r463]
  BlockID(22) -> Always(Undefined) [r465]
  BlockID(23) -> Always(Undefined) [r476]
  BlockID(24) -> Always(Undefined) [r492]
  BlockID(25) -> Always(Undefined) [r504]
  BlockID(26) -> Always(Undefined) [r506]
  BlockID(27) -> Always(Undefined) []
  BlockID(28) -> Always(Undefined) []
  BlockID(29) -> Always(Undefined) [r534]
  BlockID(30) -> Always(Undefined) [r555]
  BlockID(31) -> Always(Undefined) [r557]
  BlockID(32) -> Always(Undefined) [r559]
  BlockID(33) -> Always(Undefined) []
  BlockID(34) -> Always(Undefined) []
  BlockID(35) -> Always(Undefined) [r573, r574, r575, r576, r577, r578, r579, r580, r581, r599, r603, r604, r605, r606, r607]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  BlockID(13)
    |  |  |  |  |  BlockID(14)
    |  |  |  BlockID(6)
    |  |  |  |  BlockID(7)
    |  |  |  |  BlockID(8)
    |  |  |  |  BlockID(15)
    |  |  BlockID(35)
    |  BlockID(9)
    |  BlockID(10)
    |  |  BlockID(11)
    |  |  |  BlockID(12)
    |  |  BlockID(16)
    BlockID(17)
    BlockID(18)
    BlockID(19)
    BlockID(20)
    BlockID(21)
    BlockID(22)
    BlockID(23)
    BlockID(24)
    BlockID(25)
    BlockID(26)
    BlockID(27)
    BlockID(28)
    BlockID(29)
    BlockID(30)
    BlockID(31)
    BlockID(32)
    BlockID(33)
    BlockID(34)

ssa post-xform:
ssa program  623 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  5)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  4)  r13: ? <- Ancestral(AncestralName("RDI"))
  (  4)  r14: ? <- Ancestral(AncestralName("RSI"))
  (  3)  r15: ? <- Ancestral(AncestralName("RAX"))
         r16: ? <- Ancestral(AncestralName("RBX"))
         r17: ? <- Ancestral(AncestralName("RCX"))
  (  6)  r18: ? <- Ancestral(AncestralName("RDX"))
         r23: ? <- Ancestral(AncestralName("R12"))
         r43: ? <- ArithK(Add, r11, -8)
         r44: ? <- StoreMem { addr: r43, value: r10 }
         r46: ? <- ArithK(Add, r11, -16)
         r47: ? <- StoreMem { addr: r46, value: r23 }
         r48: ? <- ArithK(Add, r11, -24)
         r49: ? <- StoreMem { addr: r48, value: r16 }
         r60: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r61: ? <- Part { src: r15, offset: 0, size: 4 }
  (  4)  r63: ? <- ArithK(BitAnd, r61, -16)
         r72: ? <- Part { src: r63, offset: 0, size: 1 }
         r74: ? <- ArithK(Add, r72, -144)
         r78: ? <- IsZero(r74)
         r81: ? <- SetJumpCondition(r78)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r83: ? <- Part { src: r63, offset: 0, size: 1 }
         r85: ? <- ArithK(Add, r83, -176)
         r89: ? <- IsZero(r85)
         r92: ? <- Not(r89)
         r93: ? <- SetJumpCondition(r92)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r95: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r97: ? <- ArithK(Add, r14, 8)
  (  2)  r98: ? <- LoadMem { addr: r97, size: 8 }
         r101: ? <- ArithK(Add, r13, 8)
  (  2)  r102: ? <- LoadMem { addr: r101, size: 8 }
         r106: ? <- ArithK(BitAnd, r63, -16)
         r115: ? <- Part { src: r106, offset: 0, size: 1 }
         r117: ? <- ArithK(Add, r115, -16)
         r121: ? <- IsZero(r117)
         r124: ? <- SetJumpCondition(r121)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r126: ? <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r130: ? <- Part { src: r14, offset: 0, size: 4 }
  (  3)  r132: ? <- ArithK(BitAnd, r130, 7)
         r133: ? <- Part { src: r15, offset: 4, size: 4 }
  (  2)  r134: ? <- Concat { lo: r132, hi: r133 }
         r141: ? <- Part { src: r18, offset: 0, size: 4 }
         r142: ? <- Part { src: r18, offset: 0, size: 4 }
         r143: ? <- Arith(BitAnd, r141, r142)
         r145: ? <- IsZero(r143)
         r150: ? <- Not(r145)
         r151: ? <- SetJumpCondition(r150)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r153: ? <- Part { src: r132, offset: 0, size: 1 }
  (  2)  r155: ? <- ArithK(Add, r153, -4)
         r158: ? <- SignOf(r155)
         r159: ? <- IsZero(r155)
         r162: ? <- Not(r158)
         r163: ? <- Not(r159)
         r164: ? <- Bool(And, r162, r163)
         r165: ? <- SetJumpCondition(r164)
.B5:    ;; preds:B4  → Always(Indirect).
         r167: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r169: ? <- ArithK(Mul, r134, 8)
         r170: ? <- ArithK(Add, r169, 6851632)
         r171: ? <- SetJumpTarget(r170)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r292: ? <- Part { src: r132, offset: 0, size: 1 }
  (  2)  r294: ? <- ArithK(Add, r292, -4)
         r297: ? <- SignOf(r294)
         r298: ? <- IsZero(r294)
         r301: ? <- Not(r297)
         r302: ? <- Not(r298)
         r303: ? <- Bool(And, r301, r302)
         r304: ? <- SetJumpCondition(r303)
.B14:    ;; preds:B13  → Always(Indirect).
         r306: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r308: ? <- ArithK(Mul, r134, 8)
         r309: ? <- ArithK(Add, r308, 6851712)
         r310: ? <- SetJumpTarget(r309)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r174: ? <- Part { src: r18, offset: 0, size: 4 }
         r175: ? <- Part { src: r18, offset: 0, size: 4 }
         r176: ? <- Arith(BitAnd, r174, r175)
         r178: ? <- IsZero(r176)
         r183: ? <- SetJumpCondition(r178)
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r191: ? <- CArg { value: r98, next_arg: None }
         r192: ? <- CArg { value: r102, next_arg: Some(r191) }
         r193: lpAppendInteger <TypeID(266439v1)> <- Const { value: 5627056, size: 8 }
         r194: ? <- Call { callee: r193, first_arg: Some(r192) }
         r622: ? <- Upsilon { value: r194, phi_ref: r617 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r318: ? <- CArg { value: r98, next_arg: None }
         r319: ? <- CArg { value: r102, next_arg: Some(r318) }
         r320: lpPrependInteger <TypeID(266450v1)> <- Const { value: 5627360, size: 8 }
         r321: ? <- Call { callee: r320, first_arg: Some(r319) }
         r620: ? <- Upsilon { value: r321, phi_ref: r617 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r617: ? <- Phi
         r206: ? <- ArithK(Add, r13, 8)
         r207: ? <- StoreMem { addr: r206, value: r617 }
         r621: ? <- Upsilon { value: r617, phi_ref: r618 }
.B35:    ;; preds:B1  → Always(Undefined).
         r573: ? <- Const { value: 6979771, size: 4 }
         r574: ? <- Part { src: r18, offset: 4, size: 4 }
         r575: ? <- Concat { lo: r573, hi: r574 }
         r576: ? <- Const { value: 165, size: 4 }
         r579: ? <- Const { value: 6982459, size: 4 }
         r580: ? <- Part { src: r13, offset: 4, size: 4 }
         r581: ? <- Concat { lo: r579, hi: r580 }
         r603: ? <- CArg { value: r575, next_arg: None }
         r604: ? <- CArg { value: r576, next_arg: Some(r603) }
         r605: ? <- CArg { value: r581, next_arg: Some(r604) }
         r606: _serverPanic <TypeID(214854v1)> <- Const { value: 4990320, size: 8 }
         r607: ? <- Call { callee: r606, first_arg: Some(r605) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r228: ? <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r229: ? <- NotYetImplemented("unsupported: neg edx")
         r231: ? <- ArithK(Add, r14, 8)
         r232: ? <- LoadMem { addr: r231, size: 8 }
         r234: ? <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r237: ? <- ArithK(BitAnd, r63, -16)
         r246: ? <- Part { src: r237, offset: 0, size: 1 }
         r248: ? <- ArithK(Add, r246, -16)
         r252: ? <- IsZero(r248)
         r255: ? <- SetJumpCondition(r252)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r257: ? <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r261: ? <- Part { src: r18, offset: 0, size: 4 }
  (  2)  r263: ? <- ArithK(BitAnd, r261, 7)
         r264: ? <- Part { src: r15, offset: 4, size: 4 }
         r265: ? <- Concat { lo: r263, hi: r264 }
         r272: ? <- Part { src: r263, offset: 0, size: 1 }
  (  2)  r274: ? <- ArithK(Add, r272, -4)
         r277: ? <- SignOf(r274)
         r278: ? <- IsZero(r274)
         r281: ? <- Not(r277)
         r282: ? <- Not(r278)
         r283: ? <- Bool(And, r281, r282)
         r284: ? <- SetJumpCondition(r283)
.B12:    ;; preds:B11  → Always(Indirect).
         r286: ? <- NotYetImplemented("unsupported: movzx eax,al")
         r288: ? <- ArithK(Mul, r265, 8)
         r289: ? <- ArithK(Add, r288, 6851672)
         r290: ? <- SetJumpTarget(r289)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  3)  r334: ? <- ArithK(Add, r11, -56)
         r337: ? <- Const { value: 32, size: 4 }
         r338: ? <- Part { src: r14, offset: 4, size: 4 }
         r339: ? <- Concat { lo: r337, hi: r338 }
         r340: ? <- Part { src: r17, offset: 0, size: 4 }
         r342: ? <- ArithK(Add, r11, -60)
         r343: ? <- StoreMem { addr: r342, value: r340 }
         r354: ? <- CArg { value: r232, next_arg: None }
         r355: ? <- CArg { value: r339, next_arg: Some(r354) }
         r356: ? <- CArg { value: r334, next_arg: Some(r355) }
         r357: ll2string <TypeID(177640v1)> <- Const { value: 4520352, size: 8 }
         r358: ? <- Call { callee: r357, first_arg: Some(r356) }
         r373: ? <- CArg { value: r334, next_arg: None }
         r374: strlen <TypeID(164963v1)> <- Const { value: 4199136, size: 8 }
         r375: ? <- Call { callee: r374, first_arg: Some(r373) }
         r387: ? <- ArithK(Add, r13, 8)
         r388: ? <- LoadMem { addr: r387, size: 8 }
         r403: ? <- CArg { value: r334, next_arg: None }
         r404: ? <- CArg { value: r388, next_arg: Some(r403) }
         r405: quicklistPush <TypeID(164115v1)> <- Const { value: 4293744, size: 8 }
         r406: ? <- Call { callee: r405, first_arg: Some(r404) }
         r619: ? <- Upsilon { value: r375, phi_ref: r618 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r618: ? <- Phi
         r226: ? <- SetReturnValue(r618)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R12;
  [pre:RSP - 24]:* := pre:RBX;
  TODO /* unsupported: movzx eax,byte ptr [rdi] */;
  let r63: Bytes(4) = pre:RAX[4 .. 0] & -16;
  ;
  if IsZero (r63[1 .. 0] - 144) {
    TODO /* unsupported: movzx eax,byte ptr [rsi] */;
    TODO /* unsupported: neg edx */;
    TODO /* unsupported: sbb ecx,ecx */;
    ;
    if IsZero ((r63 & -16)[1 .. 0] - 16) {
      let r334: Bytes(8) = pre:RSP - 56;
      [pre:RSP - 60]:* := pre:RCX[4 .. 0];
      ll2string(r334,
                pre:RSI[8 .. 4] ++ 32,
                [pre:RSI + 8]:8);
      strlen(r334);
      quicklistPush([pre:RDI + 8]:8,
                    r334);
      r618 := strlen(r334);
      goto T9
    }
    TODO /* unsupported: movzx edx,byte ptr [rdi-1] */;
    let r263: Bytes(4) = pre:RDX[4 .. 0] & 7;
    let r274: Bytes(1) = r263[1 .. 0] - 4;
    ;
    if ! SignOf (r274) AND ! IsZero (r274) {
      goto ext 0x402446
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (pre:RAX[8 .. 4] ++ r263 * 8 + 6851672).*
  }
  ;
  if ! IsZero (r63[1 .. 0] - 176) {
    _serverPanic(pre:RDI[8 .. 4] ++ 6982459,
                 165,
                 pre:RDX[8 .. 4] ++ 6979771);
    goto undefined /* warning: due to decompiler bug or limitation */
  }
  TODO /* unsupported: movzx eax,byte ptr [rsi] */;
  let r98: Bytes(8) = [pre:RSI + 8]:8;
  let r102: Bytes(8) = [pre:RDI + 8]:8;
  ;
  if IsZero ((r63 & -16)[1 .. 0] - 16) {
    ;
    if IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
      lpPrependInteger(r102,
                       r98);
      r617 := lpPrependInteger(r102,
                               r98);
      goto T8
    }
    lpAppendInteger(r102,
                    r98);
    r617 := lpAppendInteger(r102,
                            r98);
    goto T8
    T8: {
      let mut r617: Bytes(8);
      [pre:RDI + 8]:* := r617;
      r618 := phi ();
      goto T9
    }
  
  }
  TODO /* unsupported: movzx esi,byte ptr [rcx-1] */;
  let r132: Bytes(4) = pre:RSI[4 .. 0] & 7;
  let r134: Bytes(8) = pre:RAX[8 .. 4] ++ r132;
  ;
  if ! IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
    let r294: Bytes(1) = r132[1 .. 0] - 4;
    ;
    if ! SignOf (r294) AND ! IsZero (r294) {
      goto ext 0x402454
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (r134 * 8 + 6851712).*
  }
  let r155: Bytes(1) = r132[1 .. 0] - 4;
  ;
  if ! SignOf (r155) AND ! IsZero (r155) {
    goto ext 0x40244d
  }
  TODO /* unsupported: movzx eax,al */;
  ;
  goto (r134 * 8 + 6851632).*
  T9: {
    let mut r618: Bytes(8);
    ;
    return r618
  }

}
