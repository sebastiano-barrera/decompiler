---
source: decompiler/tests/test_tool.rs
expression: out
---
listTypePush 0x485d60+534 (file 0x85d60)
          485d60: 55                      push rbp
          485d61: 48 89 e5                mov rbp,rsp
          485d64: 41 54                   push r12
          485d66: 53                      push rbx
          485d67: 48 89 fb                mov rbx,rdi
          485d6a: 48 83 ec 30             sub rsp,30h
          485d6e: 0f b6 07                movzx eax,byte ptr [rdi]
          485d71: 83 e0 f0                and eax,0FFFFFFF0h
          485d74: 3c 90                   cmp al,90h
          485d76: 74 68                   je short 0000000000485DE0h
          485d78: 3c b0                   cmp al,0B0h
          485d7a: 0f 85 e0 01 00 00       jne 0000000000485F60h
          485d80: 0f b6 06                movzx eax,byte ptr [rsi]
          485d83: 48 8b 4e 08             mov rcx,[rsi+8]
          485d87: 48 8b 7f 08             mov rdi,[rdi+8]
          485d8b: 83 e0 f0                and eax,0FFFFFFF0h
          485d8e: 3c 10                   cmp al,10h
          485d90: 74 26                   je short 0000000000485DB8h
          485d92: 0f b6 71 ff             movzx esi,byte ptr [rcx-1]
          485d96: 89 f0                   mov eax,esi
          485d98: 83 e0 07                and eax,7
          485d9b: 85 d2                   test edx,edx
          485d9d: 75 71                   jne short 0000000000485E10h
          485d9f: 3c 04                   cmp al,4
          485da1: 0f 87 a6 c6 f7 ff       ja 000000000040244Dh
          485da7: 0f b6 c0                movzx eax,al
          485daa: ff 24 c5 30 8c 68 00    jmp qword ptr [rax*8+688C30h]
          485db1: 0f 1f 80 00 00 00 00    nop [rax]
          485db8: 48 89 ce                mov rsi,rcx
          485dbb: 85 d2                   test edx,edx
          485dbd: 74 69                   je short 0000000000485E28h
          485dbf: e8 ec 7e 0d 00          call 000000000055DCB0h
          485dc4: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          485dcf: 90                      nop
          485dd0: 48 89 43 08             mov [rbx+8],rax
          485dd4: 48 83 c4 30             add rsp,30h
          485dd8: 5b                      pop rbx
          485dd9: 41 5c                   pop r12
          485ddb: 5d                      pop rbp
          485ddc: c3                      ret
          485ddd: 0f 1f 00                nop [rax]
          485de0: 0f b6 06                movzx eax,byte ptr [rsi]
          485de3: f7 da                   neg edx
          485de5: 48 8b 7e 08             mov rdi,[rsi+8]
          485de9: 19 c9                   sbb ecx,ecx
          485deb: 83 e0 f0                and eax,0FFFFFFF0h
          485dee: 3c 10                   cmp al,10h
          485df0: 74 3e                   je short 0000000000485E30h
          485df2: 0f b6 57 ff             movzx edx,byte ptr [rdi-1]
          485df6: 89 d0                   mov eax,edx
          485df8: 83 e0 07                and eax,7
          485dfb: 3c 04                   cmp al,4
          485dfd: 0f 87 43 c6 f7 ff       ja 0000000000402446h
          485e03: 0f b6 c0                movzx eax,al
          485e06: ff 24 c5 58 8c 68 00    jmp qword ptr [rax*8+688C58h]
          485e0d: 0f 1f 00                nop [rax]
          485e10: 3c 04                   cmp al,4
          485e12: 0f 87 3c c6 f7 ff       ja 0000000000402454h
          485e18: 0f b6 c0                movzx eax,al
          485e1b: ff 24 c5 80 8c 68 00    jmp qword ptr [rax*8+688C80h]
          485e22: 66 0f 1f 44 00 00       nop [rax+rax]
          485e28: e8 b3 7f 0d 00          call 000000000055DDE0h
          485e2d: eb a1                   jmp short 0000000000485DD0h
          485e2f: 90                      nop
          485e30: 4c 8d 65 d0             lea r12,[rbp-30h]
          485e34: 48 89 fa                mov rdx,rdi
          485e37: be 20 00 00 00          mov esi,20h
          485e3c: 89 4d cc                mov [rbp-34h],ecx
          485e3f: 4c 89 e7                mov rdi,r12
          485e42: e8 59 9b fc ff          call 000000000044F9A0h
          485e47: 4c 89 e7                mov rdi,r12
          485e4a: e8 91 b4 f7 ff          call 00000000004012E0h
          485e4f: 48 8b 7b 08             mov rdi,[rbx+8]
          485e53: 8b 4d cc                mov ecx,[rbp-34h]
          485e56: 4c 89 e6                mov rsi,r12
          485e59: 48 89 c2                mov rdx,rax
          485e5c: e8 0f 26 f9 ff          call 0000000000418470h
          485e61: e9 6e ff ff ff          jmp 0000000000485DD4h
          485e66: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485e70: 8b 57 f7                mov edx,[rdi-9]
          485e73: 48 8b 43 08             mov rax,[rbx+8]
          485e77: 48 83 c4 30             add rsp,30h
          485e7b: 48 89 fe                mov rsi,rdi
          485e7e: 5b                      pop rbx
          485e7f: 41 5c                   pop r12
          485e81: 48 89 c7                mov rdi,rax
          485e84: 5d                      pop rbp
          485e85: e9 e6 25 f9 ff          jmp 0000000000418470h
          485e8a: 66 0f 1f 44 00 00       nop [rax+rax]
          485e90: 48 8b 57 ef             mov rdx,[rdi-11h]
          485e94: eb dd                   jmp short 0000000000485E73h
          485e96: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ea0: c0 ea 03                shr dl,3
          485ea3: 0f b6 d2                movzx edx,dl
          485ea6: eb cb                   jmp short 0000000000485E73h
          485ea8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485eb0: 0f b6 57 fd             movzx edx,byte ptr [rdi-3]
          485eb4: eb bd                   jmp short 0000000000485E73h
          485eb6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ec0: 0f b7 57 fb             movzx edx,word ptr [rdi-5]
          485ec4: eb ad                   jmp short 0000000000485E73h
          485ec6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ed0: 40 c0 ee 03             shr sil,3
          485ed4: 40 0f b6 d6             movzx edx,sil
          485ed8: 48 89 ce                mov rsi,rcx
          485edb: e8 40 7d 0d 00          call 000000000055DC20h
          485ee0: e9 eb fe ff ff          jmp 0000000000485DD0h
          485ee5: 0f 1f 00                nop [rax]
          485ee8: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485eec: eb ea                   jmp short 0000000000485ED8h
          485eee: 66 90                   xchg ax,ax
          485ef0: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485ef4: eb e2                   jmp short 0000000000485ED8h
          485ef6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f00: 8b 51 f7                mov edx,[rcx-9]
          485f03: eb d3                   jmp short 0000000000485ED8h
          485f05: 0f 1f 00                nop [rax]
          485f08: 8b 51 ef                mov edx,[rcx-11h]
          485f0b: 48 89 ce                mov rsi,rcx
          485f0e: e8 ed 7c 0d 00          call 000000000055DC00h
          485f13: e9 b8 fe ff ff          jmp 0000000000485DD0h
          485f18: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485f20: 40 c0 ee 03             shr sil,3
          485f24: 40 0f b6 d6             movzx edx,sil
          485f28: eb e1                   jmp short 0000000000485F0Bh
          485f2a: 66 0f 1f 44 00 00       nop [rax+rax]
          485f30: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485f34: eb d5                   jmp short 0000000000485F0Bh
          485f36: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f40: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485f44: eb c5                   jmp short 0000000000485F0Bh
          485f46: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f50: 8b 51 f7                mov edx,[rcx-9]
          485f53: eb b6                   jmp short 0000000000485F0Bh
          485f55: 0f 1f 00                nop [rax]
          485f58: 8b 51 ef                mov edx,[rcx-11h]
          485f5b: e9 78 ff ff ff          jmp 0000000000485ED8h
          485f60: ba bb 80 6a 00          mov edx,6A80BBh
          485f65: be a5 00 00 00          mov esi,0A5h
          485f6a: bf 3b 8b 6a 00          mov edi,6A8B3Bh
          485f6f: 31 c0                   xor eax,eax
          485f71: e8 fa c5 03 00          call 00000000004C2570h

function type: 0x485d60: no type info
2 warnings:
  #   0: no function type
  #   1: call: call resolved but only packed 2/4 params


mil program = 
program  640 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r45 <- Undefined
                44 r46 <- Undefined
                45 r47 <- Undefined
                46 r48 <- Undefined
                47 r49 <- Undefined
                48 r50 <- Undefined
                49 r51 <- Undefined
                50 r52 <- Undefined
                51 r53 <- Undefined
                52 r54 <- Undefined
                53 r55 <- Undefined
                54 r56 <- Undefined
                55 r57 <- Undefined
                56 r58 <- Undefined
                57 r59 <- Undefined
                58 r60 <- Undefined
                59 r61 <- Undefined
                60 r62 <- Undefined
                61 r63 <- Undefined
                62 r64 <- Undefined
                63 r65 <- Undefined
0x485d60:
                64 r12 <- ArithK(Add, r12, -8)
                65 r46 <- StoreMem { addr: r12, value: r11 }
0x485d61:
                66 r11 <- Get(r12)
0x485d64:
                67 r12 <- ArithK(Add, r12, -8)
                68 r46 <- StoreMem { addr: r12, value: r24 }
0x485d66:
                69 r12 <- ArithK(Add, r12, -8)
                70 r46 <- StoreMem { addr: r12, value: r17 }
0x485d67:
                71 r17 <- Get(r14)
0x485d6a:
                72 r46 <- Const { value: 48, size: 8 }
                73 r12 <- Arith(Sub, r12, r46)
                74 r12 <- Get(r12)
                75 r10 <- OverflowOf(r12)
                76 r2 <- CarryOf(r12)
                77 r6 <- SignOf(r12)
                78 r5 <- IsZero(r12)
                79 r47 <- Part { src: r12, offset: 0, size: 1 }
                80 r3 <- Parity(r47)
0x485d6e:
                81 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
0x485d71:
                82 r46 <- Part { src: r16, offset: 0, size: 4 }
                83 r47 <- Const { value: -16, size: 4 }
                84 r46 <- Arith(BitAnd, r46, r47)
                85 r48 <- Part { src: r16, offset: 4, size: 4 }
                86 r16 <- Concat { lo: r46, hi: r48 }
                87 r10 <- False
                88 r2 <- False
                89 r6 <- SignOf(r46)
                90 r5 <- IsZero(r46)
                91 r49 <- Part { src: r46, offset: 0, size: 1 }
                92 r3 <- Parity(r49)
0x485d74:
                93 r46 <- Part { src: r16, offset: 0, size: 1 }
                94 r47 <- Const { value: 144, size: 1 }
                95 r46 <- Arith(Sub, r46, r47)
                96 r10 <- OverflowOf(r46)
                97 r2 <- CarryOf(r46)
                98 r6 <- SignOf(r46)
                99 r5 <- IsZero(r46)
               100 r48 <- Part { src: r46, offset: 0, size: 1 }
               101 r3 <- Parity(r48)
0x485d76:
               102 r45 <- SetJumpCondition(r5)
               103 r45 <- Control(JmpIf(249))
0x485d78:
               104 r46 <- Part { src: r16, offset: 0, size: 1 }
               105 r47 <- Const { value: 176, size: 1 }
               106 r46 <- Arith(Sub, r46, r47)
               107 r10 <- OverflowOf(r46)
               108 r2 <- CarryOf(r46)
               109 r6 <- SignOf(r46)
               110 r5 <- IsZero(r46)
               111 r48 <- Part { src: r46, offset: 0, size: 1 }
               112 r3 <- Parity(r48)
0x485d7a:
               113 r45 <- Not(r5)
               114 r46 <- SetJumpCondition(r45)
               115 r46 <- Control(JmpIf(596))
0x485d80:
               116 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485d83:
               117 r46 <- Const { value: 8, size: 8 }
               118 r46 <- Arith(Add, r46, r15)
               119 r45 <- LoadMem { addr: r46, size: 8 }
               120 r18 <- Get(r45)
0x485d87:
               121 r46 <- Const { value: 8, size: 8 }
               122 r46 <- Arith(Add, r46, r14)
               123 r45 <- LoadMem { addr: r46, size: 8 }
               124 r14 <- Get(r45)
0x485d8b:
               125 r46 <- Part { src: r16, offset: 0, size: 4 }
               126 r47 <- Const { value: -16, size: 4 }
               127 r46 <- Arith(BitAnd, r46, r47)
               128 r48 <- Part { src: r16, offset: 4, size: 4 }
               129 r16 <- Concat { lo: r46, hi: r48 }
               130 r10 <- False
               131 r2 <- False
               132 r6 <- SignOf(r46)
               133 r5 <- IsZero(r46)
               134 r49 <- Part { src: r46, offset: 0, size: 1 }
               135 r3 <- Parity(r49)
0x485d8e:
               136 r46 <- Part { src: r16, offset: 0, size: 1 }
               137 r47 <- Const { value: 16, size: 1 }
               138 r46 <- Arith(Sub, r46, r47)
               139 r10 <- OverflowOf(r46)
               140 r2 <- CarryOf(r46)
               141 r6 <- SignOf(r46)
               142 r5 <- IsZero(r46)
               143 r48 <- Part { src: r46, offset: 0, size: 1 }
               144 r3 <- Parity(r48)
0x485d90:
               145 r45 <- SetJumpCondition(r5)
               146 r45 <- Control(JmpIf(194))
0x485d92:
               147 r45 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
0x485d96:
               148 r46 <- Part { src: r15, offset: 0, size: 4 }
               149 r47 <- Part { src: r16, offset: 4, size: 4 }
               150 r16 <- Concat { lo: r46, hi: r47 }
0x485d98:
               151 r46 <- Part { src: r16, offset: 0, size: 4 }
               152 r47 <- Const { value: 7, size: 4 }
               153 r46 <- Arith(BitAnd, r46, r47)
               154 r48 <- Part { src: r16, offset: 4, size: 4 }
               155 r16 <- Concat { lo: r46, hi: r48 }
               156 r10 <- False
               157 r2 <- False
               158 r6 <- SignOf(r46)
               159 r5 <- IsZero(r46)
               160 r49 <- Part { src: r46, offset: 0, size: 1 }
               161 r3 <- Parity(r49)
0x485d9b:
               162 r46 <- Part { src: r19, offset: 0, size: 4 }
               163 r48 <- Part { src: r19, offset: 0, size: 4 }
               164 r46 <- Arith(BitAnd, r46, r48)
               165 r6 <- SignOf(r46)
               166 r5 <- IsZero(r46)
               167 r49 <- Part { src: r46, offset: 0, size: 1 }
               168 r3 <- Parity(r46)
               169 r2 <- False
               170 r10 <- False
0x485d9d:
               171 r45 <- Not(r5)
               172 r46 <- SetJumpCondition(r45)
               173 r46 <- Control(JmpIf(313))
0x485d9f:
               174 r46 <- Part { src: r16, offset: 0, size: 1 }
               175 r47 <- Const { value: 4, size: 1 }
               176 r46 <- Arith(Sub, r46, r47)
               177 r10 <- OverflowOf(r46)
               178 r2 <- CarryOf(r46)
               179 r6 <- SignOf(r46)
               180 r5 <- IsZero(r46)
               181 r48 <- Part { src: r46, offset: 0, size: 1 }
               182 r3 <- Parity(r48)
0x485da1:
               183 r45 <- Not(r6)
               184 r46 <- Not(r5)
               185 r45 <- Bool(And, r45, r46)
               186 r47 <- SetJumpCondition(r45)
               187 r47 <- Control(JmpExtIf(4203597))
0x485da7:
               188 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485daa:
               189 r46 <- Const { value: 6851632, size: 8 }
               190 r47 <- ArithK(Mul, r16, 8)
               191 r46 <- Arith(Add, r46, r47)
               192 r46 <- SetJumpTarget(r46)
               193 r45 <- Control(JmpIndirect)
0x485db8:
               194 r15 <- Get(r18)
0x485dbb:
               195 r46 <- Part { src: r19, offset: 0, size: 4 }
               196 r48 <- Part { src: r19, offset: 0, size: 4 }
               197 r46 <- Arith(BitAnd, r46, r48)
               198 r6 <- SignOf(r46)
               199 r5 <- IsZero(r46)
               200 r49 <- Part { src: r46, offset: 0, size: 1 }
               201 r3 <- Parity(r46)
               202 r2 <- False
               203 r10 <- False
0x485dbd:
               204 r45 <- SetJumpCondition(r5)
               205 r45 <- Control(JmpIf(333))
0x485dbf:
               206 r47 <- Ancestral(AncestralName("arg0"))
               207 r47 <- Void
               208 r47 <- Get(r14)
               209 r48 <- Ancestral(AncestralName("arg1"))
               210 r48 <- Void
               211 r48 <- Get(r15)
               212 r49 <- CArg { value: r46, next_arg: None }
               213 r49 <- CArg { value: r45, next_arg: Some(r49) }
               214 r50: TypeID(48713v1) <- Const { value: 5627056, size: 8 }
               215 r49 <- Call { callee: r50, first_arg: Some(r49) }
               216 r2 <- Undefined
               217 r3 <- Undefined
               218 r4 <- Undefined
               219 r5 <- Undefined
               220 r6 <- Undefined
               221 r7 <- Undefined
               222 r8 <- Undefined
               223 r9 <- Undefined
               224 r10 <- Undefined
               225 r16 <- Part { src: r49, offset: 0, size: 8 }
0x485dd0:
               226 r46 <- Const { value: 8, size: 8 }
               227 r46 <- Arith(Add, r46, r17)
               228 r46 <- StoreMem { addr: r46, value: r16 }
0x485dd4:
               229 r46 <- Const { value: 48, size: 8 }
               230 r12 <- Arith(Add, r12, r46)
               231 r12 <- Get(r12)
               232 r10 <- OverflowOf(r12)
               233 r2 <- CarryOf(r12)
               234 r6 <- SignOf(r12)
               235 r5 <- IsZero(r12)
               236 r47 <- Part { src: r12, offset: 0, size: 1 }
               237 r3 <- Parity(r47)
0x485dd8:
               238 r45 <- LoadMem { addr: r12, size: 8 }
               239 r17 <- Get(r45)
               240 r12 <- ArithK(Add, r12, 8)
0x485dd9:
               241 r45 <- LoadMem { addr: r12, size: 8 }
               242 r24 <- Get(r45)
               243 r12 <- ArithK(Add, r12, 8)
0x485ddb:
               244 r45 <- LoadMem { addr: r12, size: 8 }
               245 r11 <- Get(r45)
               246 r12 <- ArithK(Add, r12, 8)
0x485ddc:
               247 r45 <- SetReturnValue(r16)
               248 r45 <- Control(Ret)
0x485de0:
               249 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485de3:
               250 r45 <- NotYetImplemented("unsupported: neg edx")
0x485de5:
               251 r46 <- Const { value: 8, size: 8 }
               252 r46 <- Arith(Add, r46, r15)
               253 r45 <- LoadMem { addr: r46, size: 8 }
               254 r14 <- Get(r45)
0x485de9:
               255 r45 <- NotYetImplemented("unsupported: sbb ecx,ecx")
0x485deb:
               256 r46 <- Part { src: r16, offset: 0, size: 4 }
               257 r47 <- Const { value: -16, size: 4 }
               258 r46 <- Arith(BitAnd, r46, r47)
               259 r48 <- Part { src: r16, offset: 4, size: 4 }
               260 r16 <- Concat { lo: r46, hi: r48 }
               261 r10 <- False
               262 r2 <- False
               263 r6 <- SignOf(r46)
               264 r5 <- IsZero(r46)
               265 r49 <- Part { src: r46, offset: 0, size: 1 }
               266 r3 <- Parity(r49)
0x485dee:
               267 r46 <- Part { src: r16, offset: 0, size: 1 }
               268 r47 <- Const { value: 16, size: 1 }
               269 r46 <- Arith(Sub, r46, r47)
               270 r10 <- OverflowOf(r46)
               271 r2 <- CarryOf(r46)
               272 r6 <- SignOf(r46)
               273 r5 <- IsZero(r46)
               274 r48 <- Part { src: r46, offset: 0, size: 1 }
               275 r3 <- Parity(r48)
0x485df0:
               276 r45 <- SetJumpCondition(r5)
               277 r45 <- Control(JmpIf(354))
0x485df2:
               278 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
0x485df6:
               279 r46 <- Part { src: r19, offset: 0, size: 4 }
               280 r47 <- Part { src: r16, offset: 4, size: 4 }
               281 r16 <- Concat { lo: r46, hi: r47 }
0x485df8:
               282 r46 <- Part { src: r16, offset: 0, size: 4 }
               283 r47 <- Const { value: 7, size: 4 }
               284 r46 <- Arith(BitAnd, r46, r47)
               285 r48 <- Part { src: r16, offset: 4, size: 4 }
               286 r16 <- Concat { lo: r46, hi: r48 }
               287 r10 <- False
               288 r2 <- False
               289 r6 <- SignOf(r46)
               290 r5 <- IsZero(r46)
               291 r49 <- Part { src: r46, offset: 0, size: 1 }
               292 r3 <- Parity(r49)
0x485dfb:
               293 r46 <- Part { src: r16, offset: 0, size: 1 }
               294 r47 <- Const { value: 4, size: 1 }
               295 r46 <- Arith(Sub, r46, r47)
               296 r10 <- OverflowOf(r46)
               297 r2 <- CarryOf(r46)
               298 r6 <- SignOf(r46)
               299 r5 <- IsZero(r46)
               300 r48 <- Part { src: r46, offset: 0, size: 1 }
               301 r3 <- Parity(r48)
0x485dfd:
               302 r45 <- Not(r6)
               303 r46 <- Not(r5)
               304 r45 <- Bool(And, r45, r46)
               305 r47 <- SetJumpCondition(r45)
               306 r47 <- Control(JmpExtIf(4203590))
0x485e03:
               307 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e06:
               308 r46 <- Const { value: 6851672, size: 8 }
               309 r47 <- ArithK(Mul, r16, 8)
               310 r46 <- Arith(Add, r46, r47)
               311 r46 <- SetJumpTarget(r46)
               312 r45 <- Control(JmpIndirect)
0x485e10:
               313 r46 <- Part { src: r16, offset: 0, size: 1 }
               314 r47 <- Const { value: 4, size: 1 }
               315 r46 <- Arith(Sub, r46, r47)
               316 r10 <- OverflowOf(r46)
               317 r2 <- CarryOf(r46)
               318 r6 <- SignOf(r46)
               319 r5 <- IsZero(r46)
               320 r48 <- Part { src: r46, offset: 0, size: 1 }
               321 r3 <- Parity(r48)
0x485e12:
               322 r45 <- Not(r6)
               323 r46 <- Not(r5)
               324 r45 <- Bool(And, r45, r46)
               325 r47 <- SetJumpCondition(r45)
               326 r47 <- Control(JmpExtIf(4203604))
0x485e18:
               327 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e1b:
               328 r46 <- Const { value: 6851712, size: 8 }
               329 r47 <- ArithK(Mul, r16, 8)
               330 r46 <- Arith(Add, r46, r47)
               331 r46 <- SetJumpTarget(r46)
               332 r45 <- Control(JmpIndirect)
0x485e28:
               333 r47 <- Ancestral(AncestralName("arg0"))
               334 r47 <- Void
               335 r47 <- Get(r14)
               336 r48 <- Ancestral(AncestralName("arg1"))
               337 r48 <- Void
               338 r48 <- Get(r15)
               339 r49 <- CArg { value: r46, next_arg: None }
               340 r49 <- CArg { value: r45, next_arg: Some(r49) }
               341 r50: TypeID(48714v1) <- Const { value: 5627360, size: 8 }
               342 r49 <- Call { callee: r50, first_arg: Some(r49) }
               343 r2 <- Undefined
               344 r3 <- Undefined
               345 r4 <- Undefined
               346 r5 <- Undefined
               347 r6 <- Undefined
               348 r7 <- Undefined
               349 r8 <- Undefined
               350 r9 <- Undefined
               351 r10 <- Undefined
               352 r16 <- Part { src: r49, offset: 0, size: 8 }
0x485e2d:
               353 r45 <- Control(Jmp(226))
0x485e30:
               354 r45 <- Const { value: -48, size: 8 }
               355 r45 <- Arith(Add, r45, r11)
               356 r24 <- Get(r45)
0x485e34:
               357 r19 <- Get(r14)
0x485e37:
               358 r45 <- Const { value: 32, size: 4 }
               359 r46 <- Part { src: r15, offset: 4, size: 4 }
               360 r15 <- Concat { lo: r45, hi: r46 }
0x485e3c:
               361 r46 <- Part { src: r18, offset: 0, size: 4 }
               362 r47 <- Const { value: -52, size: 8 }
               363 r47 <- Arith(Add, r47, r11)
               364 r47 <- StoreMem { addr: r47, value: r46 }
0x485e3f:
               365 r14 <- Get(r24)
0x485e42:
               366 r48 <- Ancestral(AncestralName("arg0"))
               367 r48 <- Void
               368 r48 <- Get(r14)
               369 r49 <- Ancestral(AncestralName("arg1"))
               370 r49 <- Void
               371 r49 <- Get(r15)
               372 r50 <- Ancestral(AncestralName("arg2"))
               373 r50 <- Void
               374 r50 <- Get(r19)
               375 r51 <- CArg { value: r47, next_arg: None }
               376 r51 <- CArg { value: r46, next_arg: Some(r51) }
               377 r51 <- CArg { value: r45, next_arg: Some(r51) }
               378 r52: TypeID(47971v1) <- Const { value: 4520352, size: 8 }
               379 r51 <- Call { callee: r52, first_arg: Some(r51) }
               380 r2 <- Undefined
               381 r3 <- Undefined
               382 r4 <- Undefined
               383 r5 <- Undefined
               384 r6 <- Undefined
               385 r7 <- Undefined
               386 r8 <- Undefined
               387 r9 <- Undefined
               388 r10 <- Undefined
               389 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485e47:
               390 r14 <- Get(r24)
0x485e4a:
               391 r46 <- Ancestral(AncestralName("arg0"))
               392 r46 <- Void
               393 r46 <- Get(r14)
               394 r47 <- CArg { value: r45, next_arg: None }
               395 r48: TypeID(48715v1) <- Const { value: 4199136, size: 8 }
               396 r47 <- Call { callee: r48, first_arg: Some(r47) }
               397 r2 <- Undefined
               398 r3 <- Undefined
               399 r4 <- Undefined
               400 r5 <- Undefined
               401 r6 <- Undefined
               402 r7 <- Undefined
               403 r8 <- Undefined
               404 r9 <- Undefined
               405 r10 <- Undefined
               406 r16 <- Part { src: r47, offset: 0, size: 8 }
0x485e4f:
               407 r46 <- Const { value: 8, size: 8 }
               408 r46 <- Arith(Add, r46, r17)
               409 r45 <- LoadMem { addr: r46, size: 8 }
               410 r14 <- Get(r45)
0x485e53:
               411 r46 <- Const { value: -52, size: 8 }
               412 r46 <- Arith(Add, r46, r11)
               413 r45 <- LoadMem { addr: r46, size: 4 }
               414 r47 <- Part { src: r18, offset: 4, size: 4 }
               415 r18 <- Concat { lo: r45, hi: r47 }
0x485e56:
               416 r15 <- Get(r24)
0x485e59:
               417 r19 <- Get(r16)
0x485e5c:
               418 r49 <- Ancestral(AncestralName("arg0"))
               419 r49 <- Void
               420 r49 <- Get(r14)
               421 r50 <- Ancestral(AncestralName("arg1"))
               422 r50 <- Void
               423 r50 <- Get(r15)
               424 r51 <- CArg { value: r48, next_arg: None }
               425 r51 <- CArg { value: r47, next_arg: Some(r51) }
               426 r51 <- CArg { value: r46, next_arg: Some(r51) }
               427 r51 <- CArg { value: r45, next_arg: Some(r51) }
               428 r52: TypeID(48716v1) <- Const { value: 4293744, size: 8 }
               429 r51 <- Call { callee: r52, first_arg: Some(r51) }
               430 r2 <- Undefined
               431 r3 <- Undefined
               432 r4 <- Undefined
               433 r5 <- Undefined
               434 r6 <- Undefined
               435 r7 <- Undefined
               436 r8 <- Undefined
               437 r9 <- Undefined
               438 r10 <- Undefined
0x485e61:
               439 r45 <- Control(Jmp(229))
0x485e70:
               440 r46 <- Const { value: -9, size: 8 }
               441 r46 <- Arith(Add, r46, r14)
               442 r45 <- LoadMem { addr: r46, size: 4 }
               443 r47 <- Part { src: r19, offset: 4, size: 4 }
               444 r19 <- Concat { lo: r45, hi: r47 }
0x485e73:
               445 r46 <- Const { value: 8, size: 8 }
               446 r46 <- Arith(Add, r46, r17)
               447 r45 <- LoadMem { addr: r46, size: 8 }
               448 r16 <- Get(r45)
0x485e77:
               449 r46 <- Const { value: 48, size: 8 }
               450 r12 <- Arith(Add, r12, r46)
               451 r12 <- Get(r12)
               452 r10 <- OverflowOf(r12)
               453 r2 <- CarryOf(r12)
               454 r6 <- SignOf(r12)
               455 r5 <- IsZero(r12)
               456 r47 <- Part { src: r12, offset: 0, size: 1 }
               457 r3 <- Parity(r47)
0x485e7b:
               458 r15 <- Get(r14)
0x485e7e:
               459 r45 <- LoadMem { addr: r12, size: 8 }
               460 r17 <- Get(r45)
               461 r12 <- ArithK(Add, r12, 8)
0x485e7f:
               462 r45 <- LoadMem { addr: r12, size: 8 }
               463 r24 <- Get(r45)
               464 r12 <- ArithK(Add, r12, 8)
0x485e81:
               465 r14 <- Get(r16)
0x485e84:
               466 r45 <- LoadMem { addr: r12, size: 8 }
               467 r11 <- Get(r45)
               468 r12 <- ArithK(Add, r12, 8)
0x485e85:
               469 r45 <- Control(JmpExt(4293744))
0x485e90:
               470 r46 <- Const { value: -17, size: 8 }
               471 r46 <- Arith(Add, r46, r14)
               472 r45 <- LoadMem { addr: r46, size: 8 }
               473 r19 <- Get(r45)
0x485e94:
               474 r45 <- Control(Jmp(445))
0x485ea0:
               475 r46 <- Part { src: r19, offset: 0, size: 1 }
               476 r47 <- Const { value: 3, size: 1 }
               477 r46 <- Arith(Shr, r46, r47)
               478 r48 <- Part { src: r19, offset: 1, size: 7 }
               479 r19 <- Concat { lo: r46, hi: r48 }
               480 r6 <- SignOf(r46)
               481 r5 <- IsZero(r46)
               482 r49 <- Part { src: r46, offset: 0, size: 1 }
               483 r3 <- Parity(r49)
0x485ea3:
               484 r45 <- NotYetImplemented("unsupported: movzx edx,dl")
0x485ea6:
               485 r45 <- Control(Jmp(445))
0x485eb0:
               486 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-3]")
0x485eb4:
               487 r45 <- Control(Jmp(445))
0x485ec0:
               488 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rdi-5]")
0x485ec4:
               489 r45 <- Control(Jmp(445))
0x485ed0:
               490 r46 <- Part { src: r15, offset: 0, size: 1 }
               491 r47 <- Const { value: 3, size: 1 }
               492 r46 <- Arith(Shr, r46, r47)
               493 r48 <- Part { src: r15, offset: 1, size: 7 }
               494 r15 <- Concat { lo: r46, hi: r48 }
               495 r6 <- SignOf(r46)
               496 r5 <- IsZero(r46)
               497 r49 <- Part { src: r46, offset: 0, size: 1 }
               498 r3 <- Parity(r49)
0x485ed4:
               499 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485ed8:
               500 r15 <- Get(r18)
0x485edb:
               501 r48 <- Ancestral(AncestralName("arg0"))
               502 r48 <- Void
               503 r48 <- Get(r14)
               504 r49 <- Ancestral(AncestralName("arg1"))
               505 r49 <- Void
               506 r49 <- Get(r15)
               507 r50 <- Ancestral(AncestralName("arg2"))
               508 r50 <- Void
               509 r50 <- Get(r19)
               510 r50 <- Part { src: r50, offset: 0, size: 4 }
               511 r51 <- CArg { value: r47, next_arg: None }
               512 r51 <- CArg { value: r46, next_arg: Some(r51) }
               513 r51 <- CArg { value: r45, next_arg: Some(r51) }
               514 r52: TypeID(48717v1) <- Const { value: 5626912, size: 8 }
               515 r51 <- Call { callee: r52, first_arg: Some(r51) }
               516 r2 <- Undefined
               517 r3 <- Undefined
               518 r4 <- Undefined
               519 r5 <- Undefined
               520 r6 <- Undefined
               521 r7 <- Undefined
               522 r8 <- Undefined
               523 r9 <- Undefined
               524 r10 <- Undefined
               525 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485ee0:
               526 r45 <- Control(Jmp(226))
0x485ee8:
               527 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485eec:
               528 r45 <- Control(Jmp(500))
0x485ef0:
               529 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485ef4:
               530 r45 <- Control(Jmp(500))
0x485f00:
               531 r46 <- Const { value: -9, size: 8 }
               532 r46 <- Arith(Add, r46, r18)
               533 r45 <- LoadMem { addr: r46, size: 4 }
               534 r47 <- Part { src: r19, offset: 4, size: 4 }
               535 r19 <- Concat { lo: r45, hi: r47 }
0x485f03:
               536 r45 <- Control(Jmp(500))
0x485f08:
               537 r46 <- Const { value: -17, size: 8 }
               538 r46 <- Arith(Add, r46, r18)
               539 r45 <- LoadMem { addr: r46, size: 4 }
               540 r47 <- Part { src: r19, offset: 4, size: 4 }
               541 r19 <- Concat { lo: r45, hi: r47 }
0x485f0b:
               542 r15 <- Get(r18)
0x485f0e:
               543 r48 <- Ancestral(AncestralName("arg0"))
               544 r48 <- Void
               545 r48 <- Get(r14)
               546 r49 <- Ancestral(AncestralName("arg1"))
               547 r49 <- Void
               548 r49 <- Get(r15)
               549 r50 <- Ancestral(AncestralName("arg2"))
               550 r50 <- Void
               551 r50 <- Get(r19)
               552 r50 <- Part { src: r50, offset: 0, size: 4 }
               553 r51 <- CArg { value: r47, next_arg: None }
               554 r51 <- CArg { value: r46, next_arg: Some(r51) }
               555 r51 <- CArg { value: r45, next_arg: Some(r51) }
               556 r52: TypeID(45899v1) <- Const { value: 5626880, size: 8 }
               557 r51 <- Call { callee: r52, first_arg: Some(r51) }
               558 r2 <- Undefined
               559 r3 <- Undefined
               560 r4 <- Undefined
               561 r5 <- Undefined
               562 r6 <- Undefined
               563 r7 <- Undefined
               564 r8 <- Undefined
               565 r9 <- Undefined
               566 r10 <- Undefined
               567 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485f13:
               568 r45 <- Control(Jmp(226))
0x485f20:
               569 r46 <- Part { src: r15, offset: 0, size: 1 }
               570 r47 <- Const { value: 3, size: 1 }
               571 r46 <- Arith(Shr, r46, r47)
               572 r48 <- Part { src: r15, offset: 1, size: 7 }
               573 r15 <- Concat { lo: r46, hi: r48 }
               574 r6 <- SignOf(r46)
               575 r5 <- IsZero(r46)
               576 r49 <- Part { src: r46, offset: 0, size: 1 }
               577 r3 <- Parity(r49)
0x485f24:
               578 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485f28:
               579 r45 <- Control(Jmp(542))
0x485f30:
               580 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485f34:
               581 r45 <- Control(Jmp(542))
0x485f40:
               582 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485f44:
               583 r45 <- Control(Jmp(542))
0x485f50:
               584 r46 <- Const { value: -9, size: 8 }
               585 r46 <- Arith(Add, r46, r18)
               586 r45 <- LoadMem { addr: r46, size: 4 }
               587 r47 <- Part { src: r19, offset: 4, size: 4 }
               588 r19 <- Concat { lo: r45, hi: r47 }
0x485f53:
               589 r45 <- Control(Jmp(542))
0x485f58:
               590 r46 <- Const { value: -17, size: 8 }
               591 r46 <- Arith(Add, r46, r18)
               592 r45 <- LoadMem { addr: r46, size: 4 }
               593 r47 <- Part { src: r19, offset: 4, size: 4 }
               594 r19 <- Concat { lo: r45, hi: r47 }
0x485f5b:
               595 r45 <- Control(Jmp(500))
0x485f60:
               596 r45 <- Const { value: 6979771, size: 4 }
               597 r46 <- Part { src: r19, offset: 4, size: 4 }
               598 r19 <- Concat { lo: r45, hi: r46 }
0x485f65:
               599 r45 <- Const { value: 165, size: 4 }
               600 r46 <- Part { src: r15, offset: 4, size: 4 }
               601 r15 <- Concat { lo: r45, hi: r46 }
0x485f6a:
               602 r45 <- Const { value: 6982459, size: 4 }
               603 r46 <- Part { src: r14, offset: 4, size: 4 }
               604 r14 <- Concat { lo: r45, hi: r46 }
0x485f6f:
               605 r46 <- Part { src: r16, offset: 0, size: 4 }
               606 r48 <- Part { src: r16, offset: 0, size: 4 }
               607 r46 <- Arith(BitXor, r46, r48)
               608 r49 <- Part { src: r16, offset: 4, size: 4 }
               609 r16 <- Concat { lo: r46, hi: r49 }
               610 r10 <- False
               611 r2 <- False
               612 r6 <- SignOf(r46)
               613 r5 <- IsZero(r46)
               614 r50 <- Part { src: r46, offset: 0, size: 1 }
               615 r3 <- Parity(r50)
0x485f71:
               616 r48 <- Ancestral(AncestralName("arg0"))
               617 r48 <- Void
               618 r48 <- Get(r14)
               619 r49 <- Ancestral(AncestralName("arg1"))
               620 r49 <- Void
               621 r49 <- Get(r15)
               622 r49 <- Part { src: r49, offset: 0, size: 4 }
               623 r50 <- Ancestral(AncestralName("arg2"))
               624 r50 <- Void
               625 r50 <- Get(r19)
               626 r51 <- CArg { value: r47, next_arg: None }
               627 r51 <- CArg { value: r46, next_arg: Some(r51) }
               628 r51 <- CArg { value: r45, next_arg: Some(r51) }
               629 r52: TypeID(46167v1) <- Const { value: 4990320, size: 8 }
               630 r51 <- Call { callee: r52, first_arg: Some(r51) }
               631 r2 <- Undefined
               632 r3 <- Undefined
               633 r4 <- Undefined
               634 r5 <- Undefined
               635 r6 <- Undefined
               636 r7 <- Undefined
               637 r8 <- Undefined
               638 r9 <- Undefined
               639 r10 <- Undefined


ssa pre-xform:
ssa program  646 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
         r14 <- Ancestral(AncestralName("RSI"))
  (  2)  r15 <- Ancestral(AncestralName("RAX"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r17 <- Ancestral(AncestralName("RCX"))
  (  5)  r18 <- Ancestral(AncestralName("RDX"))
         r23 <- Ancestral(AncestralName("R12"))
         r51 <- Undefined
         r52 <- Undefined
  (  4)  r64 <- ArithK(Add, r11, -8)
         r65 <- StoreMem { addr: r64, value: r10 }
  (  2)  r67 <- ArithK(Add, r64, -8)
         r68 <- StoreMem { addr: r67, value: r23 }
         r69 <- ArithK(Add, r67, -8)
         r70 <- StoreMem { addr: r69, value: r16 }
         r81 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r82 <- Part { src: r15, offset: 0, size: 4 }
         r83 <- Const { value: -16, size: 4 }
         r84 <- Arith(BitAnd, r82, r83)
         r85 <- Part { src: r15, offset: 4, size: 4 }
  (  8)  r86 <- Concat { lo: r84, hi: r85 }
         r93 <- Part { src: r86, offset: 0, size: 1 }
         r94 <- Const { value: 144, size: 1 }
         r95 <- Arith(Sub, r93, r94)
         r99 <- IsZero(r95)
         r102 <- SetJumpCondition(r99)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r104 <- Part { src: r86, offset: 0, size: 1 }
  (  2)  r105 <- Const { value: 176, size: 1 }
         r106 <- Arith(Sub, r104, r105)
         r110 <- IsZero(r106)
         r113 <- Not(r110)
         r114 <- SetJumpCondition(r113)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r116 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r125 <- Part { src: r86, offset: 0, size: 4 }
         r126 <- Const { value: -16, size: 4 }
         r127 <- Arith(BitAnd, r125, r126)
         r128 <- Part { src: r86, offset: 4, size: 4 }
  (  2)  r129 <- Concat { lo: r127, hi: r128 }
         r136 <- Part { src: r129, offset: 0, size: 1 }
         r137 <- Const { value: 16, size: 1 }
         r138 <- Arith(Sub, r136, r137)
         r142 <- IsZero(r138)
         r145 <- SetJumpCondition(r142)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r147 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r148 <- Part { src: r14, offset: 0, size: 4 }
         r149 <- Part { src: r129, offset: 4, size: 4 }
  (  2)  r150 <- Concat { lo: r148, hi: r149 }
         r151 <- Part { src: r150, offset: 0, size: 4 }
         r152 <- Const { value: 7, size: 4 }
         r153 <- Arith(BitAnd, r151, r152)
         r154 <- Part { src: r150, offset: 4, size: 4 }
  (  4)  r155 <- Concat { lo: r153, hi: r154 }
         r162 <- Part { src: r18, offset: 0, size: 4 }
         r163 <- Part { src: r18, offset: 0, size: 4 }
         r164 <- Arith(BitAnd, r162, r163)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r174 <- Part { src: r155, offset: 0, size: 1 }
         r175 <- Const { value: 4, size: 1 }
  (  2)  r176 <- Arith(Sub, r174, r175)
         r179 <- SignOf(r176)
         r180 <- IsZero(r176)
         r183 <- Not(r179)
         r184 <- Not(r180)
         r185 <- Bool(And, r183, r184)
         r186 <- SetJumpCondition(r185)
.B5:    ;; preds:B4  → Always(Indirect).
         r188 <- NotYetImplemented("unsupported: movzx eax,al")
         r189 <- Const { value: 6851632, size: 8 }
         r190 <- ArithK(Mul, r155, 8)
         r191 <- Arith(Add, r189, r190)
         r192 <- SetJumpTarget(r191)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r313 <- Part { src: r155, offset: 0, size: 1 }
         r314 <- Const { value: 4, size: 1 }
  (  2)  r315 <- Arith(Sub, r313, r314)
         r318 <- SignOf(r315)
         r319 <- IsZero(r315)
         r322 <- Not(r318)
         r323 <- Not(r319)
         r324 <- Bool(And, r322, r323)
         r325 <- SetJumpCondition(r324)
.B14:    ;; preds:B13  → Always(Indirect).
         r327 <- NotYetImplemented("unsupported: movzx eax,al")
         r328 <- Const { value: 6851712, size: 8 }
         r329 <- ArithK(Mul, r155, 8)
         r330 <- Arith(Add, r328, r329)
         r331 <- SetJumpTarget(r330)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r195 <- Part { src: r18, offset: 0, size: 4 }
         r196 <- Part { src: r18, offset: 0, size: 4 }
  (  3)  r197 <- Arith(BitAnd, r195, r196)
         r199 <- IsZero(r197)
         r204 <- SetJumpCondition(r199)
  (  2)  r205 <- Control(JmpIf(333))
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r212 <- CArg { value: r197, next_arg: None }
         r213 <- CArg { value: r205, next_arg: Some(r212) }
         r214: lpAppendInteger <TypeID(266438v1)> <- Const { value: 5627056, size: 8 }
         r215 <- Call { callee: r214, first_arg: Some(r213) }
         r225 <- Part { src: r215, offset: 0, size: 8 }
         r645 <- Upsilon { value: r225, phi_ref: r640 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r339 <- CArg { value: r197, next_arg: None }
         r340 <- CArg { value: r205, next_arg: Some(r339) }
         r341: lpPrependInteger <TypeID(266449v1)> <- Const { value: 5627360, size: 8 }
         r342 <- Call { callee: r341, first_arg: Some(r340) }
         r352 <- Part { src: r342, offset: 0, size: 8 }
         r643 <- Upsilon { value: r352, phi_ref: r640 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r640 <- Phi
         r226 <- Const { value: 8, size: 8 }
         r227 <- Arith(Add, r226, r13)
         r228 <- StoreMem { addr: r227, value: r640 }
         r644 <- Upsilon { value: r640, phi_ref: r641 }
.B35:    ;; preds:B1  → Always(Undefined).
         r602 <- Const { value: 6982459, size: 4 }
         r605 <- Part { src: r86, offset: 0, size: 4 }
         r606 <- Part { src: r86, offset: 0, size: 4 }
         r607 <- Arith(BitXor, r605, r606)
         r626 <- CArg { value: r105, next_arg: None }
         r627 <- CArg { value: r607, next_arg: Some(r626) }
         r628 <- CArg { value: r602, next_arg: Some(r627) }
         r629: _serverPanic <TypeID(214853v1)> <- Const { value: 4990320, size: 8 }
         r630 <- Call { callee: r629, first_arg: Some(r628) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r249 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r250 <- NotYetImplemented("unsupported: neg edx")
         r255 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r256 <- Part { src: r86, offset: 0, size: 4 }
         r257 <- Const { value: -16, size: 4 }
         r258 <- Arith(BitAnd, r256, r257)
         r259 <- Part { src: r86, offset: 4, size: 4 }
  (  2)  r260 <- Concat { lo: r258, hi: r259 }
         r267 <- Part { src: r260, offset: 0, size: 1 }
         r268 <- Const { value: 16, size: 1 }
         r269 <- Arith(Sub, r267, r268)
         r273 <- IsZero(r269)
         r276 <- SetJumpCondition(r273)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r278 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r279 <- Part { src: r18, offset: 0, size: 4 }
         r280 <- Part { src: r260, offset: 4, size: 4 }
  (  2)  r281 <- Concat { lo: r279, hi: r280 }
         r282 <- Part { src: r281, offset: 0, size: 4 }
         r283 <- Const { value: 7, size: 4 }
         r284 <- Arith(BitAnd, r282, r283)
         r285 <- Part { src: r281, offset: 4, size: 4 }
  (  2)  r286 <- Concat { lo: r284, hi: r285 }
         r293 <- Part { src: r286, offset: 0, size: 1 }
         r294 <- Const { value: 4, size: 1 }
  (  2)  r295 <- Arith(Sub, r293, r294)
         r298 <- SignOf(r295)
         r299 <- IsZero(r295)
         r302 <- Not(r298)
         r303 <- Not(r299)
         r304 <- Bool(And, r302, r303)
         r305 <- SetJumpCondition(r304)
.B12:    ;; preds:B11  → Always(Indirect).
         r307 <- NotYetImplemented("unsupported: movzx eax,al")
         r308 <- Const { value: 6851672, size: 8 }
         r309 <- ArithK(Mul, r286, 8)
         r310 <- Arith(Add, r308, r309)
         r311 <- SetJumpTarget(r310)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  2)  r358 <- Const { value: 32, size: 4 }
  (  2)  r361 <- Part { src: r17, offset: 0, size: 4 }
         r362 <- Const { value: -52, size: 8 }
         r363 <- Arith(Add, r362, r64)
         r364 <- StoreMem { addr: r363, value: r361 }
         r375 <- CArg { value: r364, next_arg: None }
         r376 <- CArg { value: r361, next_arg: Some(r375) }
         r377 <- CArg { value: r358, next_arg: Some(r376) }
         r378: ll2string <TypeID(177639v1)> <- Const { value: 4520352, size: 8 }
         r379 <- Call { callee: r378, first_arg: Some(r377) }
         r394 <- CArg { value: r358, next_arg: None }
  (  2)  r395: strlen <TypeID(164962v1)> <- Const { value: 4199136, size: 8 }
         r396 <- Call { callee: r395, first_arg: Some(r394) }
         r406 <- Part { src: r396, offset: 0, size: 8 }
         r411 <- Const { value: -52, size: 8 }
  (  2)  r412 <- Arith(Add, r411, r64)
         r413 <- LoadMem { addr: r412, size: 4 }
         r414 <- Part { src: r17, offset: 4, size: 4 }
         r424 <- CArg { value: r395, next_arg: None }
         r425 <- CArg { value: r414, next_arg: Some(r424) }
         r426 <- CArg { value: r412, next_arg: Some(r425) }
         r427 <- CArg { value: r413, next_arg: Some(r426) }
         r428: quicklistPush <TypeID(164114v1)> <- Const { value: 4293744, size: 8 }
         r429 <- Call { callee: r428, first_arg: Some(r427) }
         r642 <- Upsilon { value: r406, phi_ref: r641 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r641 <- Phi
         r247 <- SetReturnValue(r641)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r18, r23, r51, r52, r64, r65, r67, r68, r69, r70, r81, r82, r83, r84, r85, r86, r93, r94, r95, r99, r102]
  BlockID(1) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) } [r104, r105, r106, r110, r113, r114]
  BlockID(2) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) } [r116, r125, r126, r127, r128, r129, r136, r137, r138, r142, r145]
  BlockID(3) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) } [r147, r148, r149, r150, r151, r152, r153, r154, r155, r162, r163, r164, r166, r171, r172]
  BlockID(4) -> Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) } [r174, r175, r176, r179, r180, r183, r184, r185, r186]
  BlockID(5) -> Always(Indirect) [r188, r189, r190, r191, r192]
  BlockID(6) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) } [r195, r196, r197, r199, r204, r205]
  BlockID(7) -> Always(Block(BlockID(8))) [r212, r213, r214, r215, r225, r645]
  BlockID(8) -> Always(Block(BlockID(9))) [r640, r226, r227, r228, r644]
  BlockID(9) -> Always(Return) [r641, r247]
  BlockID(10) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) } [r249, r250, r255, r256, r257, r258, r259, r260, r267, r268, r269, r273, r276]
  BlockID(11) -> Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) } [r278, r279, r280, r281, r282, r283, r284, r285, r286, r293, r294, r295, r298, r299, r302, r303, r304, r305]
  BlockID(12) -> Always(Indirect) [r307, r308, r309, r310, r311]
  BlockID(13) -> Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) } [r313, r314, r315, r318, r319, r322, r323, r324, r325]
  BlockID(14) -> Always(Indirect) [r327, r328, r329, r330, r331]
  BlockID(15) -> Always(Block(BlockID(8))) [r339, r340, r341, r342, r352, r643]
  BlockID(16) -> Always(Block(BlockID(9))) [r358, r361, r362, r363, r364, r375, r376, r377, r378, r379, r394, r395, r396, r406, r411, r412, r413, r414, r424, r425, r426, r427, r428, r429, r642]
  BlockID(17) -> Always(Undefined) []
  BlockID(18) -> Always(Undefined) []
  BlockID(19) -> Always(Undefined) []
  BlockID(20) -> Always(Undefined) [r484]
  BlockID(21) -> Always(Undefined) [r486]
  BlockID(22) -> Always(Undefined) [r488]
  BlockID(23) -> Always(Undefined) [r499]
  BlockID(24) -> Always(Undefined) [r515]
  BlockID(25) -> Always(Undefined) [r527]
  BlockID(26) -> Always(Undefined) [r529]
  BlockID(27) -> Always(Undefined) []
  BlockID(28) -> Always(Undefined) []
  BlockID(29) -> Always(Undefined) [r557]
  BlockID(30) -> Always(Undefined) [r578]
  BlockID(31) -> Always(Undefined) [r580]
  BlockID(32) -> Always(Undefined) [r582]
  BlockID(33) -> Always(Undefined) []
  BlockID(34) -> Always(Undefined) []
  BlockID(35) -> Always(Undefined) [r602, r605, r606, r607, r626, r627, r628, r629, r630]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  BlockID(13)
    |  |  |  |  |  BlockID(14)
    |  |  |  BlockID(6)
    |  |  |  |  BlockID(7)
    |  |  |  |  BlockID(8)
    |  |  |  |  BlockID(15)
    |  |  BlockID(35)
    |  BlockID(9)
    |  BlockID(10)
    |  |  BlockID(11)
    |  |  |  BlockID(12)
    |  |  BlockID(16)
    BlockID(17)
    BlockID(18)
    BlockID(19)
    BlockID(20)
    BlockID(21)
    BlockID(22)
    BlockID(23)
    BlockID(24)
    BlockID(25)
    BlockID(26)
    BlockID(27)
    BlockID(28)
    BlockID(29)
    BlockID(30)
    BlockID(31)
    BlockID(32)
    BlockID(33)
    BlockID(34)

ssa post-xform:
ssa program  651 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
  (  5)  r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
         r14 <- Ancestral(AncestralName("RSI"))
  (  3)  r15 <- Ancestral(AncestralName("RAX"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  3)  r17 <- Ancestral(AncestralName("RCX"))
  (  5)  r18 <- Ancestral(AncestralName("RDX"))
         r23 <- Ancestral(AncestralName("R12"))
         r51 <- Undefined
         r52 <- Undefined
         r64 <- ArithK(Add, r11, -8)
         r65 <- StoreMem { addr: r64, value: r10 }
         r67 <- ArithK(Add, r11, -16)
         r68 <- StoreMem { addr: r67, value: r23 }
         r69 <- ArithK(Add, r11, -24)
         r70 <- StoreMem { addr: r69, value: r16 }
         r81 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r82 <- Part { src: r15, offset: 0, size: 4 }
  (  4)  r84 <- ArithK(BitAnd, r82, -16)
         r93 <- Part { src: r84, offset: 0, size: 1 }
         r95 <- ArithK(Add, r93, -144)
         r99 <- IsZero(r95)
         r102 <- SetJumpCondition(r99)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r104 <- Part { src: r84, offset: 0, size: 1 }
         r105 <- Const { value: 176, size: 1 }
         r106 <- ArithK(Add, r104, -176)
         r110 <- IsZero(r106)
         r113 <- Not(r110)
         r114 <- SetJumpCondition(r113)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r116 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r127 <- ArithK(BitAnd, r84, -16)
         r136 <- Part { src: r127, offset: 0, size: 1 }
         r138 <- ArithK(Add, r136, -16)
         r142 <- IsZero(r138)
         r145 <- SetJumpCondition(r142)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r147 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r151 <- Part { src: r14, offset: 0, size: 4 }
  (  3)  r153 <- ArithK(BitAnd, r151, 7)
         r154 <- Part { src: r15, offset: 4, size: 4 }
  (  2)  r155 <- Concat { lo: r153, hi: r154 }
         r162 <- Part { src: r18, offset: 0, size: 4 }
         r163 <- Part { src: r18, offset: 0, size: 4 }
         r164 <- Arith(BitAnd, r162, r163)
         r166 <- IsZero(r164)
         r171 <- Not(r166)
         r172 <- SetJumpCondition(r171)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r174 <- Part { src: r153, offset: 0, size: 1 }
  (  2)  r176 <- ArithK(Add, r174, -4)
         r179 <- SignOf(r176)
         r180 <- IsZero(r176)
         r183 <- Not(r179)
         r184 <- Not(r180)
         r185 <- Bool(And, r183, r184)
         r186 <- SetJumpCondition(r185)
.B5:    ;; preds:B4  → Always(Indirect).
         r188 <- NotYetImplemented("unsupported: movzx eax,al")
         r190 <- ArithK(Mul, r155, 8)
         r191 <- ArithK(Add, r190, 6851632)
         r192 <- SetJumpTarget(r191)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r313 <- Part { src: r153, offset: 0, size: 1 }
  (  2)  r315 <- ArithK(Add, r313, -4)
         r318 <- SignOf(r315)
         r319 <- IsZero(r315)
         r322 <- Not(r318)
         r323 <- Not(r319)
         r324 <- Bool(And, r322, r323)
         r325 <- SetJumpCondition(r324)
.B14:    ;; preds:B13  → Always(Indirect).
         r327 <- NotYetImplemented("unsupported: movzx eax,al")
         r329 <- ArithK(Mul, r155, 8)
         r330 <- ArithK(Add, r329, 6851712)
         r331 <- SetJumpTarget(r330)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r195 <- Part { src: r18, offset: 0, size: 4 }
         r196 <- Part { src: r18, offset: 0, size: 4 }
  (  3)  r197 <- Arith(BitAnd, r195, r196)
         r199 <- IsZero(r197)
         r204 <- SetJumpCondition(r199)
  (  2)  r205 <- Control(JmpIf(333))
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r212 <- CArg { value: r197, next_arg: None }
         r213 <- CArg { value: r205, next_arg: Some(r212) }
         r214: lpAppendInteger <TypeID(266438v1)> <- Const { value: 5627056, size: 8 }
         r215 <- Call { callee: r214, first_arg: Some(r213) }
         r645 <- Upsilon { value: r215, phi_ref: r640 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r339 <- CArg { value: r197, next_arg: None }
         r340 <- CArg { value: r205, next_arg: Some(r339) }
         r341: lpPrependInteger <TypeID(266449v1)> <- Const { value: 5627360, size: 8 }
         r342 <- Call { callee: r341, first_arg: Some(r340) }
         r643 <- Upsilon { value: r342, phi_ref: r640 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r640 <- Phi
         r227 <- ArithK(Add, r13, 8)
         r228 <- StoreMem { addr: r227, value: r640 }
         r644 <- Upsilon { value: r640, phi_ref: r641 }
.B35:    ;; preds:B1  → Always(Undefined).
         r602 <- Const { value: 6982459, size: 4 }
         r607 <- Const { value: 0, size: 4 }
         r626 <- CArg { value: r105, next_arg: None }
         r627 <- CArg { value: r607, next_arg: Some(r626) }
         r628 <- CArg { value: r602, next_arg: Some(r627) }
         r629: _serverPanic <TypeID(214853v1)> <- Const { value: 4990320, size: 8 }
         r630 <- Call { callee: r629, first_arg: Some(r628) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r249 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r250 <- NotYetImplemented("unsupported: neg edx")
         r255 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r258 <- ArithK(BitAnd, r84, -16)
         r267 <- Part { src: r258, offset: 0, size: 1 }
         r269 <- ArithK(Add, r267, -16)
         r273 <- IsZero(r269)
         r276 <- SetJumpCondition(r273)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r278 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r282 <- Part { src: r18, offset: 0, size: 4 }
  (  2)  r284 <- ArithK(BitAnd, r282, 7)
         r285 <- Part { src: r15, offset: 4, size: 4 }
         r286 <- Concat { lo: r284, hi: r285 }
         r293 <- Part { src: r284, offset: 0, size: 1 }
  (  2)  r295 <- ArithK(Add, r293, -4)
         r298 <- SignOf(r295)
         r299 <- IsZero(r295)
         r302 <- Not(r298)
         r303 <- Not(r299)
         r304 <- Bool(And, r302, r303)
         r305 <- SetJumpCondition(r304)
.B12:    ;; preds:B11  → Always(Indirect).
         r307 <- NotYetImplemented("unsupported: movzx eax,al")
         r309 <- ArithK(Mul, r286, 8)
         r310 <- ArithK(Add, r309, 6851672)
         r311 <- SetJumpTarget(r310)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  2)  r358 <- Const { value: 32, size: 4 }
  (  2)  r361 <- Part { src: r17, offset: 0, size: 4 }
         r363 <- ArithK(Add, r11, -60)
         r364 <- StoreMem { addr: r363, value: r361 }
         r375 <- CArg { value: r364, next_arg: None }
         r376 <- CArg { value: r361, next_arg: Some(r375) }
         r377 <- CArg { value: r358, next_arg: Some(r376) }
         r378: ll2string <TypeID(177639v1)> <- Const { value: 4520352, size: 8 }
         r379 <- Call { callee: r378, first_arg: Some(r377) }
         r394 <- CArg { value: r358, next_arg: None }
  (  2)  r395: strlen <TypeID(164962v1)> <- Const { value: 4199136, size: 8 }
         r396 <- Call { callee: r395, first_arg: Some(r394) }
         r412 <- ArithK(Add, r11, -60)
         r647 <- Part { src: r17, offset: 0, size: 4 }
         r414 <- Part { src: r17, offset: 4, size: 4 }
         r424 <- CArg { value: r395, next_arg: None }
         r425 <- CArg { value: r414, next_arg: Some(r424) }
         r426 <- CArg { value: r412, next_arg: Some(r425) }
         r427 <- CArg { value: r647, next_arg: Some(r426) }
         r428: quicklistPush <TypeID(164114v1)> <- Const { value: 4293744, size: 8 }
         r429 <- Call { callee: r428, first_arg: Some(r427) }
         r642 <- Upsilon { value: r396, phi_ref: r641 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r641 <- Phi
         r247 <- SetReturnValue(r641)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R12;
  [pre:RSP - 24]:* := pre:RBX;
  TODO /* unsupported: movzx eax,byte ptr [rdi] */;
  let r84: Bytes(4) = pre:RAX[4 .. 0] & -16;
  ;
  if IsZero (r84[1 .. 0] - 144) {
    TODO /* unsupported: movzx eax,byte ptr [rsi] */;
    TODO /* unsupported: neg edx */;
    TODO /* unsupported: sbb ecx,ecx */;
    ;
    if IsZero ((r84 & -16)[1 .. 0] - 16) {
      let r361: Bytes(4) = pre:RCX[4 .. 0];
      [pre:RSP - 60]:* := r361;
      ll2string(32,
                r361,
                ([pre:RSP - 60]:* := r361));
      strlen(32);
      quicklistPush(pre:RCX[4 .. 0],
                    (pre:RSP - 60),
                    pre:RCX[8 .. 4],
                    4199136);
      r641 := strlen(32);
      goto T9
    }
    TODO /* unsupported: movzx edx,byte ptr [rdi-1] */;
    let r284: Bytes(4) = pre:RDX[4 .. 0] & 7;
    let r295: Bytes(1) = r284[1 .. 0] - 4;
    ;
    if ! SignOf (r295) AND ! IsZero (r295) {
      goto ext 0x402446
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (pre:RAX[8 .. 4] ++ r284 * 8 + 6851672).*
  }
  ;
  if ! IsZero (r84[1 .. 0] - 176) {
    _serverPanic(6982459,
                 0,
                 176);
    goto undefined /* warning: due to decompiler bug or limitation */
  }
  TODO /* unsupported: movzx eax,byte ptr [rsi] */;
  ;
  if IsZero ((r84 & -16)[1 .. 0] - 16) {
    let r197: Bytes(4) = pre:RDX[4 .. 0] & pre:RDX[4 .. 0];
    ;
    let r205: Control = /* warning: unexpected Control */ JmpIf(333);
    if IsZero (r197) {
      lpPrependInteger(r205,
                       r197);
      r640 := lpPrependInteger(r205,
                               r197);
      goto T8
    }
    lpAppendInteger(r205,
                    r197);
    r640 := lpAppendInteger(r205,
                            r197);
    goto T8
    T8: {
      let mut r640: Bytes(8);
      [pre:RDI + 8]:* := r640;
      r641 := phi ();
      goto T9
    }
  
  }
  TODO /* unsupported: movzx esi,byte ptr [rcx-1] */;
  let r153: Bytes(4) = pre:RSI[4 .. 0] & 7;
  let r155: Bytes(8) = pre:RAX[8 .. 4] ++ r153;
  ;
  if ! IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
    let r315: Bytes(1) = r153[1 .. 0] - 4;
    ;
    if ! SignOf (r315) AND ! IsZero (r315) {
      goto ext 0x402454
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (r155 * 8 + 6851712).*
  }
  let r176: Bytes(1) = r153[1 .. 0] - 4;
  ;
  if ! SignOf (r176) AND ! IsZero (r176) {
    goto ext 0x40244d
  }
  TODO /* unsupported: movzx eax,al */;
  ;
  goto (r155 * 8 + 6851632).*
  T9: {
    let mut r641: Bytes(8);
    ;
    return r641
  }

}
