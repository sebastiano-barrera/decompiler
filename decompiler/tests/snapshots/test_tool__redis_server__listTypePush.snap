---
source: decompiler/tests/test_tool.rs
expression: out
---
listTypePush 0x485d60+534 (file 0x85d60)
          485d60: 55                      push rbp
          485d61: 48 89 e5                mov rbp,rsp
          485d64: 41 54                   push r12
          485d66: 53                      push rbx
          485d67: 48 89 fb                mov rbx,rdi
          485d6a: 48 83 ec 30             sub rsp,30h
          485d6e: 0f b6 07                movzx eax,byte ptr [rdi]
          485d71: 83 e0 f0                and eax,0FFFFFFF0h
          485d74: 3c 90                   cmp al,90h
          485d76: 74 68                   je short 0000000000485DE0h
          485d78: 3c b0                   cmp al,0B0h
          485d7a: 0f 85 e0 01 00 00       jne 0000000000485F60h
          485d80: 0f b6 06                movzx eax,byte ptr [rsi]
          485d83: 48 8b 4e 08             mov rcx,[rsi+8]
          485d87: 48 8b 7f 08             mov rdi,[rdi+8]
          485d8b: 83 e0 f0                and eax,0FFFFFFF0h
          485d8e: 3c 10                   cmp al,10h
          485d90: 74 26                   je short 0000000000485DB8h
          485d92: 0f b6 71 ff             movzx esi,byte ptr [rcx-1]
          485d96: 89 f0                   mov eax,esi
          485d98: 83 e0 07                and eax,7
          485d9b: 85 d2                   test edx,edx
          485d9d: 75 71                   jne short 0000000000485E10h
          485d9f: 3c 04                   cmp al,4
          485da1: 0f 87 a6 c6 f7 ff       ja 000000000040244Dh
          485da7: 0f b6 c0                movzx eax,al
          485daa: ff 24 c5 30 8c 68 00    jmp qword ptr [rax*8+688C30h]
          485db1: 0f 1f 80 00 00 00 00    nop [rax]
          485db8: 48 89 ce                mov rsi,rcx
          485dbb: 85 d2                   test edx,edx
          485dbd: 74 69                   je short 0000000000485E28h
          485dbf: e8 ec 7e 0d 00          call 000000000055DCB0h
          485dc4: 66 66 2e 0f 1f 84 00 00 nop [rax+rax]
          485dcf: 90                      nop
          485dd0: 48 89 43 08             mov [rbx+8],rax
          485dd4: 48 83 c4 30             add rsp,30h
          485dd8: 5b                      pop rbx
          485dd9: 41 5c                   pop r12
          485ddb: 5d                      pop rbp
          485ddc: c3                      ret
          485ddd: 0f 1f 00                nop [rax]
          485de0: 0f b6 06                movzx eax,byte ptr [rsi]
          485de3: f7 da                   neg edx
          485de5: 48 8b 7e 08             mov rdi,[rsi+8]
          485de9: 19 c9                   sbb ecx,ecx
          485deb: 83 e0 f0                and eax,0FFFFFFF0h
          485dee: 3c 10                   cmp al,10h
          485df0: 74 3e                   je short 0000000000485E30h
          485df2: 0f b6 57 ff             movzx edx,byte ptr [rdi-1]
          485df6: 89 d0                   mov eax,edx
          485df8: 83 e0 07                and eax,7
          485dfb: 3c 04                   cmp al,4
          485dfd: 0f 87 43 c6 f7 ff       ja 0000000000402446h
          485e03: 0f b6 c0                movzx eax,al
          485e06: ff 24 c5 58 8c 68 00    jmp qword ptr [rax*8+688C58h]
          485e0d: 0f 1f 00                nop [rax]
          485e10: 3c 04                   cmp al,4
          485e12: 0f 87 3c c6 f7 ff       ja 0000000000402454h
          485e18: 0f b6 c0                movzx eax,al
          485e1b: ff 24 c5 80 8c 68 00    jmp qword ptr [rax*8+688C80h]
          485e22: 66 0f 1f 44 00 00       nop [rax+rax]
          485e28: e8 b3 7f 0d 00          call 000000000055DDE0h
          485e2d: eb a1                   jmp short 0000000000485DD0h
          485e2f: 90                      nop
          485e30: 4c 8d 65 d0             lea r12,[rbp-30h]
          485e34: 48 89 fa                mov rdx,rdi
          485e37: be 20 00 00 00          mov esi,20h
          485e3c: 89 4d cc                mov [rbp-34h],ecx
          485e3f: 4c 89 e7                mov rdi,r12
          485e42: e8 59 9b fc ff          call 000000000044F9A0h
          485e47: 4c 89 e7                mov rdi,r12
          485e4a: e8 91 b4 f7 ff          call 00000000004012E0h
          485e4f: 48 8b 7b 08             mov rdi,[rbx+8]
          485e53: 8b 4d cc                mov ecx,[rbp-34h]
          485e56: 4c 89 e6                mov rsi,r12
          485e59: 48 89 c2                mov rdx,rax
          485e5c: e8 0f 26 f9 ff          call 0000000000418470h
          485e61: e9 6e ff ff ff          jmp 0000000000485DD4h
          485e66: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485e70: 8b 57 f7                mov edx,[rdi-9]
          485e73: 48 8b 43 08             mov rax,[rbx+8]
          485e77: 48 83 c4 30             add rsp,30h
          485e7b: 48 89 fe                mov rsi,rdi
          485e7e: 5b                      pop rbx
          485e7f: 41 5c                   pop r12
          485e81: 48 89 c7                mov rdi,rax
          485e84: 5d                      pop rbp
          485e85: e9 e6 25 f9 ff          jmp 0000000000418470h
          485e8a: 66 0f 1f 44 00 00       nop [rax+rax]
          485e90: 48 8b 57 ef             mov rdx,[rdi-11h]
          485e94: eb dd                   jmp short 0000000000485E73h
          485e96: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ea0: c0 ea 03                shr dl,3
          485ea3: 0f b6 d2                movzx edx,dl
          485ea6: eb cb                   jmp short 0000000000485E73h
          485ea8: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485eb0: 0f b6 57 fd             movzx edx,byte ptr [rdi-3]
          485eb4: eb bd                   jmp short 0000000000485E73h
          485eb6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ec0: 0f b7 57 fb             movzx edx,word ptr [rdi-5]
          485ec4: eb ad                   jmp short 0000000000485E73h
          485ec6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485ed0: 40 c0 ee 03             shr sil,3
          485ed4: 40 0f b6 d6             movzx edx,sil
          485ed8: 48 89 ce                mov rsi,rcx
          485edb: e8 40 7d 0d 00          call 000000000055DC20h
          485ee0: e9 eb fe ff ff          jmp 0000000000485DD0h
          485ee5: 0f 1f 00                nop [rax]
          485ee8: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485eec: eb ea                   jmp short 0000000000485ED8h
          485eee: 66 90                   xchg ax,ax
          485ef0: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485ef4: eb e2                   jmp short 0000000000485ED8h
          485ef6: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f00: 8b 51 f7                mov edx,[rcx-9]
          485f03: eb d3                   jmp short 0000000000485ED8h
          485f05: 0f 1f 00                nop [rax]
          485f08: 8b 51 ef                mov edx,[rcx-11h]
          485f0b: 48 89 ce                mov rsi,rcx
          485f0e: e8 ed 7c 0d 00          call 000000000055DC00h
          485f13: e9 b8 fe ff ff          jmp 0000000000485DD0h
          485f18: 0f 1f 84 00 00 00 00 00 nop [rax+rax]
          485f20: 40 c0 ee 03             shr sil,3
          485f24: 40 0f b6 d6             movzx edx,sil
          485f28: eb e1                   jmp short 0000000000485F0Bh
          485f2a: 66 0f 1f 44 00 00       nop [rax+rax]
          485f30: 0f b6 51 fd             movzx edx,byte ptr [rcx-3]
          485f34: eb d5                   jmp short 0000000000485F0Bh
          485f36: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f40: 0f b7 51 fb             movzx edx,word ptr [rcx-5]
          485f44: eb c5                   jmp short 0000000000485F0Bh
          485f46: 66 2e 0f 1f 84 00 00 00 nop [rax+rax]
          485f50: 8b 51 f7                mov edx,[rcx-9]
          485f53: eb b6                   jmp short 0000000000485F0Bh
          485f55: 0f 1f 00                nop [rax]
          485f58: 8b 51 ef                mov edx,[rcx-11h]
          485f5b: e9 78 ff ff ff          jmp 0000000000485ED8h
          485f60: ba bb 80 6a 00          mov edx,6A80BBh
          485f65: be a5 00 00 00          mov esi,0A5h
          485f6a: bf 3b 8b 6a 00          mov edi,6A8B3Bh
          485f6f: 31 c0                   xor eax,eax
          485f71: e8 fa c5 03 00          call 00000000004C2570h

function type: 0x485d60: no type info
2 warnings:
  #   0: no function type
  #   1: call: call resolved but only packed 2/4 params


mil program = 
program  641 instrs
                 0 r12 <- Ancestral(AncestralName("stack_bottom"))
                 1 r2 <- Ancestral(AncestralName("CF"))
                 2 r3 <- Ancestral(AncestralName("PF"))
                 3 r4 <- Ancestral(AncestralName("AF"))
                 4 r5 <- Ancestral(AncestralName("ZF"))
                 5 r6 <- Ancestral(AncestralName("SF"))
                 6 r7 <- Ancestral(AncestralName("TF"))
                 7 r8 <- Ancestral(AncestralName("IF"))
                 8 r9 <- Ancestral(AncestralName("DF"))
                 9 r10 <- Ancestral(AncestralName("OF"))
                10 r11 <- Ancestral(AncestralName("RBP"))
                11 r12 <- Ancestral(AncestralName("RSP"))
                12 r13 <- Ancestral(AncestralName("RIP"))
                13 r14 <- Ancestral(AncestralName("RDI"))
                14 r15 <- Ancestral(AncestralName("RSI"))
                15 r16 <- Ancestral(AncestralName("RAX"))
                16 r17 <- Ancestral(AncestralName("RBX"))
                17 r18 <- Ancestral(AncestralName("RCX"))
                18 r19 <- Ancestral(AncestralName("RDX"))
                19 r20 <- Ancestral(AncestralName("R8"))
                20 r21 <- Ancestral(AncestralName("R9"))
                21 r22 <- Ancestral(AncestralName("R10"))
                22 r23 <- Ancestral(AncestralName("R11"))
                23 r24 <- Ancestral(AncestralName("R12"))
                24 r25 <- Ancestral(AncestralName("R13"))
                25 r26 <- Ancestral(AncestralName("R14"))
                26 r27 <- Ancestral(AncestralName("R15"))
                27 r28 <- Ancestral(AncestralName("ZMM0"))
                28 r29 <- Ancestral(AncestralName("ZMM1"))
                29 r30 <- Ancestral(AncestralName("ZMM2"))
                30 r31 <- Ancestral(AncestralName("ZMM3"))
                31 r32 <- Ancestral(AncestralName("ZMM4"))
                32 r33 <- Ancestral(AncestralName("ZMM5"))
                33 r34 <- Ancestral(AncestralName("ZMM6"))
                34 r35 <- Ancestral(AncestralName("ZMM7"))
                35 r36 <- Ancestral(AncestralName("ZMM8"))
                36 r37 <- Ancestral(AncestralName("ZMM9"))
                37 r38 <- Ancestral(AncestralName("ZMM10"))
                38 r39 <- Ancestral(AncestralName("ZMM11"))
                39 r40 <- Ancestral(AncestralName("ZMM12"))
                40 r41 <- Ancestral(AncestralName("ZMM13"))
                41 r42 <- Ancestral(AncestralName("ZMM14"))
                42 r43 <- Ancestral(AncestralName("ZMM15"))
                43 r44 <- Ancestral(AncestralName("memory"))
                44 r45 <- Undefined
                45 r46 <- Undefined
                46 r47 <- Undefined
                47 r48 <- Undefined
                48 r49 <- Undefined
                49 r50 <- Undefined
                50 r51 <- Undefined
                51 r52 <- Undefined
                52 r53 <- Undefined
                53 r54 <- Undefined
                54 r55 <- Undefined
                55 r56 <- Undefined
                56 r57 <- Undefined
                57 r58 <- Undefined
                58 r59 <- Undefined
                59 r60 <- Undefined
                60 r61 <- Undefined
                61 r62 <- Undefined
                62 r63 <- Undefined
                63 r64 <- Undefined
                64 r65 <- Undefined
0x485d60:
                65 r12 <- ArithK(Add, r12, -8)
                66 r44 <- StoreMem { mem: r44, addr: r12, value: r11 }
0x485d61:
                67 r11 <- Get(r12)
0x485d64:
                68 r12 <- ArithK(Add, r12, -8)
                69 r44 <- StoreMem { mem: r44, addr: r12, value: r24 }
0x485d66:
                70 r12 <- ArithK(Add, r12, -8)
                71 r44 <- StoreMem { mem: r44, addr: r12, value: r17 }
0x485d67:
                72 r17 <- Get(r14)
0x485d6a:
                73 r46 <- Const { value: 48, size: 8 }
                74 r12 <- Arith(Sub, r12, r46)
                75 r12 <- Get(r12)
                76 r10 <- OverflowOf(r12)
                77 r2 <- CarryOf(r12)
                78 r6 <- SignOf(r12)
                79 r5 <- IsZero(r12)
                80 r47 <- Part { src: r12, offset: 0, size: 1 }
                81 r3 <- Parity(r47)
0x485d6e:
                82 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
0x485d71:
                83 r46 <- Part { src: r16, offset: 0, size: 4 }
                84 r47 <- Const { value: -16, size: 4 }
                85 r46 <- Arith(BitAnd, r46, r47)
                86 r48 <- Part { src: r16, offset: 4, size: 4 }
                87 r16 <- Concat { lo: r46, hi: r48 }
                88 r10 <- False
                89 r2 <- False
                90 r6 <- SignOf(r46)
                91 r5 <- IsZero(r46)
                92 r49 <- Part { src: r46, offset: 0, size: 1 }
                93 r3 <- Parity(r49)
0x485d74:
                94 r46 <- Part { src: r16, offset: 0, size: 1 }
                95 r47 <- Const { value: 144, size: 1 }
                96 r46 <- Arith(Sub, r46, r47)
                97 r10 <- OverflowOf(r46)
                98 r2 <- CarryOf(r46)
                99 r6 <- SignOf(r46)
               100 r5 <- IsZero(r46)
               101 r48 <- Part { src: r46, offset: 0, size: 1 }
               102 r3 <- Parity(r48)
0x485d76:
               103 r45 <- SetJumpCondition(r5)
               104 r45 <- Control(JmpIf(250))
0x485d78:
               105 r46 <- Part { src: r16, offset: 0, size: 1 }
               106 r47 <- Const { value: 176, size: 1 }
               107 r46 <- Arith(Sub, r46, r47)
               108 r10 <- OverflowOf(r46)
               109 r2 <- CarryOf(r46)
               110 r6 <- SignOf(r46)
               111 r5 <- IsZero(r46)
               112 r48 <- Part { src: r46, offset: 0, size: 1 }
               113 r3 <- Parity(r48)
0x485d7a:
               114 r45 <- Not(r5)
               115 r46 <- SetJumpCondition(r45)
               116 r46 <- Control(JmpIf(597))
0x485d80:
               117 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485d83:
               118 r46 <- Const { value: 8, size: 8 }
               119 r46 <- Arith(Add, r46, r15)
               120 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               121 r18 <- Get(r45)
0x485d87:
               122 r46 <- Const { value: 8, size: 8 }
               123 r46 <- Arith(Add, r46, r14)
               124 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               125 r14 <- Get(r45)
0x485d8b:
               126 r46 <- Part { src: r16, offset: 0, size: 4 }
               127 r47 <- Const { value: -16, size: 4 }
               128 r46 <- Arith(BitAnd, r46, r47)
               129 r48 <- Part { src: r16, offset: 4, size: 4 }
               130 r16 <- Concat { lo: r46, hi: r48 }
               131 r10 <- False
               132 r2 <- False
               133 r6 <- SignOf(r46)
               134 r5 <- IsZero(r46)
               135 r49 <- Part { src: r46, offset: 0, size: 1 }
               136 r3 <- Parity(r49)
0x485d8e:
               137 r46 <- Part { src: r16, offset: 0, size: 1 }
               138 r47 <- Const { value: 16, size: 1 }
               139 r46 <- Arith(Sub, r46, r47)
               140 r10 <- OverflowOf(r46)
               141 r2 <- CarryOf(r46)
               142 r6 <- SignOf(r46)
               143 r5 <- IsZero(r46)
               144 r48 <- Part { src: r46, offset: 0, size: 1 }
               145 r3 <- Parity(r48)
0x485d90:
               146 r45 <- SetJumpCondition(r5)
               147 r45 <- Control(JmpIf(195))
0x485d92:
               148 r45 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
0x485d96:
               149 r46 <- Part { src: r15, offset: 0, size: 4 }
               150 r47 <- Part { src: r16, offset: 4, size: 4 }
               151 r16 <- Concat { lo: r46, hi: r47 }
0x485d98:
               152 r46 <- Part { src: r16, offset: 0, size: 4 }
               153 r47 <- Const { value: 7, size: 4 }
               154 r46 <- Arith(BitAnd, r46, r47)
               155 r48 <- Part { src: r16, offset: 4, size: 4 }
               156 r16 <- Concat { lo: r46, hi: r48 }
               157 r10 <- False
               158 r2 <- False
               159 r6 <- SignOf(r46)
               160 r5 <- IsZero(r46)
               161 r49 <- Part { src: r46, offset: 0, size: 1 }
               162 r3 <- Parity(r49)
0x485d9b:
               163 r46 <- Part { src: r19, offset: 0, size: 4 }
               164 r48 <- Part { src: r19, offset: 0, size: 4 }
               165 r46 <- Arith(BitAnd, r46, r48)
               166 r6 <- SignOf(r46)
               167 r5 <- IsZero(r46)
               168 r49 <- Part { src: r46, offset: 0, size: 1 }
               169 r3 <- Parity(r46)
               170 r2 <- False
               171 r10 <- False
0x485d9d:
               172 r45 <- Not(r5)
               173 r46 <- SetJumpCondition(r45)
               174 r46 <- Control(JmpIf(314))
0x485d9f:
               175 r46 <- Part { src: r16, offset: 0, size: 1 }
               176 r47 <- Const { value: 4, size: 1 }
               177 r46 <- Arith(Sub, r46, r47)
               178 r10 <- OverflowOf(r46)
               179 r2 <- CarryOf(r46)
               180 r6 <- SignOf(r46)
               181 r5 <- IsZero(r46)
               182 r48 <- Part { src: r46, offset: 0, size: 1 }
               183 r3 <- Parity(r48)
0x485da1:
               184 r45 <- Not(r6)
               185 r46 <- Not(r5)
               186 r45 <- Bool(And, r45, r46)
               187 r47 <- SetJumpCondition(r45)
               188 r47 <- Control(JmpExtIf(4203597))
0x485da7:
               189 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485daa:
               190 r46 <- Const { value: 6851632, size: 8 }
               191 r47 <- ArithK(Mul, r16, 8)
               192 r46 <- Arith(Add, r46, r47)
               193 r46 <- SetJumpTarget(r46)
               194 r45 <- Control(JmpIndirect)
0x485db8:
               195 r15 <- Get(r18)
0x485dbb:
               196 r46 <- Part { src: r19, offset: 0, size: 4 }
               197 r48 <- Part { src: r19, offset: 0, size: 4 }
               198 r46 <- Arith(BitAnd, r46, r48)
               199 r6 <- SignOf(r46)
               200 r5 <- IsZero(r46)
               201 r49 <- Part { src: r46, offset: 0, size: 1 }
               202 r3 <- Parity(r46)
               203 r2 <- False
               204 r10 <- False
0x485dbd:
               205 r45 <- SetJumpCondition(r5)
               206 r45 <- Control(JmpIf(334))
0x485dbf:
               207 r47 <- Ancestral(AncestralName("arg0"))
               208 r47 <- Void
               209 r47 <- Get(r14)
               210 r48 <- Ancestral(AncestralName("arg1"))
               211 r48 <- Void
               212 r48 <- Get(r15)
               213 r49 <- CArg { value: r46, next_arg: None }
               214 r49 <- CArg { value: r45, next_arg: Some(r49) }
               215 r50: TypeID(48713v1) <- Const { value: 5627056, size: 8 }
               216 r49 <- Call { callee: r50, first_arg: Some(r49) }
               217 r2 <- Undefined
               218 r3 <- Undefined
               219 r4 <- Undefined
               220 r5 <- Undefined
               221 r6 <- Undefined
               222 r7 <- Undefined
               223 r8 <- Undefined
               224 r9 <- Undefined
               225 r10 <- Undefined
               226 r16 <- Part { src: r49, offset: 0, size: 8 }
0x485dd0:
               227 r46 <- Const { value: 8, size: 8 }
               228 r46 <- Arith(Add, r46, r17)
               229 r44 <- StoreMem { mem: r44, addr: r46, value: r16 }
0x485dd4:
               230 r46 <- Const { value: 48, size: 8 }
               231 r12 <- Arith(Add, r12, r46)
               232 r12 <- Get(r12)
               233 r10 <- OverflowOf(r12)
               234 r2 <- CarryOf(r12)
               235 r6 <- SignOf(r12)
               236 r5 <- IsZero(r12)
               237 r47 <- Part { src: r12, offset: 0, size: 1 }
               238 r3 <- Parity(r47)
0x485dd8:
               239 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               240 r17 <- Get(r45)
               241 r12 <- ArithK(Add, r12, 8)
0x485dd9:
               242 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               243 r24 <- Get(r45)
               244 r12 <- ArithK(Add, r12, 8)
0x485ddb:
               245 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               246 r11 <- Get(r45)
               247 r12 <- ArithK(Add, r12, 8)
0x485ddc:
               248 r45 <- SetReturnValue(r16)
               249 r45 <- Control(Ret)
0x485de0:
               250 r45 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
0x485de3:
               251 r45 <- NotYetImplemented("unsupported: neg edx")
0x485de5:
               252 r46 <- Const { value: 8, size: 8 }
               253 r46 <- Arith(Add, r46, r15)
               254 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               255 r14 <- Get(r45)
0x485de9:
               256 r45 <- NotYetImplemented("unsupported: sbb ecx,ecx")
0x485deb:
               257 r46 <- Part { src: r16, offset: 0, size: 4 }
               258 r47 <- Const { value: -16, size: 4 }
               259 r46 <- Arith(BitAnd, r46, r47)
               260 r48 <- Part { src: r16, offset: 4, size: 4 }
               261 r16 <- Concat { lo: r46, hi: r48 }
               262 r10 <- False
               263 r2 <- False
               264 r6 <- SignOf(r46)
               265 r5 <- IsZero(r46)
               266 r49 <- Part { src: r46, offset: 0, size: 1 }
               267 r3 <- Parity(r49)
0x485dee:
               268 r46 <- Part { src: r16, offset: 0, size: 1 }
               269 r47 <- Const { value: 16, size: 1 }
               270 r46 <- Arith(Sub, r46, r47)
               271 r10 <- OverflowOf(r46)
               272 r2 <- CarryOf(r46)
               273 r6 <- SignOf(r46)
               274 r5 <- IsZero(r46)
               275 r48 <- Part { src: r46, offset: 0, size: 1 }
               276 r3 <- Parity(r48)
0x485df0:
               277 r45 <- SetJumpCondition(r5)
               278 r45 <- Control(JmpIf(355))
0x485df2:
               279 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
0x485df6:
               280 r46 <- Part { src: r19, offset: 0, size: 4 }
               281 r47 <- Part { src: r16, offset: 4, size: 4 }
               282 r16 <- Concat { lo: r46, hi: r47 }
0x485df8:
               283 r46 <- Part { src: r16, offset: 0, size: 4 }
               284 r47 <- Const { value: 7, size: 4 }
               285 r46 <- Arith(BitAnd, r46, r47)
               286 r48 <- Part { src: r16, offset: 4, size: 4 }
               287 r16 <- Concat { lo: r46, hi: r48 }
               288 r10 <- False
               289 r2 <- False
               290 r6 <- SignOf(r46)
               291 r5 <- IsZero(r46)
               292 r49 <- Part { src: r46, offset: 0, size: 1 }
               293 r3 <- Parity(r49)
0x485dfb:
               294 r46 <- Part { src: r16, offset: 0, size: 1 }
               295 r47 <- Const { value: 4, size: 1 }
               296 r46 <- Arith(Sub, r46, r47)
               297 r10 <- OverflowOf(r46)
               298 r2 <- CarryOf(r46)
               299 r6 <- SignOf(r46)
               300 r5 <- IsZero(r46)
               301 r48 <- Part { src: r46, offset: 0, size: 1 }
               302 r3 <- Parity(r48)
0x485dfd:
               303 r45 <- Not(r6)
               304 r46 <- Not(r5)
               305 r45 <- Bool(And, r45, r46)
               306 r47 <- SetJumpCondition(r45)
               307 r47 <- Control(JmpExtIf(4203590))
0x485e03:
               308 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e06:
               309 r46 <- Const { value: 6851672, size: 8 }
               310 r47 <- ArithK(Mul, r16, 8)
               311 r46 <- Arith(Add, r46, r47)
               312 r46 <- SetJumpTarget(r46)
               313 r45 <- Control(JmpIndirect)
0x485e10:
               314 r46 <- Part { src: r16, offset: 0, size: 1 }
               315 r47 <- Const { value: 4, size: 1 }
               316 r46 <- Arith(Sub, r46, r47)
               317 r10 <- OverflowOf(r46)
               318 r2 <- CarryOf(r46)
               319 r6 <- SignOf(r46)
               320 r5 <- IsZero(r46)
               321 r48 <- Part { src: r46, offset: 0, size: 1 }
               322 r3 <- Parity(r48)
0x485e12:
               323 r45 <- Not(r6)
               324 r46 <- Not(r5)
               325 r45 <- Bool(And, r45, r46)
               326 r47 <- SetJumpCondition(r45)
               327 r47 <- Control(JmpExtIf(4203604))
0x485e18:
               328 r45 <- NotYetImplemented("unsupported: movzx eax,al")
0x485e1b:
               329 r46 <- Const { value: 6851712, size: 8 }
               330 r47 <- ArithK(Mul, r16, 8)
               331 r46 <- Arith(Add, r46, r47)
               332 r46 <- SetJumpTarget(r46)
               333 r45 <- Control(JmpIndirect)
0x485e28:
               334 r47 <- Ancestral(AncestralName("arg0"))
               335 r47 <- Void
               336 r47 <- Get(r14)
               337 r48 <- Ancestral(AncestralName("arg1"))
               338 r48 <- Void
               339 r48 <- Get(r15)
               340 r49 <- CArg { value: r46, next_arg: None }
               341 r49 <- CArg { value: r45, next_arg: Some(r49) }
               342 r50: TypeID(48714v1) <- Const { value: 5627360, size: 8 }
               343 r49 <- Call { callee: r50, first_arg: Some(r49) }
               344 r2 <- Undefined
               345 r3 <- Undefined
               346 r4 <- Undefined
               347 r5 <- Undefined
               348 r6 <- Undefined
               349 r7 <- Undefined
               350 r8 <- Undefined
               351 r9 <- Undefined
               352 r10 <- Undefined
               353 r16 <- Part { src: r49, offset: 0, size: 8 }
0x485e2d:
               354 r45 <- Control(Jmp(227))
0x485e30:
               355 r45 <- Const { value: -48, size: 8 }
               356 r45 <- Arith(Add, r45, r11)
               357 r24 <- Get(r45)
0x485e34:
               358 r19 <- Get(r14)
0x485e37:
               359 r45 <- Const { value: 32, size: 4 }
               360 r46 <- Part { src: r15, offset: 4, size: 4 }
               361 r15 <- Concat { lo: r45, hi: r46 }
0x485e3c:
               362 r46 <- Part { src: r18, offset: 0, size: 4 }
               363 r47 <- Const { value: -52, size: 8 }
               364 r47 <- Arith(Add, r47, r11)
               365 r44 <- StoreMem { mem: r44, addr: r47, value: r46 }
0x485e3f:
               366 r14 <- Get(r24)
0x485e42:
               367 r48 <- Ancestral(AncestralName("arg0"))
               368 r48 <- Void
               369 r48 <- Get(r14)
               370 r49 <- Ancestral(AncestralName("arg1"))
               371 r49 <- Void
               372 r49 <- Get(r15)
               373 r50 <- Ancestral(AncestralName("arg2"))
               374 r50 <- Void
               375 r50 <- Get(r19)
               376 r51 <- CArg { value: r47, next_arg: None }
               377 r51 <- CArg { value: r46, next_arg: Some(r51) }
               378 r51 <- CArg { value: r45, next_arg: Some(r51) }
               379 r52: TypeID(47971v1) <- Const { value: 4520352, size: 8 }
               380 r51 <- Call { callee: r52, first_arg: Some(r51) }
               381 r2 <- Undefined
               382 r3 <- Undefined
               383 r4 <- Undefined
               384 r5 <- Undefined
               385 r6 <- Undefined
               386 r7 <- Undefined
               387 r8 <- Undefined
               388 r9 <- Undefined
               389 r10 <- Undefined
               390 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485e47:
               391 r14 <- Get(r24)
0x485e4a:
               392 r46 <- Ancestral(AncestralName("arg0"))
               393 r46 <- Void
               394 r46 <- Get(r14)
               395 r47 <- CArg { value: r45, next_arg: None }
               396 r48: TypeID(48715v1) <- Const { value: 4199136, size: 8 }
               397 r47 <- Call { callee: r48, first_arg: Some(r47) }
               398 r2 <- Undefined
               399 r3 <- Undefined
               400 r4 <- Undefined
               401 r5 <- Undefined
               402 r6 <- Undefined
               403 r7 <- Undefined
               404 r8 <- Undefined
               405 r9 <- Undefined
               406 r10 <- Undefined
               407 r16 <- Part { src: r47, offset: 0, size: 8 }
0x485e4f:
               408 r46 <- Const { value: 8, size: 8 }
               409 r46 <- Arith(Add, r46, r17)
               410 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               411 r14 <- Get(r45)
0x485e53:
               412 r46 <- Const { value: -52, size: 8 }
               413 r46 <- Arith(Add, r46, r11)
               414 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               415 r47 <- Part { src: r18, offset: 4, size: 4 }
               416 r18 <- Concat { lo: r45, hi: r47 }
0x485e56:
               417 r15 <- Get(r24)
0x485e59:
               418 r19 <- Get(r16)
0x485e5c:
               419 r49 <- Ancestral(AncestralName("arg0"))
               420 r49 <- Void
               421 r49 <- Get(r14)
               422 r50 <- Ancestral(AncestralName("arg1"))
               423 r50 <- Void
               424 r50 <- Get(r15)
               425 r51 <- CArg { value: r48, next_arg: None }
               426 r51 <- CArg { value: r47, next_arg: Some(r51) }
               427 r51 <- CArg { value: r46, next_arg: Some(r51) }
               428 r51 <- CArg { value: r45, next_arg: Some(r51) }
               429 r52: TypeID(48716v1) <- Const { value: 4293744, size: 8 }
               430 r51 <- Call { callee: r52, first_arg: Some(r51) }
               431 r2 <- Undefined
               432 r3 <- Undefined
               433 r4 <- Undefined
               434 r5 <- Undefined
               435 r6 <- Undefined
               436 r7 <- Undefined
               437 r8 <- Undefined
               438 r9 <- Undefined
               439 r10 <- Undefined
0x485e61:
               440 r45 <- Control(Jmp(230))
0x485e70:
               441 r46 <- Const { value: -9, size: 8 }
               442 r46 <- Arith(Add, r46, r14)
               443 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               444 r47 <- Part { src: r19, offset: 4, size: 4 }
               445 r19 <- Concat { lo: r45, hi: r47 }
0x485e73:
               446 r46 <- Const { value: 8, size: 8 }
               447 r46 <- Arith(Add, r46, r17)
               448 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               449 r16 <- Get(r45)
0x485e77:
               450 r46 <- Const { value: 48, size: 8 }
               451 r12 <- Arith(Add, r12, r46)
               452 r12 <- Get(r12)
               453 r10 <- OverflowOf(r12)
               454 r2 <- CarryOf(r12)
               455 r6 <- SignOf(r12)
               456 r5 <- IsZero(r12)
               457 r47 <- Part { src: r12, offset: 0, size: 1 }
               458 r3 <- Parity(r47)
0x485e7b:
               459 r15 <- Get(r14)
0x485e7e:
               460 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               461 r17 <- Get(r45)
               462 r12 <- ArithK(Add, r12, 8)
0x485e7f:
               463 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               464 r24 <- Get(r45)
               465 r12 <- ArithK(Add, r12, 8)
0x485e81:
               466 r14 <- Get(r16)
0x485e84:
               467 r45 <- LoadMem { mem: r44, addr: r12, size: 8 }
               468 r11 <- Get(r45)
               469 r12 <- ArithK(Add, r12, 8)
0x485e85:
               470 r45 <- Control(JmpExt(4293744))
0x485e90:
               471 r46 <- Const { value: -17, size: 8 }
               472 r46 <- Arith(Add, r46, r14)
               473 r45 <- LoadMem { mem: r44, addr: r46, size: 8 }
               474 r19 <- Get(r45)
0x485e94:
               475 r45 <- Control(Jmp(446))
0x485ea0:
               476 r46 <- Part { src: r19, offset: 0, size: 1 }
               477 r47 <- Const { value: 3, size: 1 }
               478 r46 <- Arith(Shr, r46, r47)
               479 r48 <- Part { src: r19, offset: 1, size: 7 }
               480 r19 <- Concat { lo: r46, hi: r48 }
               481 r6 <- SignOf(r46)
               482 r5 <- IsZero(r46)
               483 r49 <- Part { src: r46, offset: 0, size: 1 }
               484 r3 <- Parity(r49)
0x485ea3:
               485 r45 <- NotYetImplemented("unsupported: movzx edx,dl")
0x485ea6:
               486 r45 <- Control(Jmp(446))
0x485eb0:
               487 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-3]")
0x485eb4:
               488 r45 <- Control(Jmp(446))
0x485ec0:
               489 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rdi-5]")
0x485ec4:
               490 r45 <- Control(Jmp(446))
0x485ed0:
               491 r46 <- Part { src: r15, offset: 0, size: 1 }
               492 r47 <- Const { value: 3, size: 1 }
               493 r46 <- Arith(Shr, r46, r47)
               494 r48 <- Part { src: r15, offset: 1, size: 7 }
               495 r15 <- Concat { lo: r46, hi: r48 }
               496 r6 <- SignOf(r46)
               497 r5 <- IsZero(r46)
               498 r49 <- Part { src: r46, offset: 0, size: 1 }
               499 r3 <- Parity(r49)
0x485ed4:
               500 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485ed8:
               501 r15 <- Get(r18)
0x485edb:
               502 r48 <- Ancestral(AncestralName("arg0"))
               503 r48 <- Void
               504 r48 <- Get(r14)
               505 r49 <- Ancestral(AncestralName("arg1"))
               506 r49 <- Void
               507 r49 <- Get(r15)
               508 r50 <- Ancestral(AncestralName("arg2"))
               509 r50 <- Void
               510 r50 <- Get(r19)
               511 r50 <- Part { src: r50, offset: 0, size: 4 }
               512 r51 <- CArg { value: r47, next_arg: None }
               513 r51 <- CArg { value: r46, next_arg: Some(r51) }
               514 r51 <- CArg { value: r45, next_arg: Some(r51) }
               515 r52: TypeID(48717v1) <- Const { value: 5626912, size: 8 }
               516 r51 <- Call { callee: r52, first_arg: Some(r51) }
               517 r2 <- Undefined
               518 r3 <- Undefined
               519 r4 <- Undefined
               520 r5 <- Undefined
               521 r6 <- Undefined
               522 r7 <- Undefined
               523 r8 <- Undefined
               524 r9 <- Undefined
               525 r10 <- Undefined
               526 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485ee0:
               527 r45 <- Control(Jmp(227))
0x485ee8:
               528 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485eec:
               529 r45 <- Control(Jmp(501))
0x485ef0:
               530 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485ef4:
               531 r45 <- Control(Jmp(501))
0x485f00:
               532 r46 <- Const { value: -9, size: 8 }
               533 r46 <- Arith(Add, r46, r18)
               534 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               535 r47 <- Part { src: r19, offset: 4, size: 4 }
               536 r19 <- Concat { lo: r45, hi: r47 }
0x485f03:
               537 r45 <- Control(Jmp(501))
0x485f08:
               538 r46 <- Const { value: -17, size: 8 }
               539 r46 <- Arith(Add, r46, r18)
               540 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               541 r47 <- Part { src: r19, offset: 4, size: 4 }
               542 r19 <- Concat { lo: r45, hi: r47 }
0x485f0b:
               543 r15 <- Get(r18)
0x485f0e:
               544 r48 <- Ancestral(AncestralName("arg0"))
               545 r48 <- Void
               546 r48 <- Get(r14)
               547 r49 <- Ancestral(AncestralName("arg1"))
               548 r49 <- Void
               549 r49 <- Get(r15)
               550 r50 <- Ancestral(AncestralName("arg2"))
               551 r50 <- Void
               552 r50 <- Get(r19)
               553 r50 <- Part { src: r50, offset: 0, size: 4 }
               554 r51 <- CArg { value: r47, next_arg: None }
               555 r51 <- CArg { value: r46, next_arg: Some(r51) }
               556 r51 <- CArg { value: r45, next_arg: Some(r51) }
               557 r52: TypeID(45899v1) <- Const { value: 5626880, size: 8 }
               558 r51 <- Call { callee: r52, first_arg: Some(r51) }
               559 r2 <- Undefined
               560 r3 <- Undefined
               561 r4 <- Undefined
               562 r5 <- Undefined
               563 r6 <- Undefined
               564 r7 <- Undefined
               565 r8 <- Undefined
               566 r9 <- Undefined
               567 r10 <- Undefined
               568 r16 <- Part { src: r51, offset: 0, size: 8 }
0x485f13:
               569 r45 <- Control(Jmp(227))
0x485f20:
               570 r46 <- Part { src: r15, offset: 0, size: 1 }
               571 r47 <- Const { value: 3, size: 1 }
               572 r46 <- Arith(Shr, r46, r47)
               573 r48 <- Part { src: r15, offset: 1, size: 7 }
               574 r15 <- Concat { lo: r46, hi: r48 }
               575 r6 <- SignOf(r46)
               576 r5 <- IsZero(r46)
               577 r49 <- Part { src: r46, offset: 0, size: 1 }
               578 r3 <- Parity(r49)
0x485f24:
               579 r45 <- NotYetImplemented("unsupported: movzx edx,sil")
0x485f28:
               580 r45 <- Control(Jmp(543))
0x485f30:
               581 r45 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rcx-3]")
0x485f34:
               582 r45 <- Control(Jmp(543))
0x485f40:
               583 r45 <- NotYetImplemented("unsupported: movzx edx,word ptr [rcx-5]")
0x485f44:
               584 r45 <- Control(Jmp(543))
0x485f50:
               585 r46 <- Const { value: -9, size: 8 }
               586 r46 <- Arith(Add, r46, r18)
               587 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               588 r47 <- Part { src: r19, offset: 4, size: 4 }
               589 r19 <- Concat { lo: r45, hi: r47 }
0x485f53:
               590 r45 <- Control(Jmp(543))
0x485f58:
               591 r46 <- Const { value: -17, size: 8 }
               592 r46 <- Arith(Add, r46, r18)
               593 r45 <- LoadMem { mem: r44, addr: r46, size: 4 }
               594 r47 <- Part { src: r19, offset: 4, size: 4 }
               595 r19 <- Concat { lo: r45, hi: r47 }
0x485f5b:
               596 r45 <- Control(Jmp(501))
0x485f60:
               597 r45 <- Const { value: 6979771, size: 4 }
               598 r46 <- Part { src: r19, offset: 4, size: 4 }
               599 r19 <- Concat { lo: r45, hi: r46 }
0x485f65:
               600 r45 <- Const { value: 165, size: 4 }
               601 r46 <- Part { src: r15, offset: 4, size: 4 }
               602 r15 <- Concat { lo: r45, hi: r46 }
0x485f6a:
               603 r45 <- Const { value: 6982459, size: 4 }
               604 r46 <- Part { src: r14, offset: 4, size: 4 }
               605 r14 <- Concat { lo: r45, hi: r46 }
0x485f6f:
               606 r46 <- Part { src: r16, offset: 0, size: 4 }
               607 r48 <- Part { src: r16, offset: 0, size: 4 }
               608 r46 <- Arith(BitXor, r46, r48)
               609 r49 <- Part { src: r16, offset: 4, size: 4 }
               610 r16 <- Concat { lo: r46, hi: r49 }
               611 r10 <- False
               612 r2 <- False
               613 r6 <- SignOf(r46)
               614 r5 <- IsZero(r46)
               615 r50 <- Part { src: r46, offset: 0, size: 1 }
               616 r3 <- Parity(r50)
0x485f71:
               617 r48 <- Ancestral(AncestralName("arg0"))
               618 r48 <- Void
               619 r48 <- Get(r14)
               620 r49 <- Ancestral(AncestralName("arg1"))
               621 r49 <- Void
               622 r49 <- Get(r15)
               623 r49 <- Part { src: r49, offset: 0, size: 4 }
               624 r50 <- Ancestral(AncestralName("arg2"))
               625 r50 <- Void
               626 r50 <- Get(r19)
               627 r51 <- CArg { value: r47, next_arg: None }
               628 r51 <- CArg { value: r46, next_arg: Some(r51) }
               629 r51 <- CArg { value: r45, next_arg: Some(r51) }
               630 r52: TypeID(46167v1) <- Const { value: 4990320, size: 8 }
               631 r51 <- Call { callee: r52, first_arg: Some(r51) }
               632 r2 <- Undefined
               633 r3 <- Undefined
               634 r4 <- Undefined
               635 r5 <- Undefined
               636 r6 <- Undefined
               637 r7 <- Undefined
               638 r8 <- Undefined
               639 r9 <- Undefined
               640 r10 <- Undefined


ssa pre-xform:
ssa program  650 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
         r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
         r14 <- Ancestral(AncestralName("RSI"))
  (  2)  r15 <- Ancestral(AncestralName("RAX"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  2)  r17 <- Ancestral(AncestralName("RCX"))
  (  5)  r18 <- Ancestral(AncestralName("RDX"))
         r23 <- Ancestral(AncestralName("R12"))
         r43 <- Ancestral(AncestralName("memory"))
         r51 <- Undefined
         r52 <- Undefined
  (  4)  r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r10 }
  (  2)  r68 <- ArithK(Add, r65, -8)
         r69 <- StoreMem { mem: r66, addr: r68, value: r23 }
         r70 <- ArithK(Add, r68, -8)
  (  2)  r71 <- StoreMem { mem: r69, addr: r70, value: r16 }
         r82 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r83 <- Part { src: r15, offset: 0, size: 4 }
         r84 <- Const { value: -16, size: 4 }
         r85 <- Arith(BitAnd, r83, r84)
         r86 <- Part { src: r15, offset: 4, size: 4 }
  (  8)  r87 <- Concat { lo: r85, hi: r86 }
         r94 <- Part { src: r87, offset: 0, size: 1 }
         r95 <- Const { value: 144, size: 1 }
         r96 <- Arith(Sub, r94, r95)
         r100 <- IsZero(r96)
         r103 <- SetJumpCondition(r100)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r105 <- Part { src: r87, offset: 0, size: 1 }
  (  2)  r106 <- Const { value: 176, size: 1 }
         r107 <- Arith(Sub, r105, r106)
         r111 <- IsZero(r107)
         r114 <- Not(r111)
         r115 <- SetJumpCondition(r114)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r117 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r126 <- Part { src: r87, offset: 0, size: 4 }
         r127 <- Const { value: -16, size: 4 }
         r128 <- Arith(BitAnd, r126, r127)
         r129 <- Part { src: r87, offset: 4, size: 4 }
  (  2)  r130 <- Concat { lo: r128, hi: r129 }
         r137 <- Part { src: r130, offset: 0, size: 1 }
         r138 <- Const { value: 16, size: 1 }
         r139 <- Arith(Sub, r137, r138)
         r143 <- IsZero(r139)
         r146 <- SetJumpCondition(r143)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r148 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r149 <- Part { src: r14, offset: 0, size: 4 }
         r150 <- Part { src: r130, offset: 4, size: 4 }
  (  2)  r151 <- Concat { lo: r149, hi: r150 }
         r152 <- Part { src: r151, offset: 0, size: 4 }
         r153 <- Const { value: 7, size: 4 }
         r154 <- Arith(BitAnd, r152, r153)
         r155 <- Part { src: r151, offset: 4, size: 4 }
  (  4)  r156 <- Concat { lo: r154, hi: r155 }
         r163 <- Part { src: r18, offset: 0, size: 4 }
         r164 <- Part { src: r18, offset: 0, size: 4 }
         r165 <- Arith(BitAnd, r163, r164)
         r167 <- IsZero(r165)
         r172 <- Not(r167)
         r173 <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r175 <- Part { src: r156, offset: 0, size: 1 }
         r176 <- Const { value: 4, size: 1 }
  (  2)  r177 <- Arith(Sub, r175, r176)
         r180 <- SignOf(r177)
         r181 <- IsZero(r177)
         r184 <- Not(r180)
         r185 <- Not(r181)
         r186 <- Bool(And, r184, r185)
         r187 <- SetJumpCondition(r186)
.B5:    ;; preds:B4  → Always(Indirect).
         r189 <- NotYetImplemented("unsupported: movzx eax,al")
         r190 <- Const { value: 6851632, size: 8 }
         r191 <- ArithK(Mul, r156, 8)
         r192 <- Arith(Add, r190, r191)
         r193 <- SetJumpTarget(r192)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r314 <- Part { src: r156, offset: 0, size: 1 }
         r315 <- Const { value: 4, size: 1 }
  (  2)  r316 <- Arith(Sub, r314, r315)
         r319 <- SignOf(r316)
         r320 <- IsZero(r316)
         r323 <- Not(r319)
         r324 <- Not(r320)
         r325 <- Bool(And, r323, r324)
         r326 <- SetJumpCondition(r325)
.B14:    ;; preds:B13  → Always(Indirect).
         r328 <- NotYetImplemented("unsupported: movzx eax,al")
         r329 <- Const { value: 6851712, size: 8 }
         r330 <- ArithK(Mul, r156, 8)
         r331 <- Arith(Add, r329, r330)
         r332 <- SetJumpTarget(r331)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r196 <- Part { src: r18, offset: 0, size: 4 }
         r197 <- Part { src: r18, offset: 0, size: 4 }
  (  3)  r198 <- Arith(BitAnd, r196, r197)
         r200 <- IsZero(r198)
         r205 <- SetJumpCondition(r200)
  (  2)  r206 <- Control(JmpIf(334))
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r213 <- CArg { value: r198, next_arg: None }
         r214 <- CArg { value: r206, next_arg: Some(r213) }
         r215: lpAppendInteger <TypeID(266438v1)> <- Const { value: 5627056, size: 8 }
         r216 <- Call { callee: r215, first_arg: Some(r214) }
         r226 <- Part { src: r216, offset: 0, size: 8 }
         r649 <- Upsilon { value: r226, phi_ref: r641 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r340 <- CArg { value: r198, next_arg: None }
         r341 <- CArg { value: r206, next_arg: Some(r340) }
         r342: lpPrependInteger <TypeID(266449v1)> <- Const { value: 5627360, size: 8 }
         r343 <- Call { callee: r342, first_arg: Some(r341) }
         r353 <- Part { src: r343, offset: 0, size: 8 }
         r646 <- Upsilon { value: r353, phi_ref: r641 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r641 <- Phi
         r227 <- Const { value: 8, size: 8 }
         r228 <- Arith(Add, r227, r13)
         r229 <- StoreMem { mem: r71, addr: r228, value: r641 }
         r647 <- Upsilon { value: r641, phi_ref: r642 }
.B35:    ;; preds:B1  → Always(Undefined).
         r603 <- Const { value: 6982459, size: 4 }
         r606 <- Part { src: r87, offset: 0, size: 4 }
         r607 <- Part { src: r87, offset: 0, size: 4 }
         r608 <- Arith(BitXor, r606, r607)
         r627 <- CArg { value: r106, next_arg: None }
         r628 <- CArg { value: r608, next_arg: Some(r627) }
         r629 <- CArg { value: r603, next_arg: Some(r628) }
         r630: _serverPanic <TypeID(214853v1)> <- Const { value: 4990320, size: 8 }
         r631 <- Call { callee: r630, first_arg: Some(r629) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r250 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r251 <- NotYetImplemented("unsupported: neg edx")
         r256 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r257 <- Part { src: r87, offset: 0, size: 4 }
         r258 <- Const { value: -16, size: 4 }
         r259 <- Arith(BitAnd, r257, r258)
         r260 <- Part { src: r87, offset: 4, size: 4 }
  (  2)  r261 <- Concat { lo: r259, hi: r260 }
         r268 <- Part { src: r261, offset: 0, size: 1 }
         r269 <- Const { value: 16, size: 1 }
         r270 <- Arith(Sub, r268, r269)
         r274 <- IsZero(r270)
         r277 <- SetJumpCondition(r274)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r279 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r280 <- Part { src: r18, offset: 0, size: 4 }
         r281 <- Part { src: r261, offset: 4, size: 4 }
  (  2)  r282 <- Concat { lo: r280, hi: r281 }
         r283 <- Part { src: r282, offset: 0, size: 4 }
         r284 <- Const { value: 7, size: 4 }
         r285 <- Arith(BitAnd, r283, r284)
         r286 <- Part { src: r282, offset: 4, size: 4 }
  (  2)  r287 <- Concat { lo: r285, hi: r286 }
         r294 <- Part { src: r287, offset: 0, size: 1 }
         r295 <- Const { value: 4, size: 1 }
  (  2)  r296 <- Arith(Sub, r294, r295)
         r299 <- SignOf(r296)
         r300 <- IsZero(r296)
         r303 <- Not(r299)
         r304 <- Not(r300)
         r305 <- Bool(And, r303, r304)
         r306 <- SetJumpCondition(r305)
.B12:    ;; preds:B11  → Always(Indirect).
         r308 <- NotYetImplemented("unsupported: movzx eax,al")
         r309 <- Const { value: 6851672, size: 8 }
         r310 <- ArithK(Mul, r287, 8)
         r311 <- Arith(Add, r309, r310)
         r312 <- SetJumpTarget(r311)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  2)  r359 <- Const { value: 32, size: 4 }
  (  2)  r362 <- Part { src: r17, offset: 0, size: 4 }
         r363 <- Const { value: -52, size: 8 }
  (  2)  r364 <- Arith(Add, r363, r65)
         r365 <- StoreMem { mem: r71, addr: r364, value: r362 }
         r376 <- CArg { value: r364, next_arg: None }
         r377 <- CArg { value: r362, next_arg: Some(r376) }
         r378 <- CArg { value: r359, next_arg: Some(r377) }
         r379: ll2string <TypeID(177639v1)> <- Const { value: 4520352, size: 8 }
         r380 <- Call { callee: r379, first_arg: Some(r378) }
         r395 <- CArg { value: r359, next_arg: None }
  (  2)  r396: strlen <TypeID(164962v1)> <- Const { value: 4199136, size: 8 }
         r397 <- Call { callee: r396, first_arg: Some(r395) }
         r407 <- Part { src: r397, offset: 0, size: 8 }
         r412 <- Const { value: -52, size: 8 }
  (  2)  r413 <- Arith(Add, r412, r65)
         r414 <- LoadMem { mem: r365, addr: r413, size: 4 }
         r415 <- Part { src: r17, offset: 4, size: 4 }
         r425 <- CArg { value: r396, next_arg: None }
         r426 <- CArg { value: r415, next_arg: Some(r425) }
         r427 <- CArg { value: r413, next_arg: Some(r426) }
         r428 <- CArg { value: r414, next_arg: Some(r427) }
         r429: quicklistPush <TypeID(164114v1)> <- Const { value: 4293744, size: 8 }
         r430 <- Call { callee: r429, first_arg: Some(r428) }
         r644 <- Upsilon { value: r407, phi_ref: r642 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r642 <- Phi
         r248 <- SetReturnValue(r642)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) } [r10, r11, r13, r14, r15, r16, r17, r18, r23, r43, r51, r52, r65, r66, r68, r69, r70, r71, r82, r83, r84, r85, r86, r87, r94, r95, r96, r100, r103]
  BlockID(1) -> Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) } [r105, r106, r107, r111, r114, r115]
  BlockID(2) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) } [r117, r126, r127, r128, r129, r130, r137, r138, r139, r143, r146]
  BlockID(3) -> Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) } [r148, r149, r150, r151, r152, r153, r154, r155, r156, r163, r164, r165, r167, r172, r173]
  BlockID(4) -> Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) } [r175, r176, r177, r180, r181, r184, r185, r186, r187]
  BlockID(5) -> Always(Indirect) [r189, r190, r191, r192, r193]
  BlockID(6) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) } [r196, r197, r198, r200, r205, r206]
  BlockID(7) -> Always(Block(BlockID(8))) [r213, r214, r215, r216, r226, r649]
  BlockID(8) -> Always(Block(BlockID(9))) [r641, r227, r228, r229, r647]
  BlockID(9) -> Always(Return) [r642, r248]
  BlockID(10) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) } [r250, r251, r256, r257, r258, r259, r260, r261, r268, r269, r270, r274, r277]
  BlockID(11) -> Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) } [r279, r280, r281, r282, r283, r284, r285, r286, r287, r294, r295, r296, r299, r300, r303, r304, r305, r306]
  BlockID(12) -> Always(Indirect) [r308, r309, r310, r311, r312]
  BlockID(13) -> Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) } [r314, r315, r316, r319, r320, r323, r324, r325, r326]
  BlockID(14) -> Always(Indirect) [r328, r329, r330, r331, r332]
  BlockID(15) -> Always(Block(BlockID(8))) [r340, r341, r342, r343, r353, r646]
  BlockID(16) -> Always(Block(BlockID(9))) [r359, r362, r363, r364, r365, r376, r377, r378, r379, r380, r395, r396, r397, r407, r412, r413, r414, r415, r425, r426, r427, r428, r429, r430, r644]
  BlockID(17) -> Always(Undefined) []
  BlockID(18) -> Always(Undefined) []
  BlockID(19) -> Always(Undefined) []
  BlockID(20) -> Always(Undefined) [r485]
  BlockID(21) -> Always(Undefined) [r487]
  BlockID(22) -> Always(Undefined) [r489]
  BlockID(23) -> Always(Undefined) [r500]
  BlockID(24) -> Always(Undefined) [r516]
  BlockID(25) -> Always(Undefined) [r528]
  BlockID(26) -> Always(Undefined) [r530]
  BlockID(27) -> Always(Undefined) []
  BlockID(28) -> Always(Undefined) []
  BlockID(29) -> Always(Undefined) [r558]
  BlockID(30) -> Always(Undefined) [r579]
  BlockID(31) -> Always(Undefined) [r581]
  BlockID(32) -> Always(Undefined) [r583]
  BlockID(33) -> Always(Undefined) []
  BlockID(34) -> Always(Undefined) []
  BlockID(35) -> Always(Undefined) [r603, r606, r607, r608, r627, r628, r629, r630, r631]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  |  |  BlockID(3)
    |  |  |  |  BlockID(4)
    |  |  |  |  |  BlockID(5)
    |  |  |  |  BlockID(13)
    |  |  |  |  |  BlockID(14)
    |  |  |  BlockID(6)
    |  |  |  |  BlockID(7)
    |  |  |  |  BlockID(8)
    |  |  |  |  BlockID(15)
    |  |  BlockID(35)
    |  BlockID(9)
    |  BlockID(10)
    |  |  BlockID(11)
    |  |  |  BlockID(12)
    |  |  BlockID(16)
    BlockID(17)
    BlockID(18)
    BlockID(19)
    BlockID(20)
    BlockID(21)
    BlockID(22)
    BlockID(23)
    BlockID(24)
    BlockID(25)
    BlockID(26)
    BlockID(27)
    BlockID(28)
    BlockID(29)
    BlockID(30)
    BlockID(31)
    BlockID(32)
    BlockID(33)
    BlockID(34)

ssa post-xform:
ssa program  655 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(10)), neg: Block(BlockID(1)) }.
         r10 <- Ancestral(AncestralName("RBP"))
  (  6)  r11 <- Ancestral(AncestralName("RSP"))
         r13 <- Ancestral(AncestralName("RDI"))
  (  2)  r14 <- Ancestral(AncestralName("RSI"))
  (  8)  r15 <- Ancestral(AncestralName("RAX"))
         r16 <- Ancestral(AncestralName("RBX"))
  (  3)  r17 <- Ancestral(AncestralName("RCX"))
  (  6)  r18 <- Ancestral(AncestralName("RDX"))
         r23 <- Ancestral(AncestralName("R12"))
         r43 <- Ancestral(AncestralName("memory"))
         r51 <- Undefined
         r52 <- Undefined
         r65 <- ArithK(Add, r11, -8)
         r66 <- StoreMem { mem: r43, addr: r65, value: r10 }
         r68 <- ArithK(Add, r11, -16)
         r69 <- StoreMem { mem: r66, addr: r68, value: r23 }
         r70 <- ArithK(Add, r11, -24)
  (  2)  r71 <- StoreMem { mem: r69, addr: r70, value: r16 }
         r82 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rdi]")
         r83 <- Part { src: r15, offset: 0, size: 4 }
         r84 <- Const { value: -16, size: 4 }
  (  9)  r85 <- ArithK(BitAnd, r83, -16)
         r86 <- Part { src: r15, offset: 4, size: 4 }
         r87 <- Concat { lo: r85, hi: r86 }
         r94 <- Part { src: r85, offset: 0, size: 1 }
         r95 <- Const { value: 144, size: 1 }
         r96 <- ArithK(Add, r94, -144)
         r100 <- IsZero(r96)
         r103 <- SetJumpCondition(r100)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(35)), neg: Block(BlockID(2)) }.
         r105 <- Part { src: r85, offset: 0, size: 1 }
         r106 <- Const { value: 176, size: 1 }
         r107 <- ArithK(Add, r105, -176)
         r111 <- IsZero(r107)
         r114 <- Not(r111)
         r115 <- SetJumpCondition(r114)
.B2:    ;; preds:B1  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(3)) }.
         r117 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r126 <- Get(r85)
         r127 <- Const { value: -16, size: 4 }
  (  2)  r128 <- ArithK(BitAnd, r85, -16)
         r129 <- Part { src: r15, offset: 4, size: 4 }
         r130 <- Concat { lo: r128, hi: r129 }
         r137 <- Part { src: r128, offset: 0, size: 1 }
         r138 <- Const { value: 16, size: 1 }
         r139 <- ArithK(Add, r137, -16)
         r143 <- IsZero(r139)
         r146 <- SetJumpCondition(r143)
.B3:    ;; preds:B2  → Conditional { pos: Block(BlockID(13)), neg: Block(BlockID(4)) }.
         r148 <- NotYetImplemented("unsupported: movzx esi,byte ptr [rcx-1]")
         r149 <- Part { src: r14, offset: 0, size: 4 }
         r150 <- Part { src: r15, offset: 4, size: 4 }
         r151 <- Concat { lo: r149, hi: r150 }
         r152 <- Part { src: r14, offset: 0, size: 4 }
         r153 <- Const { value: 7, size: 4 }
  (  3)  r154 <- ArithK(BitAnd, r152, 7)
         r155 <- Part { src: r15, offset: 4, size: 4 }
  (  2)  r156 <- Concat { lo: r154, hi: r155 }
         r163 <- Part { src: r18, offset: 0, size: 4 }
         r164 <- Part { src: r18, offset: 0, size: 4 }
         r165 <- Arith(BitAnd, r163, r164)
         r167 <- IsZero(r165)
         r172 <- Not(r167)
         r173 <- SetJumpCondition(r172)
.B4:    ;; preds:B3  → Conditional { pos: Ext(4203597), neg: Block(BlockID(5)) }.
         r175 <- Part { src: r154, offset: 0, size: 1 }
         r176 <- Const { value: 4, size: 1 }
  (  2)  r177 <- ArithK(Add, r175, -4)
         r180 <- SignOf(r177)
         r181 <- IsZero(r177)
         r184 <- Not(r180)
         r185 <- Not(r181)
         r186 <- Bool(And, r184, r185)
         r187 <- SetJumpCondition(r186)
.B5:    ;; preds:B4  → Always(Indirect).
         r189 <- NotYetImplemented("unsupported: movzx eax,al")
         r190 <- Const { value: 6851632, size: 8 }
         r191 <- ArithK(Mul, r156, 8)
         r192 <- ArithK(Add, r191, 6851632)
         r193 <- SetJumpTarget(r192)
.B13:    ;; preds:B3  → Conditional { pos: Ext(4203604), neg: Block(BlockID(14)) }.
         r314 <- Part { src: r154, offset: 0, size: 1 }
         r315 <- Const { value: 4, size: 1 }
  (  2)  r316 <- ArithK(Add, r314, -4)
         r319 <- SignOf(r316)
         r320 <- IsZero(r316)
         r323 <- Not(r319)
         r324 <- Not(r320)
         r325 <- Bool(And, r323, r324)
         r326 <- SetJumpCondition(r325)
.B14:    ;; preds:B13  → Always(Indirect).
         r328 <- NotYetImplemented("unsupported: movzx eax,al")
         r329 <- Const { value: 6851712, size: 8 }
         r330 <- ArithK(Mul, r156, 8)
         r331 <- ArithK(Add, r330, 6851712)
         r332 <- SetJumpTarget(r331)
.B6:    ;; preds:B2  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(7)) }.
         r196 <- Part { src: r18, offset: 0, size: 4 }
         r197 <- Part { src: r18, offset: 0, size: 4 }
  (  3)  r198 <- Arith(BitAnd, r196, r197)
         r200 <- IsZero(r198)
         r205 <- SetJumpCondition(r200)
  (  2)  r206 <- Control(JmpIf(334))
.B7:    ;; preds:B6  → Always(Block(BlockID(8))).
         r213 <- CArg { value: r198, next_arg: None }
         r214 <- CArg { value: r206, next_arg: Some(r213) }
         r215: lpAppendInteger <TypeID(266438v1)> <- Const { value: 5627056, size: 8 }
  (  2)  r216 <- Call { callee: r215, first_arg: Some(r214) }
         r226 <- Get(r216)
         r649 <- Upsilon { value: r216, phi_ref: r641 }
.B15:    ;; preds:B6  → Always(Block(BlockID(8))).
         r340 <- CArg { value: r198, next_arg: None }
         r341 <- CArg { value: r206, next_arg: Some(r340) }
         r342: lpPrependInteger <TypeID(266449v1)> <- Const { value: 5627360, size: 8 }
  (  2)  r343 <- Call { callee: r342, first_arg: Some(r341) }
         r353 <- Get(r343)
         r646 <- Upsilon { value: r343, phi_ref: r641 }
.B8:    ;; preds:B7,B15  → Always(Block(BlockID(9))).
  (  2)  r641 <- Phi
         r227 <- Const { value: 8, size: 8 }
         r228 <- ArithK(Add, r13, 8)
         r229 <- StoreMem { mem: r71, addr: r228, value: r641 }
         r647 <- Upsilon { value: r641, phi_ref: r642 }
.B35:    ;; preds:B1  → Always(Undefined).
         r603 <- Const { value: 6982459, size: 4 }
         r606 <- Get(r85)
         r607 <- Get(r85)
         r608 <- Const { value: 0, size: 4 }
         r627 <- CArg { value: r106, next_arg: None }
         r628 <- CArg { value: r608, next_arg: Some(r627) }
         r629 <- CArg { value: r603, next_arg: Some(r628) }
         r630: _serverPanic <TypeID(214853v1)> <- Const { value: 4990320, size: 8 }
         r631 <- Call { callee: r630, first_arg: Some(r629) }
.B10:    ;; preds:B0  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(11)) }.
         r250 <- NotYetImplemented("unsupported: movzx eax,byte ptr [rsi]")
         r251 <- NotYetImplemented("unsupported: neg edx")
         r256 <- NotYetImplemented("unsupported: sbb ecx,ecx")
         r257 <- Get(r85)
         r258 <- Const { value: -16, size: 4 }
  (  2)  r259 <- ArithK(BitAnd, r85, -16)
         r260 <- Part { src: r15, offset: 4, size: 4 }
         r261 <- Concat { lo: r259, hi: r260 }
         r268 <- Part { src: r259, offset: 0, size: 1 }
         r269 <- Const { value: 16, size: 1 }
         r270 <- ArithK(Add, r268, -16)
         r274 <- IsZero(r270)
         r277 <- SetJumpCondition(r274)
.B11:    ;; preds:B10  → Conditional { pos: Ext(4203590), neg: Block(BlockID(12)) }.
         r279 <- NotYetImplemented("unsupported: movzx edx,byte ptr [rdi-1]")
         r280 <- Part { src: r18, offset: 0, size: 4 }
         r281 <- Part { src: r15, offset: 4, size: 4 }
         r282 <- Concat { lo: r280, hi: r281 }
         r283 <- Part { src: r18, offset: 0, size: 4 }
         r284 <- Const { value: 7, size: 4 }
  (  2)  r285 <- ArithK(BitAnd, r283, 7)
         r286 <- Part { src: r15, offset: 4, size: 4 }
         r287 <- Concat { lo: r285, hi: r286 }
         r294 <- Part { src: r285, offset: 0, size: 1 }
         r295 <- Const { value: 4, size: 1 }
  (  2)  r296 <- ArithK(Add, r294, -4)
         r299 <- SignOf(r296)
         r300 <- IsZero(r296)
         r303 <- Not(r299)
         r304 <- Not(r300)
         r305 <- Bool(And, r303, r304)
         r306 <- SetJumpCondition(r305)
.B12:    ;; preds:B11  → Always(Indirect).
         r308 <- NotYetImplemented("unsupported: movzx eax,al")
         r309 <- Const { value: 6851672, size: 8 }
         r310 <- ArithK(Mul, r287, 8)
         r311 <- ArithK(Add, r310, 6851672)
         r312 <- SetJumpTarget(r311)
.B16:    ;; preds:B10  → Always(Block(BlockID(9))).
  (  2)  r359 <- Const { value: 32, size: 4 }
  (  2)  r362 <- Part { src: r17, offset: 0, size: 4 }
         r363 <- Const { value: -52, size: 8 }
  (  2)  r364 <- ArithK(Add, r11, -60)
         r365 <- StoreMem { mem: r71, addr: r364, value: r362 }
         r376 <- CArg { value: r364, next_arg: None }
         r377 <- CArg { value: r362, next_arg: Some(r376) }
         r378 <- CArg { value: r359, next_arg: Some(r377) }
         r379: ll2string <TypeID(177639v1)> <- Const { value: 4520352, size: 8 }
         r380 <- Call { callee: r379, first_arg: Some(r378) }
         r395 <- CArg { value: r359, next_arg: None }
  (  2)  r396: strlen <TypeID(164962v1)> <- Const { value: 4199136, size: 8 }
  (  2)  r397 <- Call { callee: r396, first_arg: Some(r395) }
         r407 <- Get(r397)
         r412 <- Const { value: -52, size: 8 }
         r413 <- ArithK(Add, r11, -60)
  (  3)  r651 <- Part { src: r17, offset: 0, size: 4 }
         r652 <- ArithK(Add, r11, -56)
         r654 <- Get(r651)
         r414 <- Get(r651)
         r415 <- Part { src: r17, offset: 4, size: 4 }
         r425 <- CArg { value: r396, next_arg: None }
         r426 <- CArg { value: r415, next_arg: Some(r425) }
         r427 <- CArg { value: r413, next_arg: Some(r426) }
         r428 <- CArg { value: r651, next_arg: Some(r427) }
         r429: quicklistPush <TypeID(164114v1)> <- Const { value: 4293744, size: 8 }
         r430 <- Call { callee: r429, first_arg: Some(r428) }
         r644 <- Upsilon { value: r397, phi_ref: r642 }
.B9:    ;; preds:B8,B16  → Always(Return).
         r642 <- Phi
         r248 <- SetReturnValue(r642)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  [pre:RSP - 16]:* := pre:R12;
  [pre:RSP - 24]:* := pre:RBX;
  TODO /* unsupported: movzx eax,byte ptr [rdi] */;
  let r85: Bytes(4) = pre:RAX[4 .. 0] & -16;
  ;
  if IsZero (r85[1 .. 0] - 144) {
    TODO /* unsupported: movzx eax,byte ptr [rsi] */;
    TODO /* unsupported: neg edx */;
    TODO /* unsupported: sbb ecx,ecx */;
    let r259: Bytes(4) = r85 & -16;
    ;
    if IsZero (r259[1 .. 0] - 16) {
      let r362: Bytes(4) = pre:RCX[4 .. 0];
      let r364: Bytes(8) = pre:RSP - 60;
      [r364]:* := r362;
      ll2string(32,
                r362,
                r364);
      let r397: Bytes(8) = strlen(32);
      let r651: Bytes(4) = pre:RCX[4 .. 0];
      quicklistPush(r651,
                    (pre:RSP - 60),
                    pre:RCX[8 .. 4],
                    4199136);
      r642 := strlen(32);
      goto T9
    }
    TODO /* unsupported: movzx edx,byte ptr [rdi-1] */;
    let r285: Bytes(4) = pre:RDX[4 .. 0] & 7;
    let r296: Bytes(1) = r285[1 .. 0] - 4;
    ;
    if ! SignOf (r296) AND ! IsZero (r296) {
      goto ext 0x402446
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (pre:RAX[8 .. 4] ++ r285 * 8 + 6851672).*
  }
  ;
  if ! IsZero (r85[1 .. 0] - 176) {
    _serverPanic(6982459,
                 0,
                 176);
    goto undefined /* warning: due to decompiler bug or limitation */
  }
  TODO /* unsupported: movzx eax,byte ptr [rsi] */;
  let r128: Bytes(4) = r85 & -16;
  ;
  if IsZero (r128[1 .. 0] - 16) {
    let r198: Bytes(4) = pre:RDX[4 .. 0] & pre:RDX[4 .. 0];
    ;
    let r206: Control = /* warning: unexpected Control */ JmpIf(334);
    if IsZero (r198) {
      let r343: Bytes(8) = lpPrependInteger(r206,
                                            r198);
      r641 := lpPrependInteger(r206,
                               r198);
      goto T8
    }
    let r216: Bytes(8) = lpAppendInteger(r206,
                                         r198);
    r641 := lpAppendInteger(r206,
                            r198);
    goto T8
    T8: {
      let mut r641: Bytes(8);
      [pre:RDI + 8]:* := r641;
      r642 := phi ();
      goto T9
    }
  
  }
  TODO /* unsupported: movzx esi,byte ptr [rcx-1] */;
  let r154: Bytes(4) = pre:RSI[4 .. 0] & 7;
  let r156: Bytes(8) = pre:RAX[8 .. 4] ++ r154;
  ;
  if ! IsZero (pre:RDX[4 .. 0] & pre:RDX[4 .. 0]) {
    let r316: Bytes(1) = r154[1 .. 0] - 4;
    ;
    if ! SignOf (r316) AND ! IsZero (r316) {
      goto ext 0x402454
    }
    TODO /* unsupported: movzx eax,al */;
    ;
    goto (r156 * 8 + 6851712).*
  }
  let r177: Bytes(1) = r154[1 .. 0] - 4;
  ;
  if ! SignOf (r177) AND ! IsZero (r177) {
    goto ext 0x40244d
  }
  TODO /* unsupported: movzx eax,al */;
  ;
  goto (r156 * 8 + 6851632).*
  T9: {
    let mut r642: Bytes(8);
    ;
    return r642
  }

}
