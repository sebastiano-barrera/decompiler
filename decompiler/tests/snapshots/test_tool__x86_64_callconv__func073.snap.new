---
source: decompiler/tests/test_tool.rs
assertion_line: 83
expression: out
---
func073 0x40126c+7 (file 0x126c)
          40126c: 4c 89 ca                mov rdx,r9
          40126f: 4c 89 c0                mov rax,r8
          401272: c3                      ret

function type: "func073" func (arg0 *void <TypeID(1v1)>,
                               arg1 *void <TypeID(1v1)>,
                               arg2 small <TypeID(785v1)>,
                               arg3 small <TypeID(785v1)>) small <TypeID(785v1)>
0 warnings.


mil program = 
program  65 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
   45 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   46 r15: TypeID(2v1) <- Get(r46)
   47 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
   48 r48: TypeID(2v1) <- Part { src: r47, offset: 0, size: 8 }
   49 r19: TypeID(2v1) <- Get(r48)
   50 r49: TypeID(2v1) <- Part { src: r47, offset: 8, size: 8 }
   51 r18: TypeID(2v1) <- Get(r49)
   52 r50: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
   53 r51: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
   54 r20: TypeID(2v1) <- Get(r51)
   55 r52: TypeID(2v1) <- Part { src: r50, offset: 8, size: 8 }
   56 r21: TypeID(2v1) <- Get(r52)
0x40126c:
   57 r19: TypeID(2v1) <- Get(r21)
0x40126f:
   58 r16: TypeID(2v1) <- Get(r20)
0x401272:
   59 r45: TypeID(2v1) <- Void
   60 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   61 r45: TypeID(2v1) <- Concat { lo: r45, hi: r19 }
   62 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 16 }
   63 r47: TypeID(2v1) <- SetReturnValue(r45)
   64 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  65 instrs
.B0:    ;;  → Always(Return).
  (  2)  r52: ? <- Ancestral(AncestralName("arg3"))
         r53: ? <- Part { src: r52, offset: 0, size: 8 }
         r55: ? <- Part { src: r52, offset: 8, size: 8 }
         r60: ? <- Concat { lo: r59, hi: r53 }
         r61: ? <- Concat { lo: r60, hi: r55 }
         r62: ? <- Part { src: r61, offset: 0, size: 16 }
         r63: ? <- SetReturnValue(r62)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r52, r53, r55, r59, r60, r61, r62, r63]
  domtree:
    BlockID(0)

ssa post-xform:
fold_subregs: Part { src: r52, offset: 0, size: 8 }
fold_subregs: Part { src: r52, offset: 8, size: 8 }
fold_subregs: Part { src: r61, offset: 0, size: 16 }
fold_subregs: Part { src: r52, offset: 0, size: 8 }
fold_subregs: Part { src: r52, offset: 8, size: 8 }
ssa program  65 instrs
.B0:    ;;  → Always(Return).
  (  2)  r52: ? <- Ancestral(AncestralName("arg3"))
         r53: ? <- Part { src: r52, offset: 0, size: 8 }
         r55: ? <- Part { src: r52, offset: 8, size: 8 }
         r61: ? <- Concat { lo: r53, hi: r55 }
         r63: ? <- SetReturnValue(r61)



T0: {
  ;
  return pre:arg3[16 .. 8] ++ pre:arg3[8 .. 0]
}
