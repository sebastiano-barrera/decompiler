---
source: decompiler/tests/test_tool.rs
assertion_line: 83
expression: out
---
func032 0x40119c+8 (file 0x119c)
          40119c: 48 89 c8                mov rax,rcx
          40119f: 48 c1 e8 20             shr rax,20h
          4011a3: c3                      ret

function type: "func032" func (arg0 small <TypeID(785v1)>,
                               arg1 small <TypeID(785v1)>) uint8_t <TypeID(789v1)>
0 warnings.


mil program = 
program  67 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r46: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
   45 r14: TypeID(2v1) <- Get(r46)
   46 r47: TypeID(2v1) <- Part { src: r45, offset: 8, size: 8 }
   47 r15: TypeID(2v1) <- Get(r47)
   48 r48: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
   49 r49: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
   50 r19: TypeID(2v1) <- Get(r49)
   51 r50: TypeID(2v1) <- Part { src: r48, offset: 8, size: 8 }
   52 r18: TypeID(2v1) <- Get(r50)
0x40119c:
   53 r16: TypeID(2v1) <- Get(r18)
0x40119f:
   54 r46: TypeID(2v1) <- Const { value: 32, size: 1 }
   55 r46: TypeID(2v1) <- Widen { reg: r46, target_size: 8, sign: false }
   56 r16: TypeID(2v1) <- Arith(Shr, r16, r46)
   57 r16: TypeID(2v1) <- Get(r16)
   58 r6: TypeID(2v1) <- SignOf(r16)
   59 r5: TypeID(2v1) <- IsZero(r16)
   60 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
   61 r3: TypeID(2v1) <- Parity(r47)
0x4011a3:
   62 r45: TypeID(2v1) <- Void
   63 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
   64 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
   65 r47: TypeID(2v1) <- SetReturnValue(r45)
   66 r47: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  67 instrs
.B0:    ;;  → Always(Return).
         r48: ? <- Ancestral(AncestralName("arg1"))
         r51: ? <- Part { src: r48, offset: 8, size: 8 }
         r54: ? <- Const { value: 32, size: 1 }
         r55: ? <- Widen { reg: r54, target_size: 8, sign: false }
         r56: ? <- Arith(Shr, r51, r55)
         r63: ? <- Concat { lo: r62, hi: r56 }
         r64: ? <- Part { src: r63, offset: 0, size: 1 }
         r65: ? <- SetReturnValue(r64)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r48, r51, r54, r55, r56, r62, r63, r64, r65]
  domtree:
    BlockID(0)

ssa post-xform:
fold_subregs: Part { src: r48, offset: 8, size: 8 }
fold_subregs: Part { src: r56, offset: 0, size: 1 }
fold_subregs: Part { src: r48, offset: 8, size: 8 }
fold_subregs: Part { src: r56, offset: 0, size: 1 }
ssa program  67 instrs
.B0:    ;;  → Always(Return).
         r48: ? <- Ancestral(AncestralName("arg1"))
         r51: ? <- Part { src: r48, offset: 8, size: 8 }
         r54: ? <- Const { value: 32, size: 1 }
         r55: ? <- Widen { reg: r54, target_size: 8, sign: false }
         r56: ? <- Arith(Shr, r51, r55)
         r64: ? <- Part { src: r56, offset: 0, size: 1 }
         r65: ? <- SetReturnValue(r64)



T0: {
  ;
  return (pre:arg1[16 .. 8] >> 32 as u64)[1 .. 0]
}
