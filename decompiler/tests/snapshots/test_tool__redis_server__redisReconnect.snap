---
source: decompiler/tests/test_tool.rs
expression: out
---
 --- mil
program  568 instrs
    0 r12 <- Ancestral { anc_name: AncestralName("stack_bottom"), reg_type: Bytes(8) }
    1 r3 <- Ancestral { anc_name: AncestralName("PF"), reg_type: Bool }
    2 r4 <- Ancestral { anc_name: AncestralName("AF"), reg_type: Bool }
    3 r5 <- Ancestral { anc_name: AncestralName("ZF"), reg_type: Bool }
    4 r6 <- Ancestral { anc_name: AncestralName("SF"), reg_type: Bool }
    5 r7 <- Ancestral { anc_name: AncestralName("TF"), reg_type: Bool }
    6 r8 <- Ancestral { anc_name: AncestralName("IF"), reg_type: Bool }
    7 r9 <- Ancestral { anc_name: AncestralName("DF"), reg_type: Bool }
    8 r10 <- Ancestral { anc_name: AncestralName("OF"), reg_type: Bool }
    9 r11 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
   10 r12 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
   11 r13 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
   12 r14 <- Ancestral { anc_name: AncestralName("RDI"), reg_type: Bytes(8) }
   13 r15 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
   14 r16 <- Ancestral { anc_name: AncestralName("RAX"), reg_type: Bytes(8) }
   15 r17 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
   16 r18 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
   17 r19 <- Ancestral { anc_name: AncestralName("RDX"), reg_type: Bytes(8) }
   18 r20 <- Ancestral { anc_name: AncestralName("R8"), reg_type: Bytes(8) }
   19 r21 <- Ancestral { anc_name: AncestralName("R9"), reg_type: Bytes(8) }
   20 r22 <- Ancestral { anc_name: AncestralName("R10"), reg_type: Bytes(8) }
   21 r23 <- Ancestral { anc_name: AncestralName("R11"), reg_type: Bytes(8) }
   22 r24 <- Ancestral { anc_name: AncestralName("R12"), reg_type: Bytes(8) }
   23 r25 <- Ancestral { anc_name: AncestralName("R13"), reg_type: Bytes(8) }
   24 r26 <- Ancestral { anc_name: AncestralName("R14"), reg_type: Bytes(8) }
   25 r27 <- Ancestral { anc_name: AncestralName("R15"), reg_type: Bytes(8) }
   26 r28 <- Ancestral { anc_name: AncestralName("ZMM0"), reg_type: Bytes(64) }
   27 r29 <- Ancestral { anc_name: AncestralName("ZMM1"), reg_type: Bytes(64) }
   28 r30 <- Ancestral { anc_name: AncestralName("ZMM2"), reg_type: Bytes(64) }
   29 r31 <- Ancestral { anc_name: AncestralName("ZMM3"), reg_type: Bytes(64) }
   30 r32 <- Ancestral { anc_name: AncestralName("ZMM4"), reg_type: Bytes(64) }
   31 r33 <- Ancestral { anc_name: AncestralName("ZMM5"), reg_type: Bytes(64) }
   32 r34 <- Ancestral { anc_name: AncestralName("ZMM6"), reg_type: Bytes(64) }
   33 r35 <- Ancestral { anc_name: AncestralName("ZMM7"), reg_type: Bytes(64) }
   34 r36 <- Ancestral { anc_name: AncestralName("ZMM8"), reg_type: Bytes(64) }
   35 r37 <- Ancestral { anc_name: AncestralName("ZMM9"), reg_type: Bytes(64) }
   36 r38 <- Ancestral { anc_name: AncestralName("ZMM10"), reg_type: Bytes(64) }
   37 r39 <- Ancestral { anc_name: AncestralName("ZMM11"), reg_type: Bytes(64) }
   38 r40 <- Ancestral { anc_name: AncestralName("ZMM12"), reg_type: Bytes(64) }
   39 r41 <- Ancestral { anc_name: AncestralName("ZMM13"), reg_type: Bytes(64) }
   40 r42 <- Ancestral { anc_name: AncestralName("ZMM14"), reg_type: Bytes(64) }
   41 r43 <- Ancestral { anc_name: AncestralName("ZMM15"), reg_type: Bytes(64) }
   42 r45 <- FuncArgument { index: 0, reg_type: Bytes(8) }
   43 r14 <- Get(r45)
0x595020:
   44 r12 <- ArithK(Add, r12, -8)
   45 r46 <- StoreMem { addr: r12, value: r11 }
0x595021:
   46 r45 <- Const { value: 12, size: 8 }
   47 r45 <- Arith(Add, r45, r14)
   48 r11 <- Get(r45)
0x595025:
   49 r12 <- ArithK(Add, r12, -8)
   50 r46 <- StoreMem { addr: r12, value: r17 }
0x595026:
   51 r17 <- Get(r14)
0x595029:
   52 r46 <- Const { value: 8, size: 8 }
   53 r12 <- Arith(Sub, r12, r46)
   54 r12 <- Get(r12)
   55 r10 <- OverflowOf(r12)
   56 r2 <- CarryOf(r12)
   57 r6 <- SignOf(r12)
   58 r5 <- IsZero(r12)
   59 r47 <- Part { src: r12, offset: 0, size: 1 }
   60 r3 <- Parity(r47)
0x59502d:
   61 r45 <- Const { value: 0, size: 4 }
   62 r46 <- Const { value: 8, size: 8 }
   63 r46 <- Arith(Add, r46, r14)
   64 r46 <- StoreMem { addr: r46, value: r45 }
0x595034:
   65 r14 <- Get(r11)
0x595037:
   66 r45 <- Const { value: 4199136, size: 8 }
   67 r47 <- Void
   68 r47 <- Get(r14)
   69 r46 <- CArg { value: r47, next_arg: None }
   70 r46 <- Call { callee: r45, first_arg: Some(r46) }
   71 r2 <- UndefinedBool
   72 r3 <- UndefinedBool
   73 r4 <- UndefinedBool
   74 r5 <- UndefinedBool
   75 r6 <- UndefinedBool
   76 r7 <- UndefinedBool
   77 r8 <- UndefinedBool
   78 r9 <- UndefinedBool
   79 r10 <- UndefinedBool
   80 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59503c:
   81 r14 <- Get(r11)
0x59503f:
   82 r46 <- Part { src: r15, offset: 0, size: 4 }
   83 r48 <- Part { src: r15, offset: 0, size: 4 }
   84 r46 <- Arith(BitXor, r46, r48)
   85 r49 <- Part { src: r15, offset: 4, size: 4 }
   86 r15 <- Concat { lo: r46, hi: r49 }
   87 r10 <- False
   88 r2 <- False
   89 r6 <- SignOf(r46)
   90 r5 <- IsZero(r46)
   91 r50 <- Part { src: r46, offset: 0, size: 1 }
   92 r3 <- Parity(r50)
0x595041:
   93 r19 <- Get(r16)
0x595044:
   94 r45 <- Const { value: 4199488, size: 8 }
   95 r46 <- Call { callee: r45, first_arg: None }
   96 r2 <- UndefinedBool
   97 r3 <- UndefinedBool
   98 r4 <- UndefinedBool
   99 r5 <- UndefinedBool
  100 r6 <- UndefinedBool
  101 r7 <- UndefinedBool
  102 r8 <- UndefinedBool
  103 r9 <- UndefinedBool
  104 r10 <- UndefinedBool
0x595049:
  105 r46 <- Const { value: 256, size: 8 }
  106 r46 <- Arith(Add, r46, r17)
  107 r45 <- LoadMem { addr: r46, size: 8 }
  108 r14 <- Get(r45)
0x595050:
  109 r14 <- Arith(BitAnd, r14, r14)
  110 r6 <- SignOf(r14)
  111 r5 <- IsZero(r14)
  112 r47 <- Part { src: r14, offset: 0, size: 1 }
  113 r3 <- Parity(r14)
  114 r2 <- False
  115 r10 <- False
0x595053:
  116 r45 <- SetJumpCondition(r5)
  117 r45 <- Control(JmpExtIf(5853294))
0x595055:
  118 r46 <- Const { value: 0, size: 8 }
  119 r46 <- Arith(Add, r46, r17)
  120 r45 <- LoadMem { addr: r46, size: 8 }
  121 r16 <- Get(r45)
0x595058:
  122 r46 <- Const { value: 8, size: 8 }
  123 r46 <- Arith(Add, r46, r16)
  124 r45 <- LoadMem { addr: r46, size: 8 }
  125 r19 <- Get(r45)
0x59505c:
  126 r19 <- Arith(BitAnd, r19, r19)
  127 r6 <- SignOf(r19)
  128 r5 <- IsZero(r19)
  129 r47 <- Part { src: r19, offset: 0, size: 1 }
  130 r3 <- Parity(r19)
  131 r2 <- False
  132 r10 <- False
0x59505f:
  133 r45 <- SetJumpCondition(r5)
  134 r45 <- Control(JmpExtIf(5853302))
0x595061:
  135 r46 <- CArg { value: r18, next_arg: None }
  136 r46 <- CArg { value: r19, next_arg: Some(r46) }
  137 r46 <- CArg { value: r15, next_arg: Some(r46) }
  138 r46 <- CArg { value: r14, next_arg: Some(r46) }
  139 r46 <- Call { callee: r19, first_arg: Some(r46) }
  140 r2 <- UndefinedBool
  141 r3 <- UndefinedBool
  142 r4 <- UndefinedBool
  143 r5 <- UndefinedBool
  144 r6 <- UndefinedBool
  145 r7 <- UndefinedBool
  146 r8 <- UndefinedBool
  147 r9 <- UndefinedBool
  148 r10 <- UndefinedBool
  149 r46 <- Get(r16)
0x595063:
  150 r45 <- Const { value: 0, size: 8 }
  151 r46 <- Const { value: 256, size: 8 }
  152 r46 <- Arith(Add, r46, r17)
  153 r46 <- StoreMem { addr: r46, value: r45 }
0x59506e:
  154 r46 <- Const { value: 0, size: 8 }
  155 r46 <- Arith(Add, r46, r17)
  156 r45 <- LoadMem { addr: r46, size: 8 }
  157 r16 <- Get(r45)
0x595071:
  158 r16 <- Arith(BitAnd, r16, r16)
  159 r6 <- SignOf(r16)
  160 r5 <- IsZero(r16)
  161 r47 <- Part { src: r16, offset: 0, size: 1 }
  162 r3 <- Parity(r16)
  163 r2 <- False
  164 r10 <- False
0x595074:
  165 r45 <- SetJumpCondition(r5)
  166 r45 <- Control(JmpExtIf(5853315))
0x595076:
  167 r46 <- Const { value: 0, size: 8 }
  168 r46 <- Arith(Add, r46, r16)
  169 r45 <- LoadMem { addr: r46, size: 8 }
  170 r16 <- Get(r45)
0x595079:
  171 r16 <- Arith(BitAnd, r16, r16)
  172 r6 <- SignOf(r16)
  173 r5 <- IsZero(r16)
  174 r47 <- Part { src: r16, offset: 0, size: 1 }
  175 r3 <- Parity(r16)
  176 r2 <- False
  177 r10 <- False
0x59507c:
  178 r45 <- SetJumpCondition(r5)
  179 r45 <- Control(JmpExtIf(5853315))
0x59507e:
  180 r14 <- Get(r17)
0x595081:
  181 r46 <- CArg { value: r18, next_arg: None }
  182 r46 <- CArg { value: r19, next_arg: Some(r46) }
  183 r46 <- CArg { value: r15, next_arg: Some(r46) }
  184 r46 <- CArg { value: r14, next_arg: Some(r46) }
  185 r46 <- Call { callee: r16, first_arg: Some(r46) }
  186 r2 <- UndefinedBool
  187 r3 <- UndefinedBool
  188 r4 <- UndefinedBool
  189 r5 <- UndefinedBool
  190 r6 <- UndefinedBool
  191 r7 <- UndefinedBool
  192 r8 <- UndefinedBool
  193 r9 <- UndefinedBool
  194 r10 <- UndefinedBool
  195 r46 <- Get(r16)
0x595083:
  196 r46 <- Const { value: 152, size: 8 }
  197 r46 <- Arith(Add, r46, r17)
  198 r45 <- LoadMem { addr: r46, size: 8 }
  199 r14 <- Get(r45)
0x59508a:
  200 r45 <- Const { value: 5857392, size: 8 }
  201 r47 <- Void
  202 r47 <- Get(r14)
  203 r46 <- CArg { value: r47, next_arg: None }
  204 r46 <- Call { callee: r45, first_arg: Some(r46) }
  205 r2 <- UndefinedBool
  206 r3 <- UndefinedBool
  207 r4 <- UndefinedBool
  208 r5 <- UndefinedBool
  209 r6 <- UndefinedBool
  210 r7 <- UndefinedBool
  211 r8 <- UndefinedBool
  212 r9 <- UndefinedBool
  213 r10 <- UndefinedBool
0x59508f:
  214 r46 <- Const { value: 160, size: 8 }
  215 r46 <- Arith(Add, r46, r17)
  216 r45 <- LoadMem { addr: r46, size: 8 }
  217 r14 <- Get(r45)
0x595096:
  218 r45 <- Const { value: 5871760, size: 8 }
  219 r47 <- Void
  220 r47 <- Get(r14)
  221 r46 <- CArg { value: r47, next_arg: None }
  222 r46 <- Call { callee: r45, first_arg: Some(r46) }
  223 r2 <- UndefinedBool
  224 r3 <- UndefinedBool
  225 r4 <- UndefinedBool
  226 r5 <- UndefinedBool
  227 r6 <- UndefinedBool
  228 r7 <- UndefinedBool
  229 r8 <- UndefinedBool
  230 r9 <- UndefinedBool
  231 r10 <- UndefinedBool
0x59509b:
  232 r45 <- Const { value: 5857232, size: 8 }
  233 r46 <- Call { callee: r45, first_arg: None }
  234 r2 <- UndefinedBool
  235 r3 <- UndefinedBool
  236 r4 <- UndefinedBool
  237 r5 <- UndefinedBool
  238 r6 <- UndefinedBool
  239 r7 <- UndefinedBool
  240 r8 <- UndefinedBool
  241 r9 <- UndefinedBool
  242 r10 <- UndefinedBool
  243 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5950a0:
  244 r46 <- Const { value: 152, size: 8 }
  245 r46 <- Arith(Add, r46, r17)
  246 r46 <- StoreMem { addr: r46, value: r16 }
0x5950a7:
  247 r45 <- Const { value: 5852912, size: 8 }
  248 r46 <- Call { callee: r45, first_arg: None }
  249 r2 <- UndefinedBool
  250 r3 <- UndefinedBool
  251 r4 <- UndefinedBool
  252 r5 <- UndefinedBool
  253 r6 <- UndefinedBool
  254 r7 <- UndefinedBool
  255 r8 <- UndefinedBool
  256 r9 <- UndefinedBool
  257 r10 <- UndefinedBool
  258 r16 <- Part { src: r46, offset: 0, size: 8 }
0x5950ac:
  259 r46 <- Const { value: 152, size: 8 }
  260 r46 <- Arith(Add, r46, r17)
  261 r45 <- LoadMem { addr: r46, size: 8 }
  262 r47 <- Const { value: 0, size: 8 }
  263 r45 <- Arith(Sub, r45, r47)
  264 r10 <- OverflowOf(r45)
  265 r2 <- CarryOf(r45)
  266 r6 <- SignOf(r45)
  267 r5 <- IsZero(r45)
  268 r48 <- Part { src: r45, offset: 0, size: 1 }
  269 r3 <- Parity(r48)
0x5950b4:
  270 r46 <- Const { value: 160, size: 8 }
  271 r46 <- Arith(Add, r46, r17)
  272 r46 <- StoreMem { addr: r46, value: r16 }
0x5950bb:
  273 r45 <- SetJumpCondition(r5)
  274 r45 <- Control(JmpExtIf(5853576))
0x5950c1:
  275 r16 <- Arith(BitAnd, r16, r16)
  276 r6 <- SignOf(r16)
  277 r5 <- IsZero(r16)
  278 r47 <- Part { src: r16, offset: 0, size: 1 }
  279 r3 <- Parity(r16)
  280 r2 <- False
  281 r10 <- False
0x5950c4:
  282 r45 <- SetJumpCondition(r5)
  283 r45 <- Control(JmpExtIf(5853576))
0x5950ca:
  284 r46 <- Const { value: 168, size: 8 }
  285 r46 <- Arith(Add, r46, r17)
  286 r45 <- LoadMem { addr: r46, size: 4 }
  287 r47 <- Part { src: r16, offset: 4, size: 4 }
  288 r16 <- Concat { lo: r45, hi: r47 }
0x5950d0:
  289 r46 <- Part { src: r16, offset: 0, size: 4 }
  290 r48 <- Part { src: r16, offset: 0, size: 4 }
  291 r46 <- Arith(BitAnd, r46, r48)
  292 r6 <- SignOf(r46)
  293 r5 <- IsZero(r46)
  294 r49 <- Part { src: r46, offset: 0, size: 1 }
  295 r3 <- Parity(r46)
  296 r2 <- False
  297 r10 <- False
0x5950d2:
  298 r45 <- SetJumpCondition(r5)
  299 r45 <- Control(JmpExtIf(5853504))
0x5950d4:
  300 r46 <- Part { src: r16, offset: 0, size: 4 }
  301 r47 <- Const { value: 1, size: 4 }
  302 r46 <- Arith(Sub, r46, r47)
  303 r10 <- OverflowOf(r46)
  304 r2 <- CarryOf(r46)
  305 r6 <- SignOf(r46)
  306 r5 <- IsZero(r46)
  307 r48 <- Part { src: r46, offset: 0, size: 1 }
  308 r3 <- Parity(r48)
0x5950d7:
  309 r45 <- SetJumpCondition(r5)
  310 r45 <- Control(JmpExtIf(5853472))
0x5950d9:
  311 r45 <- Const { value: 7007800, size: 8 }
  312 r45 <- Arith(Add, r45, r13)
  313 r19 <- Get(r45)
0x5950e0:
  314 r45 <- Const { value: 2, size: 4 }
  315 r46 <- Part { src: r15, offset: 4, size: 4 }
  316 r15 <- Concat { lo: r45, hi: r46 }
0x5950e5:
  317 r14 <- Get(r17)
0x5950e8:
  318 r45 <- Const { value: 4294967295, size: 4 }
  319 r46 <- Part { src: r11, offset: 4, size: 4 }
  320 r11 <- Concat { lo: r45, hi: r46 }
0x5950ed:
  321 r45 <- Const { value: 5852656, size: 8 }
  322 r47 <- Void
  323 r47 <- Get(r14)
  324 r48 <- Void
  325 r48 <- Get(r15)
  326 r48 <- Part { src: r48, offset: 0, size: 4 }
  327 r49 <- Void
  328 r49 <- Get(r19)
  329 r46 <- CArg { value: r49, next_arg: None }
  330 r46 <- CArg { value: r48, next_arg: Some(r46) }
  331 r46 <- CArg { value: r47, next_arg: Some(r46) }
  332 r46 <- Call { callee: r45, first_arg: Some(r46) }
  333 r2 <- UndefinedBool
  334 r3 <- UndefinedBool
  335 r4 <- UndefinedBool
  336 r5 <- UndefinedBool
  337 r6 <- UndefinedBool
  338 r7 <- UndefinedBool
  339 r8 <- UndefinedBool
  340 r9 <- UndefinedBool
  341 r10 <- UndefinedBool
0x5950f2:
  342 r46 <- Const { value: 184, size: 8 }
  343 r46 <- Arith(Add, r46, r17)
  344 r45 <- LoadMem { addr: r46, size: 8 }
  345 r16 <- Get(r45)
0x5950f9:
  346 r16 <- Arith(BitAnd, r16, r16)
  347 r6 <- SignOf(r16)
  348 r5 <- IsZero(r16)
  349 r47 <- Part { src: r16, offset: 0, size: 1 }
  350 r3 <- Parity(r16)
  351 r2 <- False
  352 r10 <- False
0x5950fc:
  353 r45 <- SetJumpCondition(r5)
  354 r45 <- Control(JmpExtIf(5853456))
0x5950fe:
  355 r46 <- Const { value: 144, size: 8 }
  356 r46 <- Arith(Add, r46, r17)
  357 r45 <- LoadMem { addr: r46, size: 1 }
  358 r47 <- Const { value: 1, size: 1 }
  359 r45 <- Arith(BitAnd, r45, r47)
  360 r6 <- SignOf(r45)
  361 r5 <- IsZero(r45)
  362 r48 <- Part { src: r45, offset: 0, size: 1 }
  363 r3 <- Parity(r45)
  364 r2 <- False
  365 r10 <- False
0x595105:
  366 r45 <- SetJumpCondition(r5)
  367 r45 <- Control(JmpExtIf(5853456))
0x595107:
  368 r46 <- Const { value: 140, size: 8 }
  369 r46 <- Arith(Add, r46, r17)
  370 r45 <- LoadMem { addr: r46, size: 4 }
  371 r47 <- Const { value: -1, size: 4 }
  372 r45 <- Arith(Sub, r45, r47)
  373 r10 <- OverflowOf(r45)
  374 r2 <- CarryOf(r45)
  375 r6 <- SignOf(r45)
  376 r5 <- IsZero(r45)
  377 r48 <- Part { src: r45, offset: 0, size: 1 }
  378 r3 <- Parity(r48)
0x59510e:
  379 r45 <- Not(r5)
  380 r46 <- SetJumpCondition(r45)
  381 r46 <- Control(JmpExtIf(5853552))
0x595110:
  382 r46 <- Const { value: 8, size: 8 }
  383 r12 <- Arith(Add, r12, r46)
  384 r12 <- Get(r12)
  385 r10 <- OverflowOf(r12)
  386 r2 <- CarryOf(r12)
  387 r6 <- SignOf(r12)
  388 r5 <- IsZero(r12)
  389 r47 <- Part { src: r12, offset: 0, size: 1 }
  390 r3 <- Parity(r47)
0x595114:
  391 r46 <- Part { src: r11, offset: 0, size: 4 }
  392 r47 <- Part { src: r16, offset: 4, size: 4 }
  393 r16 <- Concat { lo: r46, hi: r47 }
0x595116:
  394 r45 <- LoadMem { addr: r12, size: 8 }
  395 r17 <- Get(r45)
  396 r12 <- ArithK(Add, r12, 8)
0x595117:
  397 r45 <- LoadMem { addr: r12, size: 8 }
  398 r11 <- Get(r45)
  399 r12 <- ArithK(Add, r12, 8)
0x595118:
  400 r45 <- Void
  401 r45 <- Concat { lo: r45, hi: r16 }
  402 r45 <- Part { src: r45, offset: 0, size: 4 }
  403 r47 <- SetReturnValue(r45)
  404 r47 <- Control(Ret)
0x595120:
  405 r46 <- Const { value: 176, size: 8 }
  406 r46 <- Arith(Add, r46, r17)
  407 r45 <- LoadMem { addr: r46, size: 8 }
  408 r19 <- Get(r45)
0x595127:
  409 r46 <- Const { value: 216, size: 8 }
  410 r46 <- Arith(Add, r46, r17)
  411 r45 <- LoadMem { addr: r46, size: 8 }
  412 r15 <- Get(r45)
0x59512e:
  413 r14 <- Get(r17)
0x595131:
  414 r45 <- Const { value: 5845200, size: 8 }
  415 r47 <- Void
  416 r47 <- Get(r14)
  417 r48 <- Void
  418 r48 <- Get(r15)
  419 r49 <- Void
  420 r49 <- Get(r19)
  421 r46 <- CArg { value: r49, next_arg: None }
  422 r46 <- CArg { value: r48, next_arg: Some(r46) }
  423 r46 <- CArg { value: r47, next_arg: Some(r46) }
  424 r46 <- Call { callee: r45, first_arg: Some(r46) }
  425 r2 <- UndefinedBool
  426 r3 <- UndefinedBool
  427 r4 <- UndefinedBool
  428 r5 <- UndefinedBool
  429 r6 <- UndefinedBool
  430 r7 <- UndefinedBool
  431 r8 <- UndefinedBool
  432 r9 <- UndefinedBool
  433 r10 <- UndefinedBool
  434 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595136:
  435 r46 <- Part { src: r16, offset: 0, size: 4 }
  436 r47 <- Part { src: r11, offset: 4, size: 4 }
  437 r11 <- Concat { lo: r46, hi: r47 }
0x595138:
  438 r45 <- Control(JmpExt(5853426))
0x595140:
  439 r46 <- Const { value: 176, size: 8 }
  440 r46 <- Arith(Add, r46, r17)
  441 r45 <- LoadMem { addr: r46, size: 8 }
  442 r18 <- Get(r45)
0x595147:
  443 r46 <- Const { value: 208, size: 8 }
  444 r46 <- Arith(Add, r46, r17)
  445 r45 <- LoadMem { addr: r46, size: 4 }
  446 r47 <- Part { src: r19, offset: 4, size: 4 }
  447 r19 <- Concat { lo: r45, hi: r47 }
0x59514d:
  448 r14 <- Get(r17)
0x595150:
  449 r46 <- Const { value: 192, size: 8 }
  450 r46 <- Arith(Add, r46, r17)
  451 r45 <- LoadMem { addr: r46, size: 8 }
  452 r15 <- Get(r45)
0x595157:
  453 r46 <- Const { value: 200, size: 8 }
  454 r46 <- Arith(Add, r46, r17)
  455 r45 <- LoadMem { addr: r46, size: 8 }
  456 r20 <- Get(r45)
0x59515e:
  457 r45 <- Const { value: 5845184, size: 8 }
  458 r47 <- Void
  459 r47 <- Get(r14)
  460 r48 <- Void
  461 r48 <- Get(r15)
  462 r49 <- Void
  463 r49 <- Get(r19)
  464 r49 <- Part { src: r49, offset: 0, size: 4 }
  465 r50 <- Void
  466 r50 <- Get(r18)
  467 r51 <- Void
  468 r51 <- Get(r20)
  469 r46 <- CArg { value: r51, next_arg: None }
  470 r46 <- CArg { value: r50, next_arg: Some(r46) }
  471 r46 <- CArg { value: r49, next_arg: Some(r46) }
  472 r46 <- CArg { value: r48, next_arg: Some(r46) }
  473 r46 <- CArg { value: r47, next_arg: Some(r46) }
  474 r46 <- Call { callee: r45, first_arg: Some(r46) }
  475 r2 <- UndefinedBool
  476 r3 <- UndefinedBool
  477 r4 <- UndefinedBool
  478 r5 <- UndefinedBool
  479 r6 <- UndefinedBool
  480 r7 <- UndefinedBool
  481 r8 <- UndefinedBool
  482 r9 <- UndefinedBool
  483 r10 <- UndefinedBool
  484 r16 <- Part { src: r46, offset: 0, size: 8 }
0x595163:
  485 r46 <- Part { src: r16, offset: 0, size: 4 }
  486 r47 <- Part { src: r11, offset: 4, size: 4 }
  487 r11 <- Concat { lo: r46, hi: r47 }
0x595165:
  488 r45 <- Control(JmpExt(5853426))
0x595170:
  489 r46 <- Const { value: 0, size: 8 }
  490 r46 <- Arith(Add, r46, r16)
  491 r45 <- LoadMem { addr: r46, size: 8 }
  492 r15 <- Get(r45)
0x595173:
  493 r46 <- Const { value: 8, size: 8 }
  494 r46 <- Arith(Add, r46, r16)
  495 r45 <- LoadMem { addr: r46, size: 8 }
  496 r19 <- Get(r45)
0x595177:
  497 r14 <- Get(r17)
0x59517a:
  498 r45 <- Const { value: 5844800, size: 8 }
  499 r47 <- Void
  500 r47 <- Get(r14)
  501 r46 <- CArg { value: r47, next_arg: None }
  502 r46 <- Call { callee: r45, first_arg: Some(r46) }
  503 r2 <- UndefinedBool
  504 r3 <- UndefinedBool
  505 r4 <- UndefinedBool
  506 r5 <- UndefinedBool
  507 r6 <- UndefinedBool
  508 r7 <- UndefinedBool
  509 r8 <- UndefinedBool
  510 r9 <- UndefinedBool
  511 r10 <- UndefinedBool
  512 r16 <- Part { src: r46, offset: 0, size: 8 }
0x59517f:
  513 r46 <- Const { value: 8, size: 8 }
  514 r12 <- Arith(Add, r12, r46)
  515 r12 <- Get(r12)
  516 r10 <- OverflowOf(r12)
  517 r2 <- CarryOf(r12)
  518 r6 <- SignOf(r12)
  519 r5 <- IsZero(r12)
  520 r47 <- Part { src: r12, offset: 0, size: 1 }
  521 r3 <- Parity(r47)
0x595183:
  522 r46 <- Part { src: r11, offset: 0, size: 4 }
  523 r47 <- Part { src: r16, offset: 4, size: 4 }
  524 r16 <- Concat { lo: r46, hi: r47 }
0x595185:
  525 r45 <- LoadMem { addr: r12, size: 8 }
  526 r17 <- Get(r45)
  527 r12 <- ArithK(Add, r12, 8)
0x595186:
  528 r45 <- LoadMem { addr: r12, size: 8 }
  529 r11 <- Get(r45)
  530 r12 <- ArithK(Add, r12, 8)
0x595187:
  531 r45 <- Void
  532 r45 <- Concat { lo: r45, hi: r16 }
  533 r45 <- Part { src: r45, offset: 0, size: 4 }
  534 r47 <- SetReturnValue(r45)
  535 r47 <- Control(Ret)
0x595188:
  536 r45 <- Const { value: 6951854, size: 8 }
  537 r45 <- Arith(Add, r45, r13)
  538 r19 <- Get(r45)
0x59518f:
  539 r45 <- Const { value: 5, size: 4 }
  540 r46 <- Part { src: r15, offset: 4, size: 4 }
  541 r15 <- Concat { lo: r45, hi: r46 }
0x595194:
  542 r14 <- Get(r17)
0x595197:
  543 r45 <- Const { value: 4294967295, size: 4 }
  544 r46 <- Part { src: r11, offset: 4, size: 4 }
  545 r11 <- Concat { lo: r45, hi: r46 }
0x59519c:
  546 r45 <- Const { value: 5852656, size: 8 }
  547 r47 <- Void
  548 r47 <- Get(r14)
  549 r48 <- Void
  550 r48 <- Get(r15)
  551 r48 <- Part { src: r48, offset: 0, size: 4 }
  552 r49 <- Void
  553 r49 <- Get(r19)
  554 r46 <- CArg { value: r49, next_arg: None }
  555 r46 <- CArg { value: r48, next_arg: Some(r46) }
  556 r46 <- CArg { value: r47, next_arg: Some(r46) }
  557 r46 <- Call { callee: r45, first_arg: Some(r46) }
  558 r2 <- UndefinedBool
  559 r3 <- UndefinedBool
  560 r4 <- UndefinedBool
  561 r5 <- UndefinedBool
  562 r6 <- UndefinedBool
  563 r7 <- UndefinedBool
  564 r8 <- UndefinedBool
  565 r9 <- UndefinedBool
  566 r10 <- UndefinedBool
0x5951a1:
  567 r45 <- Control(JmpExt(5853456))


 --- ssa pre-xform
ssa program  581 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
         r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  2)  r11 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
  (  3)  r13 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
         r15 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
  (  2)  r16 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  ( 27)  r42 <- FuncArgument { index: 0, reg_type: Bytes(8) }
  (  2)  r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
         r46 <- Const { value: 12, size: 8 }
  (  6)  r47 <- Arith(Add, r46, r42)
         r49 <- ArithK(Add, r44, -8)
         r50 <- StoreMem { addr: r49, value: r15 }
         r61 <- Const { value: 0, size: 4 }
         r62 <- Const { value: 8, size: 8 }
         r63 <- Arith(Add, r62, r42)
         r64 <- StoreMem { addr: r63, value: r61 }
         r66 <- Const { value: 4199136, size: 8 }
         r69 <- CArg { value: r47, next_arg: None }
         r70 <- Call { callee: r66, first_arg: Some(r69) }
  (  2)  r80 <- Part { src: r70, offset: 0, size: 8 }
         r82 <- Part { src: r13, offset: 0, size: 4 }
         r83 <- Part { src: r13, offset: 0, size: 4 }
         r84 <- Arith(BitXor, r82, r83)
         r85 <- Part { src: r13, offset: 4, size: 4 }
  (  4)  r86 <- Concat { lo: r84, hi: r85 }
         r94 <- Const { value: 4199488, size: 8 }
         r95 <- Call { callee: r94, first_arg: None }
         r105 <- Const { value: 256, size: 8 }
         r106 <- Arith(Add, r105, r42)
  (  2)  r107 <- LoadMem { addr: r106, size: 8 }
  (  2)  r109 <- Arith(BitAnd, r107, r107)
         r111 <- IsZero(r109)
         r116 <- SetJumpCondition(r111)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
         r118 <- Const { value: 0, size: 8 }
         r119 <- Arith(Add, r118, r42)
  (  2)  r120 <- LoadMem { addr: r119, size: 8 }
         r122 <- Const { value: 8, size: 8 }
         r123 <- Arith(Add, r122, r120)
  (  2)  r124 <- LoadMem { addr: r123, size: 8 }
  (  3)  r126 <- Arith(BitAnd, r124, r124)
         r128 <- IsZero(r126)
         r133 <- SetJumpCondition(r128)
         r580 <- Upsilon { value: r120, phi_ref: r568 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r135 <- CArg { value: r16, next_arg: None }
         r136 <- CArg { value: r126, next_arg: Some(r135) }
         r137 <- CArg { value: r86, next_arg: Some(r136) }
         r138 <- CArg { value: r109, next_arg: Some(r137) }
         r139 <- Call { callee: r126, first_arg: Some(r138) }
         r150 <- Const { value: 0, size: 8 }
         r151 <- Const { value: 256, size: 8 }
         r152 <- Arith(Add, r151, r42)
         r153 <- StoreMem { addr: r152, value: r150 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
         r154 <- Const { value: 0, size: 8 }
         r155 <- Arith(Add, r154, r42)
  (  2)  r156 <- LoadMem { addr: r155, size: 8 }
  (  2)  r158 <- Arith(BitAnd, r156, r156)
         r160 <- IsZero(r158)
         r165 <- SetJumpCondition(r160)
         r579 <- Upsilon { value: r158, phi_ref: r568 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r568 <- Phi
         r167 <- Const { value: 0, size: 8 }
         r168 <- Arith(Add, r167, r568)
  (  2)  r169 <- LoadMem { addr: r168, size: 8 }
  (  2)  r171 <- Arith(BitAnd, r169, r169)
         r173 <- IsZero(r171)
         r178 <- SetJumpCondition(r173)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r181 <- CArg { value: r16, next_arg: None }
         r182 <- CArg { value: r80, next_arg: Some(r181) }
         r183 <- CArg { value: r86, next_arg: Some(r182) }
         r184 <- CArg { value: r42, next_arg: Some(r183) }
         r185 <- Call { callee: r171, first_arg: Some(r184) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r196 <- Const { value: 152, size: 8 }
         r197 <- Arith(Add, r196, r42)
         r198 <- LoadMem { addr: r197, size: 8 }
         r200 <- Const { value: 5857392, size: 8 }
         r203 <- CArg { value: r198, next_arg: None }
         r204 <- Call { callee: r200, first_arg: Some(r203) }
         r214 <- Const { value: 160, size: 8 }
         r215 <- Arith(Add, r214, r42)
         r216 <- LoadMem { addr: r215, size: 8 }
         r218 <- Const { value: 5871760, size: 8 }
         r221 <- CArg { value: r216, next_arg: None }
         r222 <- Call { callee: r218, first_arg: Some(r221) }
         r232 <- Const { value: 5857232, size: 8 }
         r233 <- Call { callee: r232, first_arg: None }
         r243 <- Part { src: r233, offset: 0, size: 8 }
         r244 <- Const { value: 152, size: 8 }
         r245 <- Arith(Add, r244, r42)
         r246 <- StoreMem { addr: r245, value: r243 }
         r247 <- Const { value: 5852912, size: 8 }
         r248 <- Call { callee: r247, first_arg: None }
  (  4)  r258 <- Part { src: r248, offset: 0, size: 8 }
         r259 <- Const { value: 152, size: 8 }
         r260 <- Arith(Add, r259, r42)
         r261 <- LoadMem { addr: r260, size: 8 }
         r262 <- Const { value: 0, size: 8 }
         r263 <- Arith(Sub, r261, r262)
         r267 <- IsZero(r263)
         r270 <- Const { value: 160, size: 8 }
         r271 <- Arith(Add, r270, r42)
         r272 <- StoreMem { addr: r271, value: r258 }
         r273 <- SetJumpCondition(r267)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
  (  2)  r275 <- Arith(BitAnd, r258, r258)
         r277 <- IsZero(r275)
         r282 <- SetJumpCondition(r277)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r284 <- Const { value: 168, size: 8 }
         r285 <- Arith(Add, r284, r42)
         r286 <- LoadMem { addr: r285, size: 4 }
         r287 <- Part { src: r275, offset: 4, size: 4 }
  (  3)  r288 <- Concat { lo: r286, hi: r287 }
         r289 <- Part { src: r288, offset: 0, size: 4 }
         r290 <- Part { src: r288, offset: 0, size: 4 }
         r291 <- Arith(BitAnd, r289, r290)
         r293 <- IsZero(r291)
         r298 <- SetJumpCondition(r293)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r300 <- Part { src: r288, offset: 0, size: 4 }
         r301 <- Const { value: 1, size: 4 }
         r302 <- Arith(Sub, r300, r301)
         r306 <- IsZero(r302)
         r309 <- SetJumpCondition(r306)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r311 <- Const { value: 7007800, size: 8 }
         r312 <- Arith(Add, r311, r11)
         r314 <- Const { value: 2, size: 4 }
         r315 <- Part { src: r86, offset: 4, size: 4 }
         r316 <- Concat { lo: r314, hi: r315 }
         r321 <- Const { value: 5852656, size: 8 }
         r326 <- Part { src: r316, offset: 0, size: 4 }
         r329 <- CArg { value: r312, next_arg: None }
         r330 <- CArg { value: r326, next_arg: Some(r329) }
         r331 <- CArg { value: r42, next_arg: Some(r330) }
         r332 <- Call { callee: r321, first_arg: Some(r331) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r405 <- Const { value: 176, size: 8 }
         r406 <- Arith(Add, r405, r42)
         r407 <- LoadMem { addr: r406, size: 8 }
         r409 <- Const { value: 216, size: 8 }
         r410 <- Arith(Add, r409, r42)
         r411 <- LoadMem { addr: r410, size: 8 }
         r414 <- Const { value: 5845200, size: 8 }
         r421 <- CArg { value: r407, next_arg: None }
         r422 <- CArg { value: r411, next_arg: Some(r421) }
         r423 <- CArg { value: r42, next_arg: Some(r422) }
         r424 <- Call { callee: r414, first_arg: Some(r423) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r439 <- Const { value: 176, size: 8 }
         r440 <- Arith(Add, r439, r42)
         r441 <- LoadMem { addr: r440, size: 8 }
         r443 <- Const { value: 208, size: 8 }
         r444 <- Arith(Add, r443, r42)
         r445 <- LoadMem { addr: r444, size: 4 }
         r446 <- Part { src: r80, offset: 4, size: 4 }
         r447 <- Concat { lo: r445, hi: r446 }
         r449 <- Const { value: 192, size: 8 }
         r450 <- Arith(Add, r449, r42)
         r451 <- LoadMem { addr: r450, size: 8 }
         r453 <- Const { value: 200, size: 8 }
         r454 <- Arith(Add, r453, r42)
         r455 <- LoadMem { addr: r454, size: 8 }
         r457 <- Const { value: 5845184, size: 8 }
         r464 <- Part { src: r447, offset: 0, size: 4 }
         r469 <- CArg { value: r455, next_arg: None }
         r470 <- CArg { value: r441, next_arg: Some(r469) }
         r471 <- CArg { value: r464, next_arg: Some(r470) }
         r472 <- CArg { value: r451, next_arg: Some(r471) }
         r473 <- CArg { value: r42, next_arg: Some(r472) }
         r474 <- Call { callee: r457, first_arg: Some(r473) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r342 <- Const { value: 184, size: 8 }
         r343 <- Arith(Add, r342, r42)
  (  2)  r344 <- LoadMem { addr: r343, size: 8 }
  (  4)  r346 <- Arith(BitAnd, r344, r344)
         r348 <- IsZero(r346)
         r353 <- SetJumpCondition(r348)
         r573 <- Upsilon { value: r47, phi_ref: r569 }
         r574 <- Upsilon { value: r346, phi_ref: r570 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r355 <- Const { value: 144, size: 8 }
         r356 <- Arith(Add, r355, r42)
         r357 <- LoadMem { addr: r356, size: 1 }
         r358 <- Const { value: 1, size: 1 }
         r359 <- Arith(BitAnd, r357, r358)
         r361 <- IsZero(r359)
         r366 <- SetJumpCondition(r361)
         r575 <- Upsilon { value: r47, phi_ref: r569 }
         r576 <- Upsilon { value: r346, phi_ref: r570 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r368 <- Const { value: 140, size: 8 }
         r369 <- Arith(Add, r368, r42)
         r370 <- LoadMem { addr: r369, size: 4 }
         r371 <- Const { value: -1, size: 4 }
         r372 <- Arith(Sub, r370, r371)
         r376 <- IsZero(r372)
         r379 <- Not(r376)
         r380 <- SetJumpCondition(r379)
         r577 <- Upsilon { value: r47, phi_ref: r569 }
         r578 <- Upsilon { value: r346, phi_ref: r570 }
.B17:    ;; preds:B13  → Always(Return).
         r498 <- Const { value: 5844800, size: 8 }
         r501 <- CArg { value: r42, next_arg: None }
         r502 <- Call { callee: r498, first_arg: Some(r501) }
         r512 <- Part { src: r502, offset: 0, size: 8 }
         r522 <- Part { src: r47, offset: 0, size: 4 }
         r523 <- Part { src: r512, offset: 4, size: 4 }
         r524 <- Concat { lo: r522, hi: r523 }
         r532 <- Concat { lo: r531, hi: r524 }
         r533 <- Part { src: r532, offset: 0, size: 4 }
         r534 <- SetReturnValue(r533)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r536 <- Const { value: 6951854, size: 8 }
         r537 <- Arith(Add, r536, r11)
         r539 <- Const { value: 5, size: 4 }
         r540 <- Part { src: r86, offset: 4, size: 4 }
         r541 <- Concat { lo: r539, hi: r540 }
         r543 <- Const { value: 4294967295, size: 4 }
         r544 <- Part { src: r47, offset: 4, size: 4 }
         r545 <- Concat { lo: r543, hi: r544 }
         r546 <- Const { value: 5852656, size: 8 }
         r551 <- Part { src: r541, offset: 0, size: 4 }
         r554 <- CArg { value: r537, next_arg: None }
         r555 <- CArg { value: r551, next_arg: Some(r554) }
         r556 <- CArg { value: r42, next_arg: Some(r555) }
         r557 <- Call { callee: r546, first_arg: Some(r556) }
         r571 <- Upsilon { value: r545, phi_ref: r569 }
         r572 <- Upsilon { value: r258, phi_ref: r570 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r570 <- Phi
         r569 <- Phi
         r391 <- Part { src: r569, offset: 0, size: 4 }
         r392 <- Part { src: r570, offset: 4, size: 4 }
         r393 <- Concat { lo: r391, hi: r392 }
         r401 <- Concat { lo: r400, hi: r393 }
         r402 <- Part { src: r401, offset: 0, size: 4 }
         r403 <- SetReturnValue(r402)


 --- cfg
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) } [r9, r10, r11, r13, r15, r16, r42, r44, r45, r47, r49, r50, r61, r63, r64, r66, r69, r70, r82, r83, r84, r85, r86, r94, r95, r106, r107, r111, r116]
  BlockID(1) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) } [r120, r123, r124, r128, r133, r580]
  BlockID(2) -> Always(Block(BlockID(3))) [r135, r136, r137, r138, r139, r150, r152, r153]
  BlockID(3) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) } [r156, r160, r165, r579]
  BlockID(4) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) } [r568, r169, r173, r178]
  BlockID(5) -> Always(Block(BlockID(6))) [r181, r182, r183, r184, r185]
  BlockID(6) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) } [r197, r198, r200, r203, r204, r215, r216, r218, r221, r222, r232, r233, r245, r246, r247, r248, r260, r261, r267, r271, r272, r273]
  BlockID(7) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) } [r277, r282]
  BlockID(8) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) } [r285, r286, r293, r298]
  BlockID(9) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) } [r302, r306, r309]
  BlockID(10) -> Always(Block(BlockID(11))) [r312, r314, r321, r329, r330, r331, r332]
  BlockID(11) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) } [r343, r344, r348, r353, r573]
  BlockID(12) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) } [r356, r357, r359, r361, r366, r575]
  BlockID(13) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) } [r369, r370, r372, r376, r379, r380, r577]
  BlockID(14) -> Always(Return) [r569, r402, r403]
  BlockID(15) -> Always(Block(BlockID(11))) [r406, r407, r410, r411, r414, r421, r422, r423, r424]
  BlockID(16) -> Always(Block(BlockID(11))) [r440, r441, r444, r445, r450, r451, r454, r455, r457, r469, r470, r471, r472, r473, r474]
  BlockID(17) -> Always(Return) [r498, r501, r502, r533, r534]
  BlockID(18) -> Always(Block(BlockID(14))) [r537, r539, r543, r544, r545, r546, r554, r555, r556, r557, r571]
  domtree:
    BlockID(0)
|  BlockID(1)
|  |  BlockID(2)
|  BlockID(3)
|  BlockID(4)
|  |  BlockID(5)
|  BlockID(6)
|  |  BlockID(7)
|  |  |  BlockID(8)
|  |  |  |  BlockID(9)
|  |  |  |  |  BlockID(10)
|  |  |  |  |  BlockID(15)
|  |  |  |  BlockID(11)
|  |  |  |  |  BlockID(12)
|  |  |  |  |  |  BlockID(13)
|  |  |  |  |  |  |  BlockID(17)
|  |  |  |  BlockID(16)
|  |  BlockID(14)
|  |  BlockID(18)

 --- ssa
ssa program  581 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r9 <- Ancestral { anc_name: AncestralName("RBP"), reg_type: Bytes(8) }
  (  2)  r10 <- Ancestral { anc_name: AncestralName("RSP"), reg_type: Bytes(8) }
  (  2)  r11 <- Ancestral { anc_name: AncestralName("RIP"), reg_type: Bytes(8) }
  (  3)  r13 <- Ancestral { anc_name: AncestralName("RSI"), reg_type: Bytes(8) }
         r15 <- Ancestral { anc_name: AncestralName("RBX"), reg_type: Bytes(8) }
  (  2)  r16 <- Ancestral { anc_name: AncestralName("RCX"), reg_type: Bytes(8) }
  ( 27)  r42 <- FuncArgument { index: 0, reg_type: Bytes(8) }
         r44 <- ArithK(Add, r10, -8)
         r45 <- StoreMem { addr: r44, value: r9 }
  (  6)  r47 <- ArithK(Add, r42, 12)
         r49 <- ArithK(Add, r10, -16)
         r50 <- StoreMem { addr: r49, value: r15 }
         r61 <- Const { value: 0, size: 4 }
         r63 <- ArithK(Add, r42, 8)
         r64 <- StoreMem { addr: r63, value: r61 }
         r66 <- Const { value: 4199136, size: 8 }
         r69 <- CArg { value: r47, next_arg: None }
         r70 <- Call { callee: r66, first_arg: Some(r69) }
         r82 <- Part { src: r13, offset: 0, size: 4 }
         r83 <- Part { src: r13, offset: 0, size: 4 }
         r84 <- Arith(BitXor, r82, r83)
         r85 <- Part { src: r13, offset: 4, size: 4 }
  (  2)  r86 <- Concat { lo: r84, hi: r85 }
         r94 <- Const { value: 4199488, size: 8 }
         r95 <- Call { callee: r94, first_arg: None }
         r106 <- ArithK(Add, r42, 256)
  (  2)  r107 <- LoadMem { addr: r106, size: 8 }
         r111 <- IsZero(r107)
         r116 <- SetJumpCondition(r111)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
  (  2)  r120 <- LoadMem { addr: r42, size: 8 }
         r123 <- ArithK(Add, r120, 8)
  (  3)  r124 <- LoadMem { addr: r123, size: 8 }
         r128 <- IsZero(r124)
         r133 <- SetJumpCondition(r128)
         r580 <- Upsilon { value: r120, phi_ref: r568 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r135 <- CArg { value: r16, next_arg: None }
         r136 <- CArg { value: r124, next_arg: Some(r135) }
         r137 <- CArg { value: r86, next_arg: Some(r136) }
         r138 <- CArg { value: r107, next_arg: Some(r137) }
         r139 <- Call { callee: r124, first_arg: Some(r138) }
         r150 <- Const { value: 0, size: 8 }
         r152 <- ArithK(Add, r42, 256)
         r153 <- StoreMem { addr: r152, value: r150 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
  (  2)  r156 <- LoadMem { addr: r42, size: 8 }
         r160 <- IsZero(r156)
         r165 <- SetJumpCondition(r160)
         r579 <- Upsilon { value: r156, phi_ref: r568 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r568 <- Phi
  (  2)  r169 <- LoadMem { addr: r568, size: 8 }
         r173 <- IsZero(r169)
         r178 <- SetJumpCondition(r173)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r181 <- CArg { value: r16, next_arg: None }
         r182 <- CArg { value: r70, next_arg: Some(r181) }
         r183 <- CArg { value: r86, next_arg: Some(r182) }
         r184 <- CArg { value: r42, next_arg: Some(r183) }
         r185 <- Call { callee: r169, first_arg: Some(r184) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r197 <- ArithK(Add, r42, 152)
         r198 <- LoadMem { addr: r197, size: 8 }
         r200 <- Const { value: 5857392, size: 8 }
         r203 <- CArg { value: r198, next_arg: None }
         r204 <- Call { callee: r200, first_arg: Some(r203) }
         r215 <- ArithK(Add, r42, 160)
         r216 <- LoadMem { addr: r215, size: 8 }
         r218 <- Const { value: 5871760, size: 8 }
         r221 <- CArg { value: r216, next_arg: None }
         r222 <- Call { callee: r218, first_arg: Some(r221) }
         r232 <- Const { value: 5857232, size: 8 }
         r233 <- Call { callee: r232, first_arg: None }
         r245 <- ArithK(Add, r42, 152)
         r246 <- StoreMem { addr: r245, value: r233 }
         r247 <- Const { value: 5852912, size: 8 }
  (  2)  r248 <- Call { callee: r247, first_arg: None }
         r260 <- ArithK(Add, r42, 152)
         r261 <- LoadMem { addr: r260, size: 8 }
         r267 <- IsZero(r261)
         r271 <- ArithK(Add, r42, 160)
         r272 <- StoreMem { addr: r271, value: r248 }
         r273 <- SetJumpCondition(r267)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
         r277 <- IsZero(r248)
         r282 <- SetJumpCondition(r277)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r285 <- ArithK(Add, r42, 168)
  (  2)  r286 <- LoadMem { addr: r285, size: 4 }
         r293 <- IsZero(r286)
         r298 <- SetJumpCondition(r293)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r302 <- ArithK(Add, r286, -1)
         r306 <- IsZero(r302)
         r309 <- SetJumpCondition(r306)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r312 <- ArithK(Add, r11, 7007800)
         r314 <- Const { value: 2, size: 4 }
         r321 <- Const { value: 5852656, size: 8 }
         r329 <- CArg { value: r312, next_arg: None }
         r330 <- CArg { value: r314, next_arg: Some(r329) }
         r331 <- CArg { value: r42, next_arg: Some(r330) }
         r332 <- Call { callee: r321, first_arg: Some(r331) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r406 <- ArithK(Add, r42, 176)
         r407 <- LoadMem { addr: r406, size: 8 }
         r410 <- ArithK(Add, r42, 216)
         r411 <- LoadMem { addr: r410, size: 8 }
         r414 <- Const { value: 5845200, size: 8 }
         r421 <- CArg { value: r407, next_arg: None }
         r422 <- CArg { value: r411, next_arg: Some(r421) }
         r423 <- CArg { value: r42, next_arg: Some(r422) }
         r424 <- Call { callee: r414, first_arg: Some(r423) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r440 <- ArithK(Add, r42, 176)
         r441 <- LoadMem { addr: r440, size: 8 }
         r444 <- ArithK(Add, r42, 208)
         r445 <- LoadMem { addr: r444, size: 4 }
         r450 <- ArithK(Add, r42, 192)
         r451 <- LoadMem { addr: r450, size: 8 }
         r454 <- ArithK(Add, r42, 200)
         r455 <- LoadMem { addr: r454, size: 8 }
         r457 <- Const { value: 5845184, size: 8 }
         r469 <- CArg { value: r455, next_arg: None }
         r470 <- CArg { value: r441, next_arg: Some(r469) }
         r471 <- CArg { value: r445, next_arg: Some(r470) }
         r472 <- CArg { value: r451, next_arg: Some(r471) }
         r473 <- CArg { value: r42, next_arg: Some(r472) }
         r474 <- Call { callee: r457, first_arg: Some(r473) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r343 <- ArithK(Add, r42, 184)
         r344 <- LoadMem { addr: r343, size: 8 }
         r348 <- IsZero(r344)
         r353 <- SetJumpCondition(r348)
         r573 <- Upsilon { value: r47, phi_ref: r569 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r356 <- ArithK(Add, r42, 144)
         r357 <- LoadMem { addr: r356, size: 1 }
         r359 <- ArithK(BitAnd, r357, 1)
         r361 <- IsZero(r359)
         r366 <- SetJumpCondition(r361)
         r575 <- Upsilon { value: r47, phi_ref: r569 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r369 <- ArithK(Add, r42, 140)
         r370 <- LoadMem { addr: r369, size: 4 }
         r372 <- ArithK(Add, r370, 1)
         r376 <- IsZero(r372)
         r379 <- Not(r376)
         r380 <- SetJumpCondition(r379)
         r577 <- Upsilon { value: r47, phi_ref: r569 }
.B17:    ;; preds:B13  → Always(Return).
         r498 <- Const { value: 5844800, size: 8 }
         r501 <- CArg { value: r42, next_arg: None }
         r502 <- Call { callee: r498, first_arg: Some(r501) }
         r533 <- Part { src: r47, offset: 0, size: 4 }
         r534 <- SetReturnValue(r533)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r537 <- ArithK(Add, r11, 6951854)
         r539 <- Const { value: 5, size: 4 }
         r543 <- Const { value: 4294967295, size: 4 }
         r544 <- Part { src: r47, offset: 4, size: 4 }
         r545 <- Concat { lo: r543, hi: r544 }
         r546 <- Const { value: 5852656, size: 8 }
         r554 <- CArg { value: r537, next_arg: None }
         r555 <- CArg { value: r539, next_arg: Some(r554) }
         r556 <- CArg { value: r42, next_arg: Some(r555) }
         r557 <- Call { callee: r546, first_arg: Some(r556) }
         r571 <- Upsilon { value: r545, phi_ref: r569 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r569 <- Phi
         r402 <- Part { src: r569, offset: 0, size: 4 }
         r403 <- SetReturnValue(r402)


 --- ast

T0: {
  let r42: Bytes(8) = $arg0;
  [pre:RSP - 8]:* := pre:RBP;
  let r47: Bytes(8) = r42 + 12;
  [pre:RSP - 16]:* := pre:RBX;
  [r42 + 8]:* := 0;
  4199136(r47);
  let r86: Bytes(8) = pre:RSI[8 .. 4] ++ (pre:RSI[4 .. 0] ^ pre:RSI[4 .. 0]);
  4199488();
  let r107: Bytes(8) = [r42 + 256]:8;
  ;
  if IsZero (r107) {
    goto T3
  }
  let r120: Bytes(8) = [r42]:8;
  let r124: Bytes(8) = [r120 + 8]:8;
  ;
  r568 := [r42]:8;
  if IsZero (r124) {
    goto T4
  }
  r124(r107,
       r86,
       r124,
       pre:RCX);
  [r42 + 256]:* := 0;
  goto T3
  T3: {
    let r156: Bytes(8) = [r42]:8;
    ;
    r568 := [r42]:8;
    if IsZero (r156) {
      goto T6
    }
    goto T4
  }
  
  T4: {
    let mut r568: Bytes(8);
    let r169: Bytes(8) = [r568]:8;
    ;
    if IsZero (r169) {
      goto T6
    }
    r169(r42,
         r86,
         4199136(r47),
         pre:RCX);
    goto T6
  }
  
  T6: {
    5857392([r42 + 152]:8);
    5871760([r42 + 160]:8);
    5857232();
    [r42 + 152]:* := 5857232();
    let r248: Bytes(8) = 5852912();
    [r42 + 160]:* := r248;
    ;
    if IsZero ([r42 + 152]:8) {
      goto T18
    }
    ;
    if IsZero (r248) {
      goto T18
    }
    let r286: Bytes(4) = [r42 + 168]:4;
    ;
    if IsZero (r286) {
      5845184(r42,
              [r42 + 192]:8,
              [r42 + 208]:4,
              [r42 + 176]:8,
              [r42 + 200]:8);
      goto T11
    }
    ;
    if IsZero (r286 - 1) {
      5845200(r42,
              [r42 + 216]:8,
              [r42 + 176]:8);
      goto T11
    }
    5852656(r42,
            2,
            (pre:RIP + 7007800));
    goto T11
    T11: {
      ;
      r569 := r42 + 12;
      if IsZero ([r42 + 184]:8) {
        goto T14
      }
      ;
      r569 := r42 + 12;
      if IsZero ([r42 + 144]:1 & 1) {
        goto T14
      }
      ;
      r569 := r42 + 12;
      if ! IsZero ([r42 + 140]:4 + 1) {
        5844800(r42);
        ;
        return r47[4 .. 0]
      }
      goto T14
    }
    
    T14: {
      let mut r569: Bytes(8);
      ;
      return r569[4 .. 0]
    }
    
    T18: {
      5852656(r42,
              5,
              (pre:RIP + 6951854));
      r569 := r47[8 .. 4] ++ 4294967295;
      goto T14
    }
  
  }

}
