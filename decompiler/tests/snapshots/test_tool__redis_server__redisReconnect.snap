---
source: decompiler/tests/test_tool.rs
expression: out
---
redisReconnect 0x595020+390 (file 0x195020)
          595020: 55                      push rbp
          595021: 48 8d 6f 0c             lea rbp,[rdi+0Ch]
          595025: 53                      push rbx
          595026: 48 89 fb                mov rbx,rdi
          595029: 48 83 ec 08             sub rsp,8
          59502d: c7 47 08 00 00 00 00    mov dword ptr [rdi+8],0
          595034: 48 89 ef                mov rdi,rbp
          595037: e8 a4 c2 e6 ff          call 00000000004012E0h
          59503c: 48 89 ef                mov rdi,rbp
          59503f: 31 f6                   xor esi,esi
          595041: 48 89 c2                mov rdx,rax
          595044: e8 f7 c3 e6 ff          call 0000000000401440h
          595049: 48 8b bb 00 01 00 00    mov rdi,[rbx+100h]
          595050: 48 85 ff                test rdi,rdi
          595053: 74 19                   je short 000000000059506Eh
          595055: 48 8b 03                mov rax,[rbx]
          595058: 48 8b 50 08             mov rdx,[rax+8]
          59505c: 48 85 d2                test rdx,rdx
          59505f: 74 15                   je short 0000000000595076h
          595061: ff d2                   call rdx
          595063: 48 c7 83 00 01 00 00 00 mov qword ptr [rbx+100h],0
          59506e: 48 8b 03                mov rax,[rbx]
          595071: 48 85 c0                test rax,rax
          595074: 74 0d                   je short 0000000000595083h
          595076: 48 8b 00                mov rax,[rax]
          595079: 48 85 c0                test rax,rax
          59507c: 74 05                   je short 0000000000595083h
          59507e: 48 89 df                mov rdi,rbx
          595081: ff d0                   call rax
          595083: 48 8b bb 98 00 00 00    mov rdi,[rbx+98h]
          59508a: e8 e1 0f 00 00          call 0000000000596070h
          59508f: 48 8b bb a0 00 00 00    mov rdi,[rbx+0A0h]
          595096: e8 f5 47 00 00          call 0000000000599890h
          59509b: e8 30 0f 00 00          call 0000000000595FD0h
          5950a0: 48 89 83 98 00 00 00    mov [rbx+98h],rax
          5950a7: e8 44 fe ff ff          call 0000000000594EF0h
          5950ac: 48 83 bb 98 00 00 00 00 cmp qword ptr [rbx+98h],0
          5950b4: 48 89 83 a0 00 00 00    mov [rbx+0A0h],rax
          5950bb: 0f 84 c7 00 00 00       je 0000000000595188h
          5950c1: 48 85 c0                test rax,rax
          5950c4: 0f 84 be 00 00 00       je 0000000000595188h
          5950ca: 8b 83 a8 00 00 00       mov eax,[rbx+0A8h]
          5950d0: 85 c0                   test eax,eax
          5950d2: 74 6c                   je short 0000000000595140h
          5950d4: 83 f8 01                cmp eax,1
          5950d7: 74 47                   je short 0000000000595120h
          5950d9: 48 8d 15 58 9d 11 00    lea rdx,[6AEE38h]
          5950e0: be 02 00 00 00          mov esi,2
          5950e5: 48 89 df                mov rdi,rbx
          5950e8: bd ff ff ff ff          mov ebp,0FFFFFFFFh
          5950ed: e8 fe fc ff ff          call 0000000000594DF0h
          5950f2: 48 8b 83 b8 00 00 00    mov rax,[rbx+0B8h]
          5950f9: 48 85 c0                test rax,rax
          5950fc: 74 12                   je short 0000000000595110h
          5950fe: f6 83 90 00 00 00 01    test byte ptr [rbx+90h],1
          595105: 74 09                   je short 0000000000595110h
          595107: 83 bb 8c 00 00 00 ff    cmp dword ptr [rbx+8Ch],0FFFFFFFFh
          59510e: 75 60                   jne short 0000000000595170h
          595110: 48 83 c4 08             add rsp,8
          595114: 89 e8                   mov eax,ebp
          595116: 5b                      pop rbx
          595117: 5d                      pop rbp
          595118: c3                      ret
          595119: 0f 1f 80 00 00 00 00    nop [rax]
          595120: 48 8b 93 b0 00 00 00    mov rdx,[rbx+0B0h]
          595127: 48 8b b3 d8 00 00 00    mov rsi,[rbx+0D8h]
          59512e: 48 89 df                mov rdi,rbx
          595131: e8 9a df ff ff          call 00000000005930D0h
          595136: 89 c5                   mov ebp,eax
          595138: eb b8                   jmp short 00000000005950F2h
          59513a: 66 0f 1f 44 00 00       nop [rax+rax]
          595140: 48 8b 8b b0 00 00 00    mov rcx,[rbx+0B0h]
          595147: 8b 93 d0 00 00 00       mov edx,[rbx+0D0h]
          59514d: 48 89 df                mov rdi,rbx
          595150: 48 8b b3 c0 00 00 00    mov rsi,[rbx+0C0h]
          595157: 4c 8b 83 c8 00 00 00    mov r8,[rbx+0C8h]
          59515e: e8 5d df ff ff          call 00000000005930C0h
          595163: 89 c5                   mov ebp,eax
          595165: eb 8b                   jmp short 00000000005950F2h
          595167: 66 0f 1f 84 00 00 00 00 nop [rax+rax]
          595170: 48 8b 30                mov rsi,[rax]
          595173: 48 8b 50 08             mov rdx,[rax+8]
          595177: 48 89 df                mov rdi,rbx
          59517a: e8 c1 dd ff ff          call 0000000000592F40h
          59517f: 48 83 c4 08             add rsp,8
          595183: 89 e8                   mov eax,ebp
          595185: 5b                      pop rbx
          595186: 5d                      pop rbp
          595187: c3                      ret
          595188: 48 8d 15 1f c2 10 00    lea rdx,[6A13AEh]
          59518f: be 05 00 00 00          mov esi,5
          595194: 48 89 df                mov rdi,rbx
          595197: bd ff ff ff ff          mov ebp,0FFFFFFFFh
          59519c: e8 4f fc ff ff          call 0000000000594DF0h
          5951a1: e9 6a ff ff ff          jmp 0000000000595110h

function type: "redisReconnect" func (c *redisContext <TypeID(297540v1)>) int <TypeID(297248v1)>
3 warnings:
  #   0: no type hints for this callsite
  #   1: no type hints for this callsite
  #   2: call: call resolved but only packed 1/2 params


mil program = 
program  587 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
   43 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   44 r14: TypeID(2v1) <- Get(r45)
0x595020:
   45 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   46 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r11 }
0x595021:
   47 r45: TypeID(2v1) <- Const { value: 12, size: 8 }
   48 r45: TypeID(2v1) <- Arith(Add, r45, r14)
   49 r11: TypeID(2v1) <- Get(r45)
0x595025:
   50 r12: TypeID(2v1) <- ArithK(Add, r12, -8)
   51 r46: TypeID(2v1) <- StoreMem { addr: r12, value: r17 }
0x595026:
   52 r17: TypeID(2v1) <- Get(r14)
0x595029:
   53 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   54 r12: TypeID(2v1) <- Arith(Sub, r12, r46)
   55 r12: TypeID(2v1) <- Get(r12)
   56 r10: TypeID(2v1) <- OverflowOf(r12)
   57 r2: TypeID(2v1) <- CarryOf(r12)
   58 r6: TypeID(2v1) <- SignOf(r12)
   59 r5: TypeID(2v1) <- IsZero(r12)
   60 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
   61 r3: TypeID(2v1) <- Parity(r47)
0x59502d:
   62 r45: TypeID(2v1) <- Const { value: 0, size: 4 }
   63 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   64 r46: TypeID(2v1) <- Arith(Add, r46, r14)
   65 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x595034:
   66 r14: TypeID(2v1) <- Get(r11)
0x595037:
   67 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
   68 r45: TypeID(2v1) <- Void
   69 r45: TypeID(2v1) <- Get(r14)
   70 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
   71 r47: TypeID(297696v1) <- Const { value: 4199136, size: 8 }
   72 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
   73 r2: TypeID(2v1) <- Undefined
   74 r3: TypeID(2v1) <- Undefined
   75 r4: TypeID(2v1) <- Undefined
   76 r5: TypeID(2v1) <- Undefined
   77 r6: TypeID(2v1) <- Undefined
   78 r7: TypeID(2v1) <- Undefined
   79 r8: TypeID(2v1) <- Undefined
   80 r9: TypeID(2v1) <- Undefined
   81 r10: TypeID(2v1) <- Undefined
   82 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59503c:
   83 r14: TypeID(2v1) <- Get(r11)
0x59503f:
   84 r46: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
   85 r48: TypeID(2v1) <- Part { src: r15, offset: 0, size: 4 }
   86 r46: TypeID(2v1) <- Arith(BitXor, r46, r48)
   87 r49: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
   88 r15: TypeID(2v1) <- Concat { lo: r46, hi: r49 }
   89 r10: TypeID(2v1) <- False
   90 r2: TypeID(2v1) <- False
   91 r6: TypeID(2v1) <- SignOf(r46)
   92 r5: TypeID(2v1) <- IsZero(r46)
   93 r50: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
   94 r3: TypeID(2v1) <- Parity(r50)
0x595041:
   95 r19: TypeID(2v1) <- Get(r16)
0x595044:
   96 r46: TypeID(298680v1) <- Const { value: 4199488, size: 8 }
   97 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
   98 r2: TypeID(2v1) <- Undefined
   99 r3: TypeID(2v1) <- Undefined
  100 r4: TypeID(2v1) <- Undefined
  101 r5: TypeID(2v1) <- Undefined
  102 r6: TypeID(2v1) <- Undefined
  103 r7: TypeID(2v1) <- Undefined
  104 r8: TypeID(2v1) <- Undefined
  105 r9: TypeID(2v1) <- Undefined
  106 r10: TypeID(2v1) <- Undefined
0x595049:
  107 r46: TypeID(2v1) <- Const { value: 256, size: 8 }
  108 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  109 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  110 r14: TypeID(2v1) <- Get(r45)
0x595050:
  111 r14: TypeID(2v1) <- Arith(BitAnd, r14, r14)
  112 r6: TypeID(2v1) <- SignOf(r14)
  113 r5: TypeID(2v1) <- IsZero(r14)
  114 r47: TypeID(2v1) <- Part { src: r14, offset: 0, size: 1 }
  115 r3: TypeID(2v1) <- Parity(r14)
  116 r2: TypeID(2v1) <- False
  117 r10: TypeID(2v1) <- False
0x595053:
  118 r45: TypeID(2v1) <- SetJumpCondition(r5)
  119 r45: TypeID(2v1) <- Control(JmpIf(156))
0x595055:
  120 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  121 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  122 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  123 r16: TypeID(2v1) <- Get(r45)
0x595058:
  124 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  125 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  126 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  127 r19: TypeID(2v1) <- Get(r45)
0x59505c:
  128 r19: TypeID(2v1) <- Arith(BitAnd, r19, r19)
  129 r6: TypeID(2v1) <- SignOf(r19)
  130 r5: TypeID(2v1) <- IsZero(r19)
  131 r47: TypeID(2v1) <- Part { src: r19, offset: 0, size: 1 }
  132 r3: TypeID(2v1) <- Parity(r19)
  133 r2: TypeID(2v1) <- False
  134 r10: TypeID(2v1) <- False
0x59505f:
  135 r45: TypeID(2v1) <- SetJumpCondition(r5)
  136 r45: TypeID(2v1) <- Control(JmpIf(169))
0x595061:
  137 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  138 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  139 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  140 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  141 r45: TypeID(2v1) <- Call { callee: r19, first_arg: Some(r45) }
  142 r2: TypeID(2v1) <- Undefined
  143 r3: TypeID(2v1) <- Undefined
  144 r4: TypeID(2v1) <- Undefined
  145 r5: TypeID(2v1) <- Undefined
  146 r6: TypeID(2v1) <- Undefined
  147 r7: TypeID(2v1) <- Undefined
  148 r8: TypeID(2v1) <- Undefined
  149 r9: TypeID(2v1) <- Undefined
  150 r10: TypeID(2v1) <- Undefined
  151 r45: TypeID(2v1) <- Get(r16)
0x595063:
  152 r45: TypeID(2v1) <- Const { value: 0, size: 8 }
  153 r46: TypeID(2v1) <- Const { value: 256, size: 8 }
  154 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  155 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r45 }
0x59506e:
  156 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  157 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  158 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  159 r16: TypeID(2v1) <- Get(r45)
0x595071:
  160 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  161 r6: TypeID(2v1) <- SignOf(r16)
  162 r5: TypeID(2v1) <- IsZero(r16)
  163 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  164 r3: TypeID(2v1) <- Parity(r16)
  165 r2: TypeID(2v1) <- False
  166 r10: TypeID(2v1) <- False
0x595074:
  167 r45: TypeID(2v1) <- SetJumpCondition(r5)
  168 r45: TypeID(2v1) <- Control(JmpIf(198))
0x595076:
  169 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  170 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  171 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  172 r16: TypeID(2v1) <- Get(r45)
0x595079:
  173 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  174 r6: TypeID(2v1) <- SignOf(r16)
  175 r5: TypeID(2v1) <- IsZero(r16)
  176 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  177 r3: TypeID(2v1) <- Parity(r16)
  178 r2: TypeID(2v1) <- False
  179 r10: TypeID(2v1) <- False
0x59507c:
  180 r45: TypeID(2v1) <- SetJumpCondition(r5)
  181 r45: TypeID(2v1) <- Control(JmpIf(198))
0x59507e:
  182 r14: TypeID(2v1) <- Get(r17)
0x595081:
  183 r45: TypeID(2v1) <- CArg { value: r18, next_arg: None }
  184 r45: TypeID(2v1) <- CArg { value: r19, next_arg: Some(r45) }
  185 r45: TypeID(2v1) <- CArg { value: r15, next_arg: Some(r45) }
  186 r45: TypeID(2v1) <- CArg { value: r14, next_arg: Some(r45) }
  187 r45: TypeID(2v1) <- Call { callee: r16, first_arg: Some(r45) }
  188 r2: TypeID(2v1) <- Undefined
  189 r3: TypeID(2v1) <- Undefined
  190 r4: TypeID(2v1) <- Undefined
  191 r5: TypeID(2v1) <- Undefined
  192 r6: TypeID(2v1) <- Undefined
  193 r7: TypeID(2v1) <- Undefined
  194 r8: TypeID(2v1) <- Undefined
  195 r9: TypeID(2v1) <- Undefined
  196 r10: TypeID(2v1) <- Undefined
  197 r45: TypeID(2v1) <- Get(r16)
0x595083:
  198 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  199 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  200 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  201 r14: TypeID(2v1) <- Get(r45)
0x59508a:
  202 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  203 r45: TypeID(2v1) <- Void
  204 r45: TypeID(2v1) <- Get(r14)
  205 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  206 r47: TypeID(297676v1) <- Const { value: 5857392, size: 8 }
  207 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  208 r2: TypeID(2v1) <- Undefined
  209 r3: TypeID(2v1) <- Undefined
  210 r4: TypeID(2v1) <- Undefined
  211 r5: TypeID(2v1) <- Undefined
  212 r6: TypeID(2v1) <- Undefined
  213 r7: TypeID(2v1) <- Undefined
  214 r8: TypeID(2v1) <- Undefined
  215 r9: TypeID(2v1) <- Undefined
  216 r10: TypeID(2v1) <- Undefined
0x59508f:
  217 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  218 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  219 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  220 r14: TypeID(2v1) <- Get(r45)
0x595096:
  221 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  222 r45: TypeID(2v1) <- Void
  223 r45: TypeID(2v1) <- Get(r14)
  224 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  225 r47: TypeID(297650v1) <- Const { value: 5871760, size: 8 }
  226 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  227 r2: TypeID(2v1) <- Undefined
  228 r3: TypeID(2v1) <- Undefined
  229 r4: TypeID(2v1) <- Undefined
  230 r5: TypeID(2v1) <- Undefined
  231 r6: TypeID(2v1) <- Undefined
  232 r7: TypeID(2v1) <- Undefined
  233 r8: TypeID(2v1) <- Undefined
  234 r9: TypeID(2v1) <- Undefined
  235 r10: TypeID(2v1) <- Undefined
0x59509b:
  236 r46: TypeID(297702v1) <- Const { value: 5857232, size: 8 }
  237 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  238 r2: TypeID(2v1) <- Undefined
  239 r3: TypeID(2v1) <- Undefined
  240 r4: TypeID(2v1) <- Undefined
  241 r5: TypeID(2v1) <- Undefined
  242 r6: TypeID(2v1) <- Undefined
  243 r7: TypeID(2v1) <- Undefined
  244 r8: TypeID(2v1) <- Undefined
  245 r9: TypeID(2v1) <- Undefined
  246 r10: TypeID(2v1) <- Undefined
  247 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5950a0:
  248 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  249 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  250 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5950a7:
  251 r46: TypeID(298074v1) <- Const { value: 5852912, size: 8 }
  252 r45: TypeID(2v1) <- Call { callee: r46, first_arg: None }
  253 r2: TypeID(2v1) <- Undefined
  254 r3: TypeID(2v1) <- Undefined
  255 r4: TypeID(2v1) <- Undefined
  256 r5: TypeID(2v1) <- Undefined
  257 r6: TypeID(2v1) <- Undefined
  258 r7: TypeID(2v1) <- Undefined
  259 r8: TypeID(2v1) <- Undefined
  260 r9: TypeID(2v1) <- Undefined
  261 r10: TypeID(2v1) <- Undefined
  262 r16: TypeID(2v1) <- Part { src: r45, offset: 0, size: 8 }
0x5950ac:
  263 r46: TypeID(2v1) <- Const { value: 152, size: 8 }
  264 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  265 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  266 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
  267 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  268 r10: TypeID(2v1) <- OverflowOf(r45)
  269 r2: TypeID(2v1) <- CarryOf(r45)
  270 r6: TypeID(2v1) <- SignOf(r45)
  271 r5: TypeID(2v1) <- IsZero(r45)
  272 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  273 r3: TypeID(2v1) <- Parity(r48)
0x5950b4:
  274 r46: TypeID(2v1) <- Const { value: 160, size: 8 }
  275 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  276 r46: TypeID(2v1) <- StoreMem { addr: r46, value: r16 }
0x5950bb:
  277 r45: TypeID(2v1) <- SetJumpCondition(r5)
  278 r45: TypeID(2v1) <- Control(JmpIf(552))
0x5950c1:
  279 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  280 r6: TypeID(2v1) <- SignOf(r16)
  281 r5: TypeID(2v1) <- IsZero(r16)
  282 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  283 r3: TypeID(2v1) <- Parity(r16)
  284 r2: TypeID(2v1) <- False
  285 r10: TypeID(2v1) <- False
0x5950c4:
  286 r45: TypeID(2v1) <- SetJumpCondition(r5)
  287 r45: TypeID(2v1) <- Control(JmpIf(552))
0x5950ca:
  288 r46: TypeID(2v1) <- Const { value: 168, size: 8 }
  289 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  290 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  291 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  292 r16: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x5950d0:
  293 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  294 r48: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  295 r46: TypeID(2v1) <- Arith(BitAnd, r46, r48)
  296 r6: TypeID(2v1) <- SignOf(r46)
  297 r5: TypeID(2v1) <- IsZero(r46)
  298 r49: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  299 r3: TypeID(2v1) <- Parity(r46)
  300 r2: TypeID(2v1) <- False
  301 r10: TypeID(2v1) <- False
0x5950d2:
  302 r45: TypeID(2v1) <- SetJumpCondition(r5)
  303 r45: TypeID(2v1) <- Control(JmpIf(449))
0x5950d4:
  304 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  305 r47: TypeID(2v1) <- Const { value: 1, size: 4 }
  306 r46: TypeID(2v1) <- Arith(Sub, r46, r47)
  307 r10: TypeID(2v1) <- OverflowOf(r46)
  308 r2: TypeID(2v1) <- CarryOf(r46)
  309 r6: TypeID(2v1) <- SignOf(r46)
  310 r5: TypeID(2v1) <- IsZero(r46)
  311 r48: TypeID(2v1) <- Part { src: r46, offset: 0, size: 1 }
  312 r3: TypeID(2v1) <- Parity(r48)
0x5950d7:
  313 r45: TypeID(2v1) <- SetJumpCondition(r5)
  314 r45: TypeID(2v1) <- Control(JmpIf(412))
0x5950d9:
  315 r45: TypeID(2v1) <- Const { value: 7007800, size: 8 }
  316 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  317 r19: TypeID(2v1) <- Get(r45)
0x5950e0:
  318 r45: TypeID(2v1) <- Const { value: 2, size: 4 }
  319 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  320 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5950e5:
  321 r14: TypeID(2v1) <- Get(r17)
0x5950e8:
  322 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  323 r46: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  324 r11: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x5950ed:
  325 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  326 r45: TypeID(2v1) <- Void
  327 r45: TypeID(2v1) <- Get(r14)
  328 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  329 r46: TypeID(2v1) <- Void
  330 r46: TypeID(2v1) <- Get(r15)
  331 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  332 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  333 r47: TypeID(2v1) <- Void
  334 r47: TypeID(2v1) <- Get(r19)
  335 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  336 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  337 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  338 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  339 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  340 r2: TypeID(2v1) <- Undefined
  341 r3: TypeID(2v1) <- Undefined
  342 r4: TypeID(2v1) <- Undefined
  343 r5: TypeID(2v1) <- Undefined
  344 r6: TypeID(2v1) <- Undefined
  345 r7: TypeID(2v1) <- Undefined
  346 r8: TypeID(2v1) <- Undefined
  347 r9: TypeID(2v1) <- Undefined
  348 r10: TypeID(2v1) <- Undefined
0x5950f2:
  349 r46: TypeID(2v1) <- Const { value: 184, size: 8 }
  350 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  351 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  352 r16: TypeID(2v1) <- Get(r45)
0x5950f9:
  353 r16: TypeID(2v1) <- Arith(BitAnd, r16, r16)
  354 r6: TypeID(2v1) <- SignOf(r16)
  355 r5: TypeID(2v1) <- IsZero(r16)
  356 r47: TypeID(2v1) <- Part { src: r16, offset: 0, size: 1 }
  357 r3: TypeID(2v1) <- Parity(r16)
  358 r2: TypeID(2v1) <- False
  359 r10: TypeID(2v1) <- False
0x5950fc:
  360 r45: TypeID(2v1) <- SetJumpCondition(r5)
  361 r45: TypeID(2v1) <- Control(JmpIf(389))
0x5950fe:
  362 r46: TypeID(2v1) <- Const { value: 144, size: 8 }
  363 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  364 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 1 }
  365 r47: TypeID(2v1) <- Const { value: 1, size: 1 }
  366 r45: TypeID(2v1) <- Arith(BitAnd, r45, r47)
  367 r6: TypeID(2v1) <- SignOf(r45)
  368 r5: TypeID(2v1) <- IsZero(r45)
  369 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  370 r3: TypeID(2v1) <- Parity(r45)
  371 r2: TypeID(2v1) <- False
  372 r10: TypeID(2v1) <- False
0x595105:
  373 r45: TypeID(2v1) <- SetJumpCondition(r5)
  374 r45: TypeID(2v1) <- Control(JmpIf(389))
0x595107:
  375 r46: TypeID(2v1) <- Const { value: 140, size: 8 }
  376 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  377 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  378 r47: TypeID(2v1) <- Const { value: -1, size: 4 }
  379 r45: TypeID(2v1) <- Arith(Sub, r45, r47)
  380 r10: TypeID(2v1) <- OverflowOf(r45)
  381 r2: TypeID(2v1) <- CarryOf(r45)
  382 r6: TypeID(2v1) <- SignOf(r45)
  383 r5: TypeID(2v1) <- IsZero(r45)
  384 r48: TypeID(2v1) <- Part { src: r45, offset: 0, size: 1 }
  385 r3: TypeID(2v1) <- Parity(r48)
0x59510e:
  386 r45: TypeID(2v1) <- Not(r5)
  387 r46: TypeID(2v1) <- SetJumpCondition(r45)
  388 r46: TypeID(2v1) <- Control(JmpIf(504))
0x595110:
  389 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  390 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  391 r12: TypeID(2v1) <- Get(r12)
  392 r10: TypeID(2v1) <- OverflowOf(r12)
  393 r2: TypeID(2v1) <- CarryOf(r12)
  394 r6: TypeID(2v1) <- SignOf(r12)
  395 r5: TypeID(2v1) <- IsZero(r12)
  396 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  397 r3: TypeID(2v1) <- Parity(r47)
0x595114:
  398 r46: TypeID(2v1) <- Part { src: r11, offset: 0, size: 4 }
  399 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  400 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595116:
  401 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  402 r17: TypeID(2v1) <- Get(r45)
  403 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595117:
  404 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  405 r11: TypeID(2v1) <- Get(r45)
  406 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595118:
  407 r45: TypeID(2v1) <- Void
  408 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  409 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  410 r47: TypeID(2v1) <- SetReturnValue(r45)
  411 r47: TypeID(2v1) <- Control(Ret)
0x595120:
  412 r46: TypeID(2v1) <- Const { value: 176, size: 8 }
  413 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  414 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  415 r19: TypeID(2v1) <- Get(r45)
0x595127:
  416 r46: TypeID(2v1) <- Const { value: 216, size: 8 }
  417 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  418 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  419 r15: TypeID(2v1) <- Get(r45)
0x59512e:
  420 r14: TypeID(2v1) <- Get(r17)
0x595131:
  421 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  422 r45: TypeID(2v1) <- Void
  423 r45: TypeID(2v1) <- Get(r14)
  424 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  425 r46: TypeID(2v1) <- Void
  426 r46: TypeID(2v1) <- Get(r15)
  427 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  428 r47: TypeID(2v1) <- Void
  429 r47: TypeID(2v1) <- Get(r19)
  430 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  431 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  432 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  433 r49: TypeID(297636v1) <- Const { value: 5845200, size: 8 }
  434 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  435 r2: TypeID(2v1) <- Undefined
  436 r3: TypeID(2v1) <- Undefined
  437 r4: TypeID(2v1) <- Undefined
  438 r5: TypeID(2v1) <- Undefined
  439 r6: TypeID(2v1) <- Undefined
  440 r7: TypeID(2v1) <- Undefined
  441 r8: TypeID(2v1) <- Undefined
  442 r9: TypeID(2v1) <- Undefined
  443 r10: TypeID(2v1) <- Undefined
  444 r16: TypeID(2v1) <- Part { src: r48, offset: 0, size: 8 }
0x595136:
  445 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  446 r47: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  447 r11: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595138:
  448 r45: TypeID(2v1) <- Control(Jmp(349))
0x595140:
  449 r46: TypeID(2v1) <- Const { value: 176, size: 8 }
  450 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  451 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  452 r18: TypeID(2v1) <- Get(r45)
0x595147:
  453 r46: TypeID(2v1) <- Const { value: 208, size: 8 }
  454 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  455 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 4 }
  456 r47: TypeID(2v1) <- Part { src: r19, offset: 4, size: 4 }
  457 r19: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x59514d:
  458 r14: TypeID(2v1) <- Get(r17)
0x595150:
  459 r46: TypeID(2v1) <- Const { value: 192, size: 8 }
  460 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  461 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  462 r15: TypeID(2v1) <- Get(r45)
0x595157:
  463 r46: TypeID(2v1) <- Const { value: 200, size: 8 }
  464 r46: TypeID(2v1) <- Arith(Add, r46, r17)
  465 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  466 r20: TypeID(2v1) <- Get(r45)
0x59515e:
  467 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  468 r45: TypeID(2v1) <- Void
  469 r45: TypeID(2v1) <- Get(r14)
  470 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  471 r46: TypeID(2v1) <- Void
  472 r46: TypeID(2v1) <- Get(r15)
  473 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  474 r47: TypeID(2v1) <- Void
  475 r47: TypeID(2v1) <- Get(r19)
  476 r47: TypeID(2v1) <- Part { src: r47, offset: 0, size: 4 }
  477 r48: TypeID(2v1) <- Ancestral(AncestralName("arg3"))
  478 r48: TypeID(2v1) <- Void
  479 r48: TypeID(2v1) <- Get(r18)
  480 r49: TypeID(2v1) <- Ancestral(AncestralName("arg4"))
  481 r49: TypeID(2v1) <- Void
  482 r49: TypeID(2v1) <- Get(r20)
  483 r50: TypeID(2v1) <- CArg { value: r49, next_arg: None }
  484 r50: TypeID(2v1) <- CArg { value: r48, next_arg: Some(r50) }
  485 r50: TypeID(2v1) <- CArg { value: r47, next_arg: Some(r50) }
  486 r50: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r50) }
  487 r50: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r50) }
  488 r51: TypeID(297640v1) <- Const { value: 5845184, size: 8 }
  489 r50: TypeID(2v1) <- Call { callee: r51, first_arg: Some(r50) }
  490 r2: TypeID(2v1) <- Undefined
  491 r3: TypeID(2v1) <- Undefined
  492 r4: TypeID(2v1) <- Undefined
  493 r5: TypeID(2v1) <- Undefined
  494 r6: TypeID(2v1) <- Undefined
  495 r7: TypeID(2v1) <- Undefined
  496 r8: TypeID(2v1) <- Undefined
  497 r9: TypeID(2v1) <- Undefined
  498 r10: TypeID(2v1) <- Undefined
  499 r16: TypeID(2v1) <- Part { src: r50, offset: 0, size: 8 }
0x595163:
  500 r46: TypeID(2v1) <- Part { src: r16, offset: 0, size: 4 }
  501 r47: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  502 r11: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595165:
  503 r45: TypeID(2v1) <- Control(Jmp(349))
0x595170:
  504 r46: TypeID(2v1) <- Const { value: 0, size: 8 }
  505 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  506 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  507 r15: TypeID(2v1) <- Get(r45)
0x595173:
  508 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  509 r46: TypeID(2v1) <- Arith(Add, r46, r16)
  510 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 8 }
  511 r19: TypeID(2v1) <- Get(r45)
0x595177:
  512 r14: TypeID(2v1) <- Get(r17)
0x59517a:
  513 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  514 r45: TypeID(2v1) <- Void
  515 r45: TypeID(2v1) <- Get(r14)
  516 r46: TypeID(2v1) <- CArg { value: r45, next_arg: None }
  517 r47: TypeID(297633v1) <- Const { value: 5844800, size: 8 }
  518 r46: TypeID(2v1) <- Call { callee: r47, first_arg: Some(r46) }
  519 r2: TypeID(2v1) <- Undefined
  520 r3: TypeID(2v1) <- Undefined
  521 r4: TypeID(2v1) <- Undefined
  522 r5: TypeID(2v1) <- Undefined
  523 r6: TypeID(2v1) <- Undefined
  524 r7: TypeID(2v1) <- Undefined
  525 r8: TypeID(2v1) <- Undefined
  526 r9: TypeID(2v1) <- Undefined
  527 r10: TypeID(2v1) <- Undefined
  528 r16: TypeID(2v1) <- Part { src: r46, offset: 0, size: 8 }
0x59517f:
  529 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
  530 r12: TypeID(2v1) <- Arith(Add, r12, r46)
  531 r12: TypeID(2v1) <- Get(r12)
  532 r10: TypeID(2v1) <- OverflowOf(r12)
  533 r2: TypeID(2v1) <- CarryOf(r12)
  534 r6: TypeID(2v1) <- SignOf(r12)
  535 r5: TypeID(2v1) <- IsZero(r12)
  536 r47: TypeID(2v1) <- Part { src: r12, offset: 0, size: 1 }
  537 r3: TypeID(2v1) <- Parity(r47)
0x595183:
  538 r46: TypeID(2v1) <- Part { src: r11, offset: 0, size: 4 }
  539 r47: TypeID(2v1) <- Part { src: r16, offset: 4, size: 4 }
  540 r16: TypeID(2v1) <- Concat { lo: r46, hi: r47 }
0x595185:
  541 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  542 r17: TypeID(2v1) <- Get(r45)
  543 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595186:
  544 r45: TypeID(2v1) <- LoadMem { addr: r12, size: 8 }
  545 r11: TypeID(2v1) <- Get(r45)
  546 r12: TypeID(2v1) <- ArithK(Add, r12, 8)
0x595187:
  547 r45: TypeID(2v1) <- Void
  548 r45: TypeID(2v1) <- Concat { lo: r45, hi: r16 }
  549 r45: TypeID(2v1) <- Part { src: r45, offset: 0, size: 4 }
  550 r47: TypeID(2v1) <- SetReturnValue(r45)
  551 r47: TypeID(2v1) <- Control(Ret)
0x595188:
  552 r45: TypeID(2v1) <- Const { value: 6951854, size: 8 }
  553 r45: TypeID(2v1) <- Arith(Add, r45, r13)
  554 r19: TypeID(2v1) <- Get(r45)
0x59518f:
  555 r45: TypeID(2v1) <- Const { value: 5, size: 4 }
  556 r46: TypeID(2v1) <- Part { src: r15, offset: 4, size: 4 }
  557 r15: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x595194:
  558 r14: TypeID(2v1) <- Get(r17)
0x595197:
  559 r45: TypeID(2v1) <- Const { value: 4294967295, size: 4 }
  560 r46: TypeID(2v1) <- Part { src: r11, offset: 4, size: 4 }
  561 r11: TypeID(2v1) <- Concat { lo: r45, hi: r46 }
0x59519c:
  562 r45: TypeID(2v1) <- Ancestral(AncestralName("arg0"))
  563 r45: TypeID(2v1) <- Void
  564 r45: TypeID(2v1) <- Get(r14)
  565 r46: TypeID(2v1) <- Ancestral(AncestralName("arg1"))
  566 r46: TypeID(2v1) <- Void
  567 r46: TypeID(2v1) <- Get(r15)
  568 r46: TypeID(2v1) <- Part { src: r46, offset: 0, size: 4 }
  569 r47: TypeID(2v1) <- Ancestral(AncestralName("arg2"))
  570 r47: TypeID(2v1) <- Void
  571 r47: TypeID(2v1) <- Get(r19)
  572 r48: TypeID(2v1) <- CArg { value: r47, next_arg: None }
  573 r48: TypeID(2v1) <- CArg { value: r46, next_arg: Some(r48) }
  574 r48: TypeID(2v1) <- CArg { value: r45, next_arg: Some(r48) }
  575 r49: TypeID(298077v1) <- Const { value: 5852656, size: 8 }
  576 r48: TypeID(2v1) <- Call { callee: r49, first_arg: Some(r48) }
  577 r2: TypeID(2v1) <- Undefined
  578 r3: TypeID(2v1) <- Undefined
  579 r4: TypeID(2v1) <- Undefined
  580 r5: TypeID(2v1) <- Undefined
  581 r6: TypeID(2v1) <- Undefined
  582 r7: TypeID(2v1) <- Undefined
  583 r8: TypeID(2v1) <- Undefined
  584 r9: TypeID(2v1) <- Undefined
  585 r10: TypeID(2v1) <- Undefined
0x5951a1:
  586 r45: TypeID(2v1) <- Control(Jmp(389))


ssa pre-xform:
ssa program  600 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
         r11: ? <- Ancestral(AncestralName("RSP"))
  (  2)  r12: ? <- Ancestral(AncestralName("RIP"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 27)  r43: ? <- Ancestral(AncestralName("arg0"))
  (  2)  r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
         r47: ? <- Const { value: 12, size: 8 }
  (  6)  r48: ? <- Arith(Add, r47, r43)
         r50: ? <- ArithK(Add, r45, -8)
         r51: ? <- StoreMem { addr: r50, value: r16 }
         r62: ? <- Const { value: 0, size: 4 }
         r63: ? <- Const { value: 8, size: 8 }
         r64: ? <- Arith(Add, r63, r43)
         r65: ? <- StoreMem { addr: r64, value: r62 }
         r70: ? <- CArg { value: r48, next_arg: None }
         r71: strlen <TypeID(297696v1)> <- Const { value: 4199136, size: 8 }
         r72: ? <- Call { callee: r71, first_arg: Some(r70) }
  (  2)  r82: ? <- Part { src: r72, offset: 0, size: 8 }
         r84: ? <- Part { src: r14, offset: 0, size: 4 }
         r85: ? <- Part { src: r14, offset: 0, size: 4 }
         r86: ? <- Arith(BitXor, r84, r85)
         r87: ? <- Part { src: r14, offset: 4, size: 4 }
  (  4)  r88: ? <- Concat { lo: r86, hi: r87 }
         r96: __builtin_memset <TypeID(298680v1)> <- Const { value: 4199488, size: 8 }
         r97: ? <- Call { callee: r96, first_arg: None }
         r107: ? <- Const { value: 256, size: 8 }
         r108: ? <- Arith(Add, r107, r43)
  (  2)  r109: ? <- LoadMem { addr: r108, size: 8 }
  (  2)  r111: ? <- Arith(BitAnd, r109, r109)
         r113: ? <- IsZero(r111)
         r118: ? <- SetJumpCondition(r113)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
         r120: ? <- Const { value: 0, size: 8 }
         r121: ? <- Arith(Add, r120, r43)
  (  2)  r122: ? <- LoadMem { addr: r121, size: 8 }
         r124: ? <- Const { value: 8, size: 8 }
         r125: ? <- Arith(Add, r124, r122)
  (  2)  r126: ? <- LoadMem { addr: r125, size: 8 }
  (  3)  r128: ? <- Arith(BitAnd, r126, r126)
         r130: ? <- IsZero(r128)
         r135: ? <- SetJumpCondition(r130)
         r599: ? <- Upsilon { value: r122, phi_ref: r587 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r137: ? <- CArg { value: r17, next_arg: None }
         r138: ? <- CArg { value: r128, next_arg: Some(r137) }
         r139: ? <- CArg { value: r88, next_arg: Some(r138) }
         r140: ? <- CArg { value: r111, next_arg: Some(r139) }
         r141: ? <- Call { callee: r128, first_arg: Some(r140) }
         r152: ? <- Const { value: 0, size: 8 }
         r153: ? <- Const { value: 256, size: 8 }
         r154: ? <- Arith(Add, r153, r43)
         r155: ? <- StoreMem { addr: r154, value: r152 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
         r156: ? <- Const { value: 0, size: 8 }
         r157: ? <- Arith(Add, r156, r43)
  (  2)  r158: ? <- LoadMem { addr: r157, size: 8 }
  (  2)  r160: ? <- Arith(BitAnd, r158, r158)
         r162: ? <- IsZero(r160)
         r167: ? <- SetJumpCondition(r162)
         r598: ? <- Upsilon { value: r160, phi_ref: r587 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r587: ? <- Phi
         r169: ? <- Const { value: 0, size: 8 }
         r170: ? <- Arith(Add, r169, r587)
  (  2)  r171: ? <- LoadMem { addr: r170, size: 8 }
  (  2)  r173: ? <- Arith(BitAnd, r171, r171)
         r175: ? <- IsZero(r173)
         r180: ? <- SetJumpCondition(r175)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r183: ? <- CArg { value: r17, next_arg: None }
         r184: ? <- CArg { value: r82, next_arg: Some(r183) }
         r185: ? <- CArg { value: r88, next_arg: Some(r184) }
         r186: ? <- CArg { value: r43, next_arg: Some(r185) }
         r187: ? <- Call { callee: r173, first_arg: Some(r186) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r198: ? <- Const { value: 152, size: 8 }
         r199: ? <- Arith(Add, r198, r43)
         r200: ? <- LoadMem { addr: r199, size: 8 }
         r205: ? <- CArg { value: r200, next_arg: None }
         r206: hi_sdsfree <TypeID(297676v1)> <- Const { value: 5857392, size: 8 }
         r207: ? <- Call { callee: r206, first_arg: Some(r205) }
         r217: ? <- Const { value: 160, size: 8 }
         r218: ? <- Arith(Add, r217, r43)
         r219: ? <- LoadMem { addr: r218, size: 8 }
         r224: ? <- CArg { value: r219, next_arg: None }
         r225: redisReaderFree <TypeID(297650v1)> <- Const { value: 5871760, size: 8 }
         r226: ? <- Call { callee: r225, first_arg: Some(r224) }
         r236: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r237: ? <- Call { callee: r236, first_arg: None }
         r247: ? <- Part { src: r237, offset: 0, size: 8 }
         r248: ? <- Const { value: 152, size: 8 }
         r249: ? <- Arith(Add, r248, r43)
         r250: ? <- StoreMem { addr: r249, value: r247 }
         r251: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
         r252: ? <- Call { callee: r251, first_arg: None }
  (  4)  r262: ? <- Part { src: r252, offset: 0, size: 8 }
         r263: ? <- Const { value: 152, size: 8 }
         r264: ? <- Arith(Add, r263, r43)
         r265: ? <- LoadMem { addr: r264, size: 8 }
         r266: ? <- Const { value: 0, size: 8 }
         r267: ? <- Arith(Sub, r265, r266)
         r271: ? <- IsZero(r267)
         r274: ? <- Const { value: 160, size: 8 }
         r275: ? <- Arith(Add, r274, r43)
         r276: ? <- StoreMem { addr: r275, value: r262 }
         r277: ? <- SetJumpCondition(r271)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
  (  2)  r279: ? <- Arith(BitAnd, r262, r262)
         r281: ? <- IsZero(r279)
         r286: ? <- SetJumpCondition(r281)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r288: ? <- Const { value: 168, size: 8 }
         r289: ? <- Arith(Add, r288, r43)
         r290: ? <- LoadMem { addr: r289, size: 4 }
         r291: ? <- Part { src: r279, offset: 4, size: 4 }
  (  3)  r292: ? <- Concat { lo: r290, hi: r291 }
         r293: ? <- Part { src: r292, offset: 0, size: 4 }
         r294: ? <- Part { src: r292, offset: 0, size: 4 }
         r295: ? <- Arith(BitAnd, r293, r294)
         r297: ? <- IsZero(r295)
         r302: ? <- SetJumpCondition(r297)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r304: ? <- Part { src: r292, offset: 0, size: 4 }
         r305: ? <- Const { value: 1, size: 4 }
         r306: ? <- Arith(Sub, r304, r305)
         r310: ? <- IsZero(r306)
         r313: ? <- SetJumpCondition(r310)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r315: ? <- Const { value: 7007800, size: 8 }
         r316: ? <- Arith(Add, r315, r12)
         r318: ? <- Const { value: 2, size: 4 }
         r319: ? <- Part { src: r88, offset: 4, size: 4 }
         r320: ? <- Concat { lo: r318, hi: r319 }
         r331: ? <- Part { src: r320, offset: 0, size: 4 }
         r335: ? <- CArg { value: r316, next_arg: None }
         r336: ? <- CArg { value: r331, next_arg: Some(r335) }
         r337: ? <- CArg { value: r43, next_arg: Some(r336) }
         r338: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r339: ? <- Call { callee: r338, first_arg: Some(r337) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r412: ? <- Const { value: 176, size: 8 }
         r413: ? <- Arith(Add, r412, r43)
         r414: ? <- LoadMem { addr: r413, size: 8 }
         r416: ? <- Const { value: 216, size: 8 }
         r417: ? <- Arith(Add, r416, r43)
         r418: ? <- LoadMem { addr: r417, size: 8 }
         r430: ? <- CArg { value: r414, next_arg: None }
         r431: ? <- CArg { value: r418, next_arg: Some(r430) }
         r432: ? <- CArg { value: r43, next_arg: Some(r431) }
         r433: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r434: ? <- Call { callee: r433, first_arg: Some(r432) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r449: ? <- Const { value: 176, size: 8 }
         r450: ? <- Arith(Add, r449, r43)
         r451: ? <- LoadMem { addr: r450, size: 8 }
         r453: ? <- Const { value: 208, size: 8 }
         r454: ? <- Arith(Add, r453, r43)
         r455: ? <- LoadMem { addr: r454, size: 4 }
         r456: ? <- Part { src: r82, offset: 4, size: 4 }
         r457: ? <- Concat { lo: r455, hi: r456 }
         r459: ? <- Const { value: 192, size: 8 }
         r460: ? <- Arith(Add, r459, r43)
         r461: ? <- LoadMem { addr: r460, size: 8 }
         r463: ? <- Const { value: 200, size: 8 }
         r464: ? <- Arith(Add, r463, r43)
         r465: ? <- LoadMem { addr: r464, size: 8 }
         r476: ? <- Part { src: r457, offset: 0, size: 4 }
         r483: ? <- CArg { value: r465, next_arg: None }
         r484: ? <- CArg { value: r451, next_arg: Some(r483) }
         r485: ? <- CArg { value: r476, next_arg: Some(r484) }
         r486: ? <- CArg { value: r461, next_arg: Some(r485) }
         r487: ? <- CArg { value: r43, next_arg: Some(r486) }
         r488: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r489: ? <- Call { callee: r488, first_arg: Some(r487) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r349: ? <- Const { value: 184, size: 8 }
         r350: ? <- Arith(Add, r349, r43)
  (  2)  r351: ? <- LoadMem { addr: r350, size: 8 }
  (  4)  r353: ? <- Arith(BitAnd, r351, r351)
         r355: ? <- IsZero(r353)
         r360: ? <- SetJumpCondition(r355)
         r592: ? <- Upsilon { value: r48, phi_ref: r588 }
         r593: ? <- Upsilon { value: r353, phi_ref: r589 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r362: ? <- Const { value: 144, size: 8 }
         r363: ? <- Arith(Add, r362, r43)
         r364: ? <- LoadMem { addr: r363, size: 1 }
         r365: ? <- Const { value: 1, size: 1 }
         r366: ? <- Arith(BitAnd, r364, r365)
         r368: ? <- IsZero(r366)
         r373: ? <- SetJumpCondition(r368)
         r594: ? <- Upsilon { value: r48, phi_ref: r588 }
         r595: ? <- Upsilon { value: r353, phi_ref: r589 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r375: ? <- Const { value: 140, size: 8 }
         r376: ? <- Arith(Add, r375, r43)
         r377: ? <- LoadMem { addr: r376, size: 4 }
         r378: ? <- Const { value: -1, size: 4 }
         r379: ? <- Arith(Sub, r377, r378)
         r383: ? <- IsZero(r379)
         r386: ? <- Not(r383)
         r387: ? <- SetJumpCondition(r386)
         r596: ? <- Upsilon { value: r48, phi_ref: r588 }
         r597: ? <- Upsilon { value: r353, phi_ref: r589 }
.B17:    ;; preds:B13  → Always(Return).
         r516: ? <- CArg { value: r43, next_arg: None }
         r517: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r518: ? <- Call { callee: r517, first_arg: Some(r516) }
         r528: ? <- Part { src: r518, offset: 0, size: 8 }
         r538: ? <- Part { src: r48, offset: 0, size: 4 }
         r539: ? <- Part { src: r528, offset: 4, size: 4 }
         r540: ? <- Concat { lo: r538, hi: r539 }
         r548: ? <- Concat { lo: r547, hi: r540 }
         r549: ? <- Part { src: r548, offset: 0, size: 4 }
         r550: ? <- SetReturnValue(r549)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r552: ? <- Const { value: 6951854, size: 8 }
         r553: ? <- Arith(Add, r552, r12)
         r555: ? <- Const { value: 5, size: 4 }
         r556: ? <- Part { src: r88, offset: 4, size: 4 }
         r557: ? <- Concat { lo: r555, hi: r556 }
         r559: ? <- Const { value: 4294967295, size: 4 }
         r560: ? <- Part { src: r48, offset: 4, size: 4 }
         r561: ? <- Concat { lo: r559, hi: r560 }
         r568: ? <- Part { src: r557, offset: 0, size: 4 }
         r572: ? <- CArg { value: r553, next_arg: None }
         r573: ? <- CArg { value: r568, next_arg: Some(r572) }
         r574: ? <- CArg { value: r43, next_arg: Some(r573) }
         r575: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r576: ? <- Call { callee: r575, first_arg: Some(r574) }
         r590: ? <- Upsilon { value: r561, phi_ref: r588 }
         r591: ? <- Upsilon { value: r262, phi_ref: r589 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r589: ? <- Phi
         r588: ? <- Phi
         r398: ? <- Part { src: r588, offset: 0, size: 4 }
         r399: ? <- Part { src: r589, offset: 4, size: 4 }
         r400: ? <- Concat { lo: r398, hi: r399 }
         r408: ? <- Concat { lo: r407, hi: r400 }
         r409: ? <- Part { src: r408, offset: 0, size: 4 }
         r410: ? <- SetReturnValue(r409)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) } [r10, r11, r12, r14, r16, r17, r43, r45, r46, r47, r48, r50, r51, r62, r63, r64, r65, r70, r71, r72, r82, r84, r85, r86, r87, r88, r96, r97, r107, r108, r109, r111, r113, r118]
  BlockID(1) -> Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) } [r120, r121, r122, r124, r125, r126, r128, r130, r135, r599]
  BlockID(2) -> Always(Block(BlockID(3))) [r137, r138, r139, r140, r141, r152, r153, r154, r155]
  BlockID(3) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) } [r156, r157, r158, r160, r162, r167, r598]
  BlockID(4) -> Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) } [r587, r169, r170, r171, r173, r175, r180]
  BlockID(5) -> Always(Block(BlockID(6))) [r183, r184, r185, r186, r187]
  BlockID(6) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) } [r198, r199, r200, r205, r206, r207, r217, r218, r219, r224, r225, r226, r236, r237, r247, r248, r249, r250, r251, r252, r262, r263, r264, r265, r266, r267, r271, r274, r275, r276, r277]
  BlockID(7) -> Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) } [r279, r281, r286]
  BlockID(8) -> Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) } [r288, r289, r290, r291, r292, r293, r294, r295, r297, r302]
  BlockID(9) -> Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) } [r304, r305, r306, r310, r313]
  BlockID(10) -> Always(Block(BlockID(11))) [r315, r316, r318, r319, r320, r331, r335, r336, r337, r338, r339]
  BlockID(11) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) } [r349, r350, r351, r353, r355, r360, r592, r593]
  BlockID(12) -> Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) } [r362, r363, r364, r365, r366, r368, r373, r594, r595]
  BlockID(13) -> Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) } [r375, r376, r377, r378, r379, r383, r386, r387, r596, r597]
  BlockID(14) -> Always(Return) [r589, r588, r398, r399, r400, r407, r408, r409, r410]
  BlockID(15) -> Always(Block(BlockID(11))) [r412, r413, r414, r416, r417, r418, r430, r431, r432, r433, r434]
  BlockID(16) -> Always(Block(BlockID(11))) [r449, r450, r451, r453, r454, r455, r456, r457, r459, r460, r461, r463, r464, r465, r476, r483, r484, r485, r486, r487, r488, r489]
  BlockID(17) -> Always(Return) [r516, r517, r518, r528, r538, r539, r540, r547, r548, r549, r550]
  BlockID(18) -> Always(Block(BlockID(14))) [r552, r553, r555, r556, r557, r559, r560, r561, r568, r572, r573, r574, r575, r576, r590, r591]
  domtree:
    BlockID(0)
    |  BlockID(1)
    |  |  BlockID(2)
    |  BlockID(3)
    |  BlockID(4)
    |  |  BlockID(5)
    |  BlockID(6)
    |  |  BlockID(7)
    |  |  |  BlockID(8)
    |  |  |  |  BlockID(9)
    |  |  |  |  |  BlockID(10)
    |  |  |  |  |  BlockID(15)
    |  |  |  |  BlockID(11)
    |  |  |  |  |  BlockID(12)
    |  |  |  |  |  |  BlockID(13)
    |  |  |  |  |  |  |  BlockID(17)
    |  |  |  |  BlockID(16)
    |  |  BlockID(14)
    |  |  BlockID(18)

ssa post-xform:
ssa program  600 instrs
.B0:    ;;  → Conditional { pos: Block(BlockID(3)), neg: Block(BlockID(1)) }.
         r10: ? <- Ancestral(AncestralName("RBP"))
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  2)  r12: ? <- Ancestral(AncestralName("RIP"))
  (  3)  r14: ? <- Ancestral(AncestralName("RSI"))
         r16: ? <- Ancestral(AncestralName("RBX"))
  (  2)  r17: ? <- Ancestral(AncestralName("RCX"))
  ( 27)  r43: ? <- Ancestral(AncestralName("arg0"))
         r45: ? <- ArithK(Add, r11, -8)
         r46: ? <- StoreMem { addr: r45, value: r10 }
  (  6)  r48: ? <- ArithK(Add, r43, 12)
         r50: ? <- ArithK(Add, r11, -16)
         r51: ? <- StoreMem { addr: r50, value: r16 }
         r62: ? <- Const { value: 0, size: 4 }
         r64: ? <- ArithK(Add, r43, 8)
         r65: ? <- StoreMem { addr: r64, value: r62 }
         r70: ? <- CArg { value: r48, next_arg: None }
         r71: strlen <TypeID(297696v1)> <- Const { value: 4199136, size: 8 }
         r72: ? <- Call { callee: r71, first_arg: Some(r70) }
         r84: ? <- Part { src: r14, offset: 0, size: 4 }
         r85: ? <- Part { src: r14, offset: 0, size: 4 }
         r86: ? <- Arith(BitXor, r84, r85)
         r87: ? <- Part { src: r14, offset: 4, size: 4 }
  (  2)  r88: ? <- Concat { lo: r86, hi: r87 }
         r96: __builtin_memset <TypeID(298680v1)> <- Const { value: 4199488, size: 8 }
         r97: ? <- Call { callee: r96, first_arg: None }
         r108: ? <- ArithK(Add, r43, 256)
  (  2)  r109: ? <- LoadMem { addr: r108, size: 8 }
         r113: ? <- IsZero(r109)
         r118: ? <- SetJumpCondition(r113)
.B1:    ;; preds:B0  → Conditional { pos: Block(BlockID(4)), neg: Block(BlockID(2)) }.
  (  2)  r122: ? <- LoadMem { addr: r43, size: 8 }
         r125: ? <- ArithK(Add, r122, 8)
  (  3)  r126: ? <- LoadMem { addr: r125, size: 8 }
         r130: ? <- IsZero(r126)
         r135: ? <- SetJumpCondition(r130)
         r599: ? <- Upsilon { value: r122, phi_ref: r587 }
.B2:    ;; preds:B1  → Always(Block(BlockID(3))).
         r137: ? <- CArg { value: r17, next_arg: None }
         r138: ? <- CArg { value: r126, next_arg: Some(r137) }
         r139: ? <- CArg { value: r88, next_arg: Some(r138) }
         r140: ? <- CArg { value: r109, next_arg: Some(r139) }
         r141: ? <- Call { callee: r126, first_arg: Some(r140) }
         r152: ? <- Const { value: 0, size: 8 }
         r154: ? <- ArithK(Add, r43, 256)
         r155: ? <- StoreMem { addr: r154, value: r152 }
.B3:    ;; preds:B0,B2  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(4)) }.
  (  2)  r158: ? <- LoadMem { addr: r43, size: 8 }
         r162: ? <- IsZero(r158)
         r167: ? <- SetJumpCondition(r162)
         r598: ? <- Upsilon { value: r158, phi_ref: r587 }
.B4:    ;; preds:B1,B3  → Conditional { pos: Block(BlockID(6)), neg: Block(BlockID(5)) }.
         r587: ? <- Phi
  (  2)  r171: ? <- LoadMem { addr: r587, size: 8 }
         r175: ? <- IsZero(r171)
         r180: ? <- SetJumpCondition(r175)
.B5:    ;; preds:B4  → Always(Block(BlockID(6))).
         r183: ? <- CArg { value: r17, next_arg: None }
         r184: ? <- CArg { value: r72, next_arg: Some(r183) }
         r185: ? <- CArg { value: r88, next_arg: Some(r184) }
         r186: ? <- CArg { value: r43, next_arg: Some(r185) }
         r187: ? <- Call { callee: r171, first_arg: Some(r186) }
.B6:    ;; preds:B3,B4,B5  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(7)) }.
         r199: ? <- ArithK(Add, r43, 152)
         r200: ? <- LoadMem { addr: r199, size: 8 }
         r205: ? <- CArg { value: r200, next_arg: None }
         r206: hi_sdsfree <TypeID(297676v1)> <- Const { value: 5857392, size: 8 }
         r207: ? <- Call { callee: r206, first_arg: Some(r205) }
         r218: ? <- ArithK(Add, r43, 160)
         r219: ? <- LoadMem { addr: r218, size: 8 }
         r224: ? <- CArg { value: r219, next_arg: None }
         r225: redisReaderFree <TypeID(297650v1)> <- Const { value: 5871760, size: 8 }
         r226: ? <- Call { callee: r225, first_arg: Some(r224) }
         r236: hi_sdsempty <TypeID(297702v1)> <- Const { value: 5857232, size: 8 }
         r237: ? <- Call { callee: r236, first_arg: None }
         r249: ? <- ArithK(Add, r43, 152)
         r250: ? <- StoreMem { addr: r249, value: r237 }
         r251: redisReaderCreate <TypeID(298074v1)> <- Const { value: 5852912, size: 8 }
  (  2)  r252: ? <- Call { callee: r251, first_arg: None }
         r264: ? <- ArithK(Add, r43, 152)
         r265: ? <- LoadMem { addr: r264, size: 8 }
         r271: ? <- IsZero(r265)
         r275: ? <- ArithK(Add, r43, 160)
         r276: ? <- StoreMem { addr: r275, value: r252 }
         r277: ? <- SetJumpCondition(r271)
.B7:    ;; preds:B6  → Conditional { pos: Block(BlockID(18)), neg: Block(BlockID(8)) }.
         r281: ? <- IsZero(r252)
         r286: ? <- SetJumpCondition(r281)
.B8:    ;; preds:B7  → Conditional { pos: Block(BlockID(16)), neg: Block(BlockID(9)) }.
         r289: ? <- ArithK(Add, r43, 168)
  (  2)  r290: ? <- LoadMem { addr: r289, size: 4 }
         r297: ? <- IsZero(r290)
         r302: ? <- SetJumpCondition(r297)
.B9:    ;; preds:B8  → Conditional { pos: Block(BlockID(15)), neg: Block(BlockID(10)) }.
         r306: ? <- ArithK(Add, r290, -1)
         r310: ? <- IsZero(r306)
         r313: ? <- SetJumpCondition(r310)
.B10:    ;; preds:B9  → Always(Block(BlockID(11))).
         r316: ? <- ArithK(Add, r12, 7007800)
         r318: ? <- Const { value: 2, size: 4 }
         r335: ? <- CArg { value: r316, next_arg: None }
         r336: ? <- CArg { value: r318, next_arg: Some(r335) }
         r337: ? <- CArg { value: r43, next_arg: Some(r336) }
         r338: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r339: ? <- Call { callee: r338, first_arg: Some(r337) }
.B15:    ;; preds:B9  → Always(Block(BlockID(11))).
         r413: ? <- ArithK(Add, r43, 176)
         r414: ? <- LoadMem { addr: r413, size: 8 }
         r417: ? <- ArithK(Add, r43, 216)
         r418: ? <- LoadMem { addr: r417, size: 8 }
         r430: ? <- CArg { value: r414, next_arg: None }
         r431: ? <- CArg { value: r418, next_arg: Some(r430) }
         r432: ? <- CArg { value: r43, next_arg: Some(r431) }
         r433: redisContextConnectUnix <TypeID(297636v1)> <- Const { value: 5845200, size: 8 }
         r434: ? <- Call { callee: r433, first_arg: Some(r432) }
.B16:    ;; preds:B8  → Always(Block(BlockID(11))).
         r450: ? <- ArithK(Add, r43, 176)
         r451: ? <- LoadMem { addr: r450, size: 8 }
         r454: ? <- ArithK(Add, r43, 208)
         r455: ? <- LoadMem { addr: r454, size: 4 }
         r460: ? <- ArithK(Add, r43, 192)
         r461: ? <- LoadMem { addr: r460, size: 8 }
         r464: ? <- ArithK(Add, r43, 200)
         r465: ? <- LoadMem { addr: r464, size: 8 }
         r483: ? <- CArg { value: r465, next_arg: None }
         r484: ? <- CArg { value: r451, next_arg: Some(r483) }
         r485: ? <- CArg { value: r455, next_arg: Some(r484) }
         r486: ? <- CArg { value: r461, next_arg: Some(r485) }
         r487: ? <- CArg { value: r43, next_arg: Some(r486) }
         r488: redisContextConnectBindTcp <TypeID(297640v1)> <- Const { value: 5845184, size: 8 }
         r489: ? <- Call { callee: r488, first_arg: Some(r487) }
.B11:    ;; preds:B10,B15,B16  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(12)) }.
         r350: ? <- ArithK(Add, r43, 184)
         r351: ? <- LoadMem { addr: r350, size: 8 }
         r355: ? <- IsZero(r351)
         r360: ? <- SetJumpCondition(r355)
         r592: ? <- Upsilon { value: r48, phi_ref: r588 }
.B12:    ;; preds:B11  → Conditional { pos: Block(BlockID(14)), neg: Block(BlockID(13)) }.
         r363: ? <- ArithK(Add, r43, 144)
         r364: ? <- LoadMem { addr: r363, size: 1 }
         r366: ? <- ArithK(BitAnd, r364, 1)
         r368: ? <- IsZero(r366)
         r373: ? <- SetJumpCondition(r368)
         r594: ? <- Upsilon { value: r48, phi_ref: r588 }
.B13:    ;; preds:B12  → Conditional { pos: Block(BlockID(17)), neg: Block(BlockID(14)) }.
         r376: ? <- ArithK(Add, r43, 140)
         r377: ? <- LoadMem { addr: r376, size: 4 }
         r379: ? <- ArithK(Add, r377, 1)
         r383: ? <- IsZero(r379)
         r386: ? <- Not(r383)
         r387: ? <- SetJumpCondition(r386)
         r596: ? <- Upsilon { value: r48, phi_ref: r588 }
.B17:    ;; preds:B13  → Always(Return).
         r516: ? <- CArg { value: r43, next_arg: None }
         r517: redisContextSetTimeout <TypeID(297633v1)> <- Const { value: 5844800, size: 8 }
         r518: ? <- Call { callee: r517, first_arg: Some(r516) }
         r549: ? <- Part { src: r48, offset: 0, size: 4 }
         r550: ? <- SetReturnValue(r549)
.B18:    ;; preds:B6,B7  → Always(Block(BlockID(14))).
         r553: ? <- ArithK(Add, r12, 6951854)
         r555: ? <- Const { value: 5, size: 4 }
         r559: ? <- Const { value: 4294967295, size: 4 }
         r560: ? <- Part { src: r48, offset: 4, size: 4 }
         r561: ? <- Concat { lo: r559, hi: r560 }
         r572: ? <- CArg { value: r553, next_arg: None }
         r573: ? <- CArg { value: r555, next_arg: Some(r572) }
         r574: ? <- CArg { value: r43, next_arg: Some(r573) }
         r575: __redisSetError <TypeID(298077v1)> <- Const { value: 5852656, size: 8 }
         r576: ? <- Call { callee: r575, first_arg: Some(r574) }
         r590: ? <- Upsilon { value: r561, phi_ref: r588 }
.B14:    ;; preds:B11,B12,B13,B18  → Always(Return).
         r588: ? <- Phi
         r409: ? <- Part { src: r588, offset: 0, size: 4 }
         r410: ? <- SetReturnValue(r409)



T0: {
  [pre:RSP - 8]:* := pre:RBP;
  let r48: Bytes(8) = pre:arg0 + 12;
  [pre:RSP - 16]:* := pre:RBX;
  [pre:arg0 + 8]:* := 0;
  strlen(r48);
  let r88: Bytes(8) = pre:RSI[8 .. 4] ++ (pre:RSI[4 .. 0] ^ pre:RSI[4 .. 0]);
  __builtin_memset();
  let r109: Bytes(8) = [pre:arg0 + 256]:8;
  ;
  if IsZero (r109) {
    goto T3
  }
  let r122: Bytes(8) = [pre:arg0]:8;
  let r126: Bytes(8) = [r122 + 8]:8;
  ;
  r587 := [pre:arg0]:8;
  if IsZero (r126) {
    goto T4
  }
  r126(r109,
       r88,
       r126,
       pre:RCX);
  [pre:arg0 + 256]:* := 0;
  goto T3
  T3: {
    let r158: Bytes(8) = [pre:arg0]:8;
    ;
    r587 := [pre:arg0]:8;
    if IsZero (r158) {
      goto T6
    }
    goto T4
  }
  
  T4: {
    let mut r587: Bytes(8);
    let r171: Bytes(8) = [r587]:8;
    ;
    if IsZero (r171) {
      goto T6
    }
    r171(pre:arg0,
         r88,
         strlen(r48),
         pre:RCX);
    goto T6
  }
  
  T6: {
    hi_sdsfree([pre:arg0 + 152]:8);
    redisReaderFree([pre:arg0 + 160]:8);
    hi_sdsempty();
    [pre:arg0 + 152]:* := hi_sdsempty();
    let r252: Bytes(8) = redisReaderCreate();
    [pre:arg0 + 160]:* := r252;
    ;
    if IsZero ([pre:arg0 + 152]:8) {
      goto T18
    }
    ;
    if IsZero (r252) {
      goto T18
    }
    let r290: Bytes(4) = [pre:arg0 + 168]:4;
    ;
    if IsZero (r290) {
      redisContextConnectBindTcp(pre:arg0,
                                 [pre:arg0 + 192]:8,
                                 [pre:arg0 + 208]:4,
                                 [pre:arg0 + 176]:8,
                                 [pre:arg0 + 200]:8);
      goto T11
    }
    ;
    if IsZero (r290 - 1) {
      redisContextConnectUnix(pre:arg0,
                              [pre:arg0 + 216]:8,
                              [pre:arg0 + 176]:8);
      goto T11
    }
    __redisSetError(pre:arg0,
                    2,
                    (pre:RIP + 7007800));
    goto T11
    T11: {
      ;
      r588 := pre:arg0 + 12;
      if IsZero ([pre:arg0 + 184]:8) {
        goto T14
      }
      ;
      r588 := pre:arg0 + 12;
      if IsZero ([pre:arg0 + 144]:1 & 1) {
        goto T14
      }
      ;
      r588 := pre:arg0 + 12;
      if ! IsZero ([pre:arg0 + 140]:4 + 1) {
        redisContextSetTimeout(pre:arg0);
        ;
        return r48[4 .. 0]
      }
      goto T14
    }
    
    T14: {
      let mut r588: Bytes(8);
      ;
      return r588[4 .. 0]
    }
    
    T18: {
      __redisSetError(pre:arg0,
                      5,
                      (pre:RIP + 6951854));
      r588 := r48[8 .. 4] ++ 4294967295;
      goto T14
    }
  
  }

}
