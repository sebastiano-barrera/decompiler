---
source: decompiler/tests/test_tool.rs
expression: out
---
func036 0x4011aa+21 (file 0x11aa)
          4011aa: 48 89 f8                mov rax,rdi
          4011ad: 0f 28 44 24 08          movaps xmm0,[rsp+8]
          4011b2: 0f 28 4c 24 18          movaps xmm1,[rsp+18h]
          4011b7: 0f 11 4f 10             movups [rdi+10h],xmm1
          4011bb: 0f 11 07                movups [rdi],xmm0
          4011be: c3                      ret

function type: "func036" func (arg0 small <TypeID(785v1)>,
                               arg1 big <TypeID(795v1)>) big <TypeID(795v1)>
2 warnings:
  #   0: while applying the calling convention for parameters
           <- type has no alignment?
  #   1: decoding return value
           <- type has no alignment?


mil program = 
program  64 instrs
    0 r12: TypeID(2v1) <- Ancestral(AncestralName("stack_bottom"))
    1 r2: TypeID(2v1) <- Ancestral(AncestralName("CF"))
    2 r3: TypeID(2v1) <- Ancestral(AncestralName("PF"))
    3 r4: TypeID(2v1) <- Ancestral(AncestralName("AF"))
    4 r5: TypeID(2v1) <- Ancestral(AncestralName("ZF"))
    5 r6: TypeID(2v1) <- Ancestral(AncestralName("SF"))
    6 r7: TypeID(2v1) <- Ancestral(AncestralName("TF"))
    7 r8: TypeID(2v1) <- Ancestral(AncestralName("IF"))
    8 r9: TypeID(2v1) <- Ancestral(AncestralName("DF"))
    9 r10: TypeID(2v1) <- Ancestral(AncestralName("OF"))
   10 r11: TypeID(2v1) <- Ancestral(AncestralName("RBP"))
   11 r12: TypeID(2v1) <- Ancestral(AncestralName("RSP"))
   12 r13: TypeID(2v1) <- Ancestral(AncestralName("RIP"))
   13 r14: TypeID(2v1) <- Ancestral(AncestralName("RDI"))
   14 r15: TypeID(2v1) <- Ancestral(AncestralName("RSI"))
   15 r16: TypeID(2v1) <- Ancestral(AncestralName("RAX"))
   16 r17: TypeID(2v1) <- Ancestral(AncestralName("RBX"))
   17 r18: TypeID(2v1) <- Ancestral(AncestralName("RCX"))
   18 r19: TypeID(2v1) <- Ancestral(AncestralName("RDX"))
   19 r20: TypeID(2v1) <- Ancestral(AncestralName("R8"))
   20 r21: TypeID(2v1) <- Ancestral(AncestralName("R9"))
   21 r22: TypeID(2v1) <- Ancestral(AncestralName("R10"))
   22 r23: TypeID(2v1) <- Ancestral(AncestralName("R11"))
   23 r24: TypeID(2v1) <- Ancestral(AncestralName("R12"))
   24 r25: TypeID(2v1) <- Ancestral(AncestralName("R13"))
   25 r26: TypeID(2v1) <- Ancestral(AncestralName("R14"))
   26 r27: TypeID(2v1) <- Ancestral(AncestralName("R15"))
   27 r28: TypeID(2v1) <- Ancestral(AncestralName("ZMM0"))
   28 r29: TypeID(2v1) <- Ancestral(AncestralName("ZMM1"))
   29 r30: TypeID(2v1) <- Ancestral(AncestralName("ZMM2"))
   30 r31: TypeID(2v1) <- Ancestral(AncestralName("ZMM3"))
   31 r32: TypeID(2v1) <- Ancestral(AncestralName("ZMM4"))
   32 r33: TypeID(2v1) <- Ancestral(AncestralName("ZMM5"))
   33 r34: TypeID(2v1) <- Ancestral(AncestralName("ZMM6"))
   34 r35: TypeID(2v1) <- Ancestral(AncestralName("ZMM7"))
   35 r36: TypeID(2v1) <- Ancestral(AncestralName("ZMM8"))
   36 r37: TypeID(2v1) <- Ancestral(AncestralName("ZMM9"))
   37 r38: TypeID(2v1) <- Ancestral(AncestralName("ZMM10"))
   38 r39: TypeID(2v1) <- Ancestral(AncestralName("ZMM11"))
   39 r40: TypeID(2v1) <- Ancestral(AncestralName("ZMM12"))
   40 r41: TypeID(2v1) <- Ancestral(AncestralName("ZMM13"))
   41 r42: TypeID(2v1) <- Ancestral(AncestralName("ZMM14"))
   42 r43: TypeID(2v1) <- Ancestral(AncestralName("ZMM15"))
0x4011aa:
   43 r16: TypeID(2v1) <- Get(r14)
0x4011ad:
   44 r46: TypeID(2v1) <- Const { value: 8, size: 8 }
   45 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   46 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 16 }
   47 r47: TypeID(2v1) <- Part { src: r28, offset: 16, size: 48 }
   48 r28: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x4011b2:
   49 r46: TypeID(2v1) <- Const { value: 24, size: 8 }
   50 r46: TypeID(2v1) <- Arith(Add, r46, r12)
   51 r45: TypeID(2v1) <- LoadMem { addr: r46, size: 16 }
   52 r47: TypeID(2v1) <- Part { src: r29, offset: 16, size: 48 }
   53 r29: TypeID(2v1) <- Concat { lo: r45, hi: r47 }
0x4011b7:
   54 r46: TypeID(2v1) <- Part { src: r29, offset: 0, size: 16 }
   55 r47: TypeID(2v1) <- Const { value: 16, size: 8 }
   56 r47: TypeID(2v1) <- Arith(Add, r47, r14)
   57 r47: TypeID(2v1) <- StoreMem { addr: r47, value: r46 }
0x4011bb:
   58 r46: TypeID(2v1) <- Part { src: r28, offset: 0, size: 16 }
   59 r47: TypeID(2v1) <- Const { value: 0, size: 8 }
   60 r47: TypeID(2v1) <- Arith(Add, r47, r14)
   61 r47: TypeID(2v1) <- StoreMem { addr: r47, value: r46 }
0x4011be:
   62 r46: TypeID(2v1) <- SetReturnValue(r16)
   63 r46: TypeID(2v1) <- Control(Ret)


ssa pre-xform:
ssa program  64 instrs
.B0:    ;;  → Always(Return).
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r13: ? <- Ancestral(AncestralName("RDI"))
         r27: ? <- Ancestral(AncestralName("ZMM0"))
         r28: ? <- Ancestral(AncestralName("ZMM1"))
         r44: ? <- Const { value: 8, size: 8 }
         r45: ? <- Arith(Add, r44, r11)
         r46: ? <- LoadMem { addr: r45, size: 16 }
         r47: ? <- Part { src: r27, offset: 16, size: 48 }
         r48: ? <- Concat { lo: r46, hi: r47 }
         r49: ? <- Const { value: 24, size: 8 }
         r50: ? <- Arith(Add, r49, r11)
         r51: ? <- LoadMem { addr: r50, size: 16 }
         r52: ? <- Part { src: r28, offset: 16, size: 48 }
         r53: ? <- Concat { lo: r51, hi: r52 }
         r54: ? <- Part { src: r53, offset: 0, size: 16 }
         r55: ? <- Const { value: 16, size: 8 }
         r56: ? <- Arith(Add, r55, r13)
         r57: ? <- StoreMem { addr: r56, value: r54 }
         r58: ? <- Part { src: r48, offset: 0, size: 16 }
         r59: ? <- Const { value: 0, size: 8 }
         r60: ? <- Arith(Add, r59, r13)
         r61: ? <- StoreMem { addr: r60, value: r58 }
         r62: ? <- SetReturnValue(r13)


cfg:
  entry: BlockID(0)
  BlockID(0) -> Always(Return) [r11, r13, r27, r28, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62]
  domtree:
    BlockID(0)

ssa post-xform:
ssa program  64 instrs
.B0:    ;;  → Always(Return).
  (  2)  r11: ? <- Ancestral(AncestralName("RSP"))
  (  3)  r13: ? <- Ancestral(AncestralName("RDI"))
         r45: ? <- ArithK(Add, r11, 8)
         r46: ? <- LoadMem { addr: r45, size: 16 }
         r50: ? <- ArithK(Add, r11, 24)
         r51: ? <- LoadMem { addr: r50, size: 16 }
         r56: ? <- ArithK(Add, r13, 16)
         r57: ? <- StoreMem { addr: r56, value: r51 }
         r61: ? <- StoreMem { addr: r13, value: r46 }
         r62: ? <- SetReturnValue(r13)



T0: {
  [pre:RDI + 16]:* := [pre:RSP + 24]:16;
  [pre:RDI]:* := [pre:RSP + 8]:16;
  ;
  return pre:RDI
}
